/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.test.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0
    extends TypeSwitchInTypeSwitchParentTypeChild0Infant0 implements Message {

  // Accessors for discriminator values.
  public Short getInfantNumber() {
    return (short) 0x98;
  }

  // Properties.
  protected final short infantsChild0SomeField00;

  public TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0(
      short parentFieldHurz,
      short childFieldwolf,
      short infantSomeField00,
      short infantsChild0SomeField00) {
    super(parentFieldHurz, childFieldwolf, infantSomeField00);
    this.infantsChild0SomeField00 = infantsChild0SomeField00;
  }

  public short getInfantsChild0SomeField00() {
    return infantsChild0SomeField00;
  }

  @Override
  protected void serializeTypeSwitchInTypeSwitchParentTypeChild0Infant0Child(
      WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0");

    // Simple Field (infantsChild0SomeField00)
    writeSimpleField(
        "infantsChild0SomeField00", infantsChild0SomeField00, writeUnsignedShort(writeBuffer, 8));

    writeBuffer.popContext("TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0 _value = this;

    // Simple field (infantsChild0SomeField00)
    lengthInBits += 8;

    return lengthInBits;
  }

  public static TypeSwitchInTypeSwitchParentTypeChild0Infant0Builder
      staticParseTypeSwitchInTypeSwitchParentTypeChild0Infant0Builder(ReadBuffer readBuffer)
          throws ParseException {
    readBuffer.pullContext("TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    short infantsChild0SomeField00 =
        readSimpleField("infantsChild0SomeField00", readUnsignedShort(readBuffer, 8));

    readBuffer.closeContext("TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0");
    // Create the instance
    return new TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0BuilderImpl(
        infantsChild0SomeField00);
  }

  public static class TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0BuilderImpl
      implements TypeSwitchInTypeSwitchParentTypeChild0Infant0
          .TypeSwitchInTypeSwitchParentTypeChild0Infant0Builder {
    private final short infantsChild0SomeField00;

    public TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0BuilderImpl(
        short infantsChild0SomeField00) {

      this.infantsChild0SomeField00 = infantsChild0SomeField00;
    }

    public TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0 build(
        short parentFieldHurz, short childFieldwolf, short infantSomeField00) {
      TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0
          typeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0 =
              new TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0(
                  parentFieldHurz, childFieldwolf, infantSomeField00, infantsChild0SomeField00);
      return typeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0)) {
      return false;
    }
    TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0 that =
        (TypeSwitchInTypeSwitchParentTypeChild0Infant0InfantsChild0) o;
    return (getInfantsChild0SomeField00() == that.getInfantsChild0SomeField00())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getInfantsChild0SomeField00());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
