<#--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<#-- Prevent freemarker from escaping stuff -->
<#outputformat "undefined">
<#-- Declare the name and type of variables passed in to the template -->
<#-- @ftlvariable name="languageName" type="java.lang.String" -->
<#-- @ftlvariable name="protocolName" type="java.lang.String" -->
<#-- @ftlvariable name="outputFlavor" type="java.lang.String" -->
<#-- @ftlvariable name="helper" type="org.apache.plc4x.language.c.CLanguageTemplateHelper" -->
<#-- @ftlvariable name="tracer" type="org.apache.plc4x.plugins.codegenerator.protocol.freemarker.Tracer" -->
<#-- @ftlvariable name="type" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
<#if !type.isDiscriminatedChildTypeDefinition()>${helper.getSourceDirectory()?replace(".", "/")}/${helper.camelCaseToSnakeCase(type.name)}.c
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include <stdio.h>
#include <plc4c/spi/evaluation_helper.h>
#include "${helper.camelCaseToSnakeCase(type.name)}.h"

// Code generated by code-generation. DO NOT EDIT.

<#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
<#if type.parserArguments.isPresent()><#assign parserArguments=type.parserArguments.orElseThrow()></#if>
<#-- Helper function to get the discriminator for a given enum type constant -->
<#if type.isDiscriminatedParentTypeDefinition()>
// Array of discriminator values that match the enum type constants.
// (The order is identical to the enum constants so we can use the
// enum constant to directly access a given types discriminator values)
const ${helper.getCTypeName(type.name)}_discriminator ${helper.getCTypeName(type.name)}_discriminators[] = {
    <#if type.getDiscriminatorCaseToKeyValueMap()?has_content>
        <#list type.getDiscriminatorCaseToKeyValueMap() as name, typeTerms>
  {/* ${helper.getCTypeName(name)} */
<#if true>   </#if><@compress single_line=true>
               <#list typeTerms as key, term>
                   <#if !helper.isComplexTypeReference(helper.getDiscriminatorTypes()[key])>
                .${key} = <#if term??>${helper.toParseExpression(type, null, term, parserArguments)}<#else>-1</#if><#sep>,
                   <#else>
                .${key} = <#if term??>${helper.getLanguageTypeNameForTypeReference(helper.getDiscriminatorTypes()[key])}_${term.asLiteral().orElseThrow().asVariableLiteral().orElseThrow().name}<#else>-1</#if><#sep>,
                   </#if>
               </#list>}<#sep >,
            </@compress>

        </#list>
    </#if>

};

// Function returning the discriminator values for a given type constant.
${helper.getCTypeName(type.name)}_discriminator ${helper.getCTypeName(type.name)}_get_discriminator(${helper.getCTypeName(type.name)}_type type) {
  return ${helper.getCTypeName(type.name)}_discriminators[type];
}

// Create an empty NULL-struct
static const ${helper.getCTypeName(type.name)} ${helper.getCTypeName(type.name)}_null_const;

${helper.getCTypeName(type.name)} ${helper.getCTypeName(type.name)}_null() {
  return ${helper.getCTypeName(type.name)}_null_const;
}

</#if>
<#if helper.getAllConstFields()?has_content>

// Constant values.
    <#list helper.getAllConstFields() as constField, parentType>
static const ${helper.getLanguageTypeNameForField(constField)} ${helper.getCTypeName(parentType.name)?upper_case}_${helper.camelCaseToSnakeCase(constField.name)?upper_case}_const = ${helper.toParseExpression(type, constField, constField.referenceValue, parserArguments)};
${helper.getLanguageTypeNameForField(constField)} ${helper.getCTypeName(parentType.name)?upper_case}_${helper.camelCaseToSnakeCase(constField.name)?upper_case}() {
  return ${helper.getCTypeName(parentType.name)?upper_case}_${helper.camelCaseToSnakeCase(constField.name)?upper_case}_const;
}
    </#list>
</#if>

// Parse function.
plc4c_return_code ${helper.getCTypeName(type.name)}_parse(plc4c_spi_read_buffer* readBuffer, <#if parserArguments?has_content><#list parserArguments as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}<#if !helper.isSimpleTypeReference(parserArgument.type)>*</#if> ${parserArgument.name}<#sep>, </#list>, </#if>${helper.getCTypeName(type.name)}** _message) {
  uint16_t startPos = plc4c_spi_read_get_pos(readBuffer);
  plc4c_return_code _res = OK;

  // Allocate enough memory to contain this data structure.
  (*_message) = malloc(sizeof(${helper.getCTypeName(type.name)}));
  if(*_message == NULL) {
    return NO_MEMORY;
  }
<#macro fieldName baseType field>${helper.getFieldName(baseType, field)}</#macro>
<#macro fieldParser baseType field indentContent>
    <#-- @ftlvariable name="baseType" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
    <#-- @ftlvariable name="field" type="org.apache.plc4x.plugins.codegenerator.types.fields.Field" -->
    <#-- @ftlvariable name="indentContent" type="java.lang.Boolean" -->
    <#assign parserArguments=baseType.allParserArguments.orElseThrow()>
    <#switch field.typeName>
        <#case "array">
            <#assign arrayField = field.asArrayField().orElseThrow()>
            <#-- @ftlvariable name="field" type="org.apache.plc4x.plugins.codegenerator.types.fields.ArrayField" -->

<#if indentContent>  </#if>  // Array field (${arrayField.name})
            <#-- In all other cases do we have to work with a list, that is later converted to an array -->
<#if indentContent>  </#if>  plc4c_list* ${arrayField.name} = NULL;
<#if indentContent>  </#if>  plc4c_utils_list_create(&${arrayField.name});
<#if indentContent>  </#if>  if(${arrayField.name} == NULL) {
<#if indentContent>  </#if>    return NO_MEMORY;
<#if indentContent>  </#if>  }
<#if indentContent>  </#if>  {
            <#if field.isCountArrayField()>
<#if indentContent>  </#if>    // Count array
<#if indentContent>  </#if>    uint16_t itemCount = (uint16_t) ${helper.toParseExpression(baseType, arrayField, arrayField.loopExpression, parserArguments)};
<#if indentContent>  </#if>    for(int curItem = 0; curItem < itemCount; curItem++) {
<#if indentContent>  </#if>      <#if !helper.isSimpleTypeReference(arrayField.type)>bool lastItem = curItem == (itemCount - 1);</#if>
      <#-- Inizialize a local variable with the simple type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if helper.isSimpleTypeReference(arrayField.type)>
<#if indentContent>  </#if>      ${helper.getLanguageTypeNameForTypeReference(arrayField.type)}* _value = malloc(sizeof(${helper.getLanguageTypeNameForTypeReference(arrayField.type)}));
<#if indentContent>  </#if>      _res = ${helper.getReadBufferReadMethodCall(arrayField.type, "_value", field)};
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>      plc4c_utils_list_insert_head_value(${arrayField.name}, _value);
<#else>
      <#-- Inizialize a local variable with the complex type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if indentContent>  </#if>      ${helper.getCTypeName(arrayField.type.name)}* _value = NULL;
<#if indentContent>  </#if>      _res = ${helper.getCTypeName(arrayField.type.name)}_parse(readBuffer<#if arrayField.type.isComplexTypeReference() && arrayField.type.asComplexTypeReference().get().getParams().isPresent()>, <#list arrayField.type.asComplexTypeReference().get().getParams().get() as parserTerm>${helper.toParseExpression(baseType, arrayField, parserTerm, parserArguments)}<#sep>, </#sep></#list></#if>, (void*) &_value);
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>      plc4c_utils_list_insert_head_value(${arrayField.name}, _value);
</#if>
<#if indentContent>  </#if>    }
            <#-- For a length array, we read data till the read position of the buffer reaches a given position -->
            <#elseif arrayField.isLengthArrayField()>
<#if indentContent>  </#if>    // Length array
<#if indentContent>  </#if>    uint8_t _${arrayField.name}Length = ${helper.toParseExpression(baseType, arrayField, arrayField.loopExpression, parserArguments)};
<#if indentContent>  </#if>    uint8_t ${arrayField.name}EndPos = plc4c_spi_read_get_pos(readBuffer) + _${arrayField.name}Length;
<#if indentContent>  </#if>    while(plc4c_spi_read_get_pos(readBuffer) < ${arrayField.name}EndPos) {
                <#-- Inizialize a local variable with the simple type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if helper.isSimpleTypeReference(arrayField.type)>
<#if indentContent>  </#if>      ${helper.getLanguageTypeNameForTypeReference(arrayField.type)} _value = ${helper.getNullValueForTypeReference(arrayField.type)};
<#if indentContent>  </#if>      _res = ${helper.getReadBufferReadMethodCall(arrayField.type, "&_value", arrayField)};
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>      plc4c_utils_list_insert_head_value(${arrayField.name}, &_value);
<#else>
                <#-- Inizialize a local variable with the complex type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if indentContent>  </#if>      ${helper.getCTypeName(arrayField.type.name)}* _value = NULL;
<#if indentContent>  </#if>      _res = ${helper.getCTypeName(arrayField.type.name)}_parse(readBuffer<#if arrayField.type.isComplexTypeReference() && arrayField.type.asComplexTypeReference().get().getParams().isPresent()>, <#list arrayField.type.asComplexTypeReference().get().getParams().get() as parserTerm>${helper.toParseExpression(baseType, arrayField, parserTerm, parserArguments)}<#sep>, </#sep></#list></#if>, (void*) &_value);
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>      plc4c_utils_list_insert_head_value(${arrayField.name}, _value);
</#if>
                <#-- After parsing, update the current position, but only if it's needed -->
<#if indentContent>  </#if>    }
            <#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
            <#elseif arrayField.isTerminatedArrayField()>
<#if indentContent>  </#if>    // Terminated array
<#if indentContent>  </#if>    while(!((boolean) (${helper.toParseExpression(baseType, arrayField, arrayField.loopExpression, parserArguments)}))) {
            <#-- Inizialize a local variable with the simple type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if helper.isSimpleTypeReference(arrayField.type)>
<#if indentContent>  </#if>      ${helper.getLanguageTypeNameForTypeReference(arrayField.type)} _value = ${helper.getNullValueForTypeReference(arrayField.type)};
<#if indentContent>  </#if>      _res = ${helper.getReadBufferReadMethodCall(arrayField.type, "&_value", field)};
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>      plc4c_utils_list_insert_head_value(${arrayField.name}, &_value);
<#else>
                <#-- Inizialize a local variable with the complex type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if indentContent>  </#if>      ${helper.getCTypeName(arrayField.type.name)}* _value = NULL;
<#if indentContent>  </#if>      _res = ${helper.getCTypeName(arrayField.type.name)}_parse(readBuffer<#if arrayField.type.isComplexTypeReference() && arrayField.type.asComplexTypeReference().get().getParams().isPresent()>, <#list arrayField.type.asComplexTypeReference().get().getParams().get() as parserTerm>${helper.toParseExpression(baseType, arrayField, parserTerm, parserArguments)}<#sep>, </#sep></#list></#if>, (void*) &_value);
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>      plc4c_utils_list_insert_head_value(${arrayField.name}, _value);
</#if>
              <#-- After parsing, update the current position, but only if it's needed -->
<#if indentContent>  </#if>    }
            </#if>
<#if indentContent>  </#if>  }
<#if indentContent>  </#if>  (*_message)-><@fieldName baseType=baseType field=arrayField/> = ${arrayField.name};
            <#break>
        <#case "checksum">
            <#assign checksumField = field.asChecksumField().orElseThrow()>
            <#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

<#if indentContent>  </#if>  // Checksum Field (${checksumField.name})
<#if indentContent>  </#if>  {
<#if indentContent>  </#if>    // Create an array of all the bytes read in this message element so far.
<#if indentContent>  </#if>    unsigned char checksumRawData[] = plc4c_spi_read_get_bytes(readBuffer, startPos, plc4c_spi_read_get_pos(readBuffer));
<#if indentContent>  </#if>    ${helper.getLanguageTypeNameForField(field)} _checksumRef = ${helper.getNullValueForTypeReference(checksumField.type)};
<#if indentContent>  </#if>    _res = ${helper.getReadBufferReadMethodCall(checksumField.type, "&_checksumRef", field)};
<#if indentContent>  </#if>    if(_res != OK) {
<#if indentContent>  </#if>      return _res;
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>    ${helper.getLanguageTypeNameForField(field)} _checksum = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(baseType, checksumField, checksumField.checksumExpression, parserArguments)});
<#if indentContent>  </#if>    if(_checksum != _checksumRef) {
<#if indentContent>  </#if>      return PARSE_ERROR;
<#if indentContent>  </#if>      // throw new ParseException(String.format("Checksum verification failed. Expected %04X but got %04X",_checksumRef & 0xFFFF, _checksum & 0xFFFF));
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>  }
            <#break>
        <#case "const">
            <#assign constField = field.asConstField().orElseThrow()>
            <#assign simpleTypeReference = constField.type.asSimpleTypeReference().orElseThrow()>

<#if indentContent>  </#if>  // Const Field (${constField.name})
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${constField.name} = ${helper.getNullValueForTypeReference(constField.type)};
<#if indentContent>  </#if>  _res = ${helper.getReadBufferReadMethodCall(constField.type, "&" + constField.name, field)};
<#if indentContent>  </#if>  if(_res != OK) {
<#if indentContent>  </#if>    return _res;
<#if indentContent>  </#if>  }
<#if indentContent>  </#if>  if(${constField.name} != ${helper.getCTypeName(baseType.name)?upper_case}_${helper.camelCaseToSnakeCase(constField.name)?upper_case}()) {
<#if indentContent>  </#if>    return PARSE_ERROR;
<#if indentContent>  </#if>    // throw new ParseException("Expected constant value " + ${helper.getCTypeName(baseType.name)?upper_case}_${helper.camelCaseToSnakeCase(constField.name)?upper_case} + " but got " + ${constField.name});
<#if indentContent>  </#if>  }
            <#break>
        <#case "discriminator">
            <#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
        // Discriminator Field (${discriminatorField.name})
        <#if helper.isSimpleTypeReference(discriminatorField.type)>
            <#assign simpleTypeReference = discriminatorField.type>

<#if indentContent>  </#if>  // Discriminator Field (${discriminatorField.name}) (Used as input to a switch field)
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${discriminatorField.name} = ${helper.getNullValueForTypeReference(discriminatorField.type)};
<#if indentContent>  </#if>  _res = ${helper.getReadBufferReadMethodCall(discriminatorField.type, "&" + discriminatorField.name, field)};
        <#elseif helper.isEnumField(field)>
            <#assign simpleTypeReference = discriminatorField.type>
<#if indentContent>  </#if>  enum ${helper.getLanguageTypeNameForTypeReference(discriminatorField.type)} ${discriminatorField.name};
<#if indentContent>  </#if>  _res = ${helper.getReadBufferReadMethodCall(helper.getEnumBaseTypeReference(discriminatorField.type), "&${discriminatorField.name}", field)};
        </#if>
<#if indentContent>  </#if>  if(_res != OK) {
<#if indentContent>  </#if>    return _res;
<#if indentContent>  </#if>  }
            <#break>
        <#case "enum">
            <#assign enumField = field.asEnumField().orElseThrow()>

<#if indentContent>  </#if>  // Enum field (${enumField.name})
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${enumField.name} = ${helper.getNullValueForTypeReference(enumField.type)};
<#if indentContent>  </#if>  {
<#if indentContent>  </#if>    ${helper.getLanguageTypeNameForTypeReference(helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName))} _constantValue = ${helper.getNullValueForTypeReference(helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName))};
<#if indentContent>  </#if>    _res = ${helper.getReadBufferReadMethodCall(helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName), "&_constantValue", field)};
<#if indentContent>  </#if>    if(_res != OK) {
<#if indentContent>  </#if>      return _res;
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>    ${enumField.name} = ${helper.getLanguageTypeNameForTypeReference(enumField.type)}_get_first_enum_for_field_${helper.camelCaseToSnakeCase(enumField.fieldName)}(_constantValue);
<#if indentContent>  </#if>  }
<#if indentContent>  </#if>  (*_message)-><@fieldName baseType=baseType field=enumField/> = ${enumField.name};
            <#break>
        <#case "implicit">
            <#assign implicitField = field.asImplicitField().orElseThrow()>
            <#assign simpleTypeReference = implicitField.type>

<#if indentContent>  </#if>  // Implicit Field (${implicitField.name}) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${implicitField.name} = ${helper.getNullValueForTypeReference(implicitField.type)};
<#if indentContent>  </#if>  _res = ${helper.getReadBufferReadMethodCall(implicitField.type, "&" + implicitField.name, field)};
<#if indentContent>  </#if>  if(_res != OK) {
<#if indentContent>  </#if>    return _res;
<#if indentContent>  </#if>  }
            <#break>
        <#case "manualArray">
            <#assign manualArrayField = field.asManualArrayField().orElseThrow()>

  <#-- TODO: Implement -->
            <#break>
        <#case "manual">
            <#assign manualField = field.asManualField().orElseThrow()>

<#if indentContent>  </#if>  // Manual Field (${manualField.name})<#-- check if complex -->
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${manualField.name} = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(baseType, manualField, manualField.parseExpression, parserArguments)});
<#if indentContent>  </#if>  (*_message)-><@fieldName baseType=baseType field=manualField/> = ${manualField.name};
        <#break>
        <#case "optional">
            <#assign optionalField = field.asOptionalField().orElseThrow()>

<#if indentContent>  </#if>  // Optional Field (${optionalField.name}) (Can be skipped, if a given expression evaluates to false)
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)}* ${optionalField.name} = NULL;
            <#if optionalField.conditionExpression.present>
<#if indentContent>  </#if>  if(${helper.toParseExpression(baseType, field, optionalField.conditionExpression.get(), parserArguments)}) {
            </#if>
        <#if helper.isSimpleTypeReference(optionalField.type)>
<#if indentContent>  </#if>    ${optionalField.name} = malloc(sizeof(${helper.getLanguageTypeNameForField(field)}));
<#if indentContent>  </#if>    if(${optionalField.name} == NULL) {
<#if indentContent>  </#if>      return NO_MEMORY;
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>    *${optionalField.name} = ${helper.getNullValueForTypeReference(optionalField.type)};
<#if indentContent>  </#if>    _res = ${helper.getReadBufferReadMethodCall(optionalField.type, optionalField.name, field)};
        <#else>
<#if indentContent>  </#if>    _res = ${helper.getCTypeName(optionalField.type.name)}_parse(readBuffer<#if optionalField.type.isComplexTypeReference() && optionalField.type.asComplexTypeReference().get().getParams().isPresent()>, <#list optionalField.type.asComplexTypeReference().get().getParams().get() as parserTerm>${helper.toParseExpression(baseType, optionalField, parserTerm, parserArguments)}<#sep>, </#sep></#list></#if>, &${optionalField.name});
        </#if>
<#if indentContent>  </#if>    if(_res != OK) {
<#if indentContent>  </#if>      return _res;
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>    (*_message)-><@fieldName baseType=baseType field=optionalField/> = ${optionalField.name};
            <#if optionalField.conditionExpression.present>
<#if indentContent>  </#if>  } else {
<#if indentContent>  </#if>    (*_message)-><@fieldName baseType=baseType field=optionalField/> = NULL;
<#if indentContent>  </#if>  }
            </#if>
            <#break>
        <#case "padding">
            <#assign paddingField = field.asPaddingField().orElseThrow()>
            <#assign simpleTypeReference = paddingField.type>

<#if indentContent>  </#if>  // Padding Field (padding)
<#if indentContent>  </#if>  {
<#if indentContent>  </#if>    int _timesPadding = (int) ((plc4c_spi_read_has_more(readBuffer, ${helper.getNumBits(paddingField.type)})) && (${helper.toParseExpression(baseType, paddingField, paddingField.paddingCondition, parserArguments)}));
<#if indentContent>  </#if>    while (_timesPadding-- > 0) {
<#if indentContent>  </#if>      // Just read the padding data and ignore it
<#if indentContent>  </#if>      ${helper.getLanguageTypeNameForField(field)} _paddingValue = ${helper.getNullValueForTypeReference(paddingField.type)};
<#if indentContent>  </#if>      _res = ${helper.getReadBufferReadMethodCall(paddingField.type, "&_paddingValue", field)};
<#if indentContent>  </#if>      if(_res != OK) {
<#if indentContent>  </#if>        return _res;
<#if indentContent>  </#if>      }
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>  }
            <#break>
        <#case "reserved">
            <#assign reservedField = field.asReservedField().orElseThrow()>
            <#assign simpleTypeReference = reservedField.type>

<#if indentContent>  </#if>  // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
<#if indentContent>  </#if>  {
<#if indentContent>  </#if>    ${helper.getLanguageTypeNameForField(field)} _reserved = ${helper.getNullValueForTypeReference(reservedField.type)};
<#if indentContent>  </#if>    _res = ${helper.getReadBufferReadMethodCall(reservedField.type, "&_reserved", field)};
<#if indentContent>  </#if>    if(_res != OK) {
<#if indentContent>  </#if>      return _res;
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>    if(_reserved != ${reservedField.referenceValue}) {
<#if indentContent>  </#if>      printf("Expected constant value '%d' but got '%d' for reserved field.", ${reservedField.referenceValue}, _reserved);
<#if indentContent>  </#if>    }
<#if indentContent>  </#if>  }
            <#break>
        <#case "simple">
            <#assign simpleField = field.asSimpleField().orElseThrow()>

<#if indentContent>  </#if>  // Simple Field (${simpleField.name})
            <#-- Inizialize a local variable with the simple type (Intentionally keeping the java-style names so they can be used in expressions) -->
            <#if helper.isSimpleTypeReference(simpleField.type)>
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${simpleField.name} = ${helper.getNullValueForTypeReference(simpleField.type)};
<#if indentContent>  </#if>  _res = ${helper.getReadBufferReadMethodCall(simpleField.type, "&" + simpleField.name, field)};
            <#else>
            <#-- Inizialize a local variable with the complex type (Intentionally keeping the java-style names so they can be used in expressions) -->
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)}* ${simpleField.name};
<#if indentContent>  </#if>  _res = ${helper.getCTypeName(simpleField.type.name)}_parse(readBuffer<#if simpleField.type.isComplexTypeReference() && simpleField.type.asComplexTypeReference().get().getParams().isPresent()>, <#list simpleField.type.asComplexTypeReference().get().getParams().get() as parserTerm>${helper.toParseExpression(baseType, simpleField, parserTerm, parserArguments)}<#sep>, </#sep></#list></#if>, (void*) &${simpleField.name});
            </#if>
<#if indentContent>  </#if>  if(_res != OK) {
<#if indentContent>  </#if>    return _res;
<#if indentContent>  </#if>  }
<#if indentContent>  </#if>  (*_message)-><@fieldName baseType=baseType field=simpleField/> = <#if helper.isEnumTypeReference(simpleField.type)>*</#if>${simpleField.name};
            <#break>
        <#case "switch">
            <#assign switchField = field.asSwitchField().orElseThrow()>

<#if indentContent>  </#if>  // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        <#list switchField.cases as case>
            <#if !helper.isComplexTypeReference(helper.getDiscriminatorTypes()[field.discriminatorExpressions[0].name])>
<#if indentContent>  </#if>  <#if case.discriminatorValueTerms?has_content>if(<#list case.discriminatorValueTerms as discriminatorValueTerm><#if case.discriminatorValueTerms?size &gt; 1>(</#if>${helper.toVariableParseExpression(baseType, switchField, switchField.discriminatorExpressions[discriminatorValueTerm?index].asLiteral().orElseThrow().asVariableLiteral().orElseThrow(), parserArguments)} == ${helper.toParseExpression(type, null, discriminatorValueTerm, parserArguments)}<#if case.discriminatorValueTerms?size &gt; 1>)</#if><#sep> && </#sep></#list>) </#if>{ /* ${case.name} */
            <#else>
<#if indentContent>  </#if>  <#if case.discriminatorValueTerms?has_content>if(<#list case.discriminatorValueTerms as discriminatorValueTerm><#if case.discriminatorValueTerms?size &gt; 1>(</#if>${helper.toVariableParseExpression(baseType, switchField, switchField.discriminatorExpressions[discriminatorValueTerm?index].asLiteral().orElseThrow().asVariableLiteral().orElseThrow(), parserArguments)} == ${helper.getLanguageTypeNameForTypeReference(helper.getDiscriminatorTypes()[switchField.discriminatorExpressions[discriminatorValueTerm?index].name])}_${discriminatorValueTerm.asLiteral().orElseThrow().asVariableLiteral().orElseThrow().name}<#if case.discriminatorValueTerms?size &gt; 1>)</#if><#sep> && </#sep></#list>) </#if>{ /* ${case.name} */
           </#if>
<#if baseType.isDiscriminatedChildTypeDefinition()>
    <#assign discriminatedChildType = type.asDiscriminatedComplexTypeDefinition().orElseThrow()>
    // Accessors for discriminator values.
    <#list discriminatedChildType.getDiscriminatorMap() as discriminatorName, dicriminatorValue>
        ${discriminatorName}
    </#list>
</#if>
<#if indentContent>  </#if>    (*_message)->_type = ${helper.getCTypeName(type.name)}_type_${helper.getCTypeName(case.name)};
                <#list case.fields as caseField>
<#if indentContent>  </#if>                    <@fieldParser baseType=case field=caseField indentContent=true/>
                    <#sep >

                </#list>
<#if indentContent>  </#if>  }<#sep> else </#sep>
            </#list>
            <#break>
        <#case "virtual">
            <#assign virtualField = field.asVirtualField().orElseThrow()>

<#if indentContent>  </#if>  // Virtual field (Just declare a local variable so we can access it in the parser)
<#if indentContent>  </#if>  ${helper.getLanguageTypeNameForField(field)} ${virtualField.name} = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(baseType, virtualField, virtualField.valueExpression, parserArguments)});
            <#break>
    </#switch>
</#macro>
<#list type.fields as field>
<@fieldParser baseType=type field=field indentContent=false/>
</#list>

  return OK;
}

plc4c_return_code ${helper.getCTypeName(type.name)}_serialize(plc4c_spi_write_buffer* writeBuffer, ${helper.getCTypeName(type.name)}* _message<#--if helper.getSerializerArguments(parserArguments)?has_content>, <#list helper.getSerializerArguments(parserArguments) as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type)} ${parserArgument.name}<#sep>, </#sep></#list></#if-->) {
  plc4c_return_code _res = OK;
<#macro fieldSerializer baseType field indentContent>
    <#-- @ftlvariable name="baseType" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
    <#-- @ftlvariable name="field" type="org.apache.plc4x.plugins.codegenerator.types.fields.Field" -->
    <#-- @ftlvariable name="indentContent" type="boolean" -->
    <#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
    <#if baseType.parserArguments.isPresent()><#assign parserArguments=baseType.parserArguments.orElseThrow()></#if>
    <#switch field.typeName>
        <#case "array">
            <#assign arrayField = field>

<#if indentContent>    </#if>  // Array field (${arrayField.name})
<#if indentContent>    </#if>  {
<#if indentContent>    </#if>    uint8_t itemCount = plc4c_utils_list_size(_message-><@fieldName baseType=baseType field=arrayField/>);
<#if indentContent>    </#if>    for(int curItem = 0; curItem < itemCount; curItem++) {
            <#-- When parsing simple types, there is nothing that could require the "lastItem" -->
<#if !helper.isSimpleTypeReference(arrayField.type)><#if indentContent>    </#if>      bool lastItem = curItem == (itemCount - 1);</#if>
<#if indentContent>    </#if>      ${helper.getLanguageTypeNameForTypeReference(arrayField.type)}* _value = (${helper.getLanguageTypeNameForTypeReference(arrayField.type)}*) plc4c_utils_list_get_value(_message-><@fieldName baseType=baseType field=arrayField/>, curItem);
            <#if helper.isSimpleTypeReference(arrayField.type)>
<#if indentContent>    </#if>      ${helper.getWriteBufferWriteMethodCall(arrayField.type, "*_value", field)};
            <#else>
<#if indentContent>    </#if>      _res = ${helper.getCTypeName(arrayField.type.name)}_serialize(writeBuffer, (void*) _value<#--#if helper.getSerializerTerms(field.params.orElse(null))?has_content>, <#list helper.getSerializerTerms(field.params.orElse(null)) as serializerTerm>${helper.toSerializationExpression(baseType, field, serializerTerm, parserArguments)}<#sep>, </#sep></#list></#if-->);
<#if indentContent>    </#if>      if(_res != OK) {
<#if indentContent>    </#if>        return _res;
<#if indentContent>    </#if>      }
            </#if>
<#if indentContent>    </#if>    }
<#if indentContent>    </#if>  }
            <#break>
        <#case "checksum">
            <#assign checksumField = field>
            <#assign simpleTypeReference = checksumField.type>

<#if indentContent>    </#if>  // Checksum Field (${checksumField.name})
<#if indentContent>    </#if>  {
<#if indentContent>    </#if>    // Create an array of all the bytes read in this message element so far.
<#if indentContent>    </#if>    unsigned char checksumRawData[] = plc4c_spi_read_get_bytes(writeBuffer, startPos, plc4c_spi_read_get_pos(writeBuffer));
<#if indentContent>    </#if>    ${helper.getLanguageTypeNameForField(field)} _checksumRef = ${helper.getReadBufferReadMethodCall(checksumField.type, field)};
<#if indentContent>    </#if>    ${helper.getLanguageTypeNameForField(field)} _checksum = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(baseType, checksumField, checksumField.checksumExpression, parserArguments)});
<#if indentContent>    </#if>    if(_checksum != _checksumRef) {
<#if indentContent>    </#if>      return PARSE_ERROR;
<#if indentContent>    </#if>      // throw new ParseException(String.format("Checksum verification failed. Expected %04X but got %04X",_checksumRef & 0xFFFF, _checksum & 0xFFFF));
<#if indentContent>    </#if>    }
<#if indentContent>    </#if>  }
            <#break>
        <#case "const">
            <#assign constField = field>
            <#assign simpleTypeReference = constField.type>

<#if indentContent>    </#if>  // Const Field (${constField.name})
<#if indentContent>    </#if>  ${helper.getWriteBufferWriteMethodCall(constField.type, helper.getCTypeName(baseType.name)?upper_case + "_" + helper.camelCaseToSnakeCase(constField.name)?upper_case + "()", field)};
            <#break>
        <#case "discriminator">
            <#assign discriminatorField = field>
        <#if helper.isEnumField(field)>

<#if indentContent>    </#if>  // Enumerated Discriminator Field (${discriminatorField.name})
<#if indentContent>    </#if>  ${helper.getWriteBufferWriteMethodCall(helper.getEnumBaseTypeReference(discriminatorField.type), helper.getCTypeName(baseType.name) + "_get_discriminator(_message->_type)." + discriminatorField.name, field)};
        <#else>
            <#assign simpleTypeReference = discriminatorField.type>

<#if indentContent>    </#if>  // Discriminator Field (${discriminatorField.name})
<#if indentContent>    </#if>  ${helper.getWriteBufferWriteMethodCall(discriminatorField.type, helper.getCTypeName(baseType.name) + "_get_discriminator(_message->_type)." + discriminatorField.name, field)};
        </#if>
            <#break>
        <#case "enum">
            <#assign enumField = field.asEnumField().orElseThrow()>

<#if indentContent>    </#if>  // Enum field (${enumField.name})
<#if indentContent>    </#if>  _res = ${helper.getWriteBufferWriteMethodCall(helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName), helper.getLanguageTypeNameForTypeReference(enumField.type) + "_get_" + helper.camelCaseToSnakeCase(enumField.fieldName) + "(_message->" + helper.getFieldName(baseType, enumField) + ")", field)};
<#if indentContent>    </#if>  if(_res != OK) {
<#if indentContent>    </#if>    return _res;
<#if indentContent>    </#if>  }
            <#break>
        <#case "implicit">
            <#assign implicitField = field.asImplicitField().orElseThrow()>
            <#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

<#if indentContent>    </#if>  // Implicit Field (${implicitField.name}) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
<#if indentContent>    </#if>  _res = ${helper.getWriteBufferWriteMethodCall(simpleTypeReference, helper.toSerializationExpression(baseType, implicitField, implicitField.serializeExpression, parserArguments), field)};
<#if indentContent>    </#if>  if(_res != OK) {
<#if indentContent>    </#if>    return _res;
<#if indentContent>    </#if>  }
            <#break>
        <#case "manualArray">
            <#assign manualArrayField = field>

            <#-- TODO: Implement -->
            <#break>
        <#case "manual">
            <#assign manualField = field.asManualField().orElseThrow()>

<#if indentContent>    </#if>  // Manual Field (${manualField.name})<#if indentContent>    </#if>  {
<#if indentContent>    </#if>  _res = ${helper.toSerializationExpression(baseType, manualField, manualField.serializeExpression, parserArguments)};
<#if indentContent>    </#if>  if(_res != OK) {
<#if indentContent>    </#if>    return _res;
<#if indentContent>    </#if>  }
            <#break>
        <#case "optional">
            <#assign optionalField = field.asOptionalField().orElseThrow()>

<#if indentContent>    </#if>  // Optional Field (${optionalField.name})
<#if indentContent>    </#if>  if(_message-><@fieldName baseType=baseType field=optionalField/> != NULL) {
            <#if helper.isSimpleTypeReference(optionalField.type)>
<#if indentContent>    </#if>    _res = ${helper.getWriteBufferWriteMethodCall(optionalField.type.asSimpleTypeReference().orElseThrow(), "*_message->" + helper.getFieldName(baseType, optionalField), field)};
            <#else>
<#if indentContent>    </#if>    _res = ${helper.getCTypeName(optionalField.type.asComplexTypeReference().orElseThrow().name)}_serialize(writeBuffer, _message-><@fieldName baseType=baseType field=optionalField/>);
            </#if>
<#if indentContent>    </#if>    if(_res != OK) {
<#if indentContent>    </#if>      return _res;
<#if indentContent>    </#if>    }
<#if indentContent>    </#if>  }
            <#break>
        <#case "padding">
            <#assign paddingField = field.asPaddingField().orElseThrow()>
            <#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

<#if indentContent>    </#if>  // Padding Field (padding)
<#if indentContent>    </#if>  {
    <#-- We're replacing the "lastItem" with 'false' here as the item itself can't know if it is the last -->
<#if indentContent>    </#if>    int _timesPadding = (int) (${helper.toSerializationExpression(baseType, paddingField, paddingField.paddingCondition, parserArguments)});
<#if indentContent>    </#if>    while (_timesPadding-- > 0) {
<#if indentContent>    </#if>      // Just output the default padding data
<#if indentContent>    </#if>      _res = ${helper.getWriteBufferWriteMethodCall(simpleTypeReference, helper.toParseExpression(baseType, paddingField, paddingField.paddingValue, parserArguments), field)};
<#if indentContent>    </#if>      if(_res != OK) {
<#if indentContent>    </#if>        return _res;
<#if indentContent>    </#if>      }
<#if indentContent>    </#if>    }
<#if indentContent>    </#if>  }
            <#break>
        <#case "reserved">
            <#assign reservedField = field.asReservedField().orElseThrow()>
            <#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

<#if indentContent>    </#if>  // Reserved Field
<#if indentContent>    </#if>  _res = ${helper.getWriteBufferWriteMethodCall(simpleTypeReference, reservedField.referenceValue, field)};
<#if indentContent>    </#if>  if(_res != OK) {
<#if indentContent>    </#if>    return _res;
<#if indentContent>    </#if>  }
            <#break>
        <#case "simple">
            <#assign simpleField = field.asSimpleField().orElseThrow()>

<#if indentContent>    </#if>  // Simple Field (${simpleField.name})
            <#if helper.isSimpleTypeReference(simpleField.type)>
<#if indentContent>    </#if>  _res = ${helper.getWriteBufferWriteMethodCall(simpleField.type, "_message->" + helper.getFieldName(baseType, simpleField), field)};
            <#else>
<#if indentContent>    </#if>  _res = ${helper.getCTypeName(simpleField.type.name)}_serialize(writeBuffer, <#if helper.isEnumTypeReference(simpleField.type)>&</#if>_message-><@fieldName baseType=baseType field=simpleField/>);
            </#if>
<#if indentContent>    </#if>  if(_res != OK) {
<#if indentContent>    </#if>    return _res;
<#if indentContent>    </#if>  }
            <#break>
        <#case "switch">
            <#assign switchField = field.asSwitchField().orElseThrow()>

<#if indentContent>    </#if>  // Switch Field (Depending of the current type, serialize the sub-type elements)
<#if indentContent>    </#if>  switch(_message->_type) {
        <#list switchField.cases as case>
<#if indentContent>    </#if>    case ${helper.getCTypeName(type.name)}_type_${helper.getCTypeName(case.name)}: {
            <#list case.fields as caseField>
                <@fieldSerializer baseType=case field=caseField indentContent=true/>
            </#list>

<#if indentContent>    </#if>      break;
<#if indentContent>    </#if>    }
        </#list>
<#if indentContent>    </#if>  }
            <#break>
    </#switch>
</#macro>
<#list type.fields as field>
  <@fieldSerializer baseType=type field=field indentContent=false/>
</#list>

  return OK;
}

uint16_t ${helper.getCTypeName(type.name)}_length_in_bytes(${helper.getCTypeName(type.name)}* _message) {
  return ${helper.getCTypeName(type.name)}_length_in_bits(_message) / 8;
}

uint16_t ${helper.getCTypeName(type.name)}_length_in_bits(${helper.getCTypeName(type.name)}* _message) {
    <#macro fieldSize baseType field indentContent>
        <#-- @ftlvariable name="baseType" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
        <#-- @ftlvariable name="field" type="org.apache.plc4x.plugins.codegenerator.types.fields.Field" -->
        <#-- @ftlvariable name="indentContent" type="boolean" -->
        <#switch field.typeName>
            <#case "array">
                <#assign arrayField = field.asArrayField().orElseThrow()>

<#if indentContent>    </#if>  // Array field
                <#if helper.isSimpleTypeReference(arrayField.type)>
                    <#assign simpleTypeReference = arrayField.type>
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits} * plc4c_utils_list_size(_message-><@fieldName baseType=baseType field=arrayField/>);
                <#else>
<#if indentContent>    </#if>  if(_message-><@fieldName baseType=baseType field=arrayField/> != NULL) {
<#if indentContent>    </#if>    plc4c_list_element* curElement = _message-><@fieldName baseType=baseType field=arrayField/>->tail;
<#if indentContent>    </#if>    while (curElement != NULL) {
<#if indentContent>    </#if>      lengthInBits += ${helper.getLengthInBitsFunctionNameForComplexTypedField(arrayField)}((${helper.getLanguageTypeNameForTypeReference(arrayField.type)}*) curElement->value);
<#if indentContent>    </#if>      curElement = curElement->next;
<#if indentContent>    </#if>    }
<#if indentContent>    </#if>  }
                </#if>
                <#break>
            <#case "checksum">
                <#assign checksumField = field.asChecksumField().orElseThrow()>
                <#assign simpleTypeReference = checksumField.type>

<#if indentContent>    </#if>  // Checksum Field (checksum)
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits};
                <#break>
            <#case "const">
                <#assign constField = field.asConstField().orElseThrow()>
                <#assign simpleTypeReference = constField.type>

<#if indentContent>    </#if>  // Const Field (${constField.name})
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits};
                <#break>
            <#case "discriminator">
                <#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>

<#if indentContent>    </#if>  // Discriminator Field (${discriminatorField.name})
        <#if helper.isSimpleTypeReference(discriminatorField.type)>
            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
            <#if helper.getLanguageTypeNameForTypeReference(discriminatorField.type) = "String">
<#if indentContent>    </#if>  lengthInBits +=  ${helper.toParseExpression(type, discriminatorField, simpleTypeReference.getLengthExpression(), parserArguments)};
            <#else>
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits};
            </#if>
        <#elseif helper.isEnumField(field)>
<#if indentContent>    </#if>  lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
        <#else>
<#if indentContent>    </#if>  lengthInBits += ${discriminatorField.name}.getLengthInBits();
        </#if>
                <#break>
            <#case "enum">
                <#assign enumField = field.asEnumField().orElseThrow()>

<#if indentContent>    </#if>  // Enum Field (${enumField.name})
<#if indentContent>    </#if>  lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits};
                <#break>
            <#case "implicit">
                <#assign implicitField = field.asImplicitField().orElseThrow()>
                <#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

<#if indentContent>    </#if>  // Implicit Field (${implicitField.name})
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits};
                <#break>
            <#case "manualArray">
                <#assign manualArrayField = field>

<#if indentContent>    </#if>  // Manual Array Field (${manualArrayField.name})
<#if indentContent>    </#if>  lengthInBits += ${helper.toParseExpression(type, manualArrayField, manualArrayField.lengthExpression, parserArguments)} * 8;
                <#break>
            <#case "manual">
                <#assign manualField = field.asManualField().orElseThrow()>

<#if indentContent>    </#if>  // Manual Field (${manualField.name})
<#if indentContent>    </#if>  lengthInBits += ${helper.toParseExpression(type, manualField, manualField.lengthExpression, parserArguments)} * 8;
                <#break>
            <#case "optional">
                <#assign optionalField = field.asOptionalField().orElseThrow()>

<#if indentContent>    </#if>  // Optional Field (${optionalField.name})
<#if indentContent>    </#if>  if(_message-><@fieldName baseType=baseType field=optionalField/> != NULL) {
                <#if helper.isSimpleTypeReference(optionalField.type)>
                    <#assign simpleTypeReference = optionalField.type>
<#if indentContent>    </#if>    lengthInBits += ${simpleTypeReference.sizeInBits};
                <#else>
<#if indentContent>    </#if>    lengthInBits += ${helper.getLengthInBitsFunctionNameForComplexTypedField(optionalField)}(_message-><@fieldName baseType=baseType field=optionalField/>);
                </#if>
<#if indentContent>    </#if>  }
                <#break>
            <#case "padding">
                <#assign paddingField = field.asPaddingField().orElseThrow()>
                <#assign simpleTypeReference = paddingField.type>

<#if indentContent>    </#if>  // Padding Field (padding)
            <#-- We're replacing the "lastItem" with 'false' here as the item itself can't know if it is the last -->
<#if indentContent>    </#if> int _needsPadding = (int) (${helper.toSerializationExpression(type, paddingField, paddingField.paddingCondition, parserArguments)?replace("lastItem", "false")});
<#if indentContent>    </#if> while(_needsPadding-- > 0) {
<#if indentContent>    </#if>    lengthInBits += ${simpleTypeReference.sizeInBits};
<#if indentContent>    </#if>  }
                <#break>
            <#case "reserved">
                <#assign reservedField = field.asReservedField().orElseThrow()>
                <#assign simpleTypeReference = reservedField.type>

<#if indentContent>    </#if>  // Reserved Field (reserved)
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits};
                <#break>
            <#case "simple">
                <#assign simpleField = field.asSimpleField().orElseThrow()>

<#if indentContent>    </#if>  // Simple field (${simpleField.name})
                <#if helper.isSimpleTypeReference(simpleField.type)>
                    <#assign simpleTypeReference = simpleField.type>
<#if indentContent>    </#if>  lengthInBits += ${simpleTypeReference.sizeInBits};
                <#else>
<#if indentContent>    </#if>  lengthInBits += ${helper.getLengthInBitsFunctionNameForComplexTypedField(simpleField)}(<#if helper.isEnumTypeReference(simpleField.type)>&</#if>_message-><@fieldName baseType=baseType field=simpleField/>);
                </#if>
                <#break>
            <#case "switch">
                <#assign switchField = field.asSwitchField().orElseThrow()>

<#if indentContent>    </#if>  // Depending of the current type, add the length of sub-type elements ...
<#if indentContent>    </#if>  switch(_message->_type) {
            <#list switchField.cases as case>
<#if indentContent>    </#if>    case ${helper.getCTypeName(type.name)}_type_${helper.getCTypeName(case.name)}: {
                <#list case.fields as caseField>
                    <@fieldSize baseType=case field=caseField indentContent=true/>
                    <#sep >

                </#list>

<#if indentContent>    </#if>      break;
<#if indentContent>    </#if>    }
            </#list>
<#if indentContent>    </#if>  }
                <#break>
            <#case "virtual">
                <#assign virtualField = field.asVirtualField().orElseThrow()>

<#if indentContent>    </#if>  // A virtual field doesn't have any in- or output.
                <#break>
        </#switch>
    </#macro>
  uint16_t lengthInBits = 0;
<#list type.fields as field>
  <@fieldSize baseType=type field=field indentContent=false/>
</#list>

  return lengthInBits;
}

</#if>
</#outputformat>