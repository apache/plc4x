<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4x-code-generation</artifactId>
    <version>0.9.0-SNAPSHOT</version>
    <relativePath>../../../../pom.xml</relativePath>
  </parent>

  <artifactId>plc4j-c-mspec-test</artifactId>

  <name>PLC4J: Driver: C Mpsec Test</name>
  <description></description>

  <properties>
    <unity.version>2.5.0</unity.version>
    <!-- Tell Sonar where to find the c++ sources -->
    <sonar.sources />
    <option.with-proxies>OFF</option.with-proxies>
  </properties>

<!--
  Notes:
  - It turns out that the default version of CMake the cmake-maven-plugin uses is too
  old to detect the recent boost version. So we need to manually download a newer version
  and tell the plugin to use that instead.
  - As downloading and building boost takes quite some time, we only do this, if no
  target/lib/boost is found.
-->

<profiles>
  <!-- Profile for windows -->
  <profile>
    <id>os-windows</id>
    <activation>
      <os>
        <family>unix</family>
      </os>
    </activation>
  </profile>
  <!-- Profile for linux -->
  <profile>
    <id>os-unix</id>
    <activation>
      <os>
        <family>unix</family>
      </os>
    </activation>
  </profile>
  <!-- Profile for mac -->
  <profile>
    <id>os-mac</id>
    <activation>
      <os>
        <family>mac</family>
      </os>
    </activation>
    <!-- Make the cmake executable executable -->
    <build>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <executions>
            <execution>
              <id>make-cmake-executable</id>
              <phase>process-sources</phase>
              <goals>
                <goal>exec</goal>
              </goals>
              <configuration>
                <basedir>${cmake.root}</basedir>
                <executable>chmod</executable>
                <arguments>
                  <argument>+x</argument>
                  <argument>cmake</argument>
                </arguments>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
</profiles>


<build>
  <plugins>
    <plugin>
      <groupId>com.googlecode.maven-download-plugin</groupId>
      <artifactId>download-maven-plugin</artifactId>
      <executions>
        <!-- First download the cmake binaries -->
        <execution>
          <id>get-cmake</id>
          <phase>generate-sources</phase>
          <goals>
            <goal>wget</goal>
          </goals>
          <configuration>
            <url>${cmake.url}</url>
            <unpack>true</unpack>
            <outputDirectory>${project.build.directory}</outputDirectory>
          </configuration>
        </execution>
        <!--
          Get additional stuff we need for the build.
        -->
        <execution>
          <id>get-unity</id>
          <phase>generate-sources</phase>
          <goals>
            <goal>wget</goal>
          </goals>
          <configuration>
            <url>https://github.com/ThrowTheSwitch/Unity/archive/v${unity.version}.zip</url>
            <unpack>true</unpack>
            <outputDirectory>${project.build.directory}/dependency</outputDirectory>
          </configuration>
        </execution>
      </executions>
    </plugin>

    <plugin>
      <groupId>org.apache.plc4x.plugins</groupId>
      <artifactId>plc4x-maven-plugin</artifactId>
      <version>${plc4x-code-generation.version}</version>
      <executions>
        <execution>
          <id>generate-driver</id>
          <phase>generate-sources</phase>
          <goals>
            <goal>generate-driver</goal>
          </goals>
          <configuration>
            <protocolName>test</protocolName>
            <languageName>c</languageName>
            <outputFlavor>read-write</outputFlavor>
            <outputDir>${project.basedir}/generated-sources</outputDir>
          </configuration>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.apache.karaf.tooling</groupId>
      <artifactId>karaf-maven-plugin</artifactId>
      <executions>
        <execution>
          <id>generate-feature-xml</id>
          <phase>compile</phase>
          <goals>
            <!-- Generate the feature.xml -->
            <goal>features-generate-descriptor</goal>
            <!-- Check the feature.xml -->
            <goal>verify</goal>
          </goals>
          <configuration>
            <enableGeneration>true</enableGeneration>
            <aggregateFeatures>true</aggregateFeatures>
          </configuration>
        </execution>
        <execution>
          <id>build-kar</id>
          <phase>package</phase>
          <goals>
            <!--
              Build a kar archive (Jar containing the feature.xml
              as well as the module content and it's dependencies.
            -->
            <goal>kar</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.apache.felix</groupId>
      <artifactId>maven-bundle-plugin</artifactId>
      <extensions>true</extensions>
      <configuration>
        <instructions>
          <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>
          <Bundle-Activator>org.apache.plc4x.java.osgi.DriverActivator</Bundle-Activator>
          <Export-Service>org.apache.plc4x.java.api.PlcDriver,org.apache.plc4x.protocol.test
          </Export-Service>
          <Import-Package>
            com.fasterxml.jackson.annotation;resolution:=optional,
            *
          </Import-Package>
        </instructions>
      </configuration>
    </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-dependency-plugin</artifactId>
      <configuration>
        <usedDependencies combine.children="append">
          <usedDependency>org.apache.plc4x:plc4x-code-generation-language-c</usedDependency>
          <usedDependency>org.apache.plc4x:plc4x-code-generation-protocol-test</usedDependency>
        </usedDependencies>
      </configuration>
    </plugin>

    <!--
            Do the actual build.
          -->
    <plugin>
      <groupId>com.googlecode.cmake-maven-project</groupId>
      <artifactId>cmake-maven-plugin</artifactId>
      <executions>
        <!-- Generate the configuration for the main compilation -->
        <execution>
          <id>cmake-generate-compile</id>
          <phase>compile</phase>
          <goals>
            <goal>generate</goal>
          </goals>
        </execution>
        <!-- Compile the main code -->
        <execution>
          <id>cmake-execute-compile</id>
          <phase>compile</phase>
          <goals>
            <goal>compile</goal>
          </goals>
        </execution>
        <!-- Generate the configuration for the test compilation -->
        <execution>
          <id>cmake-generate-test-compile</id>
          <phase>test-compile</phase>
          <goals>
            <goal>generate</goal>
          </goals>
          <configuration>
            <options>
              <option>-DUNITY_VERSION:STRING=${unity.version}</option>
              <option>-DBUILD_PHASE=test-compile</option>
            </options>
          </configuration>
        </execution>
        <!-- Compile the test code -->
        <execution>
          <id>cmake-execute-test-compile</id>
          <phase>test-compile</phase>
          <goals>
            <goal>compile</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <!--
          We need to use a newer version of cmake, so disable downloading
          and tell the plugin where to find that version.
        -->
        <downloadBinaries>false</downloadBinaries>
        <cmakeDir>${cmake.root}</cmakeDir>
        <!--
          Actually the path to the CMakeList.txt file which then again
          tells to tool where to find the sources.
        -->
        <sourcePath>${project.basedir}</sourcePath>
        <!--
          Path to where the build configuration is generated
          (This directory is then used in the compile step to actually perform the build)
        -->
        <targetPath>${project.build.directory}/build</targetPath>
        <!--
          Name of the generator the compile step will be executing.
        -->
        <generator>${cmake.generator}</generator>
        <!-- The directory where the "generate" step generated the build configuration -->
        <projectDirectory>${project.build.directory}/build</projectDirectory>
      </configuration>
    </plugin>

    <!--
        Make the failsafe execute all integration-tests
      -->
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-failsafe-plugin</artifactId>
      <executions>
        <execution>
          <goals>
            <goal>integration-test</goal>
            <goal>verify</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <!--
              Notice the @ instead of the $ as prefix? That's late evaluation.
        -->
        <!--argLine>@{failsafeArgLine}</argLine-->
      </configuration>
    </plugin>
  </plugins>
</build>

<dependencies>
  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4j-api</artifactId>
    <version>0.9.0-SNAPSHOT</version>
  </dependency>

  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4j-spi</artifactId>
    <version>0.9.0-SNAPSHOT</version>
  </dependency>

  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4j-transport-tcp</artifactId>
    <version>0.9.0-SNAPSHOT</version>
  </dependency>

  <dependency>
    <groupId>io.netty</groupId>
    <artifactId>netty-buffer</artifactId>
  </dependency>

  <dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-lang3</artifactId>
  </dependency>

  <dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-annotations</artifactId>
  </dependency>

  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4j-utils-test-utils</artifactId>
    <version>0.9.0-SNAPSHOT</version>
    <scope>test</scope>
  </dependency>

  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4x-code-generation-language-c</artifactId>
    <version>0.9.0-SNAPSHOT</version>
    <!-- Scope is 'provided' as this way it's not shipped with the driver -->
    <scope>provided</scope>
  </dependency>

  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4x-code-generation-protocol-test</artifactId>
    <version>0.9.0-SNAPSHOT</version>
    <!-- Scope is 'provided' as this way it's not shipped with the driver -->
    <scope>provided</scope>
  </dependency>

  <dependency>
    <groupId>org.apache.plc4x</groupId>
    <artifactId>plc4x-code-generation-protocol-test</artifactId>
    <version>0.9.0-SNAPSHOT</version>
    <classifier>tests</classifier>
    <type>test-jar</type>
    <scope>test</scope>
  </dependency>

</dependencies>

</project>

