<#--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

	  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<#-- Prevent freemarker from escaping stuff -->
<#outputformat "undefined">
<#-- Declare the name and type of variables passed in to the template -->
<#-- @ftlvariable name="languageName" type="java.lang.String" -->
<#-- @ftlvariable name="protocolName" type="java.lang.String" -->
<#-- @ftlvariable name="outputFlavor" type="java.lang.String" -->
<#-- @ftlvariable name="helper" type="org.apache.plc4x.language.go.GoLanguageTemplateHelper" -->
<#-- @ftlvariable name="tracer" type="org.apache.plc4x.plugins.codegenerator.protocol.freemarker.Tracer" -->
<#-- @ftlvariable name="type" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
${helper.fileName(protocolName, languageName, outputFlavor)?replace(".", "/")}/model/${type.name}.go
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

<#macro importSectionWithContentBelow>
	<#local sectionContent><#nested></#local>
import (
	"context"
	<#if helper.getRequiredImports()?has_content>
	<#list helper.getRequiredImports() as import>
	${import}
	</#list>
	</#if>
	"github.com/rs/zerolog"
)

	${sectionContent}
</#macro>

<#macro emitImport import>${helper.emitRequiredImport(import)}</#macro>
<#macro emitImportWithAlias alias import>${helper.emitRequiredImport(alias, import)}</#macro>

<@importSectionWithContentBelow><@emitImport import="github.com/apache/plc4x/plc4go/spi/utils" />

// Code generated by code-generation. DO NOT EDIT.

<#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
<#if type.parserArguments.isPresent()><#assign parserArguments=type.allParserArguments.orElseThrow()></#if>
<#if type.constFields?has_content>

// Constant values.
	<#list type.constFields as field>
		<#if helper.isEnumField(field)>
const ${type.name}_${field.name?upper_case} ${helper.getLanguageTypeNameForField(field)} = ${helper.toParseExpression(field, field.type, field.referenceValue, parserArguments)}
		<#else>
const ${type.name}_${field.name?upper_case} ${helper.getLanguageTypeNameForField(field)} = ${helper.toParseExpression(field, field.type, field.referenceValue, parserArguments)}
		</#if>
	</#list>
</#if>

// ${type.name} is the corresponding interface of ${type.name?cap_first}
type ${type.name} interface {
<#if type.isDiscriminatedParentTypeDefinition()>
	${type.name}Contract
	${type.name}Requirements
	fmt.Stringer<@emitImport import="fmt" />
	utils.LengthAware
	utils.Serializable
	utils.Copyable
<#else>
	fmt.Stringer<@emitImport import="fmt" />
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	<#if type.isDiscriminatedChildTypeDefinition()>
		${type.parentType.orElseThrow().name?cap_first}
	</#if>
	<#list type.propertyFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
	// Get${field.name?cap_first} returns ${field.name?cap_first} (property field)
	Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
	</#list>
	<#list type.virtualFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
	// Get${field.name?cap_first} returns ${field.name?cap_first} (virtual field)
	Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
	</#list>
	<#list type.abstractFields as field>
		<#assign namedField=field.asNamedField().orElseThrow()>
	// Get${namedField.name?cap_first} returns ${namedField.name?cap_first} (abstract field)
	Get${namedField.name?cap_first}() ${helper.getLanguageTypeNameForField(field)}
	</#list>
</#if>
	// Is${type.name} is a marker method to prevent unintentional type checks (interfaces of same signature)
	Is${type.name}()
	// CreateBuilder creates a ${type.name}Builder
	Create${type.name}Builder() ${type.name}Builder
}

<#if parserArguments?has_content>
	<#assign filteredParserArguments=parserArguments?filter(arg -> !type.isDiscriminatorField(arg.name) && !type.getPropertyFieldFromThisOrParentByName(arg.name).isPresent())>
	<#assign filteredParserArgumentsLocalToType=filteredParserArguments?filter(arg->type.getParentType().isEmpty()||(type.getParentType().orElseThrow().getAllParserArguments().isEmpty()||!type.getParentType().orElseThrow().isParserArgument(arg.name)))>
</#if>

<#if type.isDiscriminatedParentTypeDefinition()>
// ${type.name}Contract provides a set of functions which can be overwritten by a sub struct
type ${type.name}Contract interface {
	<#if type.isDiscriminatedChildTypeDefinition()>
	${type.parentType.orElseThrow().name?cap_first}<#if type.isDiscriminatedParentTypeDefinition()>Contract</#if>
	</#if>
	<#list type.propertyFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
	// Get${field.name?cap_first} returns ${field.name?cap_first} (property field)
	Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
	</#list>
	<#list type.virtualFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
	// Get${field.name?cap_first} returns ${field.name?cap_first} (virtual field)
	Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
	</#list>
	<#list type.abstractFields as field>
		<#assign namedField=field.asNamedField().orElseThrow()>
	// Get${namedField.name?cap_first} returns ${namedField.name?cap_first} (abstract field)
	Get${namedField.name?cap_first}() ${helper.getLanguageTypeNameForField(field)}
	</#list>
	<#if filteredParserArgumentsLocalToType?has_content>
		<#list filteredParserArgumentsLocalToType as parserArgument>
	// Get${parserArgument.name?cap_first}() returns a parser argument
	Get${parserArgument.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}
		</#list>
	</#if>
	<#if type.isDiscriminatedChildTypeDefinition()>
		<#assign discriminatedChildType = type.asDiscriminatedComplexTypeDefinition().orElseThrow()>
		<#list discriminatedChildType.getDiscriminatorMap() as discriminatorName, discriminatorType>
			<#-- If the discriminator name matches that of another field, suppress the methods generation -->
			<#if !type.isNonDiscriminatorField(discriminatorName)>
				<#assign typeRef=helper.getDiscriminatorTypes(discriminatedChildType.parentType.orElseThrow())[discriminatorName]>
	// Get${discriminatorName?cap_first} returns ${discriminatorName?cap_first} (discriminator field)
	Get${discriminatorName?cap_first}() <#if typeRef.isNonSimpleTypeReference() && !typeRef.isEnumTypeReference()>I</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
			</#if>
		</#list>
	</#if>
	// Is${type.name} is a marker method to prevent unintentional type checks (interfaces of same signature)
	Is${type.name}()
	// CreateBuilder creates a ${type.name}Builder
	Create${type.name}Builder() ${type.name}Builder
}

// ${type.name}Requirements provides a set of functions which need to be implemented by a sub struct
type ${type.name}Requirements interface {
	<#if type.isDiscriminatedChildTypeDefinition()>
		${type.parentType.orElseThrow().name?cap_first}Requirements
	</#if>
	GetLengthInBits(ctx context.Context) uint16
	GetLengthInBytes(ctx context.Context) uint16
	<#list helper.discriminatorTypes as discriminatorName, discriminatorType>
	<#-- If the discriminator name matches that of another field, suppress the methods generation -->
		<#if type.isDiscriminatorField(discriminatorName)>
	// Get${discriminatorName?cap_first} returns ${discriminatorName?cap_first} (discriminator field)
	Get${discriminatorName?cap_first}() <#if discriminatorType.isNonSimpleTypeReference() && !discriminatorType.isEnumTypeReference()>I</#if>${helper.getLanguageTypeNameForTypeReference(discriminatorType)}
		</#if>
	</#list>
	<#list type.abstractFields as field>
		<#assign namedField=field.asNamedField().orElseThrow()>
	// Get${namedField.name?cap_first} returns ${namedField.name?cap_first} (abstract field)
	Get${namedField.name?cap_first}() ${helper.getLanguageTypeNameForField(field)}
	</#list>
}
</#if>

// _${type.name} is the data-structure of this message
type _${type.name} struct {
<#if type.parentType.isPresent()>
	${type.parentType.orElseThrow().name}Contract
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>
	_SubType ${type.name}
</#if>
<#-- Property fields are fields that require a property in the pojo -->
<#if type.propertyFields?has_content>
    <#list type.propertyFields as field>
        ${field.name?cap_first} <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
    </#list>
</#if>
<#if filteredParserArgumentsLocalToType?has_content>

	// Arguments.
    <#list filteredParserArgumentsLocalToType as parserArgument>
	${parserArgument.name?cap_first} ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}
    </#list>
</#if>
<#assign reservedFields=type.getFields()?filter(f->f.isReservedField())>
<#if reservedFields?has_content>
	// Reserved Fields
	<#list reservedFields as reservedField>
	reservedField${reservedField?index} *${helper.getLanguageTypeNameForTypeReference(reservedField.asReservedField().orElseThrow().type)}
	</#list>
</#if>
}

<#if type.isDiscriminatedParentTypeDefinition()>
var _ ${type.name}Contract = (*_${type.name})(nil)
<#else>
var _ ${type.name} = (*_${type.name})(nil)
</#if>
<#if type.isDiscriminatedChildTypeDefinition() && !type.isDiscriminatedParentTypeDefinition()>
var _ ${type.getParentType().orElseThrow().name}Requirements = (*_${type.name})(nil)
</#if>

<#if type.parentType.isPresent() && type.parentType.orElseThrow().allParserArguments.isPresent()>
	<#assign filteredParentParserArguments = type.parentType.orElseThrow().allParserArguments.orElseThrow()?filter(arg -> !type.parentType.orElseThrow().asComplexTypeDefinition().orElseThrow().isDiscriminatorField(arg.name))>
</#if>

// New${type.name} factory function for _${type.name}
<@compress single_line=true>
	func New${type.name}(
	<#assign needsSeparator = false>
	<#list type.getAllPropertyFields() as field>
		<#assign needsSeparator = true>
		${field.name} <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
		<#sep>, </#sep>
	</#list>
	<#if filteredParserArguments?has_content>
		<#if needsSeparator>, </#if>
		<#list filteredParserArguments as parserArgument>
			${parserArgument.name} ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}
			<#sep>, </#sep>
		</#list>
	</#if>
	) *_${type.name} {
</@compress>

<#list type.propertyFields as field>
	<#if !field.isOptionalField()
	&& !field.isManualField()
	&& !field.isManualArrayField()
	&& !field.isArrayField()
	&& !field.isCountArrayField()
	&& !field.isLengthArrayField()
	&& !field.isTerminatedArrayField()
	&& field.isNamedField()
	&& field.isTypedField()
	&& field.asTypedField().orElseThrow().type.isComplexTypeReference()>
		<#assign fieldName = field.asNamedField().orElseThrow().name>
		if ${fieldName} == nil {
		panic("${fieldName} of type ${helper.getLanguageTypeNameForField(field)} for ${type.name} must not be nil")
		}
	</#if>
</#list>
<#if type.parentType.isPresent()>
	_result := &_${type.name}{
	<@compress single_line=true>
		${type.parentType.orElseThrow().name}Contract:
		<#assign needsSeparator = false>
		New${type.parentType.orElseThrow().name}(
		<#if type.parentPropertyFields?has_content>
			<#list type.parentPropertyFields as parentField>
				<#assign needsSeparator = true>
				${parentField.name}<#sep>, </#sep>
			</#list>
		</#if>
		<#if type.parentType.isPresent() && type.parentType.orElseThrow().allParserArguments.isPresent()>
			<#assign filteredParentParserArguments = type.parentType.orElseThrow().allParserArguments.orElseThrow()?filter(arg -> !type.parentType.orElseThrow().asComplexTypeDefinition().orElseThrow().isDiscriminatorField(arg.name))>
			<#if filteredParentParserArguments?has_content>
				<#if needsSeparator>, </#if>
				<#list filteredParentParserArguments as parserArgument>
					${parserArgument.name}<#sep>, </#sep>
				</#list>
			</#if>
		</#if>
		),
	</@compress>

	<#list type.propertyFields as field>
		${field.name?cap_first}: ${field.name},
	</#list>
	}
	_result.${type.parentType.orElseThrow().name}Contract.(*_${type.parentType.orElseThrow().name})._SubType=_result<#if type.isDiscriminatedParentTypeDefinition()>._SubType</#if>
	return _result
<#else>
	<@compress single_line=true>
		return &_${type.name}{
		<#list type.propertyFields as field>
			${field.name?cap_first}: ${field.name}
			<#sep>, </#sep>
		</#list>
		<#if filteredParserArguments?has_content>
			<#if type.propertyFields?has_content>, </#if>
			<#list filteredParserArguments as parserArgument>
				${parserArgument.name?cap_first}: ${parserArgument.name}
				<#sep>, </#sep>
			</#list>
		</#if>
		}
	</@compress>

</#if>
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// ${type.name}Builder is a builder for ${type.name}
type ${type.name}Builder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
<@compress single_line=true>
	WithMandatoryFields(
	<#list type.propertyFields?filter(field->!field.isOptionalField()) as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
		${field.name} ${helper.getLanguageTypeNameForTypeReference(typeRef)}
		<#sep>,</#sep>
	</#list>
	) ${type.name}Builder
</@compress>

<#list type.propertyFields as field>
	<#assign typeRef=field.asTypedField().orElseThrow().type>
	// With${field.name?cap_first} adds ${field.name?cap_first} (property field)
	With<#if field.isOptionalField()>Optional</#if>${field.name?cap_first}(${helper.getLanguageTypeNameForTypeReference(typeRef, true)}) ${type.name}Builder
	<#if typeRef.isComplexTypeReference()>
	// With<#if field.isOptionalField()>Optional</#if>${field.name?cap_first}Builder adds ${field.name?cap_first} (property field) which is build by the builder
	With<#if field.isOptionalField()>Optional</#if>${field.name?cap_first}Builder(func(${helper.getLanguageTypeNameForTypeReference(typeRef)}Builder)${helper.getLanguageTypeNameForTypeReference(typeRef)}Builder) ${type.name}Builder
	</#if>
</#list>
<#if type.isAbstract()>
	<#list type.switchField.orElseThrow().cases as case>
	// As${case.name} converts this build to a subType of ${type.name}. It is always possible to return to current builder using Done()
	As${case.name}() interface{${case.name}Builder;Done()${type.name}Builder}
	</#list>
	// Build builds the ${type.name} or returns an error if something is wrong
	PartialBuild() (${type.name}Contract,error)
	// MustBuild does the same as Build but panics on error
	PartialMustBuild() ${type.name}Contract
</#if>
	// Build builds the ${type.name} or returns an error if something is wrong
	Build() (${type.name},error)
	// MustBuild does the same as Build but panics on error
	MustBuild() ${type.name}
}

// New${type.name}Builder() creates a ${type.name}Builder
func New${type.name}Builder() ${type.name}Builder {
	return &_${type.name}Builder{_${type.name}: new(_${type.name})}
}
<#if type.isAbstract()>

type _${type.name}ChildBuilder interface{
	utils.Copyable
	setParent(${type.name}Contract)
	buildFor${type.name}()(${type.name},error)
}
</#if>

type _${type.name}Builder struct {
	*_${type.name}
<#if type.isDiscriminatedChildTypeDefinition()>

	parentBuilder *_${type.getParentType().orElseThrow().name}Builder
</#if>
<#if type.isAbstract()>

	childBuilder _${type.name}ChildBuilder
</#if>

	err *utils.MultiError
}

var _ (${type.name}Builder) = (*_${type.name}Builder)(nil)

<#if type.isDiscriminatedChildTypeDefinition()>
	<#assign parentType=type.getParentType().orElseThrow()>
func (b *_${type.name}Builder) setParent(contract ${parentType.name}Contract) {
	b.${parentType.name}Contract = contract
}
</#if>

<@compress single_line=true>
func (b *_${type.name}Builder) WithMandatoryFields(
	<#list type.propertyFields?filter(field->!field.isOptionalField()) as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
		${field.name} ${helper.getLanguageTypeNameForTypeReference(typeRef)}
		<#sep>,</#sep>
	</#list>
	) ${type.name}Builder {
</@compress>

<@compress single_line=true>
return b
<#list type.propertyFields?filter(field->!field.isOptionalField()) as field>
	.With${field.name?cap_first}(${field.name}<#if field.type.isArrayTypeReference()>...</#if>)
</#list>
</@compress>

}

<#list type.propertyFields as field>
	<#assign typeRef=field.asTypedField().orElseThrow().type>
func (b *_${type.name}Builder) With<#if field.isOptionalField()>Optional</#if>${field.name?cap_first}(${field.name} ${helper.getLanguageTypeNameForTypeReference(typeRef, true)}) ${type.name}Builder {
	b.${field.name?cap_first}=<#if helper.needsPointerAccess(field)>&</#if>${field.name}
	return b
}

	<#if typeRef.isComplexTypeReference()>
func (b *_${type.name}Builder) With<#if field.isOptionalField()>Optional</#if>${field.name?cap_first}Builder(builderSupplier func(${helper.getLanguageTypeNameForTypeReference(typeRef)}Builder)${helper.getLanguageTypeNameForTypeReference(typeRef)}Builder) ${type.name}Builder {
	builder:=builderSupplier(b.${field.name?cap_first}.Create${helper.getLanguageTypeNameForField(field)}Builder())
	var err error
	b.${field.name?cap_first}, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}<@emitImport import="github.com/pkg/errors" />
		}
		b.err.Append(errors.Wrap(err, "${helper.getLanguageTypeNameForField(field)}Builder failed"))
	}
	return b
}

	</#if>
</#list>

func (b *_${type.name}Builder) <#if type.isAbstract()>Partial</#if>Build() (${type.name}<#if type.isAbstract()>Contract</#if>,error) {
<#list type.propertyFields?filter(field->!field.isOptionalField()) as field>
	<#if field.type.isComplexTypeReference() || helper.needsPointerAccess(field)>
	if b.${field.name?cap_first} == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field '${field.name}' not set"))
	}
	</#if>
</#list>
	if b.err != nil{
		return nil, errors.Wrap(b.err, "error occurred during build")<@emitImport import="github.com/pkg/errors" />
	}
	return b._${type.name}.deepCopy(), nil
}

func (b *_${type.name}Builder) <#if type.isAbstract()>Partial</#if>MustBuild() ${type.name}<#if type.isAbstract()>Contract</#if> {
	build, err := b.<#if type.isAbstract()>Partial</#if>Build()
	if err != nil{
		panic(err)
	}
	return build
}

<#if type.isAbstract()>
	<#list type.switchField.orElseThrow().cases as case>
func (b *_${type.name}Builder) As${case.name}() interface{${case.name}Builder;Done()${type.name}Builder} {
	if cb, ok := b.childBuilder.(interface{${case.name}Builder;Done()${type.name}Builder}); ok {
		return cb
	}
	cb := New${case.name}Builder().(*_${case.name}Builder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

	</#list>
</#if>

<#if type.isDiscriminatedChildTypeDefinition()>
	<#assign parentType=type.getParentType().orElseThrow()>

// Done is used to finish work on this child and return to the parent builder
func (b *_${type.name}Builder) Done() ${parentType.name}Builder {
	return b.parentBuilder
}

func (b *_${type.name}Builder) buildFor${parentType.name}() (${parentType.name},error) {
	return b.Build()
}
</#if>

<#if type.isAbstract()>
func (b *_${type.name}Builder) Build() (${type.name},error) {
	v, err := b.PartialBuild()
	if err != nil{
		return nil, errors.Wrap(err, "error occurred during partial build")<@emitImport import="github.com/pkg/errors" />
	}
	if b.childBuilder == nil {
		return nil, errors.New("no child builder present")<@emitImport import="github.com/pkg/errors" />
	}
	b.childBuilder.setParent(v)
	return b.childBuilder.buildFor${type.name}()
}

func (b *_${type.name}Builder) MustBuild() ${type.name} {
	build, err := b.Build()
	if err != nil{
		panic(err)
	}
	return build
}
</#if>

func (b *_${type.name}Builder) DeepCopy() any {
	_copy:=b.Create${type.name}Builder().(*_${type.name}Builder)
<#if type.isAbstract()>
	_copy.childBuilder = b.childBuilder.DeepCopy().(_${type.name}ChildBuilder)
	_copy.childBuilder.setParent(_copy)
</#if>
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// Create${type.name}Builder creates a ${type.name}Builder
func (b *_${type.name}) Create${type.name}Builder() ${type.name}Builder  {
	if b == nil {
		return New${type.name}Builder()
	}
	return &_${type.name}Builder{_${type.name}: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

<#if type.isDiscriminatedChildTypeDefinition()>
	<#assign discriminatedChildType = type.asDiscriminatedComplexTypeDefinition().orElseThrow()>

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

	<#list discriminatedChildType.getDiscriminatorMap() as discriminatorName, discriminatorTerm>
		<#-- If the discriminator name matches that of another field, suppress the methods generation -->
		<#if !type.isNonDiscriminatorField(discriminatorName)>
			<#assign typeRef=helper.getDiscriminatorTypes(discriminatedChildType.parentType.orElseThrow())[discriminatorName]>
func (m *_${type.name})  Get${discriminatorName?cap_first}() <#if typeRef.isNonSimpleTypeReference() && !typeRef.isEnumTypeReference()>I</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
			<@compress single_line=true>
				return
				<#if discriminatorTerm?? && !helper.isWildcard(discriminatorTerm)>
					<#if typeRef.isNonSimpleTypeReference()>
						<#if typeRef.isEnumTypeReference()>
							<#assign enumType=helper.getLanguageTypeNameForTypeReference(typeRef)>
							<#assign enumTypeWithoutTraces=tracer.removeTraces(enumType)>
							<#assign enumTypeTraces=tracer.extractTraces(enumType)>
							<#assign enumValue=helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)>
							<#assign enumValueWithoutTraces=tracer.removeTraces(enumValue)>
							<#assign enumValueTraces=tracer.extractTraces(enumValue)>
							${enumTypeTraces}${enumValueTraces}${enumTypeWithoutTraces}_${enumValueWithoutTraces?replace("Get","")?replace("()","")}
						<#else>
							${helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)}
						</#if>
					<#else>
						${helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)}
					</#if>
				<#else>
					${helper.getNullValueForTypeReference(typeRef)}
				</#if>
			</@compress>
}

		</#if>
	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if !type.isDiscriminatedParentTypeDefinition() && type.parentType.isPresent()>

func (m *_${type.name})  GetParent() ${type.parentType.orElseThrow().name}Contract {
	return m.${type.parentType.orElseThrow().name}Contract
}
</#if>
<#if type.propertyFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

	<#list type.propertyFields as field>
    	<#assign typeRef=field.asTypedField().orElseThrow().type>
func (m *_${type.name}) Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	return m.${field.name?cap_first}
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.virtualFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

	<#list type.virtualFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
func (<#if type.isDiscriminatedParentTypeDefinition()>p</#if>m *_${type.name}) Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	<#if type.isDiscriminatedParentTypeDefinition()>
		m:=pm._SubType
	</#if>
	<#-- TODO: This should only be output, if ctx is needed -->
	ctx := context.Background()
	_ = ctx
  	  <#list type.propertyFields?filter(f->f.isOptionalField()) as field>
	${field.name} := m.Get${field.name?cap_first}()
	_ = ${field.name}
  	  </#list>
	  <#if typeRef.isStringTypeReference() || typeRef.isVstringTypeReference()>
    return fmt.Sprintf("%v", ${helper.toSerializationExpression(field, field.type, field.valueExpression, parserArguments)})<@emitImport import="fmt" />
	  <#else>
	return <#if typeRef.isNonSimpleTypeReference()>Cast</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}(${helper.toSerializationExpression(field, field.type, field.valueExpression, parserArguments)})
	  </#if>
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.abstractFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for abstract fields.
///////////////////////

	<#list type.abstractFields as field>
        <#assign typeRef=field.asTypedField().orElseThrow().type>
func (m *_${type.name}) Get${field.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	return m._SubType.Get${field.name?cap_first}()
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.constFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////

	<#list type.constFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
func (m *_${type.name}) Get${field.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	return ${type.name}_${field.name?upper_case}
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>

// Deprecated: use the interface for direct cast
func Cast${type.name}(structType any) ${type.name} {
    if casted, ok := structType.(${type.name}); ok {
		return casted
	}
	if casted, ok := structType.(*${type.name}); ok {
		return *casted
	}
	return nil
}

func (m *_${type.name}) GetTypeName() string {
	return "${type.name}"
}

<#if !type.isDiscriminatedParentTypeDefinition()>
func (m *_${type.name}) GetLengthInBits(ctx context.Context) uint16 {
		<#if type.isDiscriminatedChildTypeDefinition()>
	lengthInBits := uint16(m.${type.getParentType().orElseThrow().name}Contract.(*_${type.getParentType().orElseThrow().name}).getLengthInBits(ctx))
		<#else>
	lengthInBits := uint16(0)
		</#if>
		<#list type.fields as field>
			<#switch field.typeName>
				<#case "array">
					<#assign arrayField = field.asArrayField().orElseThrow()>
                    <#assign arrayElementType = arrayField.type.elementTypeReference>

	// Array field
	if len(m.${arrayField.name?cap_first}) > 0 {
				<#if arrayElementType.isVstringTypeReference()>
                    <#assign vstringTypeReference = arrayElementType.asVstringTypeReference().orElseThrow()>
		lengthInBits += uint16(${helper.toSerializationExpression(arrayField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)}) * uint16(len(m.${arrayField.name?cap_first}))
				<#elseif arrayElementType.isSimpleTypeReference()>
                    <#assign simpleTypeReference = arrayElementType.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits} * uint16(len(m.${arrayField.name?cap_first}))
				<#else>
				<#if arrayField.isCountArrayField()>
		for _curItem, element := range m.${arrayField.name?cap_first} {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.${arrayField.name?cap_first}), _curItem)
			<#-- TODO: find a way to do this nicer -->
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{GetLengthInBits(context.Context) uint16}).GetLengthInBits(arrayCtx)
				<#else>
		for _, element := range m.${arrayField.name?cap_first} {
			lengthInBits += element.GetLengthInBits(ctx)
				</#if>
		}
				</#if>
	}
					<#break>
				<#case "checksum">
					<#assign checksumField = field.asChecksumField().orElseThrow()>
					<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "const">
					<#assign constField = field.asConstField().orElseThrow()>

	// Const Field (${constField.name})
				<#if constField.type.isVstringTypeReference()>
					<#assign vstringTypeReference = constField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(constField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
				<#else>
                    <#assign simpleTypeReference = constField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits}
				</#if>
					<#break>
				<#case "discriminator">
					<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
	// Discriminator Field (${discriminatorField.name})
		<#if discriminatorField.type.isSimpleTypeReference()>
            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
			<#if discriminatorField.type.isVstringTypeReference()>
                <#assign vstringTypeReference = discriminatorField.type.asVstringTypeReference().orElseThrow()>
			lengthInBits += uint16(${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
			<#else>
			lengthInBits += ${simpleTypeReference.sizeInBits};
			</#if>
		<#elseif helper.isEnumField(discriminatorField)>
		lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
		<#else>
		lengthInBits += ${discriminatorField.name}.getLengthInBits();
		</#if>
					<#break>
				<#case "enum">
					<#assign enumField = field.asEnumField().orElseThrow()>

	// Enum Field (${enumField.name})
	lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits}
					<#break>
				<#case "implicit">
					<#assign implicitField = field.asImplicitField().orElseThrow()>
					<#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

	// Implicit Field (${implicitField.name})
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "manualArray">
					<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
	                <#assign arrayElementType = manualArrayField.type.elementTypeReference>

	// Manual Array Field (${manualArrayField.name})
	lengthInBits += uint16(${helper.toSerializationExpression(manualArrayField, helper.intTypeReference, manualArrayField.lengthExpression, parserArguments)})
					<#break>
				<#case "manual">
					<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	lengthInBits += uint16(${helper.toSerializationExpression(manualField, helper.intTypeReference, manualField.lengthExpression, parserArguments)})
					<#break>
				<#case "optional">
					<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name})
	if m.${optionalField.name?cap_first} != nil {
					<#if optionalField.type.isSimpleTypeReference()>
						<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
						<#assign bs=simpleTypeReference.sizeInBits>
		lengthInBits += ${(bs<0)?then(0,bs)}
					<#elseif helper.isEnumField(optionalField)>
						<#assign bs=helper.getEnumBaseTypeReference(optionalField.type).sizeInBits>
		lengthInBits += ${(bs<0)?then(0,bs)}
                    <#elseif optionalField.type.isComplexTypeReference()>
		lengthInBits += m.${optionalField.name?cap_first}.GetLengthInBits(ctx)
					<#else>
		lengthInBits += (*m.${optionalField.name?cap_first}).GetLengthInBits(ctx)
					</#if>
	}
					<#break>
				<#case "padding">
					<#assign paddingField = field.asPaddingField().orElseThrow()>
					<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
	for ;_timesPadding > 0; _timesPadding-- {
		lengthInBits += ${simpleTypeReference.sizeInBits}
	}
					<#break>
				<#case "reserved">
					<#assign reservedField = field.asReservedField().orElseThrow()>
					<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "simple">
					<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple field (${simpleField.name})
					<#if simpleField.type.isSimpleTypeReference()>
						<#if simpleField.type.isVstringTypeReference()>
							<#assign vstringTypeReference = simpleField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
						<#else>
							<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits};
						</#if>
					<#elseif helper.isEnumField(field)>
	lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits}
					<#else>
	lengthInBits += m.${simpleField.name?cap_first}.GetLengthInBits(ctx)
					</#if>
					<#break>
				<#case "switch">
					<#assign switchField = field.asSwitchField().orElseThrow()>

	// Length of sub-type elements will be added by sub-type...
	lengthInBits += m.GetLengthInBits(ctx)
					<#break>
				<#case "unknown">
					<#assign unknownField = field.asUnknownField().orElseThrow()>
					<#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

	// Unknown field
	lengthInBits += ${simpleTypeReference.sizeInBits}

					<#break>
				<#case "virtual">
					<#assign virtualField = field.asVirtualField().orElseThrow()>

	// A virtual field doesn't have any in- or output.
					<#break>
			</#switch>
		</#list>

	return lengthInBits
}
</#if>

<#if type.isDiscriminatedParentTypeDefinition()>
func (m *_${type.name}) getLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)
	<#list type.fields as field>
		<#switch field.typeName>
			<#case "array">
				<#assign arrayField = field.asArrayField().orElseThrow()>
                <#assign arrayElementType = arrayField.type.elementTypeReference>

	// Array field
	if len(m.${arrayField.name?cap_first}) > 0 {
				<#if arrayElementType.isVstringTypeReference()>
					<#assign vstringTypeReference=arrayElementType.asVstringTypeReference().orElseThrow()>
		lengthInBits += uint16(${helper.toSerializationExpression(arrayField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)}) * uint16(len(m.${arrayField.name?cap_first}))
				<#elseif arrayElementType.isSimpleTypeReference()>
                    <#assign simpleTypeReference = arrayElementType.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits} * uint16(len(m.${arrayField.name?cap_first}))
				<#else>
					<#if arrayField.isCountArrayField()>
		for _curItem, element := range m.${arrayField.name?cap_first} {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.${arrayField.name?cap_first}), _curItem)
            <#-- TODO: find a way to do this nicer -->
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{GetLengthInBits(context.Context) uint16}).GetLengthInBits(arrayCtx)
					<#else>
		for _, element := range m.${arrayField.name?cap_first} {
			lengthInBits += element.GetLengthInBits(ctx)
					</#if>
		}
				</#if>
				}
				<#break>
			<#case "checksum">
				<#assign checksumField = field.asChecksumField().orElseThrow()>
				<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	lengthInBits += ${simpleTypeReference.sizeInBits}
				<#break>
			<#case "const">
				<#assign constField = field.asConstField().orElseThrow()>
				<#assign simpleTypeReference = constField.type>

	// Const Field (${constField.name})
				<#if constField.type.isVstringTypeReference()>
                    <#assign vstringTypeReference = constField.type.asVstringTypeReference().orElseThrow()>
					lengthInBits += uint16(${helper.toSerializationExpression(constField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
				<#elseif constField.type.isEnumTypeReference()>
	lengthInBits += ${helper.getEnumBaseTypeReference(constField.type).sizeInBits};
				<#else>
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits}
				</#if>
				<#break>
			<#case "discriminator">
				<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
				<#assign simpleTypeReference = discriminatorField.type>
	// Discriminator Field (${discriminatorField.name})
				<#if simpleTypeReference.isSimpleTypeReference()>
					<#if discriminatorField.type.isVstringTypeReference()>
                        <#assign vstringTypeReference = discriminatorField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
					<#else>
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits};
					</#if>
				<#elseif helper.isEnumField(discriminatorField)>
	lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
				<#else>
	lengthInBits += ${discriminatorField.name}.GetLengthInBits(ctx);
				</#if>
				<#break>
			<#case "enum">
				<#assign enumField = field.asEnumField().orElseThrow()>

	// Enum Field (${enumField.name})
	lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits}
				<#break>
			<#case "implicit">
				<#assign implicitField = field.asImplicitField().orElseThrow()>
				<#assign simpleTypeReference = implicitField.type>

	// Implicit Field (${implicitField.name})
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits}
				<#break>
			<#case "manualArray">
				<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
	            <#assign arrayElementType = manualArrayField.type.elementTypeReference>

	// Manual Array Field (${manualArrayField.name})
	lengthInBits += uint16(${helper.toParseExpression(manualArrayField, arrayElementType, manualArrayField.lengthExpression, parserArguments)})
				<#break>
			<#case "manual">
				<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	lengthInBits += uint16(${helper.toParseExpression(manualField, manualField.type, manualField.lengthExpression, parserArguments)})
				<#break>
			<#case "optional">
				<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name})
	if m.${optionalField.name?cap_first} != nil {
				<#if optionalField.type.isSimpleTypeReference()>
					<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits}
				<#elseif helper.isEnumField(field)>
		lengthInBits += ${helper.getEnumBaseTypeReference(optionalField.type).sizeInBits}
                <#elseif optionalField.type.isComplexTypeReference()>
		lengthInBits += m.${optionalField.name?cap_first}.GetLengthInBits(ctx)
                <#else>
		lengthInBits += (*m.${optionalField.name?cap_first}).GetLengthInBits(ctx)
				</#if>
	}
				<#break>
			<#case "padding">
				<#assign paddingField = field.asPaddingField().orElseThrow()>
				<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
	for ;_timesPadding > 0; _timesPadding-- {
		lengthInBits += ${simpleTypeReference.sizeInBits}
	}
				<#break>
			<#case "reserved">
				<#assign reservedField = field.asReservedField().orElseThrow()>
				<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	lengthInBits += ${simpleTypeReference.sizeInBits}
				<#break>
			<#case "simple">
				<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple field (${simpleField.name})
				<#if simpleField.type.isSimpleTypeReference()>
					<#if simpleField.type.isVstringTypeReference()>
						<#assign vstringTypeReference = simpleField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
					<#else>
						<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits};
					</#if>
				<#elseif helper.isEnumField(field)>
	lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits}
				<#else>
	lengthInBits += m.${simpleField.name?cap_first}.GetLengthInBits(ctx)
				</#if>
				<#break>
			<#case "unknown">
				<#assign unknownField = field.asUnknownField().orElseThrow()>
			<#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

	// Unknown field
	lengthInBits += ${simpleTypeReference.sizeInBits}

				<#break>
			<#case "virtual">
				<#assign virtualField = field.asVirtualField().orElseThrow()>

	// A virtual field doesn't have any in- or output.
				<#break>
		</#switch>
	</#list>

	return lengthInBits
}
</#if>

func (m *_${type.name}) GetLengthInBytes(ctx context.Context) uint16 {
	return m.<#if type.isDiscriminatedParentTypeDefinition()>_SubType.</#if>GetLengthInBits(ctx) / 8
}

<#assign hasParserArguments=parserArguments?has_content/>
<#assign parserArgumentList><#if hasParserArguments><#list parserArguments as parserArgument>${parserArgument.name} ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}<#sep>, </#sep></#list></#if></#assign>
<#assign parserArgumentNameList><#if hasParserArguments><#list parserArguments as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
<#if !type.isDiscriminatedChildTypeDefinition()>
func ${type.name}Parse<#if type.isDiscriminatedParentTypeDefinition()>[T ${type.name}]</#if>(ctx context.Context, theBytes []byte<#if hasParserArguments>, ${parserArgumentList}</#if>) (<#if type.isDiscriminatedParentTypeDefinition()>T<#else>${type.name}</#if>, error) {
	return ${type.name}ParseWithBuffer<#if type.isDiscriminatedParentTypeDefinition()>[T]</#if>(ctx, utils.NewReadBufferByteBased(theBytes${helper.getEndiannessOptions(true, true, parserArguments)})<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
}

func ${type.name}ParseWithBufferProducer<#if type.isDiscriminatedParentTypeDefinition()>[T ${type.name}]</#if>(<#if hasParserArguments>${parserArgumentList}</#if>)  func(ctx context.Context, readBuffer utils.ReadBuffer) (<#if type.isDiscriminatedParentTypeDefinition()>T<#else>${type.name}</#if>, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (<#if type.isDiscriminatedParentTypeDefinition()>T<#else>${type.name}</#if>, error){
<#if type.isDiscriminatedParentTypeDefinition()>
	v, err := ${type.name}ParseWithBuffer<#if type.isDiscriminatedParentTypeDefinition()>[T]</#if>(ctx , readBuffer<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
	if err != nil {
		var zero T
		return zero, err
	}
	<#if !type.isDiscriminatedParentTypeDefinition()>
	vc, ok := v.(T)
	if !ok {
		var zero T
		return zero, errors.Errorf("Unexpected type %T. Expected type %T", v, *new(T))<@emitImport import="github.com/pkg/errors" />
	}
	return vc, nil
	<#else>
	return v, nil
	</#if>
<#else>
	return ${type.name}ParseWithBuffer(ctx , readBuffer<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
</#if>
	}
}

func ${type.name}ParseWithBuffer<#if type.isDiscriminatedParentTypeDefinition()>[T ${type.name}]</#if>(ctx context.Context, readBuffer utils.ReadBuffer<#if hasParserArguments>, ${parserArgumentList}</#if>) (<#if type.isDiscriminatedParentTypeDefinition()>T<#else>${type.name}</#if>, error) {
	<#assign filteredPartialTypeCreationArgumentList><#if filteredParserArgumentsLocalToType?has_content> <#list filteredParserArgumentsLocalToType as parserArgument>${parserArgument.name?cap_first}: ${parserArgument.name}<#sep>, </#sep></#list> </#if></#assign>
	v,err:= (&_${type.name}{${filteredPartialTypeCreationArgumentList}}).parse(ctx , readBuffer<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
	if err != nil {
	<#if !type.isDiscriminatedParentTypeDefinition()>
		return nil,err
	<#else>
		var zero T
		return zero,err
	</#if>
	}
	<#if type.isDiscriminatedParentTypeDefinition()>
	vc, ok := v.(T)
	if !ok {
		var zero T
		return zero, errors.Errorf("Unexpected type %T. Expected type %T", v, *new(T))<@emitImport import="github.com/pkg/errors" />
	}
	return vc, nil
	<#else>
	return v, nil
	</#if>
}

</#if>

func (m *_${type.name}) parse(ctx context.Context, readBuffer utils.ReadBuffer<#if type.isDiscriminatedChildTypeDefinition()>, parent *_${type.getParentType().orElseThrow().name}</#if><#if hasParserArguments>, ${parserArgumentList}</#if>) (__${type.name?uncap_first} ${type.name}, err error) {
<#if type.isDiscriminatedChildTypeDefinition()>
	m.${type.getParentType().orElseThrow().name}Contract = parent
	<#if !type.isDiscriminatedParentTypeDefinition()>
		parent._SubType = m
	</#if>
</#if>
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("${type.name}"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
	currentPos := positionAware.GetPos()
	_ = currentPos
	<#if helper.requiresStartPos() || helper.requiresCurPos()>
	var startPos = positionAware.GetPos()
	_ = startPos
	</#if>
	<#assign reservedFieldIndex=0>
	<#list type.fields as field>
		<#switch field.typeName>
			<#case "array">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign arrayField = field.asArrayField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>
				<#assign arrayElementTypeReference = arrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

				<#if arrayElementTypeReference.isByteBased()>
					<#if !field.isCountArrayField() && !field.isLengthArrayField()>${helper.fail("array fields of type byte only support 'count' and 'length' loop-types.")}</#if>
	${namedField.name},err := readBuffer.ReadByteArray("${namedField.name}", int(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
				<#-- If this is a count array, we can directly initialize an array with the given size -->
					<#if field.isCountArrayField()>
	${arrayField.name},err := ReadCountArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, uint64(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
					<#-- In all other cases do we have to work with a list, that is later converted to an array -->
					<#else>
					<#-- For a length array, we read data till the read position of the buffer reaches a given position -->
						<#if field.isLengthArrayField()>
	${arrayField.name},err := ReadLengthArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, int(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
						<#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
						<#elseif field.isTerminatedArrayField()>
	${arrayField.name},err := ReadTerminatedArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, ${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
						</#if>
					</#if>
				</#if>
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "assert">
				<#assign assertField = field.asAssertField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${helper.toParseExpression(assertField, assertField.type, assertField.conditionExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
				<#break>
			<#case "checksum">
				<#assign checksumField = field.asChecksumField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${helper.toParseExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
			<#break>
			<#case "const">
				<#assign constField = field.asConstField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${type.name}_${namedField.name?upper_case}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
			<#break>
			<#case "discriminator">
				<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

				<#if typedField.type.isEnumTypeReference()>
	${namedField.name},err := ReadDiscriminatorEnumField[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", "${typedField.type.asEnumTypeReference().orElseThrow().typeDefinition.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)})
				</#if>
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "enum">
			<#case "enum">
				<#assign enumField = field.asEnumField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", "${enumField.type.asNonSimpleTypeReference().orElseThrow().typeDefinition.name}", ReadEnum[${helper.getLanguageTypeNameForField(field)},${helper.getLanguageTypeNameForTypeReference(helper.getEnumFieldSimpleTypeReference(enumField.type.asNonSimpleTypeReference().orElseThrow(), enumField.fieldName))}](${enumField.type.asNonSimpleTypeReference().orElseThrow().typeDefinition.name}FirstEnumForField${enumField.fieldName?cap_first}, ${helper.getDataReaderCall(helper.getEnumFieldTypeReference(enumField.type, enumField.fieldName))})${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "implicit">
				<#assign implicitField = field.asImplicitField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
				<#break>
			<#case "manualArray">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>
				<#assign arrayElementTypeReference = manualArrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

				<#if arrayElementTypeReference.isByteBased()>
	${namedField.name},err  := ReadManualByteArrayField(ctx, "${namedField.name}", readBuffer, ${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments)}, ${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
	${namedField.name},err := ReadManualArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${namedField.name}", readBuffer, ${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments)}, ${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
				</#if>
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "manual">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign manualField = field.asManualField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${manualField.name},err := ReadManualField[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", readBuffer, EnsureType[${helper.getLanguageTypeNameForField(field)}](${helper.toParseExpression(manualField, manualField.type, manualField.parseExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "optional">
				<#assign optionalField = field.asOptionalField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	var ${namedField.name} <#if !optionalField.type.isComplexTypeReference()>*</#if>${helper.getLanguageTypeNameForField(optionalField)}
	<#if optionalField.type.isComplexTypeReference()>_</#if>${namedField.name},err <#if optionalField.type.isComplexTypeReference()>:</#if>= Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}<#if optionalField.conditionExpression.present>, ${helper.toParseExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}<#else>, true</#if>${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "padding">
				<#assign paddingField = field.asPaddingField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	if err:= Read${field.typeName?cap_first}Field(ctx, ${helper.getDataReaderCall(typedField.type)}, (int) (${helper.toParseExpression(paddingField, paddingField.type, paddingField.paddingCondition, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing padding field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "reserved">
				<#assign reservedField = field.asReservedField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>

	reservedField${reservedFieldIndex}<#assign reservedFieldIndex=reservedFieldIndex+1>,err := Read${field.typeName?cap_first}Field(ctx, "reserved", ${helper.getDataReaderCall(typedField.type)}, ${helper.getReservedValue(reservedField)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing reserved field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "simple">
				<#assign simpleField = field.asSimpleField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

<@compress single_line=true>
	${namedField.name},err  :=
	<#if typedField.type.isEnumTypeReference()>
		ReadEnumField[${helper.getLanguageTypeNameForField(field)}](
			ctx,
			"${namedField.name}",
			"${helper.getLanguageTypeNameForField(field)}",
			${helper.getDataReaderCall(typedField.type)}
			${helper.getFieldOptions(typedField, parserArguments)}
		)
	<#else>
		Read${field.typeName?cap_first}Field<#if typedField.getType().isComplexTypeReference()>[${helper.getLanguageTypeNameForField(field)}]</#if>(
			ctx,
			"${namedField.name}",
			${helper.getDataReaderCall(typedField.type)}
			${helper.getFieldOptions(typedField, parserArguments)}
		)
	</#if>
</@compress>

	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "switch">
				<#assign switchField = field.asSwitchField().orElseThrow()>

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _child ${type.name}
	switch {
				<#list switchField.cases as case>
					<@compress single_line=true>
						<#if case.discriminatorValueTerms?has_content>
							case
							<#list case.discriminatorValueTerms as discriminatorValueTerm>
								<#if helper.isWildcard(discriminatorValueTerm)> <#--TODO: we could use the above isWildcard as filter but then the switchField.discriminatorExpressions[discriminatorValueTerm?index] is offset. Solution would be to have it as a pair list-->
                                    ${discriminatorValueTerm?index}==${discriminatorValueTerm?index}
								<#else>
									<#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValueTerm?index]>
									<#assign parsedDiscriminatorExpression=helper.toParseExpression(null, null, discriminatorExpression, parserArguments)>
									<#-- We remove debug informations as we need them for lookup-->
									<#assign parsedDiscriminatorExpression=tracer.removeTraces(parsedDiscriminatorExpression)>
									<#if helper.getDiscriminatorTypes()[parsedDiscriminatorExpression]??><#assign discriminatorType=helper.getDiscriminatorTypes()[parsedDiscriminatorExpression]></#if>
									${helper.toParseExpression(null, null, discriminatorExpression, parserArguments)} ==
									<#if discriminatorType?has_content && discriminatorType.isNonSimpleTypeReference()>
										<#if discriminatorType.isEnumTypeReference()>
											<#assign enumType=helper.getLanguageTypeNameForTypeReference(discriminatorType)>
											<#assign enumTypeWithoutTraces=tracer.removeTraces(enumType)>
											<#assign enumTypeTraces=tracer.extractTraces(enumType)>
											<#assign enumValue=helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)>
											<#assign enumValueWithoutTraces=tracer.removeTraces(enumValue)>
											<#assign enumValueTraces=tracer.extractTraces(enumValue)>
											${enumTypeTraces}${enumValueTraces}${enumTypeWithoutTraces}_${enumValueWithoutTraces?replace("Get","")?replace("()","")}
										<#else>
											${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}
										</#if>
									<#else>
										${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}
									</#if>
								</#if>
								<#sep> && </#sep>
							</#list>
						<#else>
							<#assign defaultCaseOutput=true>
							case true
						</#if>: // ${case.name}
                    </@compress>

		if _child, err = new(_${case.name}).parse(ctx, readBuffer, m<#if case.allParserArguments.isPresent()>, <#list case.allParserArguments.orElseThrow() as parserArgument><#if <#--TODO: here DF1ResponseMessage throws a payloadLength not present: meaning that some feature is not rightfully implemented as the result should be a error not a missing pointer-->type.getPropertyFieldFromThisOrParentByName(parserArgument.name).isPresent() && type.getPropertyFieldFromThisOrParentByName(parserArgument.name).orElseThrow().isOptionalField()>*</#if>${parserArgument.name}<#sep>, </#sep></#list></#if>); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type ${case.name} for type-switch of ${type.name}")<@emitImport import="github.com/pkg/errors" />
		}
				</#list>
	default:
		return nil, errors.Errorf("Unmapped type for<#if switchField.getDiscriminatorExpressions()?has_content> parameters [<#list switchField.getDiscriminatorExpressions() as discriminatorExpression>${discriminatorExpression.stringRepresentation()}=%v<#sep>, </#sep></#list>]</#if>"<#if switchField.getDiscriminatorExpressions()?has_content>, <#list switchField.getDiscriminatorExpressions() as discriminatorExpression>${helper.toParseExpression(null, null, discriminatorExpression, parserArguments)}<#sep>, </#sep></#list></#if>)<@emitImport import="github.com/pkg/errors" />
	}
				<#break>

			<#case "unknown">
				<#assign unknownField = field.asUnknownField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>

	if _, err := Read${field.typeName?cap_first}Field(ctx, "unknown", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)}); err!=nil{
			return nil, errors.Wrap(err, "Error parsing unknown field of ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "virtual">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign virtualField = field.asVirtualField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", (*${helper.getLanguageTypeNameForField(field)})(nil), ${helper.toParseExpression(virtualField, virtualField.type, virtualField.valueExpression, parserArguments,true)}${helper.getFieldOptions(typedField, parserArguments)});
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
				<#break>
            <#case "validation">
                <#assign validationField = field.asValidationField().orElseThrow()>

	// Validation
	if (!(${helper.toParseExpression(validationField, helper.boolTypeReference, validationField.getValidationExpression(), null)})) {
		<#assign errorType="ParseValidationError">
		<#if !validationField.shouldFail()><#assign errorType="ParseAssertError"></#if>
		return nil, errors.WithStack(utils.${errorType}{Message: ${validationField.getDescription().orElse("\"Validation failed\"")}})<@emitImport import="github.com/pkg/errors" />
	}
                <#break>
			<#case "peek">
				<#assign peekField = field.asPeekField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}<#if peekField.offsetExpression.present>, ${helper.toParseExpression(peekField, helper.boolTypeReference, peekField.offsetExpression.get(), parserArguments)}<#else>, 0</#if>${helper.getFieldOptions(typedField, parserArguments)});
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
		</#switch>
		<#if field.isNamedField()
		&& !field.isAbstractField()
		&& !field.isConstField()
		&& !field.isChecksumField()
		&& !field.isImplicitField()
		&& !field.isDiscriminatorField()
		&& !(field.isOptionalField() && field.asOptionalField().orElseThrow().type.isComplexTypeReference())
		&& !field.isVirtualField()>
			<#assign namedField = field.asNamedField().orElseThrow()>
	m.${namedField.name?cap_first} = ${namedField.name}
		</#if>
		<#if field.isOptionalField() && field.asOptionalField().orElseThrow().type.isComplexTypeReference()>
	if _${namedField.name} != nil {
		${namedField.name} = *_${namedField.name}
		m.${namedField.name?cap_first} = ${namedField.name}
	}
		</#if>
		<#if field.isReservedField()>
	m.reservedField${reservedFieldIndex-1} = reservedField${reservedFieldIndex-1}
		</#if>
	</#list>

	if closeErr := readBuffer.CloseContext("${type.name}"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}

	<#if type.isDiscriminatedParentTypeDefinition()>
		<#if type.isDiscriminatedChildTypeDefinition()>
	parent._SubType = _child
		</#if>
	return _child, nil
	<#else>
	return m, nil
	</#if>
}

<#if type.isDiscriminatedParentTypeDefinition()>
func (pm *_${type.name}) serializeParent(ctx context.Context, writeBuffer utils.WriteBuffer, child ${type.name}, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
<#else>
func (m *_${type.name}) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background())))${helper.getEndiannessOptions(false, true, parserArguments)})
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_${type.name}) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
</#if>
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	<#if helper.hasFieldOfType("unknown")>
	return errors.New("Unknown field not serializable")
	<#else>
		<#if !type.isDiscriminatedChildTypeDefinition()>
	if pushErr :=writeBuffer.PushContext("${type.name}"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
		</#if>
		<#assign arraySizeInBytesHelpers=helper.requiresHelperFunctions("ARRAY_SIZE_IN_BYTES")>
		<#if arraySizeInBytesHelpers?has_content>
			<#list arraySizeInBytesHelpers?keys as key>
				<#assign typeName=arraySizeInBytesHelpers[key]>
	${key}ArraySizeInBytes := func(items ${typeName}) uint32 {
		var sizeInBytes uint32 = 0
		for _, v := range items {
			sizeInBytes += uint32(v.GetLengthInBytes(ctx))
		}
		return sizeInBytes
	}
			</#list>
		</#if>
		<#if type.isDiscriminatedChildTypeDefinition()>
	ser := func() error {
		if pushErr := writeBuffer.PushContext("${type.name}"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for ${type.name}")<@emitImport import="github.com/pkg/errors" />
		}
		</#if>
        <#assign reservedFieldIndex=0>
		<#list type.fields as field>
			<#switch field.typeName>
				<#case "array">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
					<#assign arrayField = field.asArrayField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<#if arrayField.type.elementTypeReference.isByteBased()>${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/io\"")}
					<@compress single_line=true>
	if err := WriteByteArrayField(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}(),
						WriteByteArray(writeBuffer, 8)
						${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#elseif arrayField.type.elementTypeReference.isSimpleTypeReference()>
					<@compress single_line=true>
	if err := WriteSimpleTypeArrayField(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}(),
						${helper.getDataWriterCall(arrayField.type.elementTypeReference, namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#else>
					<@compress single_line=true>
	if err := WriteComplexTypeArrayField(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}(),
						writeBuffer${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					</#if>
					<#break>
				<#case "checksum">
					<#assign checksumField = field.asChecksumField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteChecksumField[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}",
						${helper.toSerializationExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)},
						${helper.getDataWriterCall(typedField.type, namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)});err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "const">
					<#assign constField = field.asConstField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := <#if typedField.type.isEnumTypeReference()>
					WriteConstField(ctx, "${constField.name}",
						${type.name}_${namedField.name?upper_case}.getValue(),
						${helper.getDataWriterCall(helper.getEnumBaseTypeReference(typedField.type), namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
					WriteConstField(ctx, "${constField.name}",
						${type.name}_${namedField.name?upper_case},
						${helper.getDataWriterCall(typedField.type, namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)})
				</#if>;err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
				<#case "discriminator">
					<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := <#if typedField.type.isEnumTypeReference()>
						WriteDiscriminatorEnumField(ctx, "${namedField.name}",
							"${helper.getLanguageTypeNameForField(field)}",
							m.Get${discriminatorField.name?cap_first}(),
							${helper.getEnumDataWriterCall(typedField.type, namedField.name, "value")}
							${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
						WriteDiscriminatorField(ctx, "${namedField.name}",
							m.Get${discriminatorField.name?cap_first}(),
							${helper.getDataWriterCall(typedField.type, namedField.name)}
							${helper.getFieldOptions(typedField, parserArguments)})
				</#if>
						;err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
				<#case "enum">
					<#assign enumField = field.asEnumField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteEnumField(ctx, "${namedField.name}",
						"${helper.getLanguageTypeNameForField(field)}",
						m.Get${namedField.name?cap_first}(),
						${helper.getEnumDataWriterCall(typedField.type, namedField.name, enumField.fieldName)}
						${helper.getFieldOptions(typedField, parserArguments)});err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
				<#case "implicit">
					<#assign implicitField = field.asImplicitField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<#-- Implicit field values might be used in expressions, in order to avoid problems, we generate a temporary variable with the given name. -->
	${implicitField.name} := ${helper.getLanguageTypeNameForField(field)}(${helper.toSerializationExpression(implicitField, implicitField.type, implicitField.serializeExpression, parserArguments)});
	if err := WriteImplicitField(ctx, "${namedField.name}", ${implicitField.name}, ${helper.getDataWriterCall(typedField.type, namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});err != nil{
		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "manualArray">
					<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteManualArrayField[${helper.getLanguageTypeNameForTypeReference(manualArrayField.type.elementTypeReference)}](
						ctx,
						"${namedField.name}",
						m.Get${namedField.name?cap_first}(),
						func(ctx context.Context, writeBuffer utils.WriteBuffer,m ${helper.getLanguageTypeNameForTypeReference(manualArrayField.type.elementTypeReference)}) error {
						  return ${helper.toSerializationExpression(manualArrayField, manualArrayField.type.elementTypeReference, manualArrayField.serializeExpression, parserArguments)}
						},
						writeBuffer${helper.getFieldOptions(typedField, parserArguments)}); err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "manual">
					<#assign manualField = field.asManualField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteManualField[${helper.getLanguageTypeNameForField(typedField)}](
						ctx,
						"${namedField.name}",
						func(ctx context.Context) error {
							return ${helper.toSerializationExpression(manualField, typedField.type, manualField.serializeExpression, parserArguments)}
						},
						writeBuffer${helper.getFieldOptions(typedField, parserArguments)}); err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "optional">
					<#assign optionalField = field.asOptionalField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err :=
					<#if optionalField.type.isEnumTypeReference()>
	WriteOptionalEnumField[${helper.getLanguageTypeNameForField(field)}](
						ctx,
						"${optionalField.name}",
						"${helper.getLanguageTypeNameForField(field)}",
						<#if typedField.type.isComplexTypeReference()>GetRef(</#if>m.Get${optionalField.name?cap_first}()<#if typedField.type.isComplexTypeReference()>)</#if>,
						${helper.getEnumDataWriterCall(optionalField.type, optionalField.name, "value")}
						<#if optionalField.conditionExpression.present>
							, ${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}
						</#if>
						${helper.getFieldOptions(typedField, parserArguments)}
					)
					<#elseif optionalField.type.isDataIoTypeReference()>
	WriteOptionalField(
						ctx,
						"${optionalField.name}",
						<#if typedField.type.isComplexTypeReference()>GetRef(</#if>m.Get${optionalField.name?cap_first}()<#if typedField.type.isComplexTypeReference()>)</#if>,
						WriteDataIO(writeBuffer,
							func (wb utils.WriteBuffer, val any) error {
						return ${optionalField.type.asComplexTypeReference().orElseThrow().name}.
								StaticSerialize(wb, val
							<#if optionalField.type.asComplexTypeReference().orElseThrow().params?has_content>
							,
								<#list optionalField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>
								${helper.toParseExpression(optionalField, helper.anyTypeReference, param, parserArguments)}
									<#sep>, </#sep>
								</#list>
							</#if>
								)
							}
						)
						<#if optionalField.conditionExpression.present>
							,
							${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}
						</#if>
						${helper.getFieldOptions(typedField, parserArguments)})
					<#else>
	WriteOptionalField[${helper.getLanguageTypeNameForField(field)}](
						ctx,
						"${optionalField.name}",
						<#if typedField.type.isComplexTypeReference()>GetRef(</#if>m.Get${optionalField.name?cap_first}()<#if typedField.type.isComplexTypeReference()>)</#if>,
						${helper.getDataWriterCall(typedField.type, optionalField.name)},
						<#if helper.isGeneratePropertiesForParserArguments() && optionalField.conditionExpression.present>
							${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}
						<#else>
							true
						</#if>
						${helper.getFieldOptions(typedField, parserArguments)})
					</#if>
						;err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "padding">
					<#assign paddingField = field.asPaddingField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>

					<@compress single_line=true>
	if err := WritePaddingField[${helper.getLanguageTypeNameForField(paddingField)}](
						ctx,
						"padding",
						int(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)}),
						${helper.getLanguageTypeNameForField(field)}(${helper.toSerializationExpression(paddingField, paddingField.type, paddingField.paddingValue, parserArguments)}),
						${helper.getDataWriterCall(typedField.type, "padding")}${helper.getFieldOptions(typedField, parserArguments)}
						); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing 'padding' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "reserved">
					<#assign reservedField = field.asReservedField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteReservedField[${helper.getLanguageTypeNameForField(reservedField)}](
						ctx,
						"reserved",
						<#if helper.isGeneratePropertiesForReservedFields()>
							reservedField${reservedFieldIndex}!=nil?reservedField${reservedFieldIndex}:
						</#if>
						${helper.getReservedValue(reservedField)},
						${helper.getDataWriterCall(typedField.type, "reserved")}
						${helper.getFieldOptions(typedField, parserArguments)});
						<#assign reservedFieldIndex=reservedFieldIndex+1> err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing 'reserved' field number ${reservedFieldIndex}")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "simple">
					<#assign simpleField = field.asSimpleField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

				<@compress single_line=true>
					if err:=
					<#if typedField.type.isEnumTypeReference()>
	WriteSimpleEnumField[${helper.getLanguageTypeNameForField(simpleField)}](
						ctx,
						"${simpleField.name}",
						"${helper.getLanguageTypeNameForField(field)}",
						m.Get${simpleField.name?cap_first}(),
						${helper.getEnumDataWriterCall(simpleField.type, simpleField.name, "value")}
						${helper.getFieldOptions(typedField, parserArguments)}
					)
					<#elseif simpleField.type.isDataIoTypeReference()>
	WriteSimpleField[${helper.getLanguageTypeNameForField(simpleField)}](
						ctx,
						"${simpleField.name}",
						${simpleField.name},
						WriteDataIO(writeBuffer,
							func (wb utils.WriteBuffer, val any) error {
								return ${simpleField.type.asComplexTypeReference().orElseThrow().name}.
								StaticSerialize(wb, val
								<#if simpleField.type.asComplexTypeReference().orElseThrow().params?has_content>
								,
									<#list simpleField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>
									${helper.toParseExpression(simpleField, helper.anyTypeReference, param, parserArguments)}
									<#sep>, </#sep>
									</#list>
								</#if>
								)
							}
						)
						${helper.getFieldOptions(typedField, parserArguments)})));
					<#else>
	WriteSimpleField[${helper.getLanguageTypeNameForField(simpleField)}](
						ctx,
						"${simpleField.name}",
						m.Get${simpleField.name?cap_first}(),
						${helper.getDataWriterCall(typedField.type, simpleField.name)}
						${helper.getFieldOptions(typedField, parserArguments)})
					</#if>
						;err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "switch">
					<#assign switchField = field.asSwitchField().orElseThrow()>

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "virtual">
                	<#assign virtualField = field.asVirtualField().orElseThrow()>
                	<#assign typedField = field.asTypedField().orElseThrow()>
                	<#assign namedField = field.asNamedField().orElseThrow()>
	// Virtual field
	${namedField.name} := m.Get${namedField.name?cap_first}()
	_ =	${namedField.name}
	if _${namedField.name}Err := writeBuffer.WriteVirtual(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}()); _${namedField.name}Err != nil {
		return errors.Wrap(_${namedField.name}Err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
			</#switch>
		</#list>

		<#if type.isDiscriminatedChildTypeDefinition()>
		if popErr := writeBuffer.PopContext("${type.name}"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for ${type.name}")<@emitImport import="github.com/pkg/errors" />
		}
		return nil
	}
	return <#if type.isDiscriminatedParentTypeDefinition()>p</#if>m.${type.getParentType().orElseThrow().name}Contract.(*_${type.getParentType().orElseThrow().name}).serializeParent(ctx, writeBuffer, m, ser)
		<#else>
	if popErr := writeBuffer.PopContext("${type.name}"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
	return nil
		</#if>
	</#if>
}

<#if filteredParserArgumentsLocalToType?has_content>

////
// Arguments Getter

    <#list filteredParserArgumentsLocalToType as parserArgument>
func (m *_${type.name}) Get${parserArgument.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)} {
	return m.${parserArgument.name?cap_first}
}
    </#list>
//
////
</#if>

func (m *_${type.name}) Is${type.name}() {}

func (m *_${type.name}) DeepCopy() any {
	return m.deepCopy()
}

func (m *_${type.name}) deepCopy() *_${type.name} {
	if m==nil{
		return nil
	}
	_${type.name}Copy := &_${type.name} {
<#if type.parentType.isPresent()>
	m.${type.parentType.orElseThrow().name}Contract.(*_${type.parentType.orElseThrow().name}).deepCopy(),
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>
	nil, // will be set by child
</#if>
<#-- Property fields are fields that require a property in the pojo -->
<#if type.propertyFields?has_content>
	<#list type.propertyFields as field>
		<#if field.type.isComplexTypeReference()>
		m.${field.name?cap_first}.DeepCopy().(<#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(field.type)}),
		<#elseif field.type.isArrayTypeReference()>
			<#assign arrayElementTypeRef=field.type.asArrayTypeReference().orElseThrow().elementTypeReference/>
		utils.DeepCopySlice[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeRef)}, ${helper.getLanguageTypeNameForTypeReference(arrayElementTypeRef)}](m.${field.name?cap_first}),
		<#else>
		<#if helper.needsPointerAccess(field)>utils.CopyPtr[${helper.getLanguageTypeNameForField(field)}](</#if>m.${field.name?cap_first}<#if helper.needsPointerAccess(field)>)</#if>,
		</#if>
	</#list>
</#if>
<#if filteredParserArgumentsLocalToType?has_content>
	<#list filteredParserArgumentsLocalToType as parserArgument>
		m.${parserArgument.name?cap_first},
	</#list>
</#if>
<#assign reservedFields=type.getFields()?filter(f->f.isReservedField())>
<#if reservedFields?has_content>
	<#list reservedFields as reservedField>
		m.reservedField${reservedField?index},
	</#list>
</#if>
	}
<#if type.isDiscriminatedChildTypeDefinition()>
	m.${type.parentType.orElseThrow().name}Contract.(*_${type.parentType.orElseThrow().name})._SubType = m
</#if>
	return _${type.name}Copy
}


<#if !type.isDiscriminatedParentTypeDefinition()>
func (m *_${type.name}) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
</#if>

</@importSectionWithContentBelow>

</#outputformat>
