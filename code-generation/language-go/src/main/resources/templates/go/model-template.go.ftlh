<#--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<#-- Prevent freemarker from escaping stuff -->
<#outputformat "undefined">
<#-- Declare the name and type of variables passed in to the template -->
<#-- @ftlvariable name="languageName" type="java.lang.String" -->
<#-- @ftlvariable name="protocolName" type="java.lang.String" -->
<#-- @ftlvariable name="outputFlavor" type="java.lang.String" -->
<#-- @ftlvariable name="helper" type="org.apache.plc4x.language.go.GoLanguageTemplateHelper" -->
<#-- @ftlvariable name="tracer" type="org.apache.plc4x.plugins.codegenerator.protocol.freemarker.Tracer" -->
<#-- @ftlvariable name="type" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
${helper.fileName(protocolName, languageName, outputFlavor)?replace(".", "/")}/model/${type.name}.go
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

<#macro importSectionWithContentBelow>
	<#local sectionContent><#nested></#local>
import (
	<#if helper.getRequiredImports()?has_content>
	<#list helper.getRequiredImports() as import>
	${import}
	</#list>
	</#if>
)

	${sectionContent}
</#macro>

<#macro emitImport import>${helper.emitRequiredImport(import)}</#macro>
<#macro emitImportWithAlias alias import>${helper.emitRequiredImport(alias, import)}</#macro>

<@importSectionWithContentBelow><@emitImport import="github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils" />
// Code generated by code-generation. DO NOT EDIT.

<#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
<#if type.parserArguments.isPresent()><#assign parserArguments=type.allParserArguments.orElseThrow()></#if>
<#if type.constFields?has_content>

// Constant values.
	<#list type.constFields as field>
		<#if helper.isEnumField(field)>
const ${type.name}_${field.name?upper_case} ${helper.getLanguageTypeNameForField(field)} = ${helper.toParseExpression(field, field.type, field.referenceValue, parserArguments)}
		<#else>
const ${type.name}_${field.name?upper_case} ${helper.getLanguageTypeNameForField(field)} = ${helper.toParseExpression(field, field.type, field.referenceValue, parserArguments)}
		</#if>
	</#list>
</#if>

// The data-structure of this message
type ${type.name} struct {
<#if type.parentType??>
	*${type.parentType.name}
</#if>
<#-- Property fields are fields that require a property in the pojo -->
<#if type.propertyFields?has_content>
	<#list type.propertyFields as field>
	${field.name?cap_first} <#if field.loopType??>[]</#if><#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
	</#list>
</#if>
<#if type.virtualFields?has_content>
    <#list type.virtualFields as field>
        ${field.name?cap_first} <#if field.loopType??>[]</#if><#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
    </#list>
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>
	Child I${type.name}Child
</#if>
}

// The corresponding interface
type I${type.name} interface {
<#if type.isDiscriminatedParentTypeDefinition()>
	<#list helper.getDiscriminatorTypes() as discriminatorName, discriminatorType>
	<#-- If the discriminator name matches that of another field, suppress the methods generation -->
		<#if !type.isNonDiscriminatorField(discriminatorName)>
			<#assign typeRef=helper.getDiscriminatorTypes()[discriminatorName]>
	${discriminatorName?cap_first}() <#if typeRef.isComplexTypeReference() && !helper.isEnumTypeReference(typeRef)>I</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
		</#if>
	</#list>
</#if>
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}
<#if type.isDiscriminatedChildTypeDefinition()>
	<#assign discriminatedChildType = type.asDiscriminatedComplexTypeDefinition().orElseThrow()>

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
	<#list discriminatedChildType.getDiscriminatorMap() as discriminatorName, discriminatorTerm>
		<#-- If the discriminator name matches that of another field, suppress the methods generation -->
		<#if !type.isNonDiscriminatorField(discriminatorName)>
            <#assign typeRef=helper.getDiscriminatorTypes()[discriminatorName]>
func (m *${type.name}) ${discriminatorName?cap_first}() <#if typeRef.isComplexTypeReference() && !helper.isEnumTypeReference(typeRef)>I</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
			<@compress single_line=true>
	return
				<#if discriminatorTerm?? && !helper.isWildcard(discriminatorTerm)>
					<#if helper.isComplexTypeReference(typeRef)>
						<#if helper.isEnumTypeReference(typeRef)>
                            <#assign enumType=helper.getLanguageTypeNameForTypeReference(typeRef)>
                            <#assign enumTypeWithoutTraces=tracer.removeTraces(enumType)>
                            <#assign enumTypeTraces=tracer.extractTraces(enumType)>
                            <#assign enumValue=helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)>
                            <#assign enumValueWithoutTraces=tracer.removeTraces(enumValue)>
                            <#assign enumValueTraces=tracer.extractTraces(enumValue)>
                            ${enumTypeTraces}${enumValueTraces}${enumTypeWithoutTraces}_${enumValueWithoutTraces}
						<#else>
							${helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)}
						</#if>
					<#else>
						${helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)}
					</#if>
				<#else>
					${helper.getNullValueForTypeReference(typeRef)}
				</#if>
			</@compress>
}

		</#if>
	</#list>
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>

type I${type.name}Parent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child I${type.name}, serializeChildFunction func() error) error
	GetTypeName() string
}

type I${type.name}Child interface {
	Serialize(writeBuffer utils.WriteBuffer) error
<@compress single_line=true>
	InitializeParent(parent *${type.name}
	<#if type.getPropertyFields()?has_content>, </#if>
	<#list type.getPropertyFields() as field>
		${field.name}
		<#if field.loopType??>[]</#if>
		<#if helper.needsPointerAccess(field)>*</#if>
		${helper.getLanguageTypeNameForField(field)}
		<#sep>, </#sep>
	</#list>
	<#if type.virtualFields?has_content>, </#if>
	<#list type.virtualFields as field>
		${field.name}
		<#if field.loopType??>[]</#if>
		<#if helper.needsPointerAccess(field)>*</#if>
		${helper.getLanguageTypeNameForField(field)}
		<#sep>, </#sep>
		</#list>
	)
</@compress>

	GetTypeName() string
	I${type.name}
}
	<#--list helper.getDiscriminatorTypes() as discriminatorName, discriminatorType>
	<#- If the discriminator name matches that of another field, suppress the methods generation ->
		<#if !helper.isNonDiscriminatorField(discriminatorName)>
func ${type.name}${discriminatorName?cap_first}(m I${type.name}) ${helper.getLanguageTypeNameForTypeReference(helper.getDiscriminatorTypes()[discriminatorName])} {
	return m.${discriminatorName?cap_first}()
}
		</#if>
	</#list-->
<#elseif type.parentType??>

<@compress single_line=true>
func (m *${type.name}) InitializeParent(parent *${type.parentType.name}
	<#assign parentTypeHasPropertyFields=type.parentType.asComplexTypeDefinition().orElseThrow().allPropertyFields?has_content>
	<#if parentTypeHasPropertyFields>, </#if>
    <#list type.parentPropertyFields as parentField>
        ${parentField.name}
        <#if parentField.loopType??>[]</#if>
        <#if helper.needsPointerAccess(parentField)>*</#if>
        ${helper.getLanguageTypeNameForField(parentField)}
        <#sep>, </#sep>
    </#list>
    <#assign parentTypeHasVritualFields=type.parentType.asComplexTypeDefinition().orElseThrow().virtualFields?has_content>
	<#if parentTypeHasVritualFields>, </#if>
	<#list type.parentType.asComplexTypeDefinition().orElseThrow().virtualFields as parentField>
		${parentField.name}
		<#if parentField.loopType??>[]</#if>
		<#if helper.needsPointerAccess(parentField)>*</#if>
		${helper.getLanguageTypeNameForField(parentField)}
		<#sep>, </#sep>
	</#list>
	)
	{
</@compress>
	<#list type.parentType.asComplexTypeDefinition().orElseThrow().allPropertyFields as field>
	m.${field.name?cap_first} = ${field.name}
	</#list>
}
</#if>

<@compress single_line=true>
func New${type.name}(
	<#list type.propertyFields as field>
		${field.name} <#if field.loopType??>[]</#if><#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
		<#sep>, </#sep>
	</#list>
	<#if type.propertyFields?has_content && type.virtualFields?has_content>, </#if>
	<#list type.virtualFields as field>
		${field.name} <#if field.loopType??>[]</#if><#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}<#sep>, </#sep>
	</#list>
	<#if type.parentType?has_content>
		<#if (type.propertyFields?has_content || type.virtualFields?has_content ) && type.parentPropertyFields?has_content>, </#if>
		<#list type.parentPropertyFields as parentField>
			${parentField.name} <#if parentField.loopType??>[]</#if><#if helper.needsPointerAccess(parentField)>*</#if>${helper.getLanguageTypeNameForField(parentField)}
			<#sep>, </#sep>
		</#list>
        <#if (type.propertyFields?has_content || type.virtualFields?has_content || type.parentPropertyFields?has_content) && type.parentType.asComplexTypeDefinition().orElseThrow().virtualFields?has_content>, </#if>
        <#list type.parentType.asComplexTypeDefinition().orElseThrow().virtualFields as parentField>
            ${parentField.name} <#if parentField.loopType??>[]</#if><#if helper.needsPointerAccess(parentField)>*</#if>${helper.getLanguageTypeNameForField(parentField)}
            <#sep>, </#sep>
        </#list>
	</#if>
	) *<#if type.parentType?has_content>${type.parentType.name}<#else>${type.name}</#if> {
</@compress>
<#if type.parentType?has_content>
	child := &${type.name}{
	<#list type.propertyFields as field>
		${field.name?cap_first}: ${field.name},
	</#list>
	<#list type.virtualFields as field>
		${field.name?cap_first}: ${field.name},
	</#list>
    	${type.parentType.name}: New${type.parentType.name}(<#list type.parentPropertyFields as parentField>${parentField.name}<#sep>, </#list><#if type.parentPropertyFields?has_content && type.parentType.asComplexTypeDefinition().orElseThrow().virtualFields?has_content>, </#if><#list type.parentType.asComplexTypeDefinition().orElseThrow().virtualFields as parentField>${parentField.name}<#sep>, </#list>),
	}
	child.Child = child
	return child.${type.parentType.name}
<#else>
	return &${type.name}{<#list type.propertyFields as field>${field.name?cap_first}: ${field.name}<#sep>, </#sep></#list><#if type.propertyFields?has_content && type.virtualFields?has_content>, </#if><#list type.virtualFields as field>${field.name?cap_first}: ${field.name}<#sep>, </#sep></#list>}
</#if>
}

func Cast${type.name}(structType interface{}) *${type.name} {
	castFunc := func(typ interface{}) *${type.name} {
		if casted, ok := typ.(${type.name}); ok {
			return &casted
		}
		if casted, ok := typ.(*${type.name}); ok {
			return casted
		}
	<#if type.parentType?has_content>
		if casted, ok := typ.(${type.parentType.name}); ok {
			return Cast${type.name}(casted.Child)
		}
		if casted, ok := typ.(*${type.parentType.name}); ok {
			return Cast${type.name}(casted.Child)
		}
	</#if>
		return nil
	}
	return castFunc(structType)
}

func (m *${type.name}) GetTypeName() string {
	return "${type.name}"
}

func (m *${type.name}) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

<#-- TODO: use serializer args instead of a fixed bool for one case -->
func (m *${type.name}) LengthInBitsConditional(lastItem bool) uint16 {
	<#if type.isDiscriminatedParentTypeDefinition()>
	return m.Child.LengthInBits()
	<#else>
		<#if type.isDiscriminatedChildTypeDefinition()>
	lengthInBits := uint16(m.ParentLengthInBits())
		<#else>
	lengthInBits := uint16(0)
		</#if>
		<#list type.fields as field>
			<#switch field.typeName>
				<#case "array">
					<#assign arrayField = field.asArrayField().orElseThrow()>

	// Array field
	if len(m.${arrayField.name?cap_first}) > 0 {
				<#if arrayField.type.isVstringTypeReference()>
                    <#assign vstringTypeReference = arrayField.type.asVstringTypeReference().orElseThrow()>
		lengthInBits += uint16(${helper.toSerializationExpression(arrayField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)}) * uint16(len(m.${arrayField.name?cap_first}))
				<#elseif helper.isSimpleTypeReference(arrayField.type)>
                    <#assign simpleTypeReference = arrayField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits} * uint16(len(m.${arrayField.name?cap_first}))
				<#else>
				<#if arrayField.isCountArrayField()>
		for i, element := range m.${arrayField.name?cap_first} {
			last := i == len(m.${arrayField.name?cap_first}) -1
			lengthInBits += element.LengthInBitsConditional(last)
				<#else>
		for _, element := range m.${arrayField.name?cap_first} {
			lengthInBits += element.LengthInBits()
				</#if>
		}
				</#if>
	}
					<#break>
				<#case "checksum">
					<#assign checksumField = field.asChecksumField().orElseThrow()>
					<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "const">
					<#assign constField = field.asConstField().orElseThrow()>

	// Const Field (${constField.name})
				<#if constField.type.isVstringTypeReference()>
					<#assign vstringTypeReference = constField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(constField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
				<#else>
                    <#assign simpleTypeReference = constField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits}
				</#if>
					<#break>
				<#case "discriminator">
					<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
	// Discriminator Field (${discriminatorField.name})
		<#if helper.isSimpleTypeReference(discriminatorField.type)>
            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
			<#if discriminatorField.type.isVstringTypeReference()>
                <#assign vstringTypeReference = discriminatorField.type.asVstringTypeReference().orElseThrow()>
			lengthInBits += uint16(${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
			<#else>
			lengthInBits += ${simpleTypeReference.sizeInBits};
			</#if>
		<#elseif helper.isEnumField(discriminatorField)>
		lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
		<#else>
		lengthInBits += ${discriminatorField.name}.getLengthInBits();
		</#if>
					<#break>
				<#case "enum">
					<#assign enumField = field.asEnumField().orElseThrow()>

	// Enum Field (${enumField.name})
	lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits}
					<#break>
				<#case "implicit">
					<#assign implicitField = field.asImplicitField().orElseThrow()>
					<#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

	// Implicit Field (${implicitField.name})
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "manualArray">
					<#assign manualArrayField = field.asManualArrayField().orElseThrow()>

	// Manual Array Field (${manualArrayField.name})
	${manualArrayField.name} := m.${manualArrayField.name?cap_first}<#-- TODO: ugly workaround for missing static evaluation-->
	lengthInBits += ${helper.toParseExpression(manualArrayField, helper.intTypeReference, manualArrayField.lengthExpression, parserArguments)} * 8
					<#break>
				<#case "manual">
					<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	lengthInBits += uint16(${helper.toParseExpression(manualField, helper.intTypeReference, manualField.lengthExpression, parserArguments)})
					<#break>
				<#case "optional">
					<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name})
	if m.${optionalField.name?cap_first} != nil {
					<#if helper.isSimpleTypeReference(optionalField.type)>
						<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits}
					<#elseif helper.isEnumField(field)>
		lengthInBits += ${helper.getEnumBaseTypeReference(optionalField.type).sizeInBits}
					<#else>
		lengthInBits += (*m.${optionalField.name?cap_first}).LengthInBits()
					</#if>
	}
					<#break>
				<#case "padding">
					<#assign paddingField = field.asPaddingField().orElseThrow()>
					<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
	for ;_timesPadding > 0; _timesPadding-- {
		lengthInBits += ${simpleTypeReference.sizeInBits}
	}
					<#break>
				<#case "reserved">
					<#assign reservedField = field.asReservedField().orElseThrow()>
					<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "simple">
					<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple field (${simpleField.name})
					<#if helper.isSimpleTypeReference(simpleField.type)>
						<#if simpleField.type.isVstringTypeReference()>
							<#assign vstringTypeReference = simpleField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
						<#else>
							<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits};
						</#if>
					<#elseif helper.isEnumField(field)>
	lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits}
					<#else>
	lengthInBits += m.${simpleField.name?cap_first}.LengthInBits()
					</#if>
					<#break>
				<#case "switch">
					<#assign switchField = field.asSwitchField().orElseThrow()>

	// Length of sub-type elements will be added by sub-type...
	lengthInBits += m.Child.LengthInBits()
					<#break>
				<#case "unknown">
					<#assign unknownField = field.asUnknownField().orElseThrow()>
					<#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

	// Unknown field
	lengthInBits += ${simpleTypeReference.sizeInBits}

					<#break>
				<#case "virtual">
					<#assign virtualField = field.asVirtualField().orElseThrow()>

	// A virtual field doesn't have any in- or output.
					<#break>
			</#switch>
		</#list>

	return lengthInBits
	</#if>
}

<#if type.isDiscriminatedParentTypeDefinition()>
func (m *${type.name}) ParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	<#list type.fields as field>
		<#switch field.typeName>
			<#case "array">
				<#assign arrayField = field.asArrayField().orElseThrow()>

	// Array field
	if len(m.${arrayField.name?cap_first}) > 0 {
				<#if arrayField.type.isVstringTypeReference()>
					<#assign vstringTypeReference=arrayField.type.asVstringTypeReference().orElseThrow()>
		lengthInBits += uint16(${helper.toSerializationExpression(arrayField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)}) * uint16(len(m.${arrayField.name?cap_first}))
				<#elseif helper.isSimpleTypeReference(arrayField.type)>
                    <#assign simpleTypeReference = arrayField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits} * uint16(len(m.${arrayField.name?cap_first}))
				<#else>
					<#if arrayField.isCountArrayField()>
		for i, element := range m.${arrayField.name?cap_first} {
			last := i >= len(m.${arrayField.name?cap_first}) -1
			lengthInBits += element.LengthInBitsConditional(last)
					<#else>
		for _, element := range m.${arrayField.name?cap_first} {
			lengthInBits += element.LengthInBits()
					</#if>
		}
				</#if>
				}
				<#break>
			<#case "checksum">
				<#assign checksumField = field.asChecksumField().orElseThrow()>
				<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	lengthInBits += ${simpleTypeReference.sizeInBits}
				<#break>
			<#case "const">
				<#assign constField = field.asConstField().orElseThrow()>
				<#assign simpleTypeReference = constField.type>

	// Const Field (${constField.name})
				<#if constField.type.isVstringTypeReference()>
                    <#assign vstringTypeReference = constField.type.asVstringTypeReference().orElseThrow()>
					lengthInBits += uint16(${helper.toSerializationExpression(constField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
				<#elseif helper.isEnumTypeReference(constField.type)>
	lengthInBits += ${helper.getEnumBaseTypeReference(constField.type).sizeInBits};
				<#else>
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits}
				</#if>
				<#break>
			<#case "discriminator">
				<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
				<#assign simpleTypeReference = discriminatorField.type>
	// Discriminator Field (${discriminatorField.name})
				<#if helper.isSimpleTypeReference(simpleTypeReference)>
					<#if discriminatorField.type.isVstringTypeReference()>
                        <#assign vstringTypeReference = discriminatorField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, discriminatorField.lengthExpression, parserArguments)})
					<#else>
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits};
					</#if>
				<#elseif helper.isEnumField(discriminatorField)>
	lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
				<#else>
	lengthInBits += ${discriminatorField.name}.getLengthInBits();
				</#if>
				<#break>
			<#case "enum">
				<#assign enumField = field.asEnumField().orElseThrow()>

	// Enum Field (${enumField.name})
	lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits}
				<#break>
			<#case "implicit">
				<#assign implicitField = field.asImplicitField().orElseThrow()>
				<#assign simpleTypeReference = implicitField.type>

	// Implicit Field (${implicitField.name})
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits}
				<#break>
			<#case "manualArray">
				<#assign manualArrayField = field.asManualArrayField().orElseThrow()>

	// Manual Array Field (${manualArrayField.name})
	lengthInBits += ${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.lengthExpression, parserArguments)} * 8
				<#break>
			<#case "manual">
				<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	lengthInBits += ${helper.toParseExpression(manualField, manualField.type, manualField.lengthExpression, parserArguments)} * 8
				<#break>
			<#case "optional">
				<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name})
	if m.${optionalField.name?cap_first} != nil {
				<#if helper.isSimpleTypeReference(optionalField.type)>
					<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits}
				<#elseif helper.isEnumField(field)>
		lengthInBits += ${helper.getEnumBaseTypeReference(optionalField.type).sizeInBits}
				<#else>
		lengthInBits += (*m.${optionalField.name?cap_first}).LengthInBits()
				</#if>
	}
				<#break>
			<#case "padding">
				<#assign paddingField = field.asPaddingField().orElseThrow()>
				<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
	for ;_timesPadding > 0; _timesPadding-- {
		lengthInBits += ${simpleTypeReference.sizeInBits}
	}
				<#break>
			<#case "reserved">
				<#assign reservedField = field.asReservedField().orElseThrow()>
				<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	lengthInBits += ${simpleTypeReference.sizeInBits}
				<#break>
			<#case "simple">
				<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple field (${simpleField.name})
				<#if helper.isSimpleTypeReference(simpleField.type)>
					<#if simpleField.type.isVstringTypeReference()>
						<#assign vstringTypeReference = simpleField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
					<#else>
						<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits};
					</#if>
				<#elseif helper.isEnumField(field)>
	lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits}
				<#else>
	lengthInBits += m.${simpleField.name?cap_first}.LengthInBits()
				</#if>
				<#break>
			<#case "unknown">
				<#assign unknownField = field.asUnknownField().orElseThrow()>
			<#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

	// Unknown field
	lengthInBits += ${simpleTypeReference.sizeInBits}

				<#break>
			<#case "virtual">
				<#assign virtualField = field.asVirtualField().orElseThrow()>

	// A virtual field doesn't have any in- or output.
				<#break>
		</#switch>
	</#list>

	return lengthInBits
}
</#if>

func (m *${type.name}) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

<#assign hasParserArguments=parserArguments?has_content/>
<#assign parserArgumentList><#if hasParserArguments><#list parserArguments as parserArgument>${parserArgument.name} <#if helper.isComplexTypeReference(parserArgument.type) && !helper.isEnumTypeReference(parserArgument.type)>*</#if>${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}<#sep>, </#sep></#list></#if></#assign>
func ${type.name}Parse(readBuffer utils.ReadBuffer<#if hasParserArguments>, ${parserArgumentList}</#if>) (*<#if type.parentType?has_content>${type.parentType.name}<#else>${type.name}</#if>, error) {
	if pullErr := readBuffer.PullContext("${type.name}"); pullErr != nil {
		return nil, pullErr
	}
	<#if helper.requiresStartPosAndCurPos()>
	var startPos = readBuffer.GetPos()
	var curPos uint16
	</#if>
	<#list type.fields as field>
		<#switch field.typeName>
			<#case "array">
				<#assign arrayField = field.asArrayField().orElseThrow()>
				<#if arrayField.type.isByteBased()>
	// Byte Array field (${arrayField.name})
	<#assign numberOfBytesExpression>
		<#compress>
		<#if field.isCountArrayField()>
			numberOfBytes${arrayField.name} := int(${helper.toIntegerParseExpression(field, 16, arrayField.loopExpression, parserArguments)})
		<#elseif field.isLengthArrayField()>
			numberOfBytes${arrayField.name} := int(${helper.toIntegerParseExpression(field, 16, arrayField.loopExpression, parserArguments)})
		<#elseif field.isTerminatedArrayField()>
			<#-- TODO: we need to find out to implement this-->
			numberOfBytes${arrayField.name} := int(${helper.toIntegerParseExpression(field, 16, arrayField.loopExpression, parserArguments)})
		<#else>
			<#-- TODO: we should throw a exception here-->
			numberOfBytes${arrayField.name} := int(-1)
		</#if>
		</#compress>
	</#assign>
	${numberOfBytesExpression}
	${arrayField.name}, _readArrayErr := readBuffer.ReadByteArray("${arrayField.name}", numberOfBytes${arrayField.name})
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing '${arrayField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#else>

	// Array field (${arrayField.name})
	if pullErr := readBuffer.PullContext("${arrayField.name}", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
			<#-- Only update curPos if the length expression uses it -->
					<#if arrayField.loopExpression.contains("curPos")>
	curPos = readBuffer.GetPos() - startPos
					</#if>
			<#-- If this is a count array, we can directly initialize an array with the given size -->
					<#if field.isCountArrayField()>
	// Count array
	${arrayField.name} := make([]<#if helper.isComplexTypeReference(arrayField.type)>*</#if>${helper.getLanguageTypeNameForField(field)}, ${helper.toIntegerParseExpression(arrayField, 16, arrayField.loopExpression, parserArguments)})
	{
		for curItem := uint16(0); curItem < uint16(${helper.toIntegerParseExpression(arrayField, 16, arrayField.loopExpression, parserArguments)}); curItem++ {
						<#if (!helper.isSimpleTypeReference(arrayField.type)) && helper.requiresVariable(arrayField, "lastItem")>
			lastItem := curItem == uint16(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)} - 1)
						</#if>
			_item, _err := <#if helper.isSimpleTypeReference(arrayField.type)>${helper.getReadBufferReadMethodCall("", arrayField.type.asSimpleTypeReference().orElseThrow(), arrayField)}<#else>${arrayField.type.asComplexTypeReference().orElseThrow().name}Parse(readBuffer<#if arrayField.type.asComplexTypeReference().orElseThrow().params.isPresent()>, <#list arrayField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as parserArgument><#if <#--TODO: here DF1ResponseMessage throws a payloadLength not present: meaning that some feature is not rightfully implemented as the result should be a error not a missing pointer-->type.getPropertyFieldFromThisOrParentByName(parserArgument.name).isPresent() && type.getPropertyFieldFromThisOrParentByName(parserArgument.name).orElseThrow().isOptionalField()>*</#if>${helper.toTypedParseExpression(arrayField, helper.getArgumentType(arrayField.type, parserArgument?index), parserArgument, parserArguments)}<#sep>, </#sep></#list></#if>)</#if>
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing '${arrayField.name}' field")<@emitImport import="github.com/pkg/errors" />
			}
			${arrayField.name}[curItem] = _item
		}
	}
				<#-- In all other cases do we have to work with a list, that is later converted to an array -->
					<#elseif field.isLengthArrayField()>
				<#-- For a length array, we read data till the read position of the buffer reaches a given position -->
	// Length array
	${arrayField.name} := make([]<#if helper.isComplexTypeReference(arrayField.type)>*</#if>${helper.getLanguageTypeNameForField(field)}, 0)
	{
		_${arrayField.name}Length := ${helper.toIntegerParseExpression(arrayField, 16, arrayField.loopExpression, parserArguments)}
		_${arrayField.name}EndPos := readBuffer.GetPos() + uint16(_${arrayField.name}Length)
		for ;readBuffer.GetPos() < _${arrayField.name}EndPos; {
			_item, _err := <#if helper.isSimpleTypeReference(arrayField.type)>${helper.getReadBufferReadMethodCall("", arrayField.type.asSimpleTypeReference().orElseThrow(), arrayField)}<#else>${arrayField.type.asComplexTypeReference().orElseThrow().name}Parse(readBuffer<#if arrayField.type.asComplexTypeReference().orElseThrow().params.isPresent()>, <#list arrayField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as parserArgument><#if <#--TODO: here DF1ResponseMessage throws a payloadLength not present: meaning that some feature is not rightfully implemented as the result should be a error not a missing pointer-->type.getPropertyFieldFromThisOrParentByName(parserArgument.name).isPresent() && type.getPropertyFieldFromThisOrParentByName(parserArgument.name).orElseThrow().isOptionalField()>*</#if>${helper.toTypedParseExpression(arrayField, helper.getArgumentType(arrayField.type, parserArgument?index), parserArgument, parserArguments)}<#sep>, </#sep></#list></#if>)</#if>
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing '${arrayField.name}' field")<@emitImport import="github.com/pkg/errors" />
			}
			${arrayField.name} = append(${arrayField.name}, _item)
						<#-- After parsing, update the current position, but only if it's needed -->
							<#if arrayField.loopExpression.contains("curPos")>
			curPos = readBuffer.GetPos() - startPos
							</#if>
		}
	}
					<#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
					<#elseif field.isTerminatedArrayField()>
	// Terminated array
	${arrayField.name} := make([]<#if helper.needsPointerAccess(arrayField)>*</#if>${helper.getLanguageTypeNameForField(field)}, 0)
	{
		for ;!bool(${helper.toParseExpression(arrayField, helper.boolTypeReference, arrayField.loopExpression, parserArguments)}); {
						<@compress single_line=true>
			_item, _err :=
							<#if helper.isSimpleTypeReference(arrayField.type)>
								${helper.getReadBufferReadMethodCall("", arrayField.type.asSimpleTypeReference().orElseThrow(), arrayField)}
							<#else>
								${arrayField.type.asComplexTypeReference().orElseThrow().name}Parse(readBuffer
								<#if arrayField.type.asComplexTypeReference().orElseThrow().params.isPresent()>
									,
									<#list arrayField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as parserArgument>
										<#if <#--TODO: here DF1ResponseMessage throws a payloadLength not present: meaning that some feature is not rightfully implemented as the result should be a error not a missing pointer-->type.getPropertyFieldFromThisOrParentByName(parserArgument.name).isPresent() && helper.needsPointerAccess(type.getPropertyFieldFromThisOrParentByName(parserArgument.name).orElseThrow())>*</#if>
										${helper.toTypedParseExpression(arrayField, helper.getArgumentType(arrayField.type, parserArgument?index), parserArgument, parserArguments)}
										<#sep>, </#sep>
									</#list>
								</#if>
								)
							</#if>
						</@compress>

			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing '${arrayField.name}' field")<@emitImport import="github.com/pkg/errors" />
			}
						<#if helper.isSimpleTypeReference(arrayField.type)>
			${arrayField.name} = append(${arrayField.name}, _item)
						<#else>
			${arrayField.name} = append(${arrayField.name}, Cast${arrayField.type.asComplexTypeReference().orElseThrow().name}(_item))
						</#if>

						<#-- After parsing, update the current position, but only if it's needed -->
							<#if arrayField.loopExpression.contains("curPos")>
			curPos = readBuffer.GetPos() - startPos
							</#if>
		}
	}
					</#if>
	if closeErr := readBuffer.CloseContext("${arrayField.name}", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}
				</#if>
				<#break>
			<#case "checksum">
				<#assign checksumField = field.asChecksumField().orElseThrow()>
				<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	{
		checksumRef, _checksumRefErr := ${helper.getReadBufferReadMethodCall("checksum", simpleTypeReference, checksumField)}
		if _checksumRefErr != nil {
			return nil, errors.Wrap(_checksumRefErr, "Error parsing 'checksum' field")<@emitImport import="github.com/pkg/errors" />
		}
		checksum, _checksumErr := ${helper.toParseExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)}
		if _checksumErr != nil {
			return nil, errors.Wrap(_checksumErr, "Error parsing 'checksum' field")<@emitImport import="github.com/pkg/errors" />
		}
		if checksum != checksumRef {
			return nil, errors.Errorf("Checksum verification failed. Expected %d but got %d", (checksumRef & 0xFFFF), (checksum & 0xFFFF))<@emitImport import="github.com/pkg/errors" />
		}
	}
				<#break>
			<#case "const">
				<#assign constField = field.asConstField().orElseThrow()>

	// Const Field (${constField.name})
				<#if helper.isEnumTypeReference(constField.type)>
                    <#--<#assign constField=constField.asEnumField().orElseThrow()>-->
					<#-- TODO: finish me-->
                    <#if false && constField.fieldName.isPresent()>
	${constField.name}${constField.fieldName.orElseThrow()?cap_first}, _${constField.name}${constField.fieldName.orElseThrow()?cap_first}Err := ${helper.getReadBufferReadMethodCall(constField.name, helper.getEnumFieldSimpleTypeReference(constField.type, constField.fieldName.orElseThrow()), constField)}
	if _${constField.name}${constField.fieldName.orElseThrow()?cap_first}Err != nil {
		return nil, errors.Wrap(_${constField.name}${constField.fieldName.orElseThrow()?cap_first}Err, "Error serializing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
	${constField.name}, _${constField.name}Err := ${helper.getLanguageTypeNameForField(field)}FirstEnumForField${constField.fieldName.orElseThrow()?cap_first}(${constField.name}${constField.fieldName.orElseThrow()?cap_first})
	if _${constField.name}Err != nil {
		return nil, errors.Wrap(_${constField.name}Err, "Error serializing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
                    <#else>
	${constField.name}, _${constField.name}Err := ${helper.getLanguageTypeNameForField(field)}Parse(readBuffer)
	if _${constField.name}Err != nil {
		return nil, errors.Wrap(_${constField.name}Err, "Error parsing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
                    </#if> 
				<#else>
	${constField.name}, _${constField.name}Err := ${helper.getReadBufferReadMethodCall(constField.name, constField.type.asSimpleTypeReference().orElseThrow(), constField)}
				</#if>
	if _${constField.name}Err != nil {
		return nil, errors.Wrap(_${constField.name}Err, "Error parsing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
	if ${constField.name} != ${type.name}_${constField.name?upper_case} {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", ${type.name}_${constField.name?upper_case}) + " but got " + fmt.Sprintf("%d", ${constField.name}))<@emitImport import="github.com/pkg/errors" /><@emitImport import="fmt" />
	}
				<#break>
			<#case "discriminator">
				<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>

	// Discriminator Field (${discriminatorField.name}) (Used as input to a switch field)
	<#if helper.isEnumField(field)>
	${helper.getVariableName(field)}_temp, _${discriminatorField.name}Err := ${helper.getLanguageTypeNameForField(discriminatorField)}Parse(readBuffer)
	var ${helper.getVariableName(field)} ${helper.getLanguageTypeNameForField(discriminatorField)} = ${helper.getVariableName(field)}_temp
	<#else>
        <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
	${helper.getVariableName(field)}, _${discriminatorField.name}Err := ${helper.getReadBufferReadMethodCall(discriminatorField.name, simpleTypeReference, discriminatorField)}
	</#if>
	if _${discriminatorField.name}Err != nil {
	return nil, errors.Wrap(_${discriminatorField.name}Err, "Error parsing '${discriminatorField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "enum">
				<#assign enumField = field.asEnumField().orElseThrow()>

	if pullErr := readBuffer.PullContext("${enumField.name}"); pullErr != nil {
		return nil, pullErr
	}
	// Enum field (${enumField.name})
	${enumField.name}${enumField.fieldName?cap_first}, _${enumField.name}${enumField.fieldName?cap_first}Err := ${helper.getReadBufferReadMethodCall(enumField.type.name, helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName), enumField)}
	if _${enumField.name}${enumField.fieldName?cap_first}Err != nil {
		return nil, errors.Wrap(_${enumField.name}${enumField.fieldName?cap_first}Err, "Error serializing '${enumField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
	${enumField.name}, _${enumField.name}Err := ${helper.getLanguageTypeNameForField(field)}FirstEnumForField${enumField.fieldName?cap_first}(${enumField.name}${enumField.fieldName?cap_first})
	if _${enumField.name}Err != nil {
		return nil, errors.Wrap(_${enumField.name}Err, "Error serializing '${enumField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
	if closeErr := readBuffer.CloseContext("${enumField.name}"); closeErr != nil {
		return nil, closeErr
	}
				<#break>
			<#case "implicit">
				<#assign implicitField = field.asImplicitField().orElseThrow()>
				<#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

	// Implicit Field (${implicitField.name}) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	${implicitField.name}, _${implicitField.name}Err := ${helper.getReadBufferReadMethodCall(implicitField.name, simpleTypeReference, implicitField)}
	_ = ${implicitField.name}
	if _${implicitField.name}Err != nil {
		return nil, errors.Wrap(_${implicitField.name}Err, "Error parsing '${implicitField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "manualArray">
				<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
	if pullErr := readBuffer.PullContext("${manualArrayField.name}", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Manual Array Field (${manualArrayField.name})
			<#-- Only update curPos if the length expression uses it -->
				<#if manualArrayField.loopExpression.contains("curPos")>
	curPos = readBuffer.GetPos() - startPos
				</#if>
			<#-- If this is a count array, we can directly initialize an array with the given size -->
				<#if field.isCountArrayField()>
	// Count array
	_${manualArrayField.name}Count := ${helper.toParseExpression(manualArrayField, helper.intTypeReference, manualArrayField.loopExpression, parserArguments)}
	${helper.getLanguageTypeNameForField(field)}[] ${manualArrayField.name} = new ${helper.getLanguageTypeNameForField(field)}[_${manualArrayField.name}Count]
	for i := 0; i < _${manualArrayField.name}Count; i++ {
		${manualArrayField.name}[i] = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)})
	}
				<#-- In all other cases do we have to work with a list, that is later converted to an array -->
				<#else>
				<#-- For a length array, we read data till the read position of the buffer reaches a given position -->
					<#if field.isLengthArrayField()>
	// Length array
	_${manualArrayField.name}Length := ${helper.toIntegerParseExpression(manualArrayField, 16, manualArrayField.loopExpression, parserArguments)}
	_${manualArrayField.name}List := make([]${helper.getLanguageTypeNameForField(manualArrayField)}, 0)
	${manualArrayField.name}EndPos := readBuffer.GetPos() + _${manualArrayField.name}Length
	for ;readBuffer.GetPos() < ${manualArrayField.name}EndPos; {
		_${manualArrayField.name}List = append(_${manualArrayField.name}List, ((${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)})))
					<#-- After parsing, update the current position, but only if it's needed -->
						<#if manualArrayField.loopExpression.contains("curPos")>
		curPos = readBuffer.GetPos() - startPos
						</#if>
	}
					<#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
					<#elseif field.isTerminatedArrayField()>
	// Terminated array
	_${manualArrayField.name}List := make([]<#if helper.needsPointerAccess(manualArrayField)>*</#if>${helper.getLanguageTypeNameForField(manualArrayField)}, 0)
	{
		_values := &_${manualArrayField.name}List
		_ = _values
		for ;!((bool) (${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments, true)})); {
		_${manualArrayField.name}List = append(_${manualArrayField.name}List, ((<#if helper.needsPointerAccess(manualArrayField)>*</#if>${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)})))

					<#-- After parsing, update the current position, but only if it's needed -->
						<#if manualArrayField.loopExpression.contains("curPos")>
			curPos = readBuffer.GetPos() - startPos
						</#if>
		}
	}
					</#if>
				<#--
					Convert the list into an array. However if the array is of a primitive
					type we have to iterate over it's elements and explicitly cast them.
					Otherwise a simple toArray call is fine.
				-->
					<#if helper.isSimpleTypeReference(field.type)>
	${manualArrayField.name} := make([]${helper.getLanguageTypeNameForField(field)}, len(_${manualArrayField.name}List))
	for i := 0; i < len(_${manualArrayField.name}List); i++ {
		${manualArrayField.name}[i] = ${helper.getLanguageTypeNameForField(field)}(_${manualArrayField.name}List[i])
	}
					<#else>
	${manualArrayField.name} := _${manualArrayField.name}List
					</#if>
				</#if>
	if closeErr := readBuffer.CloseContext("${manualArrayField.name}", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}
				<#break>
			<#case "manual">
				<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	${manualField.name}, _${manualField.name}Err := ${helper.toParseExpression(manualField, manualField.type, manualField.parseExpression, parserArguments)}
	if _${manualField.name}Err != nil {
		return nil, errors.Wrap(_${manualField.name}Err, "Error parsing '${manualField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
			<#break>
			<#case "optional">
				<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name}) (Can be skipped, if a given expression evaluates to false)
				<#if optionalField.conditionExpression.present && optionalField.conditionExpression.get().contains("curPos")>
	curPos = readBuffer.GetPos() - startPos
				</#if>
	var ${optionalField.name} *${helper.getLanguageTypeNameForField(field)} = nil
	<#if optionalField.conditionExpression.present>
	if ${helper.toBooleanParseExpression(optionalField, optionalField.conditionExpression.get(), parserArguments)} </#if>{
			<#if helper.isSimpleTypeReference(optionalField.type)>
		_val, _err := ${helper.getReadBufferReadMethodCall(optionalField.name, optionalField.type.asSimpleTypeReference().orElseThrow(), optionalField)}
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing '${optionalField.name}' field")<@emitImport import="github.com/pkg/errors" />
		}
		${optionalField.name} = &_val
			<#elseif helper.isEnumField(field)>
		if pullErr := readBuffer.PullContext("${optionalField.name}"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := ${helper.getLanguageTypeNameForField(field)}Parse(readBuffer)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing '${optionalField.name}' field")<@emitImport import="github.com/pkg/errors" />
		}
		${optionalField.name} = &_val
		if closeErr := readBuffer.CloseContext("${optionalField.name}"); closeErr != nil {
			return nil, closeErr
		}
			<#else>
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("${optionalField.name}"); pullErr != nil {
			return nil, pullErr
		}
				<@compress single_line=true>
                <#assign complexTypeReference=optionalField.type.asComplexTypeReference().orElseThrow()>
                <#assign typeName=complexTypeReference.name>
                <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(complexTypeReference)>
                <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
                <#-- Usually you don't use child directly unless they are parameterized #-->
                    <#assign typeName=typeDefinition.parentType.name>
                    <#assign typeDefinition=typeDefinition.parentType>
                </#if>
				<#assign hasRefParams=complexTypeReference.params.isPresent()>
				<#assign refParams>
					<#if hasRefParams>
							,
						<#list complexTypeReference.params.orElseThrow() as parserArgument>
							${helper.toTypedParseExpression(optionalField, helper.getArgumentType(optionalField.type, parserArgument?index), parserArgument, parserArguments)}
							<#sep>, </#sep>
						</#list>
					</#if>
				</#assign>
		_val, _err := ${typeName}Parse(readBuffer${refParams})
                </@compress>

		switch {
		case _err != nil && _err != utils.ParseAssertError:
			return nil, errors.Wrap(_err, "Error parsing '${optionalField.name}' field")<@emitImport import="github.com/pkg/errors" />
		case _err == utils.ParseAssertError:
			readBuffer.Reset(currentPos)
		default:
			${optionalField.name} = Cast${helper.getLanguageTypeNameForField(field)}(_val)
			if closeErr := readBuffer.CloseContext("${optionalField.name}"); closeErr != nil {
				return nil, closeErr
			}
		}
			</#if>
	}
			<#break>
			<#case "assert">
				<#assign assertField = field.asAssertField().orElseThrow()>

	// Assert Field (${assertField.name}) (Can be skipped, if a given expression evaluates to false)
				<#if assertField.conditionExpression.contains("curPos")>
	curPos = readBuffer.GetPos() - startPos
				</#if>
			<#if helper.isSimpleTypeReference(assertField.type)>
	${assertField.name}, _err := ${helper.getReadBufferReadMethodCall(assertField.name, assertField.type.asSimpleTypeReference().orElseThrow(), assertField)}
	if _err != nil {
		return nil, errors.Wrap(_err, "Error parsing '${assertField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
			<#elseif helper.isEnumField(field)>
	${assertField.name}, _err := ${helper.getLanguageTypeNameForField(field)}Parse(readBuffer)
	if _err != nil {
		return nil, errors.Wrap(_err, "Error parsing '${assertField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
			<#else>
				<@compress single_line=true>
                <#assign complexTypeReference=assertField.type.asComplexTypeReference().orElseThrow()>
                <#assign typeName=complexTypeReference.name>
                <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(complexTypeReference)>
                <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
                <#-- Usually you don't use child directly unless they are parameterized #-->
                    <#assign typeName=typeDefinition.parentType.name>
                    <#assign typeDefinition=typeDefinition.parentType>
                </#if>
				<#assign hasRefParams=complexTypeReference.params.isPresent() && typeDefinition.parserArguments.isPresent()>
				<#assign refParams> <#if hasRefParams>, <#list complexTypeReference.params.orElseThrow() as typeParam>${helper.toTypedParseExpression(assertField, null, typeParam, null)}<#sep>, </#sep></#list> </#if> </#assign>
                </@compress>
	_val, _err := ${helper.getLanguageTypeNameForField(field)}Parse(readBuffer${refParams})
	if _err != nil {
		return nil, errors.Wrap(_err, "Error parsing '${assertField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
	${assertField.name} = Cast${helper.getLanguageTypeNameForField(field)}(_val)
			</#if>
	if ${assertField.name} != ${helper.toParseExpression(assertField, assertField.type, assertField.conditionExpression, parserArguments)} {
		return nil, utils.ParseAssertError
	}
				<#break>
			<#case "padding">
				<#assign paddingField = field.asPaddingField().orElseThrow()>
				<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	{
		if pullErr := readBuffer.PullContext("padding", utils.WithRenderAsList(true)); pullErr != nil {
			return nil, pullErr
		}
		_timesPadding := (${helper.toParseExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
		for ;(readBuffer.HasMore(${helper.getNumBits(simpleTypeReference)})) && (_timesPadding > 0);_timesPadding-- {
			// Just read the padding data and ignore it
			_, _err := ${helper.getReadBufferReadMethodCall("", simpleTypeReference, paddingField)}
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'padding' field")<@emitImport import="github.com/pkg/errors" />
			}
		}
		if closeErr := readBuffer.CloseContext("padding", utils.WithRenderAsList(true)); closeErr != nil {
			return nil, closeErr
		}
	}
				<#break>
			<#case "reserved">
				<#assign reservedField = field.asReservedField().orElseThrow()>
				<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := ${helper.getReadBufferReadMethodCall("reserved", simpleTypeReference, reservedField)}
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")<@emitImport import="github.com/pkg/errors" />
		}
		if ${helper.toTypeSafeCompare(reservedField)} {
			log.Info().Fields(map[string]interface{}{<@emitImport import="github.com/rs/zerolog/log" />
				"expected value": ${helper.getReservedValue(reservedField)},
				"got value": reserved,
			}).Msg("Got unexpected response.")
		}
	}
				<#break>
			<#case "simple">
				<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple Field (${simpleField.name})
				<#if !helper.isSimpleTypeReference(simpleField.type)>
	if pullErr := readBuffer.PullContext("${simpleField.name}"); pullErr != nil {
		return nil, pullErr
	}
				</#if>
    <#assign simpleFieldLogicalName><#if helper.isSimpleTypeReference(simpleField.type) && !helper.isEnumField(field)>${simpleField.name}<#else>${simpleField.typeName}</#if></#assign>
	<@compress single_line=true>
	_${simpleField.name}, _${simpleField.name}Err :=
	<#if helper.isSimpleTypeReference(simpleField.type)>
		${helper.getReadBufferReadMethodCall(simpleFieldLogicalName, simpleField.type.asSimpleTypeReference().orElseThrow(), null, simpleField)}
	<#else>
        <#assign complexTypeReference=simpleField.type.asComplexTypeReference().orElseThrow()>
        <#assign typeName=complexTypeReference.name>
        <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(complexTypeReference)>
        <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
        <#-- Usually you don't use child directly unless they are parameterized #-->
            <#assign typeName=typeDefinition.parentType.name>
            <#assign typeDefinition=typeDefinition.parentType>
        </#if>
        <#assign hasRefParams=complexTypeReference.params.isPresent()>
        <#assign refParams>
            <#if hasRefParams>
				,
                <#list complexTypeReference.params.orElseThrow() as parserArgument>
                    ${helper.toTypedParseExpression(simpleField, helper.getArgumentType(simpleField.type, parserArgument?index), parserArgument, parserArguments)}
                    <#sep>, </#sep>
                </#list>
            </#if>
        </#assign>
		${typeName}Parse(readBuffer${refParams})
	</#if>
    </@compress>

	if _${simpleField.name}Err != nil {
			<#if helper.isEnumField(field)>
		return nil, errors.Wrap(_${simpleField.name}Err, "Error parsing '${simpleField.name}' field")<@emitImport import="github.com/pkg/errors" />
			<#else>
		return nil, errors.Wrap(_${simpleField.name}Err, "Error parsing '${simpleField.name}' field")<@emitImport import="github.com/pkg/errors" />
			</#if>
	}
	${simpleField.name} := <#if helper.isComplex(field) && !helper.isEnumField(field) && !field.isArrayField()>Cast${helper.getLanguageTypeNameForField(field)}(</#if>_${simpleField.name}<#if helper.isComplex(field) && !helper.isEnumField(field) && !field.isArrayField()>)</#if>
				<#if !helper.isSimpleTypeReference(simpleField.type)>
	if closeErr := readBuffer.CloseContext("${simpleField.name}"); closeErr != nil {
		return nil, closeErr
	}
				</#if>
				<#break>

			<#case "switch">
				<#assign switchField = field.asSwitchField().orElseThrow()>

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _parent *${type.name}
	var typeSwitchError error
	switch {
				<#list switchField.cases as case>
					<@compress single_line=true>
						<#if case.discriminatorValueTerms?has_content>
							case
							<#list case.discriminatorValueTerms as discriminatorValueTerm>
								<#if helper.isWildcard(discriminatorValueTerm)>
									true
								<#else>
									<#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValueTerm?index]>
									<#assign parsedDiscriminatorExpression=helper.toParseExpression(null, null, discriminatorExpression, parserArguments)>
									<#-- We remove debug informations as we need them for lookup-->
									<#assign parsedDiscriminatorExpression=tracer.removeTraces(parsedDiscriminatorExpression)>
									<#if helper.getDiscriminatorTypes()[parsedDiscriminatorExpression]??><#assign discriminatorType=helper.getDiscriminatorTypes()[parsedDiscriminatorExpression]></#if>
									<#if helper.isComplexTypeReference(discriminatorType)>
										<#--TODO: What is meant to be here????-->
									</#if>
									${helper.toParseExpression(null, null, discriminatorExpression, parserArguments)} ==
									<#if helper.discriminatorValueNeedsStringEqualityCheck(discriminatorExpression)>"${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}"
									<#elseif helper.isComplexTypeReference(discriminatorType)>
										<#if helper.isEnumTypeReference(discriminatorType)>
											<#assign enumType=helper.getLanguageTypeNameForTypeReference(discriminatorType)>
											<#assign enumTypeWithoutTraces=tracer.removeTraces(enumType)>
											<#assign enumTypeTraces=tracer.extractTraces(enumType)>
											<#assign enumValue=helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)>
											<#assign enumValueWithoutTraces=tracer.removeTraces(enumValue)>
											<#assign enumValueTraces=tracer.extractTraces(enumValue)>
											${enumTypeTraces}${enumValueTraces}${enumTypeWithoutTraces}_${enumValueWithoutTraces}
										<#else>
											${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}
										</#if>
									<#else>
										${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}
									</#if>
								</#if>
								<#sep> && </#sep>
							</#list>
						<#else>
							<#assign defaultCaseOutput=true>
							case true
						</#if>: // ${case.name}
                    </@compress>

		_parent, typeSwitchError = ${case.name}Parse(readBuffer<#if case.allParserArguments.isPresent()>, <#list case.allParserArguments.orElseThrow() as parserArgument><#if <#--TODO: here DF1ResponseMessage throws a payloadLength not present: meaning that some feature is not rightfully implemented as the result should be a error not a missing pointer-->type.getPropertyFieldFromThisOrParentByName(parserArgument.name).isPresent() && type.getPropertyFieldFromThisOrParentByName(parserArgument.name).orElseThrow().isOptionalField()>*</#if>${parserArgument.name}<#sep>, </#sep></#list></#if>)
				</#list>
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")<@emitImport import="github.com/pkg/errors" />
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>

			<#case "unknown">
				<#assign unknownField = field.asUnknownField().orElseThrow()>

	// Unknown field
	_, _UnknownErr := ${helper.getReadBufferReadMethodCall("unknown", unknownField.type.asSimpleTypeReference().orElseThrow(), null, unknownField)}
	if _UnknownErr != nil {
		return nil, errors.Wrap(_UnknownErr, "Error parsing unknown field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>

			<#case "virtual">
				<#assign virtualField = field.asVirtualField().orElseThrow()>

	// Virtual field
	_${virtualField.name} := ${helper.toParseExpression(virtualField, virtualField.type, virtualField.valueExpression, parserArguments)}
	${virtualField.name} := ${helper.getLanguageTypeNameForTypeReference(virtualField.type)}(_${virtualField.name})
				<#break>
            <#case "peek">
                <#assign peekField = field.asPeekField().orElseThrow()>

				// Peek Field (${peekField.name})
                <#if helper.isSimpleTypeReference(peekField.type)>
				currentPos := readBuffer.GetPos()
				${peekField.name}, _err := ${helper.getReadBufferReadMethodCall(peekField.name, peekField.type.asSimpleTypeReference().orElseThrow(), peekField)}
				if _err != nil {
					return nil, errors.Wrap(_err, "Error parsing '${peekField.name}' field")<@emitImport import="github.com/pkg/errors" />
				}
                <#elseif helper.isEnumField(field)>
				currentPos := readBuffer.GetPos()
				if pullErr := readBuffer.PullContext("${peekField.name}"); pullErr != nil {
					return nil, pullErr
				}
				${peekField.name}, _err := ${helper.getLanguageTypeNameForField(field)}Parse(readBuffer)
				if _err != nil {
					return nil, errors.Wrap(_err, "Error parsing '${peekField.name}' field")<@emitImport import="github.com/pkg/errors" />
				}
				if closeErr := readBuffer.CloseContext("${peekField.name}"); closeErr != nil {
					return nil, closeErr
				}
                <#else>
				currentPos := readBuffer.GetPos()
				if pullErr := readBuffer.PullContext("${peekField.name}"); pullErr != nil {
					return nil, pullErr
				}
                    <@compress single_line=true>
                        <#assign complexTypeReference=peekField.type.asComplexTypeReference().orElseThrow()>
                        <#assign typeName=complexTypeReference.name>
                        <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(complexTypeReference)>
                        <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
                        <#-- Usually you don't use child directly unless they are parameterized #-->
                            <#assign typeName=typeDefinition.parentType.name>
                            <#assign typeDefinition=typeDefinition.parentType>
                        </#if>
                        <#assign hasRefParams=complexTypeReference.params.isPresent()>
                        <#assign refParams>
                            <#if hasRefParams>
								,
                                <#list complexTypeReference.params.orElseThrow() as parserArgument>
                                    ${helper.toTypedParseExpression(peekField, helper.getArgumentType(peekField.type, parserArgument?index), parserArgument, parserArguments)}
                                    <#sep>, </#sep>
                                </#list>
                            </#if>
                        </#assign>
				${peekField.name}, _ := ${typeName}Parse(readBuffer${refParams})
                    </@compress>
                </#if>

				readBuffer.Reset(currentPos)
                <#break>
		</#switch>
	</#list>

	if closeErr := readBuffer.CloseContext("${type.name}"); closeErr != nil {
		return nil, closeErr
	}

	<#if type.isDiscriminatedParentTypeDefinition()>
	// Finish initializing
		<@compress single_line=true>
	_parent.Child.InitializeParent(_parent
			<#if type.propertyFields?has_content>, </#if>
			<#list type.propertyFields as field>
				${field.name}
				<#sep>, </#sep>
			</#list>
			<#if type.virtualFields?has_content>, </#if>
			<#list type.virtualFields as field>
				${field.name}
				<#sep>, </#sep>
			</#list>
			)
		</@compress>

	return _parent, nil
	<#elseif type.parentType?has_content>
	// Create a partially initialized instance
	_child := &${type.name}{
		<#list type.propertyFields as field>
		${field.name?cap_first}: <#if helper.isComplex(field) && !helper.isEnumField(field) && !field.isArrayField() && !field.isManualArrayField()>Cast${helper.getLanguageTypeNameForField(field)}(</#if>${field.name}<#if helper.isComplex(field) && !helper.isEnumField(field) && !field.isArrayField() && !field.isManualArrayField()>)</#if>,
		</#list>
        <#list type.virtualFields as field>
            ${field.name?cap_first}: <#if helper.isComplex(field) && !helper.isEnumField(field) && !field.isArrayField() && !field.isManualArrayField()>Cast${helper.getLanguageTypeNameForField(field)}(</#if>${field.name}<#if helper.isComplex(field) && !helper.isEnumField(field) && !field.isArrayField() && !field.isManualArrayField()>)</#if>,
        </#list>
        ${type.parentType.name}: &${type.parentType.name}{},
	}
	_child.${type.parentType.name}.Child = _child
	return _child.${type.parentType.name}, nil
	<#else>
	// Create the instance
	return New${type.name}(<#list type.propertyFields as field>${field.name}<#sep>, </#sep></#list><#if type.propertyFields?has_content && type.virtualFields?has_content>, </#if><#list type.virtualFields as field>${field.name}<#sep>, </#sep></#list>), nil
	</#if>
}

<#if type.isDiscriminatedParentTypeDefinition()>
func (m *${type.name}) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *${type.name}) SerializeParent(writeBuffer utils.WriteBuffer, child I${type.name}, serializeChildFunction func() error) error {
<#else>
func (m *${type.name}) Serialize(writeBuffer utils.WriteBuffer) error {
</#if>
	<#if helper.hasFieldOfType("unknown")>
	return errors.New("Unknown field not serializable")
	<#else>
		<#if !type.isDiscriminatedChildTypeDefinition()>
	if pushErr :=writeBuffer.PushContext("${type.name}"); pushErr != nil {
		return pushErr
	}
		</#if>
		<#assign arraySizeInBytesHelpers=helper.requiresHelperFunctions("ARRAY_SIZE_IN_BYTES")>
		<#if arraySizeInBytesHelpers?has_content>
			<#list arraySizeInBytesHelpers?keys as key>
				<#assign typeName=arraySizeInBytesHelpers[key]>
	${key}ArraySizeInBytes := func(items []*${typeName}) uint32 {
		var sizeInBytes uint32 = 0
		for _, v := range items {
			sizeInBytes += uint32(v.LengthInBytes())
		}
		return sizeInBytes
	}
			</#list>
		</#if>
		<#if type.isDiscriminatedChildTypeDefinition()>
	ser := func() error {
		if pushErr := writeBuffer.PushContext("${type.name}"); pushErr != nil {
			return pushErr
		}
		</#if>
		<#list type.fields as field>
			<#switch field.typeName>
				<#case "array">
					<#assign arrayField = field.asArrayField().orElseThrow()>
					<#assign simpleTypeReference = arrayField.type>

	// Array Field (${arrayField.name})
	if m.${arrayField.name?cap_first} != nil {
					<#if arrayField.type.isByteBased()>
		// Byte Array field (${arrayField.name})
		_writeArrayErr := writeBuffer.WriteByteArray("${arrayField.name}", m.${arrayField.name?cap_first})
		if _writeArrayErr != nil {
			return errors.Wrap(_writeArrayErr, "Error serializing '${arrayField.name}' field")<@emitImport import="github.com/pkg/errors" />
		}
					<#else>
		if pushErr := writeBuffer.PushContext("${arrayField.name}", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
						<#if helper.isComplexTypeReference(arrayField.type) && (helper.needsVariable(arrayField, "curItem", true) || helper.needsVariable(arrayField, "lastItem", true))>
		itemCount := uint16(len(m.${arrayField.name?cap_first}))
		var curItem uint16 = 0
					</#if>
		for _, _element := range m.${arrayField.name?cap_first} {
						<#if helper.isSimpleTypeReference(arrayField.type)>
							<#assign simpleTypeReference = arrayField.type.asSimpleTypeReference().orElseThrow()>
			_elementErr := ${helper.getWriteBufferWriteMethodCall("", simpleTypeReference, "_element", arrayField)}
						<#else>
						<#assign complexTypeReference = arrayField.type>
						<#if helper.needsVariable(arrayField, "lastItem", true)>
			var lastItem bool = curItem == (itemCount - 1)
						</#if>
			_elementErr := _element.Serialize(writeBuffer)
					</#if>
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing '${arrayField.name}' field")<@emitImport import="github.com/pkg/errors" />
			}
						<#if helper.needsVariable(arrayField, "curItem", true) || helper.needsVariable(arrayField, "lastItem", true)>
			curItem++
					</#if>
		}
		if popErr := writeBuffer.PopContext("${arrayField.name}", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
					</#if>
	}
					<#break>
				<#case "checksum">
					<#assign checksumField = field.asChecksumField().orElseThrow()>
					<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum) (Calculated)
	{
		_checksum, _checksumErr := ${helper.toSerializationExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)}
		if _checksumErr != nil {
			return errors.Wrap(_checksumErr, "Error serializing 'checksum' field")<@emitImport import="github.com/pkg/errors" />
		}
		_checksumErr = ${helper.getWriteBufferWriteMethodCall("checksum", simpleTypeReference, "(_checksum)", checksumField)}
		if _checksumErr != nil {
			return errors.Wrap(_checksumErr, "Error serializing 'checksum' field")<@emitImport import="github.com/pkg/errors" />
		}
	}
					<#break>
				<#case "const">
					<#assign constField = field.asConstField().orElseThrow()>

					<#if helper.isEnumTypeReference(constField.type)>
						<#-- TODO: finish me-->
                        <#if constField.fieldName?has_content>
                            <#assign enumValueFieldAccessor=type.name+"_"+constField.name?upper_case>
	// Const field (${constField.name})
	_${constField.name}Err := ${helper.getWriteBufferWriteMethodCall(constField, constField.type.name, helper.getEnumFieldSimpleTypeReference(constField.type, constField.fieldName), enumValueFieldAccessor, constField, "utils.WithAdditionalStringRepresentation(${type.name}_${constField.name?upper_case}.name())")}
	if _${constField.name}Err != nil {
		return errors.Wrap(_${constField.name}Err, "Error serializing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
                        <#else>
	// Const field (${constField.name})
	${constField.name} := Cast${helper.getLanguageTypeNameForField(field)}(${type.name}_${constField.name?upper_case})
	_${constField.name}Err := ${constField.name}.Serialize(writeBuffer)
	if _${constField.name}Err != nil {
		return errors.Wrap(_${constField.name}Err, "Error serializing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
                        </#if>
					<#else>
	// Const Field (${constField.name})
	_${constField.name}Err := ${helper.getWriteBufferWriteMethodCall(constField.name, constField.type.asSimpleTypeReference().orElseThrow(), constField.referenceValue, constField)}
	if _${constField.name}Err != nil {
		return errors.Wrap(_${constField.name}Err, "Error serializing '${constField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					</#if>
					<#break>
				<#case "discriminator">
					<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>

	// Discriminator Field (${discriminatorField.name}) (Used as input to a switch field)
	${discriminatorField.name} := ${helper.getLanguageTypeNameForField(field)}(child.${discriminatorField.name?cap_first}())
					<#if helper.isEnumField(field)>
	_${discriminatorField.name}Err := ${discriminatorField.name}.Serialize(writeBuffer)
					<#else>
                        <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
	_${discriminatorField.name}Err := ${helper.getWriteBufferWriteMethodCall(discriminatorField.name, simpleTypeReference, "(" + discriminatorField.name + ")", discriminatorField)}
					</#if>

	if _${discriminatorField.name}Err != nil {
		return errors.Wrap(_${discriminatorField.name}Err, "Error serializing '${discriminatorField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "enum">
					<#assign enumField = field.asEnumField().orElseThrow()>

	if pushErr := writeBuffer.PushContext("${enumField.name}"); pushErr != nil {
		return pushErr
	}
							<#assign enumValueFieldAccessor="m."+enumField.name?cap_first+"."+enumField.fieldName?cap_first+"()">
	// Enum field (${enumField.name})
	_${enumField.name}Err := ${helper.getWriteBufferWriteMethodCall(enumField.type.asComplexTypeReference().orElseThrow().name, helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName), enumValueFieldAccessor, enumField, "utils.WithAdditionalStringRepresentation(m.${enumField.name?cap_first}.name())")}
	if _${enumField.name}Err != nil {
		return errors.Wrap(_${enumField.name}Err, "Error serializing '${enumField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
	if popErr := writeBuffer.PopContext("${enumField.name}"); popErr != nil {
		return popErr
	}
					<#break>
				<#case "implicit">
					<#assign implicitField = field.asImplicitField().orElseThrow()>
					<#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

	// Implicit Field (${implicitField.name}) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	${implicitField.name} := ${helper.getLanguageTypeNameForField(field)}(${helper.toSerializationExpression(implicitField, implicitField.type, implicitField.serializeExpression, parserArguments)})
	_${implicitField.name}Err := ${helper.getWriteBufferWriteMethodCall(implicitField.name, simpleTypeReference, "(" + implicitField.name + ")", implicitField)}
	if _${implicitField.name}Err != nil {
		return errors.Wrap(_${implicitField.name}Err, "Error serializing '${implicitField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "manualArray">
					<#assign manualArrayField = field.asManualArrayField().orElseThrow()>

	// Manual Array Field (${manualArrayField.name})
	if m.${manualArrayField.name?cap_first} != nil {
		if pushErr := writeBuffer.PushContext("${manualArrayField.name}", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, m := range m.${manualArrayField.name?cap_first} {
			<#-- TODO at the moment the implementation below is broken as element get prefixed wrong therefore we substract it with substring-->
			${helper.toSerializationExpression(manualArrayField, manualArrayField.type, manualArrayField.serializeExpression, parserArguments)?replace("m.","")}
		}
		if popErr := writeBuffer.PopContext("${manualArrayField.name}", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}
					<#break>
				<#case "manual">
					<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	_${manualField.name}Err := ${helper.toSerializationExpression(manualField, manualField.type, manualField.serializeExpression, parserArguments)}
	if _${manualField.name}Err != nil {
		return errors.Wrap(_${manualField.name}Err, "Error serializing '${manualField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "optional">
					<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name}) (Can be skipped, if the value is null)
	var ${optionalField.name} *${helper.getLanguageTypeNameForField(field)} = nil
	if m.${optionalField.name?cap_first} != nil {
					<#if helper.isSimpleTypeReference(optionalField.type)>
						<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
		${optionalField.name} = m.${optionalField.name?cap_first}
		_${optionalField.name}Err := ${helper.getWriteBufferWriteMethodCall(optionalField.name, simpleTypeReference, "*(" + optionalField.name + ")", optionalField)}
					<#else>
						<#assign complexTypeReference = optionalField.type>
		if pushErr := writeBuffer.PushContext("${optionalField.name}"); pushErr != nil {
			return pushErr
		}
		${optionalField.name} = m.${optionalField.name?cap_first}
		_${optionalField.name}Err := ${optionalField.name}.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("${optionalField.name}"); popErr != nil {
			return popErr
		}
					</#if>
		if _${optionalField.name}Err != nil {
			return errors.Wrap(_${optionalField.name}Err, "Error serializing '${optionalField.name}' field")<@emitImport import="github.com/pkg/errors" />
		}
	}
					<#break>
				<#case "padding">
					<#assign paddingField = field.asPaddingField().orElseThrow()>
					<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	{
		if pushErr := writeBuffer.PushContext("padding", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
		for ;_timesPadding > 0; _timesPadding-- {
			_paddingValue := ${helper.getLanguageTypeNameForField(field)}(${helper.toSerializationExpression(paddingField, paddingField.type, paddingField.paddingValue, parserArguments)})
			_paddingErr := ${helper.getWriteBufferWriteMethodCall("", simpleTypeReference, "(_paddingValue)", paddingField)}
			if _paddingErr != nil {
				return errors.Wrap(_paddingErr, "Error serializing 'padding' field")<@emitImport import="github.com/pkg/errors" />
			}
		}
		if popErr := writeBuffer.PopContext("padding", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}
					<#break>
				<#case "reserved">
					<#assign reservedField = field.asReservedField().orElseThrow()>
					<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	{
		_err := ${helper.getWriteBufferWriteMethodCall("reserved", simpleTypeReference, helper.getReservedValue(reservedField), reservedField)}
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")<@emitImport import="github.com/pkg/errors" />
		}
	}
					<#break>
				<#case "simple">
					<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple Field (${simpleField.name})
					<#if helper.isSimpleTypeReference(simpleField.type)>
						<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
						<#assign simpleFieldLogicalName><#if helper.isSimpleTypeReference(simpleField.type) && !helper.isEnumField(field)>${simpleField.name}<#else>${simpleField.typeName}</#if></#assign>
	${simpleField.name} := ${helper.getLanguageTypeNameForField(field)}(m.${simpleField.name?cap_first})
						<#if helper.isEnumField(field)>
	_${simpleField.name}Err := ${helper.getWriteBufferWriteMethodCall(simpleFieldLogicalName, simpleTypeReference, "(" + simpleField.name + ")", simpleField, "utils.WithAdditionalStringRepresentation(m.${simpleField.name?cap_first}.name())")}
						<#else>
	_${simpleField.name}Err := ${helper.getWriteBufferWriteMethodCall(simpleFieldLogicalName, simpleTypeReference, "(" + simpleField.name + ")", simpleField)}
						</#if>
					<#else>
						<#assign complexTypeReference = simpleField.type>
	if pushErr := writeBuffer.PushContext("${simpleField.name}"); pushErr != nil {
		return pushErr
	}
	_${simpleField.name}Err := m.${simpleField.name?cap_first}.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("${simpleField.name}"); popErr != nil {
		return popErr
	}
					</#if>
	if _${simpleField.name}Err != nil {
		return errors.Wrap(_${simpleField.name}Err, "Error serializing '${simpleField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "switch">
					<#assign switchField = field.asSwitchField().orElseThrow()>

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "virtual">
                	<#assign virtualField = field.asVirtualField().orElseThrow()>
                	<#assign typedField = field.asTypedField().orElseThrow()>
                	<#assign namedField = field.asNamedField().orElseThrow()>
	// Virtual field
	if _${namedField.name}Err := writeBuffer.WriteVirtual("${namedField.name}", m.${namedField.name?cap_first}); _${namedField.name}Err != nil {
		return errors.Wrap(_${namedField.name}Err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
			</#switch>
		</#list>

		<#if type.isDiscriminatedChildTypeDefinition()>
		if popErr := writeBuffer.PopContext("${type.name}"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
		<#else>
	if popErr := writeBuffer.PopContext("${type.name}"); popErr != nil {
		return popErr
	}
	return nil
		</#if>
	</#if>
}

func (m *${type.name}) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}

</@importSectionWithContentBelow>

</#outputformat>
