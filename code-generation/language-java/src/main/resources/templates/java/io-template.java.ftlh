<#--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<#-- Prevent freemarker from escaping stuff -->
<#outputformat "undefined">
<#-- Declare the name and type of variables passed in to the template -->
<#-- @ftlvariable name="languageName" type="java.lang.String" -->
<#-- @ftlvariable name="protocolName" type="java.lang.String" -->
<#-- @ftlvariable name="outputFlavor" type="java.lang.String" -->
<#-- @ftlvariable name="helper" type="org.apache.plc4x.language.java.JavaLanguageTemplateHelper" -->
<#-- @ftlvariable name="tracer" type="org.apache.plc4x.plugins.codegenerator.protocol.freemarker.Tracer" -->
<#-- @ftlvariable name="type" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
${helper.packageName(protocolName, languageName, outputFlavor)?replace(".", "/")}/io/${type.name}IO.java
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ${helper.packageName(protocolName, languageName, outputFlavor)}.io;

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import ${helper.packageName(protocolName, languageName, outputFlavor)}.*;
<#if helper.getComplexTypeReferences()?has_content>import ${helper.packageName(protocolName, languageName, outputFlavor)}.io.*;</#if>
import ${helper.packageName(protocolName, languageName, outputFlavor)}.types.*;
import org.apache.plc4x.java.api.exceptions.PlcRuntimeException;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.api.value.PlcValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;

// Code generated by code-generation. DO NOT EDIT.

<#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
<#if type.parserArguments.isPresent()><#assign parserArguments=type.parserArguments.orElseThrow()></#if>
public class ${type.name}IO implements <#if outputFlavor != "passive">MessageIO<${type.name}, ${type.name}><#else>MessageInput<${type.name}></#if> {

    private static final Logger LOGGER = LoggerFactory.getLogger(${type.name}IO.class);

<#-- The parse and serialize methods here are just proxies for forwardning the requests to static counterparts -->
<#if !type.isDiscriminatedChildTypeDefinition()>
    @Override
    public ${type.name} parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        <#if parserArguments?has_content>
        if((args == null) || (args.length != ${parserArguments?size})) {
            throw new PlcRuntimeException("Wrong number of arguments, expected ${parserArguments?size}, but got " + args.length);
        }
            <#list parserArguments as parserArgument>
        ${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name};
        if(args[${parserArgument?index}] instanceof ${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)}) {
            ${parserArgument.name} = (${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)}) args[${parserArgument?index}];
            <#if helper.isSimpleTypeReference(parserArgument.type)>
        } else if (args[${parserArgument?index}] instanceof String) {
            ${parserArgument.name} = ${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)}.valueOf((String) args[${parserArgument?index}]);
            </#if>
        } else {
            throw new PlcRuntimeException("Argument ${parserArgument?index} expected to be of type ${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} or a string which is parseable but was " + args[${parserArgument?index}].getClass().getName());
        }
            </#list>
        </#if>
        return ${type.name}IO.staticParse(readBuffer<#if parserArguments?has_content>, <#list parserArguments as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if>);
    }

    <#if outputFlavor != "passive">
    @Override
    public void serialize(WriteBuffer writeBuffer, ${type.name} value, Object... args) throws ParseException {
        <#if helper.getSerializerArguments(parserArguments)?has_content>
        if((args == null) || (args.length != ${parserArguments?size})) {
            throw new PlcRuntimeException("Wrong number of arguments, expected ${parserArguments?size}, but got " + args.length);
        }
        <#list helper.getSerializerArguments(parserArguments) as serializerArgument>
        if(!(args[${serializerArgument?index}] instanceof ${helper.getLanguageTypeNameForTypeReference(serializerArgument.type, false)})) {
            throw new PlcRuntimeException("Argument ${serializerArgument?index} expected to be of type ${helper.getLanguageTypeNameForTypeReference(serializerArgument.type, false)} but was " + args[${serializerArgument?index}].getClass().getName());
        }
        ${helper.getLanguageTypeNameForTypeReference(serializerArgument.type, false)} ${serializerArgument.name} = (${helper.getLanguageTypeNameForTypeReference(serializerArgument.type, false)}) args[${serializerArgument?index}];
        </#list>
        </#if>
        ${type.name}IO.staticSerialize(writeBuffer, value<#if helper.getSerializerArguments(parserArguments)?has_content>, <#list helper.getSerializerArguments(parserArguments) as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if>);
    }

    </#if>
<#else>
    @Override
    public ${type.name} parse(ReadBuffer readBuffer, Object... args) throws ParseException {
        return (${type.name}) new ${type.parentType.name}IO().parse(readBuffer, args);
    }

<#if outputFlavor != "passive">
    @Override
    public void serialize(WriteBuffer writeBuffer, ${type.name} value, Object... args) throws ParseException {
        new ${type.parentType.name}IO().serialize(writeBuffer, value, args);
    }

</#if>
</#if>
<#-- Here come the actual parse and serialize methods that actually do the parsing and serlaizing -->
    <#assign hasParserArguments=parserArguments?has_content/>
    <#assign parserArgumentList><#if hasParserArguments><#list parserArguments as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
    <#assign hasParentParserArguments=(type.parentType?? && type.parentType.parserArguments.isPresent() && type.parentType.parserArguments.orElseThrow()?filter(arg -> hasParserArguments && !parserArguments?map(argument->argument.name)?seq_contains(arg.name) || !hasParserArguments)?has_content)>
    <#assign parentParserArgumentList><#if hasParentParserArguments><#list type.parentType.parserArguments.orElseThrow()?filter(arg -> hasParserArguments && !parserArguments?map(argument->argument.name)?seq_contains(arg.name) || !hasParserArguments) as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
    public static ${type.name}<#if type.isDiscriminatedChildTypeDefinition()>Builder</#if> staticParse(ReadBuffer readBuffer<#if hasParserArguments>, ${parserArgumentList}</#if><#if hasParentParserArguments>, ${parentParserArgumentList}</#if>) throws ParseException {
        readBuffer.pullContext("${type.name}");
        int startPos = readBuffer.getPos();
        int curPos;
<#list type.fields as field>
<#switch field.typeName>
    <#case "array">
        <#assign arrayField = field.asArrayField().orElseThrow()>
        <#if arrayField.type.isByteBased()>
        // Byte Array field (${arrayField.name})
            <#assign numberOfBytesExpression>
                <#compress>
                    <#if field.isCountArrayField()>
                        int numberOfBytes = ${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)};
                    <#elseif field.isLengthArrayField()>
                        int numberOfBytes = ${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)};
                    <#elseif field.isTerminatedArrayField()>
                    <#-- TODO: we need to find out to implement this-->
                        int numberOfBytes := ${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)};
                    <#else>
                    <#-- TODO: we should throw a exception here-->
                        int numberOfBytes := -1
                    </#if>
                </#compress>
            </#assign>
        ${numberOfBytesExpression}
        byte[] ${arrayField.name} = readBuffer.readByteArray("${arrayField.name}", numberOfBytes);
        <#else>
        // Array field (${arrayField.name})
        readBuffer.pullContext("${arrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
            <#-- Only update curPos if the length expression uses it -->
            <#if arrayField.loopExpression.contains("curPos")>
        curPos = readBuffer.getPos() - startPos;
            </#if>
        <#-- If this is a count array, we can directly initialize an array with the given size -->
            <#if field.isCountArrayField()>
        // Count array
        if(${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)} > Integer.MAX_VALUE) {
            throw new ParseException("Array count of " + (${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)}) + " exceeds the maximum allowed count of " + Integer.MAX_VALUE);
        }
        ${helper.getLanguageTypeNameForField(field)}[] ${arrayField.name};
        {
            int itemCount = Math.max(0, (int) ${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)});
            ${arrayField.name} = new ${helper.getLanguageTypeNameForField(field)}[itemCount];
            for(int curItem = 0; curItem < itemCount; curItem++) {
                <#-- When parsing simple types, there is nothing that could require the "lastItem" -->
                <#if !helper.isSimpleTypeReference(arrayField.type)>boolean lastItem = curItem == (itemCount - 1);</#if>
            <@compress single_line=true>
                ${arrayField.name}[curItem] =
                <#if helper.isSimpleTypeReference(arrayField.type)>
                    ${helper.getReadBufferReadMethodCall("", arrayField.type.asSimpleTypeReference().orElseThrow(), "", arrayField)}
                <#else>
                    ${arrayField.type.asComplexTypeReference().orElseThrow().name}IO.staticParse(readBuffer
                    <#if field.params.isPresent()>
                        ,
                        <#list field.params.orElseThrow() as parserArgument>
                            <#if helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(arrayField.type, parserArgument?index), true) = 'String'>
                                ${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(arrayField.type, parserArgument?index), true)}.valueOf(${helper.toParseExpression(arrayField, parserArgument, parserArguments)})<#sep>, </#sep>
                            <#else>
                                (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(arrayField.type, parserArgument?index), true)}) (${helper.toParseExpression(arrayField, parserArgument, parserArguments)})<#sep>, </#sep>
                            </#if>
                        </#list>
                    </#if>
                    <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(arrayField.type)>
                    <#-- We expose the parentParserArguments to the child here too-->
                    <#assign hasParentParseArguments=typeDefinition.parentType?? && typeDefinition.parentType.parserArguments.isPresent()>
                    <#assign parentParseArguments><#if hasParentParseArguments><#list typeDefinition.parentType.parserArguments.orElseThrow() as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
                    <#if hasParentParseArguments>, ${tracer.dive("count array parent parse arguments")} ${parentParseArguments}</#if>
                    )
                    <#if helper.getTypeDefinitionForTypeReference(arrayField.type).isDiscriminatedChildTypeDefinition()>
                        .build()
                    </#if>
                </#if>;
            </@compress>
            }
        }
        <#-- In all other cases do we have to work with a list, that is later converted to an array -->
            <#else>
            <#-- For a length array, we read data till the read position of the buffer reaches a given position -->
                <#if field.isLengthArrayField()>
        // Length array
        long _${arrayField.name}Length = ${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)};
        List<${helper.getNonPrimitiveLanguageTypeNameForField(arrayField)}> _${arrayField.name}List = new LinkedList<>();
        long ${arrayField.name}EndPos = readBuffer.getPos() + _${arrayField.name}Length;
        while(readBuffer.getPos() < ${arrayField.name}EndPos) {
                    <@compress single_line=true>
            _${arrayField.name}List.add(
                        <#if helper.isSimpleTypeReference(arrayField.type)>
                            ${helper.getReadBufferReadMethodCall("", arrayField.type.asSimpleTypeReference().orElseThrow(), "", arrayField)}
                        <#else>
                            ${arrayField.type.asComplexTypeReference().orElseThrow().name}IO.staticParse(readBuffer
                            <#if field.params.isPresent()>
                                ,
                                <#list field.params.orElseThrow() as parserArgument>
                                    (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(arrayField.type, parserArgument?index), true)})
                                    (${helper.toParseExpression(arrayField, parserArgument, parserArguments)})<#sep>, </#sep>
                                </#list>
                            </#if>
                            <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(arrayField.type)>
                        <#-- We expose the parentParserArguments to the child here too-->
                            <#assign hasParentParseArguments=typeDefinition.parentType?? && typeDefinition.parentType.parserArguments.isPresent()>
                            <#assign parentParseArguments><#if hasParentParseArguments><#list typeDefinition.parentType.parserArguments.orElseThrow() as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
                            <#if hasParentParseArguments>, ${tracer.dive("count array parent parse arguments")} ${parentParseArguments}</#if>
                            )
                        </#if>
                        );
                    </@compress>
            <#-- After parsing, update the current position, but only if it's needed -->
                <#if arrayField.loopExpression.contains("curPos")>
            curPos = readBuffer.getPos() - startPos;
                </#if>
        }
            <#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
                <#elseif field.isTerminatedArrayField()>
        // Terminated array
        List<${helper.getNonPrimitiveLanguageTypeNameForField(arrayField)}> _${arrayField.name}List = new LinkedList<>();
        while(!((boolean) (${helper.toParseExpression(arrayField, arrayField.loopExpression, parserArguments)}))) {
                    <@compress single_line=true>
            _${arrayField.name}List.add(
                        <#if helper.isSimpleTypeReference(arrayField.type)>
                            ${helper.getReadBufferReadMethodCall("", arrayField.type.asSimpleTypeReference().orElseThrow(), "", arrayField)}
                        <#else>
                            ${arrayField.type.asComplexTypeReference().orElseThrow().name}IO.staticParse(readBuffer
                            <#if field.params.isPresent()>
                                ,
                                <#list field.params.orElseThrow() as parserArgument>
                                    (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(arrayField.type, parserArgument?index), true)})
                                    (${helper.toParseExpression(arrayField, parserArgument, parserArguments)})<#sep>, </#sep>
                                </#list>
                            </#if>
                            <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(arrayField.type)>
                        <#-- We expose the parentParserArguments to the child here too-->
                            <#assign hasParentParseArguments=typeDefinition.parentType?? && typeDefinition.parentType.parserArguments.isPresent()>
                            <#assign parentParseArguments><#if hasParentParseArguments><#list typeDefinition.parentType.parserArguments.orElseThrow() as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
                            <#if hasParentParseArguments>, ${tracer.dive("count array parent parse arguments")} ${parentParseArguments}</#if>
                            )
                        </#if>
                        );
                    </@compress>

            <#-- After parsing, update the current position, but only if it's needed -->
                <#if arrayField.loopExpression.contains("curPos")>
            curPos = readBuffer.getPos() - startPos;
                </#if>
        }
                </#if>
                <#--
                    Convert the list into an array. However if the array is of a primitive
                    type we have to iterate over it's elements and explicitly cast them.
                    Otherwise a simple toArray call is fine.
                -->
                <#if helper.isSimpleTypeReference(arrayField.type)>
        ${helper.getLanguageTypeNameForField(field)}[] ${arrayField.name} = new ${helper.getLanguageTypeNameForField(field)}[_${arrayField.name}List.size()];
        for(int i = 0; i < _${arrayField.name}List.size(); i++) {
            ${arrayField.name}[i] = (${helper.getLanguageTypeNameForField(field)}) _${arrayField.name}List.get(i);
        }
                <#else>
        ${helper.getLanguageTypeNameForField(field)}[] ${arrayField.name} = _${arrayField.name}List.toArray(new ${helper.getNonPrimitiveLanguageTypeNameForField(arrayField)}[0]);
                </#if>
            </#if>
            readBuffer.closeContext("${arrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
        </#if>
        <#break>
    <#case "checksum">
        <#assign checksumField = field.asChecksumField().orElseThrow()>
        <#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

        // Checksum Field (checksum)
        {
            ${helper.getLanguageTypeNameForField(field)} checksum = ${helper.getNullValueForTypeReference(checksumField.type)};
            ${helper.getLanguageTypeNameForField(field)} checksumRef = ${helper.getReadBufferReadMethodCall("checksum", simpleTypeReference, "", checksumField)};
            checksum = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(checksumField, checksumField.checksumExpression, parserArguments)});
            if(checksum != checksumRef) {
                throw new ParseException(String.format("Checksum verification failed. Expected %04X but got %04X", checksumRef & 0xFFFF, checksum & 0xFFFF));
            }
        }
        <#break>
    <#case "const">
        <#assign constField = field.asConstField().orElseThrow()>

        // Const Field (${constField.name})
        <#if helper.isSimpleTypeReference(constField.type)>
            <#assign simpleTypeReference = constField.type.asSimpleTypeReference().orElseThrow()>
        ${helper.getLanguageTypeNameForField(field)} ${constField.name} = ${helper.getReadBufferReadMethodCall(constField.name, simpleTypeReference, "", constField)};
        <#else>
        ${helper.getLanguageTypeNameForField(field)} ${constField.name} = ${helper.getLanguageTypeNameForField(field)}.enumForValue(${helper.getReadBufferReadMethodCall(constField.name, helper.getEnumBaseTypeReference(constField.type), "", constField)});
        </#if>
        if(${constField.name} != ${type.name}.${constField.name?upper_case}) {
            throw new ParseException("Expected constant value " + ${type.name}.${constField.name?upper_case} + " but got " + ${constField.name});
        }
        <#break>
    <#case "discriminator">
        <#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>

        // Discriminator Field (${discriminatorField.name}) (Used as input to a switch field)
        <#if helper.isEnumField(field)>
        ${helper.getLanguageTypeNameForField(discriminatorField)} ${discriminatorField.name} = ${helper.getLanguageTypeNameForField(discriminatorField)}.enumForValue(${helper.getReadBufferReadMethodCall(discriminatorField.name, helper.getEnumBaseTypeReference(discriminatorField.type), "", discriminatorField)});
        <#else>
            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
            <@compress single_line=true>
        ${helper.getLanguageTypeNameForField(discriminatorField)} ${discriminatorField.name} =
                <#if helper.isSimpleTypeReference(discriminatorField.type)>
                    ${helper.getReadBufferReadMethodCall(discriminatorField.name, simpleTypeReference, "", discriminatorField)}
                <#else>
                    ${discriminatorField.type.asComplexTypeReference().orElseThrow().name}IO.staticParse(readBuffer
                    <#if discriminatorField.params.isPresent()>
                        ,
                        <#list discriminatorField.params.orElseThrow() as parserArgument>
                            (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(simpleTypeReference, parserArgument?index), true)})
                            (${helper.toParseExpression(discriminatorField, parserArgument, null)})<#sep>, </#sep>
                        </#list>
                    </#if>
                    )
                </#if>;
            </@compress>
        </#if>

        <#break>
    <#case "enum">
        <#assign enumField = field.asEnumField().orElseThrow()>

        readBuffer.pullContext("${enumField.name}");
        // Enum field (${enumField.name})
        <#if enumField.fieldName.isPresent()>
        ${helper.getLanguageTypeNameForField(field)} ${enumField.name} = ${helper.getLanguageTypeNameForField(field)}.firstEnumForField${enumField.fieldName.orElseThrow()?cap_first}(${helper.getReadBufferReadMethodCall(helper.getTypeDefinitionForTypeReference(enumField.type).name, helper.getEnumBaseTypeReference(enumField.type), "", enumField)});
        <#else>
        ${helper.getLanguageTypeNameForField(field)} ${enumField.name} = ${helper.getLanguageTypeNameForField(field)}.enumForValue(${helper.getReadBufferReadMethodCall(helper.getTypeDefinitionForTypeReference(enumField.type).name, helper.getEnumBaseTypeReference(enumField.type), "", enumField)});
        </#if>
        readBuffer.closeContext("${enumField.name}");
        <#break>
    <#case "implicit">
        <#assign implicitField = field.asImplicitField().orElseThrow()>
        <#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

        // Implicit Field (${implicitField.name}) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        ${helper.getLanguageTypeNameForField(field)} ${implicitField.name} = ${helper.getReadBufferReadMethodCall(implicitField.name, simpleTypeReference, "", implicitField)};
        <#break>
    <#case "manualArray">
        <#assign manualArrayField = field.asManualArrayField().orElseThrow()>

        readBuffer.pullContext("${manualArrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
        // Manual Array Field (${manualArrayField.name})
        <#-- Only update curPos if the length expression uses it -->
        <#if manualArrayField.loopExpression.contains("curPos")>
        curPos = readBuffer.getPos() - startPos;
        </#if>
        <#-- If this is a count array, we can directly initialize an array with the given size -->
        <#if field.isCountArrayField()>
        // Count array
        int _${manualArrayField.name}Count = ${helper.toParseExpression(manualArrayField, manualArrayField.loopExpression, parserArguments)};
        ${helper.getLanguageTypeNameForField(field)}[] ${manualArrayField.name} = new ${helper.getLanguageTypeNameForField(field)}[_${manualArrayField.name}Count];
        for(int i = 0; i < _${manualArrayField.name}Count; i++) {
            ${manualArrayField.name}[i] = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualArrayField, manualArrayField.parseExpression, parserArguments)});
        }
        <#-- In all other cases do we have to work with a list, that is later converted to an array -->
        <#else>
            <#-- For a length array, we read data till the read position of the buffer reaches a given position -->
            <#if field.isLengthArrayField()>
        // Length array
        long _${manualArrayField.name}Length = ${helper.toParseExpression(manualArrayField, manualArrayField.loopExpression, parserArguments)};
        List<${helper.getNonPrimitiveLanguageTypeNameForField(manualArrayField)}> _${manualArrayField.name}List = new LinkedList<>();
        long ${manualArrayField.name}EndPos = readBuffer.getPos() + _${manualArrayField.name}Length;
        while(readBuffer.getPos() < ${manualArrayField.name}EndPos) {
            _${manualArrayField.name}List.add((${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualArrayField, manualArrayField.parseExpression, parserArguments)}));
            <#-- After parsing, update the current position, but only if it's needed -->
            <#if manualArrayField.loopExpression.contains("curPos")>
            curPos = readBuffer.getPos() - startPos;
            </#if>
        }
            <#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
            <#elseif field.isTerminatedArrayField()>
        // Terminated array
        List<${helper.getNonPrimitiveLanguageTypeNameForField(manualArrayField)}> _${manualArrayField.name}List = new LinkedList<>();
        while(!((boolean) (${helper.toParseExpression(manualArrayField, manualArrayField.loopExpression, parserArguments)}))) {
            _${manualArrayField.name}List.add((${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualArrayField, manualArrayField.parseExpression, parserArguments)}));

            <#-- After parsing, update the current position, but only if it's needed -->
            <#if manualArrayField.loopExpression.contains("curPos")>
            curPos = readBuffer.getPos() - startPos;
            </#if>
        }
            </#if>
            <#--
                Convert the list into an array. However if the array is of a primitive
                type we have to iterate over it's elements and explicitly cast them.
                Otherwise a simple toArray call is fine.
            -->
            <#if helper.isSimpleTypeReference(field.type)>
        ${helper.getLanguageTypeNameForField(field)}[] ${manualArrayField.name} = new ${helper.getLanguageTypeNameForField(field)}[_${manualArrayField.name}List.size()];
        for(int i = 0; i < _${manualArrayField.name}List.size(); i++) {
            ${manualArrayField.name}[i] = (${helper.getLanguageTypeNameForField(field)}) _${manualArrayField.name}List.get(i);
        }
            <#else>
        ${helper.getLanguageTypeNameForField(field)}[] ${manualArrayField.name} = _${manualArrayField.name}List.toArray(new ${helper.getNonPrimitiveLanguageTypeNameForField(manualArrayField)}[0]);
            </#if>
        </#if>
        readBuffer.closeContext("${manualArrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
        <#break>
    <#case "manual">
        <#assign manualField = field.asManualField().orElseThrow()>

        // Manual Field (${manualField.name})
        ${helper.getLanguageTypeNameForField(field)} ${manualField.name} = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(manualField, manualField.parseExpression, parserArguments)});
        <#break>
    <#case "optional">
        <#assign optionalField = field.asOptionalField().orElseThrow()>

        // Optional Field (${optionalField.name}) (Can be skipped, if a given expression evaluates to false)
        <#if optionalField.conditionExpression.contains("curPos")>
        curPos = readBuffer.getPos() - startPos;
        </#if>
        ${helper.getLanguageTypeNameForField(field)} ${optionalField.name} = null;
        if(${helper.toParseExpression(optionalField, optionalField.conditionExpression, parserArguments)}) {
        <@compress single_line=true>
            ${optionalField.name} =
            <#if helper.isEnumField(optionalField)>
             ${helper.getLanguageTypeNameForField(optionalField)}.enumForValue(
                ${helper.getReadBufferReadMethodCall(optionalField.name, helper.getEnumBaseTypeReference(optionalField.type), "", optionalField)}
            )
            <#elseif helper.isComplexTypeReference(optionalField.type)>
                <#assign complexTypeReference=optionalField.type.asComplexTypeReference().orElseThrow()>
                <#assign typeName=complexTypeReference.name>
                <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(complexTypeReference)>
                <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
                    <#-- Usually you don't use child directly unless they are parameterized #-->
                    <#assign typeName=typeDefinition.parentType.name>
                    <#assign typeDefinition=typeDefinition.parentType>
                </#if>
                <#-- We downcast to the referenced type-->
            (${complexTypeReference.name}) ${typeName}IO.staticParse(
                readBuffer
                <#if field.params.isPresent()>,
                    <#list field.params.orElseThrow() as parserArgument>
                        (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(optionalField.type, parserArgument?index), true)})
                        (${helper.toParseExpression(optionalField, parserArgument, parserArguments)})<#sep>, </#sep>
                    </#list>
                </#if>
                <#if complexTypeReference.params.isPresent() && typeDefinition.parserArguments.isPresent()>
                    <#assign argumentOffset=0>
                    <#if field.params.isPresent()><#assign argumentOffset=field.params.orElseThrow()?size></#if>
                    ,
                    <#list complexTypeReference.params.orElseThrow() as typeParam>
                    <#-- We cast here explicitly as java sometimes can't infer the type. e.g. 0 is a int and not a byte#-->
                        (${helper.getLanguageTypeNameForTypeReference(typeDefinition.parserArguments.orElseThrow()[typeParam?index + argumentOffset].type, true)})
                        ${helper.toAccessExpression(null, typeParam, null)}<#sep>, </#sep>
                    </#list>
                </#if>
                )
            <#else>
             ${helper.getReadBufferReadMethodCall(optionalField.name, optionalField.type.asSimpleTypeReference().orElseThrow(), "", optionalField)}
            </#if>
            ;
        </@compress>

        }
        <#break>
    <#case "assert">
        <#assign assertField = field.asAssertField().orElseThrow()>

        // Assert Field
        <#if helper.isEnumField(assertField)>
        ${helper.getLanguageTypeNameForField(field)} ${assertField.name} = ${helper.getLanguageTypeNameForField(assertField)}.enumForValue(${helper.getReadBufferReadMethodCall(assertField.name, helper.getEnumBaseTypeReference(simpleTypeReference), "", assertField)});
        <#elseif helper.isComplexTypeReference(assertField.type)>
            <#assign complexTypeReference=assertField.type.asComplexTypeReference().orElseThrow()>
            <#assign typeName=complexTypeReference.name>
            <#assign typeDefinition=helper.getTypeDefinitionForTypeReference(complexTypeReference)>
            <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
                <#assign typeName=typeDefinition.getParentType().name>
            </#if>
            <@compress single_line=true>
        ${helper.getLanguageTypeNameForField(field)} ${assertField.name} = (${complexTypeReference.name}) ${typeName}IO.staticParse(readBuffer
                <#if field.params.isPresent()>
                    ,
                    <#list field.params.orElseThrow() as parserArgument>
                        (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(simpleTypeReference, parserArgument?index), true)})
                        (${helper.toParseExpression(assertField, parserArgument, parserArguments)})<#sep>, </#sep>
                    </#list>
                </#if>
                <#if complexTypeReference.params.isPresent()>
                    ,
                    <#list complexTypeReference.params.orElseThrow() as typeParam>
                        ${helper.toAccessExpression(null, typeParam, null)}<#sep>, </#sep>
                    </#list>
                </#if>);
            </@compress>
        <#else>
            <#assign simpleTypeReference = assertField.type.asSimpleTypeReference().orElseThrow()>
        ${helper.getLanguageTypeNameForField(field)} ${assertField.name} = ${helper.getReadBufferReadMethodCall(assertField.name, simpleTypeReference.asSimpleTypeReference().orElseThrow(), "", assertField)};
        </#if>
        if(${assertField.name} != ${helper.toParseExpression(assertField.asTypedField().orElseThrow(), assertField.conditionExpression, parserArguments)}) {
            throw new ParseAssertException("assertField ${assertField.name} with value " + ${assertField.name} + " didn't match the expected value " + ${helper.toParseExpression(assertField, assertField.conditionExpression, parserArguments)});
        }
        <#break>
    <#case "padding">
        <#assign paddingField = field.asPaddingField().orElseThrow()>
        <#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

        // Padding Field (padding)
        {
            readBuffer.pullContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) (${helper.toParseExpression(paddingField, paddingField.paddingCondition, parserArguments)});
            while ((readBuffer.hasMore(${helper.getNumBits(simpleTypeReference)})) && (_timesPadding-- > 0)) {
                // Just read the padding data and ignore it
                ${helper.getReadBufferReadMethodCall(simpleTypeReference, "", paddingField)};
            }
            readBuffer.closeContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        <#break>
    <#case "reserved">
        <#assign reservedField = field.asReservedField().orElseThrow()>
        <#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

        // Reserved Field (Compartmentalized so the "reserved" variable can't leak)
        {
            ${helper.getLanguageTypeNameForField(field)} reserved = ${helper.getReadBufferReadMethodCall("reserved", simpleTypeReference, "", reservedField)};
            if(reserved != ${helper.getReservedValue(reservedField)}) {
                LOGGER.info("Expected constant value " + ${reservedField.referenceValue} + " but got " + reserved + " for reserved field.");
            }
        }
        <#break>
    <#case "simple">
        <#assign simpleField = field.asSimpleField().orElseThrow()>

        <#if simpleField.isTry()>
            <#-- TODO: we need to initalize base types-->
        ${helper.getLanguageTypeNameForField(simpleField)} ${simpleField.name} = null;
        curPos = readBuffer.getPos();
        try {
        </#if>

        <#if !helper.isSimpleTypeReference(simpleField.type)>
        readBuffer.pullContext("${simpleField.name}");
        </#if>

        // Simple Field (${simpleField.name})
        <@compress single_line=true>
        <#if !simpleField.isTry()>${helper.getLanguageTypeNameForField(simpleField)}</#if> ${simpleField.name} =
        <#assign simpleFieldLogicalName><#if helper.isSimpleTypeReference(simpleField.type)>${simpleField.name}<#else>${simpleField.typeName}</#if></#assign>
        <#if helper.isEnumField(simpleField)>
        /* enum based simple field with type ${simpleField.type.name} */
        ${helper.getLanguageTypeNameForField(simpleField)}.enumForValue(
            ${helper.getReadBufferReadMethodCall(simpleField.type.name, helper.getEnumBaseTypeReference(simpleField.type), "", simpleField)}
        );
        <#elseif helper.isComplexTypeReference(simpleField.type)>
            <#assign complexTypeReference = simpleField.type.asComplexTypeReference().orElseThrow()>
            <#assign typeName=complexTypeReference.name>
            <#assign typeDefinition = helper.getTypeDefinitionForTypeReference(complexTypeReference)>
            <#if typeDefinition.isDiscriminatedChildTypeDefinition()>
                <#-- Usually you don't use child directly unless they are parameterized #-->
                <#assign typeName=typeDefinition.parentType.name>
                <#assign typeDefinition=typeDefinition.parentType>
            </#if>
                <#-- We downcast to the referenced type -->
        (${simpleField.type.name}) ${typeName}IO.staticParse(readBuffer
            <#if field.params.isPresent()>,
                <#list field.params.orElseThrow() as parserArgument>
                    <#if helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(complexTypeReference, parserArgument?index), true) = 'String'>
            ${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(complexTypeReference, parserArgument?index), true)}
                .valueOf(${helper.toParseExpression(simpleField, parserArgument, parserArguments)})<#sep>, </#sep>
                    <#else>
                (${helper.getLanguageTypeNameForTypeReference(helper.getArgumentType(complexTypeReference, parserArgument?index), true)})
                (${helper.toParseExpression(simpleField, parserArgument, parserArguments)})<#sep>, </#sep>
                    </#if>
                </#list>
            </#if>
            <#if complexTypeReference.params.isPresent() && typeDefinition.parserArguments.isPresent()>
                <#assign argumentOffset=0>
                <#if field.params.isPresent()><#assign argumentOffset=field.params.orElseThrow()?size></#if>
            ,
                    <#list complexTypeReference.params.orElseThrow() as typeParam>
                            <#-- We cast here explicitly as java sometimes can't infer the type. e.g. 0 is a int and not a byte#-->
            (${helper.getLanguageTypeNameForTypeReference(typeDefinition.parserArguments.orElseThrow()[typeParam?index + argumentOffset].type, true)})
            ${helper.toAccessExpression(null, typeParam, null)}<#sep>, </#sep>
                    </#list>
            </#if>
                )
        <#else>
        ${helper.getReadBufferReadMethodCall(simpleFieldLogicalName, simpleField.type.asSimpleTypeReference().orElseThrow(), "", simpleField)}
        </#if>
            ;
        </@compress>

        <#if !helper.isSimpleTypeReference(simpleField.type)>
        readBuffer.closeContext("${simpleField.name}");
        </#if>


        <#if simpleField.isTry()>
        } catch(ParseAssertException ignore){
            readBuffer.reset(curPos);
        }
        </#if>
        <#break>
    <#case "switch">
        <#assign switchField = field.asSwitchField().orElseThrow()>

        // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
        ${type.name}Builder builder = null;
        <#list switchField.cases as case>
            <@compress single_line=true>
            <#if case.discriminatorValues?has_content>
                if(
                <#list case.discriminatorValues as discriminatorValue>
                    <#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValue?index].asLiteral().orElseThrow().asVariableLiteral().orElseThrow()>
                    EvaluationHelper.equals(
                    ${helper.toParseExpression(null, discriminatorExpression, parserArguments)},
                    <#if helper.discriminatorValueNeedsStringEqualityCheck(discriminatorExpression)>
                        ${tracer.dive("discriminatorValueNeedsStringEqualityCheck")}"${discriminatorValue}"
                    <#elseif helper.isComplexTypeReference(helper.getDiscriminatorTypes()[discriminatorExpression.name])>
                        <#if helper.isEnumTypeReference(helper.getDiscriminatorTypes()[discriminatorExpression.name])>
                            ${tracer.dive("isEnumTypeReference")}${helper.getDiscriminatorTypes()[discriminatorExpression.name].asComplexTypeReference().orElseThrow().name}.${discriminatorValue}
                        <#else>
                            ${tracer.dive("!isEnumTypeReference")}${discriminatorValue}
                        </#if>
                    <#else>
                        ${tracer.dive("else")}${discriminatorValue}
                    </#if>
                    )
                    <#sep> && </#sep>
                    </#list>
                )
            </#if>{
            </@compress>
            <@compress single_line=true>
            <#assign hasCaseParseArguments=case.parserArguments.isPresent() && case.parserArguments.orElseThrow()?has_content>
            <#assign caseParseArguments><#if hasCaseParseArguments><#list case.parserArguments.orElseThrow() as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
            <#-- We expose the parentParserArguments to the child here too-->
            <#assign hasParentCaseParseArguments=case.parentType?? && case.parentType.parserArguments.isPresent() && case.parentType.parserArguments.orElseThrow()?filter(arg -> hasCaseParseArguments && !case.parserArguments.orElseThrow()?map(argument->argument.name)?seq_contains(arg.name) || !hasCaseParseArguments)?has_content>
            <#assign parentCaseParseArguments><#if hasParentCaseParseArguments><#list case.parentType.parserArguments.orElseThrow()?filter(arg -> hasCaseParseArguments && !case.parserArguments.orElseThrow()?map(argument->argument.name)?seq_contains(arg.name) || !hasCaseParseArguments) as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
            builder = ${case.name}IO.staticParse(readBuffer<#if hasCaseParseArguments>, ${tracer.dive("case parse arguments")} ${caseParseArguments}</#if><#if hasParentCaseParseArguments>, ${tracer.dive("case parent parse arguments")} ${parentCaseParseArguments}</#if>);
            </@compress>
        }<#sep> else </#sep>
        </#list>
        if (builder == null) {
            throw new ParseException("Unsupported case for discriminated type");
        }
        <#break>

    <#case "unknown">
        <#assign unknownField = field.asUnknownField().orElseThrow()>
        <#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

        // Unknown Field
        ${helper.getReadBufferReadMethodCall("unknown" , simpleTypeReference, "", unknownField)};
        <#break>

    <#case "virtual">
        <#assign virtualField = field.asVirtualField().orElseThrow()>

        // Virtual field (Just declare a local variable so we can access it in the parser)
        <#if helper.getLanguageTypeNameForField(field) = 'String'>
        ${helper.getLanguageTypeNameForField(field)} ${virtualField.name} = ${helper.getLanguageTypeNameForField(field)}.valueOf(${helper.toParseExpression(virtualField, virtualField.valueExpression, parserArguments)});
        <#else>
        ${helper.getLanguageTypeNameForField(field)} ${virtualField.name} = (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(virtualField, virtualField.valueExpression, parserArguments)});
        </#if>
        <#break>
</#switch>
</#list>

        readBuffer.closeContext("${type.name}");
        // Create the instance
        <#if type.isDiscriminatedChildTypeDefinition()>
        return new ${type.name}Builder(<#list type.propertyFields as field>${field.name}<#sep>, </#sep></#list>);
        <#elseif type.isDiscriminatedParentTypeDefinition()>
        return builder.build(<#list type.propertyFields as field>${field.name}<#sep>, </#sep></#list>);
        <#else>
        return new ${type.name}(<#list type.propertyFields as field>${field.name}<#sep>, </#sep></#list>);
        </#if>
    }

<#if outputFlavor != "passive">
    public static void staticSerialize(WriteBuffer writeBuffer, ${type.name} _value<#if helper.getSerializerArguments(parserArguments)?has_content>, <#list helper.getSerializerArguments(parserArguments) as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if>) throws ParseException {
    <#if helper.hasFieldOfType("unknown")>
        throw new ParseException("Unknown field not serializable");
    <#else>
        int startPos = writeBuffer.getPos();
        writeBuffer.pushContext("${type.name}");
<#list type.fields as field>
<#switch field.typeName>
    <#case "array">
        <#assign arrayField = field.asArrayField().orElseThrow()>

        // Array Field (${arrayField.name})
        if(_value.get${arrayField.name?cap_first}() != null) {
            <#if arrayField.type.isByteBased()>
            // Byte Array field (${arrayField.name})
            writeBuffer.writeByteArray("${arrayField.name}", _value.get${arrayField.name?cap_first}());
            <#else>
            writeBuffer.pushContext("${arrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
            int itemCount = (int) _value.get${arrayField.name?cap_first}().length;
            int curItem = 0;
            for(${helper.getLanguageTypeNameForField(arrayField)} element : _value.get${arrayField.name?cap_first}()) {
                    <#if helper.isSimpleTypeReference(arrayField.type)>
                        <#assign simpleTypeReference = arrayField.type.asSimpleTypeReference().orElseThrow()>
                ${helper.getWriteBufferWriteMethodCall("", simpleTypeReference, "element", arrayField)};
                    <#else>
                        <#assign complexTypeReference = arrayField.type.asComplexTypeReference().orElseThrow()>
                boolean lastItem = curItem == (itemCount - 1);
                ${complexTypeReference.name}IO.staticSerialize(writeBuffer, element<#if helper.getSerializerTerms(field.params.orElse(null))?has_content>, <#list helper.getSerializerTerms(field.params.orElseThrow()) as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if>);
                    </#if>
                curItem++;
            }
            writeBuffer.popContext("${arrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
            </#if>
        }
        <#break>
    <#case "checksum">
        <#assign checksumField = field.asChecksumField().orElseThrow()>
        <#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

        // Checksum Field (checksum) (Calculated)
        {
            ${helper.getLanguageTypeNameForField(field)} _checksum = ${helper.getNullValueForTypeReference(checksumField.type)};
            _checksum = (${helper.getLanguageTypeNameForField(field)}) (${helper.toSerializationExpression(checksumField, checksumField.checksumExpression, parserArguments)});
            ${helper.getWriteBufferWriteMethodCall("checksum", simpleTypeReference, "(_checksum)", checksumField)};
        }
        <#break>
    <#case "const">
        <#assign constField = field.asConstField().orElseThrow()>

        // Const Field (${constField.name})
        <#if helper.isSimpleTypeReference(constField.type)>
            <#assign simpleTypeReference = constField.type.asSimpleTypeReference().orElseThrow()>
            <#if helper.getLanguageTypeNameForField(field) = 'float'>
        ${helper.getWriteBufferWriteMethodCall(simpleTypeReference, constField.referenceValue + "f", constField)};
            <#else>
        ${helper.getWriteBufferWriteMethodCall(constField.name, simpleTypeReference, constField.referenceValue, constField)};
            </#if>
        <#else>
            <#assign enumTypeReference = constField.type>
            ${helper.getWriteBufferWriteMethodCall(helper.getTypeDefinitionForTypeReference(enumTypeReference).name, helper.getEnumBaseTypeReference(enumTypeReference), "(" + type.name + "." + constField.name?upper_case + ".getValue())", constField, "WithReaderWriterArgs.WithAdditionalStringRepresentation("+ type.name + "." + constField.name?upper_case + ".name())")};
        </#if>
        <#break>
    <#case "discriminator">
        <#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>

        // Discriminator Field (${discriminatorField.name}) (Used as input to a switch field)
        ${helper.getLanguageTypeNameForField(field)} ${discriminatorField.name} = (${helper.getLanguageTypeNameForField(field)}) _value.get${discriminatorField.name?cap_first}();
        <#if helper.isSimpleTypeReference(discriminatorField.type)>
            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
            ${helper.getWriteBufferWriteMethodCall(discriminatorField.name, simpleTypeReference, "(" + discriminatorField.name + ")", discriminatorField)};
        <#else>
            <#assign complexTypeReference = discriminatorField.type>
            <#if helper.isEnumField(field)>
                ${helper.getWriteBufferWriteMethodCall(discriminatorField.name, helper.getEnumBaseTypeReference(discriminatorField.type), "(" + discriminatorField.name + ".getValue())", discriminatorField)};
            <#else>
                ${complexTypeReference.name}IO.staticSerialize(writeBuffer, ${discriminatorField.name});
            </#if>
        </#if>
        <#break>
    <#case "enum">
        <#assign enumField = field.asEnumField().orElseThrow()>

        writeBuffer.pushContext("${enumField.name}");
        // Enum field (${enumField.name})
        ${helper.getLanguageTypeNameForField(field)} ${enumField.name} = (${helper.getLanguageTypeNameForField(enumField)}) _value.get${enumField.name?cap_first}();
        <#if enumField.fieldName.isPresent()>
        ${helper.getWriteBufferWriteMethodCall(helper.getTypeDefinitionForTypeReference(enumField.type).name, helper.getEnumFieldSimpleTypeReference(enumField.type, enumField.fieldName.orElseThrow()), "(" + enumField.name + ".get" + enumField.fieldName.orElseThrow()?cap_first + "())", enumField, "WithReaderWriterArgs.WithAdditionalStringRepresentation(${enumField.name}.name())")};
        <#else>
        ${helper.getWriteBufferWriteMethodCall(helper.getTypeDefinitionForTypeReference(enumField.type).name, helper.getEnumBaseTypeReference(enumField.type), "(" + enumField.name + ".getValue())", enumField, "WithReaderWriterArgs.WithAdditionalStringRepresentation(${enumField.name}.name())")};
        </#if>
        writeBuffer.popContext("${enumField.name}");
        <#break>
    <#case "implicit">
        <#assign implicitField = field.asImplicitField().orElseThrow()>
        <#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

        // Implicit Field (${implicitField.name}) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
        ${helper.getLanguageTypeNameForField(field)} ${implicitField.name} = (${helper.getLanguageTypeNameForField(field)}) (${helper.toSerializationExpression(implicitField, implicitField.serializeExpression, parserArguments)});
        ${helper.getWriteBufferWriteMethodCall(implicitField.name, simpleTypeReference, "(" + implicitField.name + ")", implicitField)};
        <#break>
    <#case "manualArray">
        <#assign manualArrayField = field.asManualArrayField().orElseThrow()>

        // Manual Array Field (${manualArrayField.name})
        if(_value.get${manualArrayField.name?cap_first}() != null) {
            writeBuffer.pushContext("${manualArrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
            for(${helper.getLanguageTypeNameForField(field)} element : _value.get${manualArrayField.name?cap_first}()) {
                ${helper.toSerializationExpression(manualArrayField, manualArrayField.serializeExpression, parserArguments)};
            }
            writeBuffer.popContext("${manualArrayField.name}", WithReaderWriterArgs.WithRenderAsList(true));
        }
        <#break>
    <#case "manual">
        <#assign manualField = field.asTypedField().orElseThrow()>

        // Manual Field (${manualField.name})
        ${helper.toSerializationExpression(manualField, manualField.serializeExpression, parserArguments)};
       <#break>
    <#case "optional">
        <#assign optionalField = field.asOptionalField().orElseThrow()>

        // Optional Field (${optionalField.name}) (Can be skipped, if the value is null)
        ${helper.getLanguageTypeNameForField(field)} ${optionalField.name} = null;
        if(_value.get${optionalField.name?cap_first}() != null) {
            ${optionalField.name} = (${helper.getLanguageTypeNameForField(field)}) _value.get${optionalField.name?cap_first}();
            <#if helper.isSimpleTypeReference(optionalField.type)>
                <#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
            ${helper.getWriteBufferWriteMethodCall(optionalField.name, simpleTypeReference, "(" + optionalField.name + ")", optionalField)};
            <#else>
                <#assign complexTypeReference = optionalField.type>
                <#if helper.isEnumField(field)>
            ${helper.getWriteBufferWriteMethodCall(optionalField.name, helper.getEnumBaseTypeReference(optionalField.type), "(" + optionalField.name + ".getValue())", optionalField)};
                <#else>
            ${complexTypeReference.name}IO.staticSerialize(writeBuffer, ${optionalField.name});
                </#if>
            </#if>
        }
        <#break>
    <#case "padding">
        <#assign paddingField = field.asPaddingField().orElseThrow()>
        <#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

        // Padding Field (padding)
        {
            writeBuffer.pushContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
            int _timesPadding = (int) (${helper.toSerializationExpression(paddingField, paddingField.paddingCondition, parserArguments)});
            while (_timesPadding-- > 0) {
                ${helper.getLanguageTypeNameForField(field)} _paddingValue = (${helper.getLanguageTypeNameForField(field)}) (${helper.toSerializationExpression(paddingField, paddingField.paddingValue, parserArguments)});
                ${helper.getWriteBufferWriteMethodCall("", simpleTypeReference, "(_paddingValue)", paddingField)};
            }
            writeBuffer.popContext("padding", WithReaderWriterArgs.WithRenderAsList(true));
        }
        <#break>
    <#case "reserved">
        <#assign reservedField = field.asReservedField().orElseThrow()>
        <#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

        // Reserved Field (reserved)
        ${helper.getWriteBufferWriteMethodCall("reserved", simpleTypeReference, helper.getReservedValue(reservedField), reservedField)};
        <#break>
    <#case "simple">
        <#assign simpleField = field.asSimpleField().orElseThrow()>

        // Simple Field (${simpleField.name})
        ${helper.getLanguageTypeNameForField(field)} ${simpleField.name} = (${helper.getLanguageTypeNameForField(field)}) _value.get${simpleField.name?cap_first}();
        <#if helper.isSimpleTypeReference(simpleField.type)>
            <#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
            <#if helper.isEnumField(field)>
        // enum based simple field with type ${simpleField.type.asComplexTypeReference().orElseThrow().name}
        ${helper.getWriteBufferWriteMethodCall(simpleField.type.asComplexTypeReference().orElseThrow().name, simpleTypeReference, "(" + simpleField.name + ")", simpleField, "WithReaderWriterArgs.WithAdditionalStringRepresentation(${simpleField.name}.name())")};
            <#else>
        ${helper.getWriteBufferWriteMethodCall(simpleField.name, simpleTypeReference, "(" + simpleField.name + ")", simpleField)};
            </#if>
        <#else>
        writeBuffer.pushContext("${simpleField.name}");
            <#assign complexTypeReference = simpleField.type>
            <#if helper.isEnumField(field)>
        // enum field with type ${complexTypeReference.name}
        ${helper.getWriteBufferWriteMethodCall(complexTypeReference.name, helper.getEnumBaseTypeReference(simpleField.type), "(" + simpleField.name + ".getValue())", simpleField, "WithReaderWriterArgs.WithAdditionalStringRepresentation(${simpleField.name}.name())")};
            <#else>
        ${complexTypeReference.name}IO.staticSerialize(writeBuffer, ${simpleField.name});
            </#if>
        writeBuffer.popContext("${simpleField.name}");
        </#if>
        <#break>
    <#case "switch">
        <#assign switchField = field.asSwitchField().orElseThrow()>

        // Switch field (Depending on the discriminator values, passes the instantiation to a sub-type)
        <#list switchField.cases as case>
        if(_value instanceof ${case.name}) {
            ${case.name}IO.staticSerialize(writeBuffer, (${case.name}) _value);
        }<#sep> else </#sep>
        </#list>
        <#break>
    <#case "virtual">
        <#break>
</#switch>
</#list>
        writeBuffer.popContext("${type.name}");
    </#if>
    }
</#if>

<#if type.isDiscriminatedParentTypeDefinition()>
    public static interface ${type.name}Builder {
        ${type.name} build(<#list type.propertyFields as field>${helper.getLanguageTypeNameForField(field)}<#if field.loopType??>[]</#if> ${field.name}<#sep>, </#sep></#list>);
    }

</#if>
<#if type.isDiscriminatedChildTypeDefinition()>
    public static class ${type.name}Builder implements ${type.parentType.name}IO.${type.parentType.name}Builder {
        <#if type.propertyFields?has_content>
            <#list type.propertyFields as field>
        private final ${helper.getLanguageTypeNameForField(field)}<#if field.loopType??>[]</#if> ${field.name};
            </#list>
        </#if>

        public ${type.name}Builder(<#list type.propertyFields as field>${helper.getLanguageTypeNameForField(field)}<#if field.loopType??>[]</#if> ${field.name}<#sep>, </#sep></#list>) {
            <#list type.propertyFields as field>
            this.${field.name} = ${field.name};
            </#list>
        }

        public ${type.name} build(<#list type.parentType.asComplexTypeDefinition().orElseThrow().propertyFields as field>${helper.getLanguageTypeNameForField(field)}<#if field.loopType??>[]</#if> ${field.name}<#sep>, </#sep></#list>) {
            return new ${type.name}(<#list type.allPropertyFields as field>${field.name}<#sep>, </#sep></#list>);
        }
    }

</#if>
}
</#outputformat>
