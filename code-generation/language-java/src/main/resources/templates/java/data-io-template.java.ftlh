<#--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<#-- Prevent freemarker from escaping stuff -->
<#outputformat "undefined">
<#-- Declare the name and type of variables passed in to the template -->
<#-- @ftlvariable name="languageName" type="java.lang.String" -->
<#-- @ftlvariable name="protocolName" type="java.lang.String" -->
<#-- @ftlvariable name="outputFlavor" type="java.lang.String" -->
<#-- @ftlvariable name="helper" type="org.apache.plc4x.language.java.JavaLanguageTemplateHelper" -->
<#-- @ftlvariable name="tracer" type="org.apache.plc4x.plugins.codegenerator.protocol.freemarker.Tracer" -->
<#-- @ftlvariable name="type" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
${helper.packageName(protocolName, languageName, outputFlavor)?replace(".", "/")}/${type.name}.java
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ${helper.packageName(protocolName, languageName, outputFlavor)};

import static org.apache.plc4x.java.spi.generation.StaticHelper.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;

import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.spi.generation.*;
import org.apache.plc4x.java.spi.values.*;
import org.apache.plc4x.java.api.value.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.time.*;
import java.time.temporal.ChronoField;
import java.util.*;
import java.util.function.Supplier;
import java.util.stream.Collectors;

// Code generated by code-generation. DO NOT EDIT.

<#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
<#if type.parserArguments.isPresent()><#assign parserArguments=type.parserArguments.orElseThrow()></#if>
public class ${type.name} {

    private static final Logger LOGGER = LoggerFactory.getLogger(${type.name}.class);
    <#assign hasParserArguments=parserArguments?has_content/>
    <#assign parserArgumentList><#if hasParserArguments><#list parserArguments as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
    public static PlcValue staticParse(ReadBuffer readBuffer<#if hasParserArguments>, ${parserArgumentList}</#if>) throws ParseException {
        <#assign defaultCaseOutput=false>
        <#assign dataIoTypeDefinition=type.asDataIoTypeDefinition().orElseThrow()>
        <#list dataIoTypeDefinition.switchField.orElseThrow().cases as case>
            <#--
                Output the if-expression for this case
            -->
            <@compress single_line=true>
                <#if case.discriminatorValueTerms?has_content>
                    if(
                    <#list case.discriminatorValueTerms as discriminatorValueTerm>
                        <#if helper.isWildcard(discriminatorValueTerm)>
                            true
                        <#else>
                            <#assign switchField=dataIoTypeDefinition.switchField.orElseThrow()>
                            <#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValueTerm?index].asLiteral().orElseThrow().asVariableLiteral().orElseThrow()>
                            <#assign discriminatorType=helper.getDiscriminatorTypes()[discriminatorExpression.discriminatorName]>
                            EvaluationHelper.equals(
                            ${helper.toParseExpression(switchField, discriminatorType, discriminatorExpression, parserArguments)},
                            <#if discriminatorType.isEnumTypeReference()>
                                ${helper.getLanguageTypeNameForTypeReference(discriminatorType)}.${helper.toParseExpression(switchField, discriminatorType, discriminatorValueTerm, parserArguments)}
                            <#else>
                                (${helper.getLanguageTypeNameForTypeReference(discriminatorType, true)}) ${helper.toParseExpression(switchField, discriminatorType, discriminatorValueTerm, parserArguments)}
                            </#if>
                            )
                        </#if>
                        <#sep> && </#sep>
                    </#list>
                    )
                <#else>
                    <#assign defaultCaseOutput=true>
                </#if>{ // ${case.name}
            </@compress>
            <#--
                Output the body of this case
            -->
            <#assign reservedFieldIndex=0>
            <#assign valueDefined=false>
            <#list case.fields as field>
                <#if field.isNamedField()>
                    <#assign namedField = field.asNamedField().orElseThrow()>
                    <#if namedField.name == "value">
                        <#assign valueDefined=true>
                    </#if>
                </#if>
                <#switch field.typeName>
                    <#case "array">
                        <#assign arrayField = field.asArrayField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>
                        <#assign arrayElementTypeReference = arrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

                        <#if arrayElementTypeReference.isByteBased()>
                            <#if !field.isCountArrayField() && !field.isLengthArrayField()>
                                throw new ParseException("array fields of type byte only support 'count' and 'length' loop-types.");
                            </#if>
                            byte[] ${namedField.name} = readBuffer.readByteArray("${namedField.name}", Math.toIntExact(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        <#else>
                        <#-- If this is a count array, we can directly initialize an array with the given size -->
                            <#if field.isCountArrayField()>
                                ${helper.getNonPrimitiveLanguageTypeNameForField(arrayField)} _${arrayField.name} = readCountArrayField("${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, ${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)});
                                List<PlcValue> value = new ArrayList<>(_value.size());
                                for (${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference, true)} _item : _value) {
                                    value.add(new ${helper.getPlcValueTypeForTypeReference(arrayElementTypeReference)}(_item));
                                }
                            <#-- In all other cases do we have to work with a list, that is later converted to an array -->
                            <#else>
                            <#-- For a length array, we read data till the read position of the buffer reaches a given position -->
                                <#if field.isLengthArrayField()>
                                    ${helper.getNonPrimitiveLanguageTypeNameForField(arrayField)} ${arrayField.name} = readLengthArrayField("${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, ${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)});
                                <#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
                                <#elseif field.isTerminatedArrayField()>
                                    ${helper.getNonPrimitiveLanguageTypeNameForField(arrayField)} ${arrayField.name} = readTerminatedArrayField("${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, () -> ((boolean) (${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)}))${helper.getFieldOptions(typedField, parserArguments)});
                                </#if>
                            </#if>
                        </#if>
                        <#break>
                    <#case "assert">
                        <#assign assertField = field.asAssertField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(assertField, assertField.type, assertField.conditionExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "checksum">
                        <#assign checksumField = field.asChecksumField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "const">
                        <#assign constField = field.asConstField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${type.name}.${namedField.name?upper_case}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "discriminator">
                        <#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "enum">
                        <#assign enumField = field.asEnumField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", "${enumField.type.asNonSimpleTypeReference().orElseThrow().typeDefinition.name}", readEnum(${enumField.type.asNonSimpleTypeReference().orElseThrow().typeDefinition.name}::firstEnumForField${enumField.fieldName?cap_first}, ${helper.getDataReaderCall(helper.getEnumFieldTypeReference(enumField.type, enumField.fieldName))})${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "implicit">
                        <#assign implicitField = field.asImplicitField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "manualArray">
                        <#assign manualArrayField = field.asManualArrayField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>
                        <#assign arrayElementTypeReference = manualArrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

                        <#if arrayElementTypeReference.isByteBased()>
                            byte[] ${namedField.name} = readManualByteArrayField("${namedField.name}", readBuffer, (byte[] _values) -> (boolean) (${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments)}), () -> (byte) (${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        <#else>
                            ${helper.getNonPrimitiveLanguageTypeNameForField(manualArrayField)} ${namedField.name} = readManualArrayField("${namedField.name}", readBuffer, (${helper.getNonPrimitiveLanguageTypeNameForField(manualArrayField)} _values) -> (boolean) (${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments)}), () -> (${helper.getLanguageTypeNameForTypeReference(manualArrayField.type.elementTypeReference)}) (${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        </#if>
                        <#break>
                    <#case "manual">
                        <#assign manualField = field.asManualField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${manualField.name} = readManualField("${namedField.name}", readBuffer, () -> (${helper.getLanguageTypeNameForField(manualField)}) (${helper.toParseExpression(manualField, manualField.type, manualField.parseExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "optional">
                        <#assign optionalField = field.asOptionalField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}<#if optionalField.conditionExpression.present>, ${helper.toParseExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}</#if>${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "padding">
                        <#assign paddingField = field.asPaddingField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

                        read${field.typeName?cap_first}Field(${helper.getDataReaderCall(typedField.type)}, (int) (${helper.toParseExpression(paddingField, paddingField.type, paddingField.paddingCondition, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "reserved">
                        <#assign reservedField = field.asReservedField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForTypeReference(reservedField.type, false)} reservedField${reservedFieldIndex}<#assign reservedFieldIndex=reservedFieldIndex+1> = read${field.typeName?cap_first}Field("reserved", ${helper.getDataReaderCall(typedField.type)}, ${helper.getReservedValue(reservedField)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "simple">
                        <#assign simpleField = field.asSimpleField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = <#if typedField.type.isEnumTypeReference()>readEnumField("${namedField.name}", "${helper.getLanguageTypeNameForField(field)}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)});<#else>read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)});</#if>
                        <#break>
                    <#case "unknown">
                        <#assign unknownField = field.asUnknownField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>

                        read${field.typeName?cap_first}Field("unknown", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "virtual">
                        <#assign virtualField = field.asVirtualField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>
                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getLanguageTypeNameForField(field)}.class, ${helper.toParseExpression(virtualField, virtualField.type, virtualField.valueExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "validation">
                        <#assign validationField = field.asValidationField().orElseThrow()>
                        // Validation
                        if (!(${helper.toParseExpression(validationField, helper.boolTypeReference, validationField.getValidationExpression(), null)})) {
                        <#assign errorType="ParseValidationException">
                        <#if !validationField.shouldFail()><#assign errorType="ParseAssertException"></#if>
                        throw new ${errorType}(${validationField.getDescription().orElse("\"Validation failed\"")});
                        }
                        <#break>
                    <#case "peek">
                        <#assign peekField = field.asPeekField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = read${field.typeName?cap_first}Field("${namedField.name}", ${helper.getDataReaderCall(typedField.type)}<#if peekField.offsetExpression.present>, ${helper.toParseExpression(peekField, helper.boolTypeReference, peekField.offsetExpression.get(), parserArguments)}</#if>${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                </#switch>
            </#list>
            <#switch case.name>
                <#case "TIME">
                    <#if helper.hasFieldsWithNames(case.fields, "milliseconds")>
                        return PlcTIME.ofMilliseconds(milliseconds);
                    </#if>
                    <#break>
                <#case "LTIME">
                    <#if helper.hasFieldsWithNames(case.fields, "nanoseconds")>
                        return PlcLTIME.ofNanoseconds(nanoseconds);
                    </#if>
                    <#break>
                <#case "DATE">
                    <#if helper.hasFieldsWithNames(case.fields, "secondsSinceEpoch")>
                        return PlcDATE.ofSecondsSinceEpoch(secondsSinceEpoch);
                    <#elseif helper.hasFieldsWithNames(case.fields, "daysSinceEpoch")>
                        return PlcDATE.ofDaysSinceEpoch(daysSinceEpoch);
                    <#elseif helper.hasFieldsWithNames(case.fields, "daysSinceSiemensEpoch")>
                        return PlcDATE.ofDaysSinceSiemensEpoch(daysSinceSiemensEpoch);
                    </#if>
                    <#break>
                <#case "LDATE">
                    <#if helper.hasFieldsWithNames(case.fields, "nanosecondsSinceEpoch")>
                        return PlcLDATE.ofNanosecondsSinceEpoch(nanosecondsSinceEpoch);
                    </#if>
                    <#break>
                <#case "TIME_OF_DAY">
                    <#if helper.hasFieldsWithNames(case.fields, "millisecondsSinceMidnight")>
                        return PlcTIME_OF_DAY.ofMillisecondsSinceMidnight(millisecondsSinceMidnight);
                    </#if>
                    <#break>
                <#case "LTIME_OF_DAY">
                    <#if helper.hasFieldsWithNames(case.fields, "nanosecondsSinceMidnight")>
                        return PlcLTIME_OF_DAY.ofNanosecondsSinceMidnight(nanosecondsSinceMidnight);
                    </#if>
                    <#break>
                <#case "DATE_AND_TIME">
                    <#if helper.hasFieldsWithNames(case.fields, "year", "month", "day", "hour", "minutes", "seconds", "millisecondsOfSecond")>
                        return PlcDATE_AND_TIME.ofSegments(year, (month == 0) ? 1 : month, (day == 0) ? 1 : day, hour, minutes, seconds, millisecondsOfSecond * 1000000);
                    <#elseif helper.hasFieldsWithNames(case.fields, "secondsSinceEpoch")>
                        return PlcDATE_AND_TIME.ofSecondsSinceEpoch(secondsSinceEpoch);
                    </#if>
                    <#break>
                <#case "DATE_AND_LTIME">
                    <#if helper.hasFieldsWithNames(case.fields, "nanosecondsSinceEpoch")>
                        return PlcDATE_AND_LTIME.ofNanosecondsSinceEpoch(nanosecondsSinceEpoch);
                    <#elseif helper.hasFieldsWithNames(case.fields, "year", "month", "day", "hour", "minutes", "seconds", "nannosecondsOfSecond")>
                        return PlcDATE_AND_LTIME.ofSegments(year, (month == 0) ? 1 : month, (day == 0) ? 1 : day, hour, minutes, seconds, nannosecondsOfSecond);
                    </#if>
                    <#break>
                <#case "LDATE_AND_TIME">
                    <#if helper.hasFieldsWithNames(case.fields, "nanosecondsSinceEpoch")>
                        return PlcLDATE_AND_TIME.ofNanosecondsSinceEpoch(nanosecondsSinceEpoch);
                    </#if>
                    <#break>
                <#case "Struct">

                    Map<String, PlcValue> _map = new HashMap<>();
                    <#list case.fields as field>
                        <#if field.isNamedField()>
                            <#assign namedField=field.asNamedField().orElseThrow()>
                            <#assign typedField=field.asTypedField().orElseThrow()>
                            _map.put("${namedField.name}", new ${helper.getPlcValueTypeForTypeReference(typedField.type)}(${namedField.name}));
                        </#if>
                    </#list>
                    return new PlcStruct(_map);
                    <#break>
                <#case "List">
                    <#if helper.isRawByteArray(case)>
                        return new PlcRawByteArray(value);
                    <#else>
                        return new PlcList(value);
                    </#if>
                    <#break>
                <#default>
                    return new Plc${case.name}(value);
            </#switch>
            }<#sep> else </#sep>
        </#list>
        <#if !defaultCaseOutput>
            return null;
        </#if>
    }

    public static int getLengthInBytes(PlcValue _value<#if type.parserArguments.isPresent()>, <#list type.parserArguments.orElseThrow() as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if>) {
        return (int) Math.ceil((float) getLengthInBits(_value<#if type.parserArguments.isPresent()>, <#list type.parserArguments.orElseThrow() as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if>) / 8.0);
    }

    public static int getLengthInBits(PlcValue _value<#if type.parserArguments.isPresent()>, <#list type.parserArguments.orElseThrow() as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if>) {
        int lengthInBits = 0;
        <#assign dataIoTypeDefinition=type.asDataIoTypeDefinition().orElseThrow()>
        <#list dataIoTypeDefinition.switchField.orElseThrow().cases as case>
            <#--
                Output the if-expression for this case
            -->
            <@compress single_line=true>
                <#if case.discriminatorValueTerms?has_content>
                    if(
                    <#list case.discriminatorValueTerms as discriminatorValueTerm>
                        <#if helper.isWildcard(discriminatorValueTerm)>
                            true
                        <#else>
                            <#assign switchField=dataIoTypeDefinition.switchField.orElseThrow()>
                            <#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValueTerm?index].asLiteral().orElseThrow().asVariableLiteral().orElseThrow()>
                            <#assign discriminatorType=helper.getDiscriminatorTypes()[discriminatorExpression.discriminatorName]>
                            EvaluationHelper.equals(
                            ${helper.toParseExpression(switchField, discriminatorType, discriminatorExpression, parserArguments)},
                            <#if discriminatorType.isEnumTypeReference()>
                                ${helper.getLanguageTypeNameForTypeReference(discriminatorType)}.${helper.toParseExpression(switchField, discriminatorType, discriminatorValueTerm, parserArguments)}
                            <#else>
                                (${helper.getLanguageTypeNameForTypeReference(discriminatorType, true)}) ${helper.toParseExpression(switchField, discriminatorType, discriminatorValueTerm, parserArguments)}
                            </#if>
                            )
                        </#if>
                        <#sep> && </#sep>
                    </#list>
                    )
                </#if>{ // ${case.name}
            </@compress>
            <#--
                Calculate the size of the current type.
            -->
            <#list case.fields as field>
                <#switch field.typeName>
                    <#case "array">
                        <#assign arrayField = field.asArrayField().orElseThrow()>
                        <#assign arrayElementTypeReference = arrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

                        // Array field
                        if(_value != null) {
                        <#if arrayElementTypeReference.isSimpleTypeReference()>
                            <#assign simpleTypeReference = arrayElementTypeReference.asSimpleTypeReference().orElseThrow()>
                            lengthInBits += ${simpleTypeReference.sizeInBits} * _value.<#if arrayElementTypeReference.isByteBased()>getRaw().length<#else>getList().size()</#if>;
                        <#elseif arrayField.isCountArrayField()>
                            int i=0;
                            <#assign nonSimpleTypeReference = arrayElementTypeReference.asNonSimpleTypeReference().orElseThrow()>
                            for(${nonSimpleTypeReference.name} element : ${arrayField.name}) {
                            ThreadLocalHelper.lastItemThreadLocal.set(++i >= ${arrayField.name}.size());
                            lengthInBits += element.getLengthInBits();
                            }
                        <#else>
                            for(Message element : ${arrayField.name}) {
                            lengthInBits += element.getLengthInBits();
                            }
                        </#if>
                        }
                        <#break>
                    <#case "checksum">
                        <#assign checksumField = field.asChecksumField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign simpleTypeReference = typedField.type.asSimpleTypeReference().orElseThrow()>

                        // Checksum Field (checksum)
                        lengthInBits += ${simpleTypeReference.sizeInBits};
                        <#break>
                    <#case "const">
                        <#assign constField = field.asConstField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>

                        // Const Field (${constField.name})
                        <#if typedField.type.isSimpleTypeReference()>
                            <#assign simpleTypeReference = typedField.type.asSimpleTypeReference().orElseThrow()>
                            lengthInBits += ${simpleTypeReference.sizeInBits};
                        <#else>
                            lengthInBits += ${helper.getEnumBaseTypeReference(typedField.type).sizeInBits};
                        </#if>
                        <#break>
                    <#case "discriminator">
                        <#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>

                        // Discriminator Field (${discriminatorField.name})
                        <#if discriminatorField.type.isSimpleTypeReference()>
                            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
                            <#if simpleTypeReference.isVstringTypeReference()>
                                <#assign vstringTypeReference = simpleTypeReference.asVstringTypeReference().orElseThrow()>
                                lengthInBits += ${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, vstringTypeReference.getLengthExpression(), parserArguments)};
                            <#else>
                                lengthInBits += ${simpleTypeReference.sizeInBits};
                            </#if>
                        <#elseif helper.isEnumField(field)>
                            lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
                        <#else>
                            lengthInBits += ${discriminatorField.name}.getLengthInBits();
                        </#if>
                        <#break>
                    <#case "enum">
                        <#assign enumField = field.asEnumField().orElseThrow()>

                        // Enum Field (${enumField.name})
                        lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits};
                        <#break>
                    <#case "implicit">
                        <#assign implicitField = field.asImplicitField().orElseThrow()>
                        <#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

                        // Implicit Field (${implicitField.name})
                        lengthInBits += ${simpleTypeReference.sizeInBits};
                        <#break>
                    <#case "manualArray">
                        <#assign manualArrayField = field.asManualArrayField().orElseThrow()>
                        <#assign arrayElementTypeReference = manualArrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

                        // Manual Array Field (${manualArrayField.name})
                        lengthInBits += ${helper.toParseExpression(manualArrayField, helper.intTypeReference, manualArrayField.lengthExpression, parserArguments)} * 8;
                        <#break>
                    <#case "manual">
                        <#assign manualField = field.asManualField().orElseThrow()>

                        // Manual Field (${manualField.name})
                        lengthInBits += ${helper.toParseExpression(manualField, helper.intTypeReference, manualField.lengthExpression, parserArguments)};
                        <#break>
                    <#case "optional">
                        <#assign optionalField = field.asOptionalField().orElseThrow()>
                        <#assign nullBytesHex = optionalField.getNullBytesHex()>

                        // Optional Field (${optionalField.name})<#if nullBytesHex.isEmpty()>
                        if(${optionalField.name} != null) {</#if>
                        <#if optionalField.type.isSimpleTypeReference()>
                            <#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
                            <#if simpleTypeReference.isVstringTypeReference()>
                                <#assign vstringTypeReference = simpleTypeReference.asVstringTypeReference().orElseThrow()>
                                lengthInBits += ${helper.toSerializationExpression(optionalField, helper.intTypeReference, vstringTypeReference.getLengthExpression(), parserArguments)};
                            <#else>
                                lengthInBits += ${simpleTypeReference.sizeInBits};
                            </#if>
                        <#elseif helper.isEnumField(field)>
                            lengthInBits += ${helper.getEnumBaseTypeReference(optionalField.type).sizeInBits};
                        <#elseif optionalField.type.isDataIoTypeReference()>
                            lengthInBits += ${optionalField.type.asComplexTypeReference().orElseThrow().name}.getLengthInBits(${optionalField.name}<#if optionalField.type.asComplexTypeReference().orElseThrow().params?has_content>, <#list optionalField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>${helper.toParseExpression(optionalField, helper.anyTypeReference, param, parserArguments)}<#sep>, </#sep></#list></#if>);
                        <#else>
                            lengthInBits += ${optionalField.name}.getLengthInBits();
                        </#if>
                        <#if nullBytesHex.isEmpty()>}</#if>
                        <#break>
                    <#case "padding">
                        <#assign paddingField = field.asPaddingField().orElseThrow()>
                        <#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

                        // Padding Field (padding)
                    <#-- We're replacing the "lastItem" with 'false' here as the item itself can't know if it is the last -->
                        int _timesPadding = (int) (${helper.toParseExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)});
                        while (_timesPadding-- > 0) {
                        lengthInBits += ${simpleTypeReference.sizeInBits};
                        }
                        <#break>
                    <#case "reserved">
                        <#assign reservedField = field.asReservedField().orElseThrow()>
                        <#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

                        // Reserved Field (reserved)
                        lengthInBits += ${simpleTypeReference.sizeInBits};
                        <#break>
                    <#case "simple">
                        <#assign simpleField = field.asSimpleField().orElseThrow()>

                        // Simple field (${simpleField.name})
                        <#if simpleField.type.isSimpleTypeReference()>
                            <#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
                            <#if simpleTypeReference.isVstringTypeReference()>
                                <#assign vstringTypeReference = simpleTypeReference.asVstringTypeReference().orElseThrow()>
                                lengthInBits += ${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.getLengthExpression(), parserArguments)};
                            <#else>
                                lengthInBits += ${simpleTypeReference.sizeInBits};
                            </#if>
                        <#elseif helper.isEnumField(field)>
                            lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits};
                        <#elseif simpleField.type.isDataIoTypeReference()>
                            lengthInBits += ${simpleField.type.asComplexTypeReference().orElseThrow().name}.getLengthInBits(${simpleField.name}<#if simpleField.type.asComplexTypeReference().orElseThrow().params?has_content>, <#list simpleField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>${helper.toParseExpression(simpleField, helper.anyTypeReference, param, parserArguments)}<#sep>, </#sep></#list></#if>);
                        <#else>
                            lengthInBits += ${simpleField.name}.getLengthInBits();
                        </#if>
                        <#break>
                    <#case "switch">
                        <#assign switchField = field.asSwitchField().orElseThrow()>

                        // Length of sub-type elements will be added by sub-type...
                        <#break>
                    <#case "unknown">
                        <#assign unknownField = field.asUnknownField().orElseThrow()>
                        <#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

                        // Unknown field
                        lengthInBits += ${simpleTypeReference.sizeInBits};
                        <#break>
                    <#case "virtual">
                        <#assign virtualField = field.asVirtualField().orElseThrow()>

                        // A virtual field doesn't have any in- or output.
                        <#break>
                </#switch>
            </#list>
            }<#sep> else </#sep>
        </#list>

        return lengthInBits;
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PlcValue _value<#if type.parserArguments.isPresent()>, <#list type.parserArguments.orElseThrow() as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if>) throws SerializationException {
        staticSerialize(writeBuffer, _value<#if type.parserArguments.isPresent()>, <#list type.parserArguments.orElseThrow() as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if>, ByteOrder.BIG_ENDIAN);
    }

    public static void staticSerialize(WriteBuffer writeBuffer, PlcValue _value<#if type.parserArguments.isPresent()>, <#list type.parserArguments.orElseThrow() as parserArgument>${helper.getLanguageTypeNameForTypeReference(parserArgument.type, false)} ${parserArgument.name}<#sep>, </#sep></#list></#if>, ByteOrder byteOrder) throws SerializationException {
        <#list dataIoTypeDefinition.switchField.orElseThrow().cases as case>
            <#--
                Output the if-expression for this case
            -->
            <@compress single_line=true>
                <#if case.discriminatorValueTerms?has_content>
                    if(
                    <#list case.discriminatorValueTerms as discriminatorValueTerm>
                        <#if helper.isWildcard(discriminatorValueTerm)>
                            true
                        <#else>
                            <#assign switchField=dataIoTypeDefinition.switchField.orElseThrow()>
                            <#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValueTerm?index].asLiteral().orElseThrow().asVariableLiteral().orElseThrow()>
                            <#assign discriminatorType=helper.getDiscriminatorTypes()[discriminatorExpression.discriminatorName]>
                            EvaluationHelper.equals(
                            ${helper.toParseExpression(switchField, discriminatorType, discriminatorExpression, parserArguments)},
                            <#if discriminatorType.isEnumTypeReference()>
                                ${helper.getLanguageTypeNameForTypeReference(discriminatorType)}.${helper.toParseExpression(switchField, discriminatorType, discriminatorValueTerm, parserArguments)}
                            <#else>
                                (${helper.getLanguageTypeNameForTypeReference(discriminatorType, true)}) ${helper.toParseExpression(switchField, discriminatorType, discriminatorValueTerm, parserArguments)}
                            </#if>
                            )
                        </#if>
                        <#sep> && </#sep>
                    </#list>
                    )
                </#if>{ // ${case.name}
            </@compress>
            <#--
                Output the body of this case
            -->
            <#if case.name == "Struct">
                // Output something here ...
            <#else>
            <#list case.fields as field>
                <#switch field.typeName>
                    <#case "array">
                        <#assign arrayField = field.asArrayField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Array Field (${arrayField.name})
                        <#if arrayField.type.elementTypeReference.isByteBased()>
                            writeByteArrayField("${namedField.name}", _value.getRaw(), writeByteArray(writeBuffer, 8)${helper.getFieldOptions(typedField, parserArguments)});
                        <#elseif arrayField.type.elementTypeReference.isSimpleTypeReference()>
                            writeSimpleTypeArrayField("${namedField.name}", _value.getList().stream().map(PlcValue::get${helper.getLanguageTypeNameForTypeReference(arrayField.type.elementTypeReference.asSimpleTypeReference().orElseThrow())}).collect(Collectors.toList()), ${helper.getDataWriterCall(arrayField.type.elementTypeReference, namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#else>
                            writeComplexTypeArrayField("${namedField.name}", _value, writeBuffer${helper.getFieldOptions(typedField, parserArguments)});
                        </#if>
                        <#break>
                    <#case "checksum">
                        <#assign checksumField = field.asChecksumField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Checksum Field (checksum) (Calculated)
                        writeChecksumField("${namedField.name}", (${helper.getLanguageTypeNameForField(field)}) (${helper.toParseExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)}), ${helper.getDataWriterCall(typedField.type, namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "const">
                        <#assign constField = field.asConstField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Const Field (${constField.name})
                        <#if typedField.type.isEnumTypeReference()>writeConstField("${constField.name}", ${namedField.name?upper_case}.getValue(), ${helper.getDataWriterCall(helper.getEnumBaseTypeReference(typedField.type), namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});<#else>writeConstField("${constField.name}", ${namedField.name?upper_case}, ${helper.getDataWriterCall(typedField.type, namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});</#if>
                        <#break>
                    <#case "enum">
                        <#assign enumField = field.asEnumField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Enum field (${namedField.name})
                        writeEnumField("${namedField.name}", "${helper.getLanguageTypeNameForField(field)}", ${namedField.name}, ${helper.getEnumDataWriterCall(typedField.type, namedField.name, enumField.fieldName)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "implicit">
                        <#assign implicitField = field.asImplicitField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Implicit Field (${implicitField.name}) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
                    <#-- Implicit field values might be used in expressions, in order to avoid problems, we generate a temporary variable with the given name. -->
                        ${helper.getLanguageTypeNameForField(field)} ${implicitField.name} = (${helper.getLanguageTypeNameForField(field)}) (${helper.toSerializationExpression(implicitField, implicitField.type, implicitField.serializeExpression, parserArguments)});
                        writeImplicitField("${namedField.name}", ${implicitField.name}, ${helper.getDataWriterCall(typedField.type, namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "manualArray">
                        <#assign manualArrayField = field.asManualArrayField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Manual Array Field (${manualArrayField.name})
                        writeManualArrayField("${namedField.name}", ${namedField.name}, (${helper.getLanguageTypeNameForTypeReference(manualArrayField.type.elementTypeReference)} _value) -> ${helper.toParseExpression(manualArrayField, manualArrayField.type.elementTypeReference, manualArrayField.serializeExpression, parserArguments)}, writeBuffer${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "manual">
                        <#assign manualField = field.asManualField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Manual Field (${manualField.name})
                        writeManualField("${namedField.name}", () -> ${helper.toParseExpression(manualField, manualField.type, manualField.serializeExpression, parserArguments)}, writeBuffer${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "optional">
                        <#assign optionalField = field.asOptionalField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Optional Field (${optionalField.name}) (Can be skipped, if the value is null)
                        <#if optionalField.type.isEnumTypeReference()>
                            writeOptionalEnumField("${optionalField.name}", "${helper.getLanguageTypeNameForField(field)}", ${optionalField.name}, ${helper.getEnumDataWriterCall(optionalField.type, optionalField.name, "value")}<#if optionalField.conditionExpression.present>, ${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}</#if>${helper.getFieldOptions(typedField, parserArguments)});
                        <#elseif optionalField.type.isDataIoTypeReference()>
                            writeOptionalField("${optionalField.name}", ${optionalField.name}, new DataWriterDataIoDefault(writeBuffer, (wb, val) -> ${optionalField.type.asComplexTypeReference().orElseThrow().name}.staticSerialize(wb, val<#if optionalField.type.asComplexTypeReference().orElseThrow().params?has_content>, <#list optionalField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>${helper.toParseExpression(optionalField, helper.anyTypeReference, param, parserArguments)}<#sep>, </#sep></#list></#if>))<#if optionalField.conditionExpression.present>, ${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}</#if>${helper.getFieldOptions(typedField, parserArguments)});
                        <#else>
                            writeOptionalField("${optionalField.name}", ${optionalField.name}, ${helper.getDataWriterCall(typedField.type, optionalField.name)}<#if helper.isGeneratePropertiesForParserArguments() && optionalField.conditionExpression.present>, ${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}</#if>${helper.getFieldOptions(typedField, parserArguments)});
                        </#if>
                        <#break>
                    <#case "padding">
                        <#assign paddingField = field.asPaddingField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>

                        // Padding Field (padding)
                        writePaddingField("padding", (int) (${helper.toParseExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)}), (${helper.getLanguageTypeNameForField(field)}) ${helper.toSerializationExpression(paddingField, paddingField.type, paddingField.paddingValue, parserArguments)}, ${helper.getDataWriterCall(typedField.type, "padding")}${helper.getFieldOptions(typedField, parserArguments)});
                        <#break>
                    <#case "reserved">
                        <#assign reservedField = field.asReservedField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>

                        // Reserved Field (reserved)
                        writeReservedField("reserved", <#if helper.isGeneratePropertiesForReservedFields()>reservedField${reservedFieldIndex}!=null?reservedField${reservedFieldIndex}:</#if>${helper.getReservedValue(reservedField)}, ${helper.getDataWriterCall(typedField.type, "reserved")}${helper.getFieldOptions(typedField, parserArguments)});<#assign reservedFieldIndex=reservedFieldIndex+1>
                        <#break>
                    <#case "simple">
                        <#assign simpleField = field.asSimpleField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Simple Field (${namedField.name})
                        <#if typedField.type.isEnumTypeReference()>
                            writeSimpleEnumField("${simpleField.name}", "${helper.getLanguageTypeNameForField(field)}", (${helper.getLanguageTypeNameForTypeReference(simpleField.type, true)}) ${helper.getDataIoPropertyValue(simpleField)}, ${helper.getEnumDataWriterCall(simpleField.type, simpleField.name, "value")}${helper.getFieldOptions(typedField, parserArguments)});
                        <#elseif simpleField.type.isDataIoTypeReference()>
                            writeSimpleField("${simpleField.name}", (${helper.getLanguageTypeNameForTypeReference(simpleField.type, true)}) ${helper.getDataIoPropertyValue(simpleField)}, new DataWriterDataIoDefault(writeBuffer, (wb, val) -> ${simpleField.type.asComplexTypeReference().orElseThrow().name}.staticSerialize(wb, val<#if simpleField.type.asComplexTypeReference().orElseThrow().params?has_content>, <#list simpleField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>${helper.toParseExpression(simpleField, helper.anyTypeReference, param, parserArguments)}<#sep>, </#sep></#list></#if>${helper.getFieldOptions(typedField, parserArguments)})));
                        <#else>
                            writeSimpleField("${simpleField.name}", (${helper.getLanguageTypeNameForTypeReference(simpleField.type, true)}) ${helper.getDataIoPropertyValue(simpleField)}, ${helper.getDataWriterCall(typedField.type, simpleField.name)}${helper.getFieldOptions(typedField, parserArguments)});</#if>
                        <#break>
                    <#case "virtual">
                        <#assign virtualField = field.asVirtualField().orElseThrow()>
                        <#assign typedField = field.asTypedField().orElseThrow()>
                        <#assign namedField = field.asNamedField().orElseThrow()>

                        // Virtual field (doesn't actually serialize anything, just makes the value available)
                        ${helper.getLanguageTypeNameForField(field)} ${namedField.name} = get${namedField.name?cap_first}();
                        writeBuffer.writeVirtual("${namedField.name}", ${namedField.name});
                        <#break>
                </#switch>
            </#list>
            </#if>
            }<#sep> else </#sep>
        </#list>
    }

}
</#outputformat>
