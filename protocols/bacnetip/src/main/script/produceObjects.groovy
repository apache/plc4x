/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import groovy.text.SimpleTemplateEngine
import org.apache.maven.project.MavenProject

project = (MavenProject) project

Class theParsedClass = this.class.classLoader.parseClass(new File(project.getBasedir(), "src/main/java/org/apache/plc4x/protocol/bacnetip/BACnetObjectsDefinitions.java"));

//import org.apache.plc4x.protocol.bacnetip.BACnetObjectsDefinitions
bod = theParsedClass.newInstance() //as BACnetObjectsDefinitions

objects = bod.bacNetObjects.collect(obj ->
        [
                name            : obj.name.replace(" ", "").replace("-", "").replace("_", ""),
                bacNetProperties: obj.@properties.collect { prop ->
                    var printableType = "Readable"
                    switch (prop.conformanceCode.type) {
                        case "R":
                            printableType = "Readable"
                            break
                        case "W":
                            printableType = "Writable"
                            break
                        case "O":
                            printableType = "Optional"
                            break
                    }
                    [
                            type      : printableType,
                            dataType  : prop.propertyDataType, // TODO: we need to come up with a good solution for this
                            identifier: prop.propertyIdentifier.replace("_", "").uncapitalize()
                    ]
                }
        ]
)


objectsTemplate = """
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

 // Code generated by code-generation. DO NOT EDIT.
<% for (obj in objects) { %>
[type <%= obj.name %>
<% for (prop in obj.bacNetProperties) { %>    [simple <%= prop.type %>Property('"<%= prop.dataType %>"') <%= prop.identifier %>]\n<% } %>
]
<% } %>
"""
SimpleTemplateEngine templateEngine = new SimpleTemplateEngine()
def template = templateEngine.createTemplate(objectsTemplate).make([objects: objects])

def mspecTargetDir = new File(project.getBasedir(), "src/main/generated/protocols/bacnetip")
if (!mspecTargetDir.exists()) {
    mspecTargetDir.mkdirs()
}
def vendorIdMspec = new File(mspecTargetDir, "bacnet-objects.mspec")
if (vendorIdMspec.exists()) {
    vendorIdMspec.delete()
}

template.writeTo(vendorIdMspec.newWriter())
