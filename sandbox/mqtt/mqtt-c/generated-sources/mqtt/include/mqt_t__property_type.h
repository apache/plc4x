/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef PLC4C_MQTT_READ_WRITE_MQT_T__PROPERTY_TYPE_H_
#define PLC4C_MQTT_READ_WRITE_MQT_T__PROPERTY_TYPE_H_

#include <stdbool.h>
#include <stdint.h>
#include <plc4c/driver_mqtt_static.h>
#include <plc4c/spi/read_buffer.h>
#include <plc4c/spi/write_buffer.h>

// Code generated by code-generation. DO NOT EDIT.


#ifdef __cplusplus
extern "C" {
#endif

enum plc4c_mqtt_read_write_mqt_t__property_type {
  plc4c_mqtt_read_write_mqt_t__property_type_PAYLOAD_FORMAT_INDICATOR = 0x01,
  plc4c_mqtt_read_write_mqt_t__property_type_MESSAGE_EXPIRY_INTERVAL = 0x02,
  plc4c_mqtt_read_write_mqt_t__property_type_CONTENT_TYPE = 0x03,
  plc4c_mqtt_read_write_mqt_t__property_type_RESPONSE_TOPIC = 0x08,
  plc4c_mqtt_read_write_mqt_t__property_type_CORRELATION_DATA = 0x09,
  plc4c_mqtt_read_write_mqt_t__property_type_SUBSCRIPTION_IDENTIFIER = 0x0B,
  plc4c_mqtt_read_write_mqt_t__property_type_SESSION_EXPIRY_INTERVAL = 0x11,
  plc4c_mqtt_read_write_mqt_t__property_type_ASSIGNED_CLIENT_IDENTIFIER = 0x12,
  plc4c_mqtt_read_write_mqt_t__property_type_SERVER_KEEP_ALIVE = 0x13,
  plc4c_mqtt_read_write_mqt_t__property_type_AUTHENTICATION_METHOD = 0x15,
  plc4c_mqtt_read_write_mqt_t__property_type_AUTHENTICATION_DATA = 0x16,
  plc4c_mqtt_read_write_mqt_t__property_type_REQUEST_PROBLEM_INFORMATION = 0x17,
  plc4c_mqtt_read_write_mqt_t__property_type_WILL_DELAY_INTERVAL = 0x18,
  plc4c_mqtt_read_write_mqt_t__property_type_REQUEST_RESPONSE_INFORMATION = 0x19,
  plc4c_mqtt_read_write_mqt_t__property_type_RESPONSE_INFORMATION = 0x1A,
  plc4c_mqtt_read_write_mqt_t__property_type_SERVER_REFERENCE = 0x1C,
  plc4c_mqtt_read_write_mqt_t__property_type_REASON_STRING = 0x1F,
  plc4c_mqtt_read_write_mqt_t__property_type_RECEIVE_MAXIMUM = 0x21,
  plc4c_mqtt_read_write_mqt_t__property_type_TOPIC_ALIAS_MAXIMUM = 0x22,
  plc4c_mqtt_read_write_mqt_t__property_type_TOPIC_ALIAS = 0x23,
  plc4c_mqtt_read_write_mqt_t__property_type_MAXIMUM_QOS = 0x24,
  plc4c_mqtt_read_write_mqt_t__property_type_RETAIN_AVAILABLE = 0x25,
  plc4c_mqtt_read_write_mqt_t__property_type_USER_PROPERTY = 0x26,
  plc4c_mqtt_read_write_mqt_t__property_type_MAXIMUM_PACKET_SIZE = 0x27,
  plc4c_mqtt_read_write_mqt_t__property_type_WILDCARD_SUBSCRIPTION_AVAILABLE = 0x28,
  plc4c_mqtt_read_write_mqt_t__property_type_SUBSCRIPTION_IDENTIFIER_AVAILABLE = 0x29,
  plc4c_mqtt_read_write_mqt_t__property_type_SHARED_SUBSCRIPTION_AVAILABLE = 0x2A
};
typedef enum plc4c_mqtt_read_write_mqt_t__property_type plc4c_mqtt_read_write_mqt_t__property_type;

// Get an empty NULL-struct
plc4c_mqtt_read_write_mqt_t__property_type plc4c_mqtt_read_write_mqt_t__property_type_null();

plc4c_return_code plc4c_mqtt_read_write_mqt_t__property_type_parse(plc4c_spi_read_buffer* readBuffer, plc4c_mqtt_read_write_mqt_t__property_type** message);

plc4c_return_code plc4c_mqtt_read_write_mqt_t__property_type_serialize(plc4c_spi_write_buffer* writeBuffer, plc4c_mqtt_read_write_mqt_t__property_type* message);

plc4c_mqtt_read_write_mqt_t__property_type plc4c_mqtt_read_write_mqt_t__property_type_value_of(char* value_string);

int plc4c_mqtt_read_write_mqt_t__property_type_num_values();

plc4c_mqtt_read_write_mqt_t__property_type plc4c_mqtt_read_write_mqt_t__property_type_value_for_index(int index);

uint16_t plc4c_mqtt_read_write_mqt_t__property_type_length_in_bytes(plc4c_mqtt_read_write_mqt_t__property_type* message);

uint16_t plc4c_mqtt_read_write_mqt_t__property_type_length_in_bits(plc4c_mqtt_read_write_mqt_t__property_type* message);

#ifdef __cplusplus
}
#endif

#endif  // PLC4C_MQTT_READ_WRITE_MQT_T__PROPERTY_TYPE_H_
