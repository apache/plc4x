/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.Collections.Generic;
using System.Text;
using org.apache.plc4net.api.value;
using org.apache.plc4net.spi.generation;
using org.apache.plc4net.spi.model.values;

// Code generated by code-generation. DO NOT EDIT.

namespace org.apache.plc4net.drivers.mqtt.readwrite.model
{

    public class MQTT_ControlPacket_CONNECT : MQTT_ControlPacket
    {

        // Accessors for discriminator values.
        public override MQTT_ControlPacketType PacketType => MQTT_ControlPacketType.CONNECT;

        // Properties.
        public byte RemainingLength { get; }
        public MQTT_String ProtocolName { get; }
        public byte ProtocolVersion { get; }
        public bool UserNameFlagSet { get; }
        public bool PasswordFlagSet { get; }
        public bool WillRetainFlagSet { get; }
        public byte WillQosLevel { get; }
        public bool WillFlagSet { get; }
        public bool CleanStartFlagSet { get; }
        public ushort KeepAlive { get; }
        public uint PropertyLength { get; }
        public MQTT_Property[] Properties { get; }
        public MQTT_String ClientId { get; }
        public MQTT_String Username { get; }
        public MQTT_String Password { get; }

        public MQTT_ControlPacket_CONNECT(byte remainingLength, MQTT_String protocolName, byte protocolVersion, bool userNameFlagSet, bool passwordFlagSet, bool willRetainFlagSet, byte willQosLevel, bool willFlagSet, bool cleanStartFlagSet, ushort keepAlive, uint propertyLength, MQTT_Property[] properties, MQTT_String clientId, MQTT_String username, MQTT_String password)
        {
            RemainingLength = remainingLength;
            ProtocolName = protocolName;
            ProtocolVersion = protocolVersion;
            UserNameFlagSet = userNameFlagSet;
            PasswordFlagSet = passwordFlagSet;
            WillRetainFlagSet = willRetainFlagSet;
            WillQosLevel = willQosLevel;
            WillFlagSet = willFlagSet;
            CleanStartFlagSet = cleanStartFlagSet;
            KeepAlive = keepAlive;
            PropertyLength = propertyLength;
            Properties = properties;
            ClientId = clientId;
            Username = username;
            Password = password;
        }

    }
}
