/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model


import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

	// Code generated by code-generation. DO NOT EDIT.


// The data-structure of this message
type MQTT_String struct {
	Value string
}

// The corresponding interface
type IMQTT_String interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

func NewMQTT_String(value string) *MQTT_String {
	return &MQTT_String{Value: value}
}

func CastMQTT_String(structType interface{}) *MQTT_String {
	castFunc := func(typ interface{}) *MQTT_String {
		if casted, ok := typ.(MQTT_String); ok {
			return &casted
		}
		if casted, ok := typ.(*MQTT_String); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *MQTT_String) GetTypeName() string {
	return "MQTT_String"
}

func (m *MQTT_String) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *MQTT_String) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Implicit Field (stringLength)
	lengthInBits += 16

	// Simple field (value)
	lengthInBits += uint16(int32(STR_LEN(m.Value)) * int32(int32(8)))

	return lengthInBits
}


func (m *MQTT_String) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func MQTT_StringParse(readBuffer utils.ReadBuffer) (*MQTT_String, error) {
	if pullErr := readBuffer.PullContext("MQTT_String"); pullErr != nil {
		return nil, pullErr
	}

	// Implicit Field (stringLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	stringLength, _stringLengthErr := readBuffer.ReadUint16("stringLength", 16)
	_ = stringLength
	if _stringLengthErr != nil {
		return nil, errors.Wrap(_stringLengthErr, "Error parsing 'stringLength' field")
	}

	// Simple Field (value)
_value, _valueErr := readBuffer.ReadString("value", uint32(string(stringLength) * string((8))))
	if _valueErr != nil {
		return nil, errors.Wrap(_valueErr, "Error parsing 'value' field")
	}
	value := _value

	if closeErr := readBuffer.CloseContext("MQTT_String"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewMQTT_String(value), nil
}

func (m *MQTT_String) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr :=writeBuffer.PushContext("MQTT_String"); pushErr != nil {
		return pushErr
	}

	// Implicit Field (stringLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	stringLength := uint16(STR_LEN(m.Value))
	_stringLengthErr := writeBuffer.WriteUint16("stringLength", 16, (stringLength))
	if _stringLengthErr != nil {
		return errors.Wrap(_stringLengthErr, "Error serializing 'stringLength' field")
	}

	// Simple Field (value)
	value := string(m.Value)
	_valueErr := writeBuffer.WriteString("value", uint32(string(STR_LEN(m.Value)) * string((8))), "UTF-8", (value))
	if _valueErr != nil {
		return errors.Wrap(_valueErr, "Error serializing 'value' field")
	}

	if popErr := writeBuffer.PopContext("MQTT_String"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *MQTT_String) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}



