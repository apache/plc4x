/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

type MQTT_ControlPacketType uint8

type IMQTT_ControlPacketType interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const(
	MQTT_ControlPacketType_RESERVED MQTT_ControlPacketType = 0x0
	MQTT_ControlPacketType_CONNECT MQTT_ControlPacketType = 0x1
	MQTT_ControlPacketType_CONNACK MQTT_ControlPacketType = 0x2
	MQTT_ControlPacketType_PUBLISH MQTT_ControlPacketType = 0x3
	MQTT_ControlPacketType_PUBACK MQTT_ControlPacketType = 0x4
	MQTT_ControlPacketType_PUBREC MQTT_ControlPacketType = 0x5
	MQTT_ControlPacketType_PUBREL MQTT_ControlPacketType = 0x6
	MQTT_ControlPacketType_PUBCOMP MQTT_ControlPacketType = 0x7
	MQTT_ControlPacketType_SUBSCRIBE MQTT_ControlPacketType = 0x8
	MQTT_ControlPacketType_SUBACK MQTT_ControlPacketType = 0x9
	MQTT_ControlPacketType_UNSUBSCRIBE MQTT_ControlPacketType = 0xA
	MQTT_ControlPacketType_UNSUBACK MQTT_ControlPacketType = 0xB
	MQTT_ControlPacketType_PINGREQ MQTT_ControlPacketType = 0xC
	MQTT_ControlPacketType_PINGRESP MQTT_ControlPacketType = 0xD
	MQTT_ControlPacketType_DISCONNECT MQTT_ControlPacketType = 0xE
	MQTT_ControlPacketType_AUTH MQTT_ControlPacketType = 0xF
)

var MQTT_ControlPacketTypeValues []MQTT_ControlPacketType

func init() {
	_ = errors.New
	MQTT_ControlPacketTypeValues = []MQTT_ControlPacketType {
		MQTT_ControlPacketType_RESERVED,
		MQTT_ControlPacketType_CONNECT,
		MQTT_ControlPacketType_CONNACK,
		MQTT_ControlPacketType_PUBLISH,
		MQTT_ControlPacketType_PUBACK,
		MQTT_ControlPacketType_PUBREC,
		MQTT_ControlPacketType_PUBREL,
		MQTT_ControlPacketType_PUBCOMP,
		MQTT_ControlPacketType_SUBSCRIBE,
		MQTT_ControlPacketType_SUBACK,
		MQTT_ControlPacketType_UNSUBSCRIBE,
		MQTT_ControlPacketType_UNSUBACK,
		MQTT_ControlPacketType_PINGREQ,
		MQTT_ControlPacketType_PINGRESP,
		MQTT_ControlPacketType_DISCONNECT,
		MQTT_ControlPacketType_AUTH,
	}
}

func MQTT_ControlPacketTypeByValue(value uint8) MQTT_ControlPacketType {
	switch value {
		case 0x0:
			return MQTT_ControlPacketType_RESERVED
		case 0x1:
			return MQTT_ControlPacketType_CONNECT
		case 0x2:
			return MQTT_ControlPacketType_CONNACK
		case 0x3:
			return MQTT_ControlPacketType_PUBLISH
		case 0x4:
			return MQTT_ControlPacketType_PUBACK
		case 0x5:
			return MQTT_ControlPacketType_PUBREC
		case 0x6:
			return MQTT_ControlPacketType_PUBREL
		case 0x7:
			return MQTT_ControlPacketType_PUBCOMP
		case 0x8:
			return MQTT_ControlPacketType_SUBSCRIBE
		case 0x9:
			return MQTT_ControlPacketType_SUBACK
		case 0xA:
			return MQTT_ControlPacketType_UNSUBSCRIBE
		case 0xB:
			return MQTT_ControlPacketType_UNSUBACK
		case 0xC:
			return MQTT_ControlPacketType_PINGREQ
		case 0xD:
			return MQTT_ControlPacketType_PINGRESP
		case 0xE:
			return MQTT_ControlPacketType_DISCONNECT
		case 0xF:
			return MQTT_ControlPacketType_AUTH
	}
	return 0
}

func MQTT_ControlPacketTypeByName(value string) MQTT_ControlPacketType {
	switch value {
	case "RESERVED":
		return MQTT_ControlPacketType_RESERVED
	case "CONNECT":
		return MQTT_ControlPacketType_CONNECT
	case "CONNACK":
		return MQTT_ControlPacketType_CONNACK
	case "PUBLISH":
		return MQTT_ControlPacketType_PUBLISH
	case "PUBACK":
		return MQTT_ControlPacketType_PUBACK
	case "PUBREC":
		return MQTT_ControlPacketType_PUBREC
	case "PUBREL":
		return MQTT_ControlPacketType_PUBREL
	case "PUBCOMP":
		return MQTT_ControlPacketType_PUBCOMP
	case "SUBSCRIBE":
		return MQTT_ControlPacketType_SUBSCRIBE
	case "SUBACK":
		return MQTT_ControlPacketType_SUBACK
	case "UNSUBSCRIBE":
		return MQTT_ControlPacketType_UNSUBSCRIBE
	case "UNSUBACK":
		return MQTT_ControlPacketType_UNSUBACK
	case "PINGREQ":
		return MQTT_ControlPacketType_PINGREQ
	case "PINGRESP":
		return MQTT_ControlPacketType_PINGRESP
	case "DISCONNECT":
		return MQTT_ControlPacketType_DISCONNECT
	case "AUTH":
		return MQTT_ControlPacketType_AUTH
	}
	return 0
}

func CastMQTT_ControlPacketType(structType interface{}) MQTT_ControlPacketType {
	castFunc := func(typ interface{}) MQTT_ControlPacketType {
		if sMQTT_ControlPacketType, ok := typ.(MQTT_ControlPacketType); ok {
			return sMQTT_ControlPacketType
		}
		return 0
	}
	return castFunc(structType)
}

func (m MQTT_ControlPacketType) LengthInBits() uint16 {
	return 4
}

func (m MQTT_ControlPacketType) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func MQTT_ControlPacketTypeParse(readBuffer utils.ReadBuffer) (MQTT_ControlPacketType, error) {
	val, err := readBuffer.ReadUint8("MQTT_ControlPacketType", 4)
	if err != nil {
		return 0, nil
	}
	return MQTT_ControlPacketTypeByValue(val), nil
}

func (e MQTT_ControlPacketType) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("MQTT_ControlPacketType", 4, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e MQTT_ControlPacketType) name() string {
	switch e {
	case MQTT_ControlPacketType_RESERVED:
		return "RESERVED"
	case MQTT_ControlPacketType_CONNECT:
		return "CONNECT"
	case MQTT_ControlPacketType_CONNACK:
		return "CONNACK"
	case MQTT_ControlPacketType_PUBLISH:
		return "PUBLISH"
	case MQTT_ControlPacketType_PUBACK:
		return "PUBACK"
	case MQTT_ControlPacketType_PUBREC:
		return "PUBREC"
	case MQTT_ControlPacketType_PUBREL:
		return "PUBREL"
	case MQTT_ControlPacketType_PUBCOMP:
		return "PUBCOMP"
	case MQTT_ControlPacketType_SUBSCRIBE:
		return "SUBSCRIBE"
	case MQTT_ControlPacketType_SUBACK:
		return "SUBACK"
	case MQTT_ControlPacketType_UNSUBSCRIBE:
		return "UNSUBSCRIBE"
	case MQTT_ControlPacketType_UNSUBACK:
		return "UNSUBACK"
	case MQTT_ControlPacketType_PINGREQ:
		return "PINGREQ"
	case MQTT_ControlPacketType_PINGRESP:
		return "PINGRESP"
	case MQTT_ControlPacketType_DISCONNECT:
		return "DISCONNECT"
	case MQTT_ControlPacketType_AUTH:
		return "AUTH"
	}
	return ""
}

func (e MQTT_ControlPacketType) String() string {
	return e.name()
}

