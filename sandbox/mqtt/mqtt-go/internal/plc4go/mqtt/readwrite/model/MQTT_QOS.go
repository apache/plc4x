/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

type MQTT_QOS uint8

type IMQTT_QOS interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const(
	MQTT_QOS_AT_MOST_ONCE MQTT_QOS = 0x0
	MQTT_QOS_AT_LEAST_ONCE MQTT_QOS = 0x1
	MQTT_QOS_EXACTLY_ONCE MQTT_QOS = 0x2
)

var MQTT_QOSValues []MQTT_QOS

func init() {
	_ = errors.New
	MQTT_QOSValues = []MQTT_QOS {
		MQTT_QOS_AT_MOST_ONCE,
		MQTT_QOS_AT_LEAST_ONCE,
		MQTT_QOS_EXACTLY_ONCE,
	}
}

func MQTT_QOSByValue(value uint8) MQTT_QOS {
	switch value {
		case 0x0:
			return MQTT_QOS_AT_MOST_ONCE
		case 0x1:
			return MQTT_QOS_AT_LEAST_ONCE
		case 0x2:
			return MQTT_QOS_EXACTLY_ONCE
	}
	return 0
}

func MQTT_QOSByName(value string) MQTT_QOS {
	switch value {
	case "AT_MOST_ONCE":
		return MQTT_QOS_AT_MOST_ONCE
	case "AT_LEAST_ONCE":
		return MQTT_QOS_AT_LEAST_ONCE
	case "EXACTLY_ONCE":
		return MQTT_QOS_EXACTLY_ONCE
	}
	return 0
}

func CastMQTT_QOS(structType interface{}) MQTT_QOS {
	castFunc := func(typ interface{}) MQTT_QOS {
		if sMQTT_QOS, ok := typ.(MQTT_QOS); ok {
			return sMQTT_QOS
		}
		return 0
	}
	return castFunc(structType)
}

func (m MQTT_QOS) LengthInBits() uint16 {
	return 2
}

func (m MQTT_QOS) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func MQTT_QOSParse(readBuffer utils.ReadBuffer) (MQTT_QOS, error) {
	val, err := readBuffer.ReadUint8("MQTT_QOS", 2)
	if err != nil {
		return 0, nil
	}
	return MQTT_QOSByValue(val), nil
}

func (e MQTT_QOS) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("MQTT_QOS", 2, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e MQTT_QOS) name() string {
	switch e {
	case MQTT_QOS_AT_MOST_ONCE:
		return "AT_MOST_ONCE"
	case MQTT_QOS_AT_LEAST_ONCE:
		return "AT_LEAST_ONCE"
	case MQTT_QOS_EXACTLY_ONCE:
		return "EXACTLY_ONCE"
	}
	return ""
}

func (e MQTT_QOS) String() string {
	return e.name()
}

