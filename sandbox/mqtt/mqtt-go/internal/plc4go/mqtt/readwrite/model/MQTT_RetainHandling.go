/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

type MQTT_RetainHandling uint8

type IMQTT_RetainHandling interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const(
	MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE MQTT_RetainHandling = 0x0
	MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST MQTT_RetainHandling = 0x1
	MQTT_RetainHandling_DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE MQTT_RetainHandling = 0x2
)

var MQTT_RetainHandlingValues []MQTT_RetainHandling

func init() {
	_ = errors.New
	MQTT_RetainHandlingValues = []MQTT_RetainHandling {
		MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE,
		MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST,
		MQTT_RetainHandling_DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE,
	}
}

func MQTT_RetainHandlingByValue(value uint8) MQTT_RetainHandling {
	switch value {
		case 0x0:
			return MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE
		case 0x1:
			return MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST
		case 0x2:
			return MQTT_RetainHandling_DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE
	}
	return 0
}

func MQTT_RetainHandlingByName(value string) MQTT_RetainHandling {
	switch value {
	case "SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE":
		return MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE
	case "SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST":
		return MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST
	case "DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE":
		return MQTT_RetainHandling_DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE
	}
	return 0
}

func CastMQTT_RetainHandling(structType interface{}) MQTT_RetainHandling {
	castFunc := func(typ interface{}) MQTT_RetainHandling {
		if sMQTT_RetainHandling, ok := typ.(MQTT_RetainHandling); ok {
			return sMQTT_RetainHandling
		}
		return 0
	}
	return castFunc(structType)
}

func (m MQTT_RetainHandling) LengthInBits() uint16 {
	return 2
}

func (m MQTT_RetainHandling) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func MQTT_RetainHandlingParse(readBuffer utils.ReadBuffer) (MQTT_RetainHandling, error) {
	val, err := readBuffer.ReadUint8("MQTT_RetainHandling", 2)
	if err != nil {
		return 0, nil
	}
	return MQTT_RetainHandlingByValue(val), nil
}

func (e MQTT_RetainHandling) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("MQTT_RetainHandling", 2, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e MQTT_RetainHandling) name() string {
	switch e {
	case MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE:
		return "SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_THE_SUBSCRIBE"
	case MQTT_RetainHandling_SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST:
		return "SEND_RETAINED_MESSAGES_AT_SUBSCRIBE_ONLY_IF_THE_SUBSCRIPTION_DOES_NOT_CURRENTLY_EXIST"
	case MQTT_RetainHandling_DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE:
		return "DO_NOT_SEND_RETAINED_MESSAGES_AT_THE_TIME_OF_SUBSCRIBE"
	}
	return ""
}

func (e MQTT_RetainHandling) String() string {
	return e.name()
}

