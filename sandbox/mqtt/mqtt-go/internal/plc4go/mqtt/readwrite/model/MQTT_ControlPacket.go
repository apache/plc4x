/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model


import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

	// Code generated by code-generation. DO NOT EDIT.


// The data-structure of this message
type MQTT_ControlPacket struct {
	Child IMQTT_ControlPacketChild
}

// The corresponding interface
type IMQTT_ControlPacket interface {
	PacketType() MQTT_ControlPacketType
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

type IMQTT_ControlPacketParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child IMQTT_ControlPacket, serializeChildFunction func() error) error
	GetTypeName() string
}

type IMQTT_ControlPacketChild interface {
	Serialize(writeBuffer utils.WriteBuffer) error
	InitializeParent(parent *MQTT_ControlPacket)
	GetTypeName() string
	IMQTT_ControlPacket
}

func NewMQTT_ControlPacket() *MQTT_ControlPacket {
	return &MQTT_ControlPacket{}
}

func CastMQTT_ControlPacket(structType interface{}) *MQTT_ControlPacket {
	castFunc := func(typ interface{}) *MQTT_ControlPacket {
		if casted, ok := typ.(MQTT_ControlPacket); ok {
			return &casted
		}
		if casted, ok := typ.(*MQTT_ControlPacket); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *MQTT_ControlPacket) GetTypeName() string {
	return "MQTT_ControlPacket"
}

func (m *MQTT_ControlPacket) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *MQTT_ControlPacket) LengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.LengthInBits()
}

func (m *MQTT_ControlPacket) ParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (packetType)
	lengthInBits += 4;

	return lengthInBits
}

func (m *MQTT_ControlPacket) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func MQTT_ControlPacketParse(readBuffer utils.ReadBuffer) (*MQTT_ControlPacket, error) {
	if pullErr := readBuffer.PullContext("MQTT_ControlPacket"); pullErr != nil {
		return nil, pullErr
	}

	// Discriminator Field (packetType) (Used as input to a switch field)
	packetType_temp, _packetTypeErr := MQTT_ControlPacketTypeParse(readBuffer)
	var packetType MQTT_ControlPacketType = packetType_temp
	if _packetTypeErr != nil {
	return nil, errors.Wrap(_packetTypeErr, "Error parsing 'packetType' field")
	}

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _parent *MQTT_ControlPacket
	var typeSwitchError error
	switch {
case packetType == MQTT_ControlPacketType_CONNECT : // MQTT_ControlPacket_CONNECT
		_parent, typeSwitchError = MQTT_ControlPacket_CONNECTParse(readBuffer, )
case packetType == MQTT_ControlPacketType_CONNACK : // MQTT_ControlPacket_CONNACK
		_parent, typeSwitchError = MQTT_ControlPacket_CONNACKParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PUBLISH : // MQTT_ControlPacket_PUBLISH
		_parent, typeSwitchError = MQTT_ControlPacket_PUBLISHParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PUBACK : // MQTT_ControlPacket_PUBACK
		_parent, typeSwitchError = MQTT_ControlPacket_PUBACKParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PUBREC : // MQTT_ControlPacket_PUBREC
		_parent, typeSwitchError = MQTT_ControlPacket_PUBRECParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PUBREL : // MQTT_ControlPacket_PUBREL
		_parent, typeSwitchError = MQTT_ControlPacket_PUBRELParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PUBCOMP : // MQTT_ControlPacket_PUBCOMP
		_parent, typeSwitchError = MQTT_ControlPacket_PUBCOMPParse(readBuffer, )
case packetType == MQTT_ControlPacketType_SUBSCRIBE : // MQTT_ControlPacket_SUBSCRIBE
		_parent, typeSwitchError = MQTT_ControlPacket_SUBSCRIBEParse(readBuffer, )
case packetType == MQTT_ControlPacketType_SUBACK : // MQTT_ControlPacket_SUBACK
		_parent, typeSwitchError = MQTT_ControlPacket_SUBACKParse(readBuffer, )
case packetType == MQTT_ControlPacketType_UNSUBSCRIBE : // MQTT_ControlPacket_UNSUBSCRIBE
		_parent, typeSwitchError = MQTT_ControlPacket_UNSUBSCRIBEParse(readBuffer, )
case packetType == MQTT_ControlPacketType_UNSUBACK : // MQTT_ControlPacket_UNSUBACK
		_parent, typeSwitchError = MQTT_ControlPacket_UNSUBACKParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PINGREQ : // MQTT_ControlPacket_PINGREQ
		_parent, typeSwitchError = MQTT_ControlPacket_PINGREQParse(readBuffer, )
case packetType == MQTT_ControlPacketType_PINGRESP : // MQTT_ControlPacket_PINGRESP
		_parent, typeSwitchError = MQTT_ControlPacket_PINGRESPParse(readBuffer, )
case packetType == MQTT_ControlPacketType_DISCONNECT : // MQTT_ControlPacket_DISCONNECT
		_parent, typeSwitchError = MQTT_ControlPacket_DISCONNECTParse(readBuffer, )
case packetType == MQTT_ControlPacketType_AUTH : // MQTT_ControlPacket_AUTH
		_parent, typeSwitchError = MQTT_ControlPacket_AUTHParse(readBuffer, )
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := readBuffer.CloseContext("MQTT_ControlPacket"); closeErr != nil {
		return nil, closeErr
	}

	// Finish initializing
	_parent.Child.InitializeParent(_parent)
	return _parent, nil
}

func (m *MQTT_ControlPacket) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *MQTT_ControlPacket) SerializeParent(writeBuffer utils.WriteBuffer, child IMQTT_ControlPacket, serializeChildFunction func() error) error {
	if pushErr :=writeBuffer.PushContext("MQTT_ControlPacket"); pushErr != nil {
		return pushErr
	}

	// Discriminator Field (packetType) (Used as input to a switch field)
	packetType := MQTT_ControlPacketType(child.PacketType())
	_packetTypeErr := packetType.Serialize(writeBuffer)

	if _packetTypeErr != nil {
		return errors.Wrap(_packetTypeErr, "Error serializing 'packetType' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("MQTT_ControlPacket"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *MQTT_ControlPacket) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}



