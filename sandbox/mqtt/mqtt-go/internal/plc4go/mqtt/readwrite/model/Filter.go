/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model


import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

	// Code generated by code-generation. DO NOT EDIT.


// The data-structure of this message
type Filter struct {
	Filter *MQTT_String
	RetainHandling MQTT_RetainHandling
	Retain bool
	NoLocal bool
	MaxQos MQTT_QOS
}

// The corresponding interface
type IFilter interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

func NewFilter(filter *MQTT_String, retainHandling MQTT_RetainHandling, retain bool, noLocal bool, maxQos MQTT_QOS) *Filter {
	return &Filter{Filter: filter, RetainHandling: retainHandling, Retain: retain, NoLocal: noLocal, MaxQos: maxQos}
}

func CastFilter(structType interface{}) *Filter {
	castFunc := func(typ interface{}) *Filter {
		if casted, ok := typ.(Filter); ok {
			return &casted
		}
		if casted, ok := typ.(*Filter); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *Filter) GetTypeName() string {
	return "Filter"
}

func (m *Filter) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *Filter) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (filter)
	lengthInBits += m.Filter.LengthInBits()

	// Reserved Field (reserved)
	lengthInBits += 2

	// Simple field (retainHandling)
	lengthInBits += 2

	// Simple field (retain)
	lengthInBits += 1;

	// Simple field (noLocal)
	lengthInBits += 1;

	// Simple field (maxQos)
	lengthInBits += 2

	return lengthInBits
}


func (m *Filter) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func FilterParse(readBuffer utils.ReadBuffer) (*Filter, error) {
	if pullErr := readBuffer.PullContext("Filter"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (filter)
	if pullErr := readBuffer.PullContext("filter"); pullErr != nil {
		return nil, pullErr
	}
_filter, _filterErr := MQTT_StringParse(readBuffer)
	if _filterErr != nil {
		return nil, errors.Wrap(_filterErr, "Error parsing 'filter' field")
	}
	filter := CastMQTT_String(_filter)
	if closeErr := readBuffer.CloseContext("filter"); closeErr != nil {
		return nil, closeErr
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadUint8("reserved", 2)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint8(0x0) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint8(0x0),
				"got value": reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Simple Field (retainHandling)
	if pullErr := readBuffer.PullContext("retainHandling"); pullErr != nil {
		return nil, pullErr
	}
_retainHandling, _retainHandlingErr := MQTT_RetainHandlingParse(readBuffer)
	if _retainHandlingErr != nil {
		return nil, errors.Wrap(_retainHandlingErr, "Error parsing 'retainHandling' field")
	}
	retainHandling := _retainHandling
	if closeErr := readBuffer.CloseContext("retainHandling"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (retain)
_retain, _retainErr := readBuffer.ReadBit("retain")
	if _retainErr != nil {
		return nil, errors.Wrap(_retainErr, "Error parsing 'retain' field")
	}
	retain := _retain

	// Simple Field (noLocal)
_noLocal, _noLocalErr := readBuffer.ReadBit("noLocal")
	if _noLocalErr != nil {
		return nil, errors.Wrap(_noLocalErr, "Error parsing 'noLocal' field")
	}
	noLocal := _noLocal

	// Simple Field (maxQos)
	if pullErr := readBuffer.PullContext("maxQos"); pullErr != nil {
		return nil, pullErr
	}
_maxQos, _maxQosErr := MQTT_QOSParse(readBuffer)
	if _maxQosErr != nil {
		return nil, errors.Wrap(_maxQosErr, "Error parsing 'maxQos' field")
	}
	maxQos := _maxQos
	if closeErr := readBuffer.CloseContext("maxQos"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("Filter"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewFilter(filter, retainHandling, retain, noLocal, maxQos), nil
}

func (m *Filter) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr :=writeBuffer.PushContext("Filter"); pushErr != nil {
		return pushErr
	}

	// Simple Field (filter)
	if pushErr := writeBuffer.PushContext("filter"); pushErr != nil {
		return pushErr
	}
	_filterErr := m.Filter.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("filter"); popErr != nil {
		return popErr
	}
	if _filterErr != nil {
		return errors.Wrap(_filterErr, "Error serializing 'filter' field")
	}

	// Reserved Field (reserved)
	{
		_err := writeBuffer.WriteUint8("reserved", 2, uint8(0x0))
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")
		}
	}

	// Simple Field (retainHandling)
	if pushErr := writeBuffer.PushContext("retainHandling"); pushErr != nil {
		return pushErr
	}
	_retainHandlingErr := m.RetainHandling.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("retainHandling"); popErr != nil {
		return popErr
	}
	if _retainHandlingErr != nil {
		return errors.Wrap(_retainHandlingErr, "Error serializing 'retainHandling' field")
	}

	// Simple Field (retain)
	retain := bool(m.Retain)
	_retainErr := writeBuffer.WriteBit("retain", (retain))
	if _retainErr != nil {
		return errors.Wrap(_retainErr, "Error serializing 'retain' field")
	}

	// Simple Field (noLocal)
	noLocal := bool(m.NoLocal)
	_noLocalErr := writeBuffer.WriteBit("noLocal", (noLocal))
	if _noLocalErr != nil {
		return errors.Wrap(_noLocalErr, "Error serializing 'noLocal' field")
	}

	// Simple Field (maxQos)
	if pushErr := writeBuffer.PushContext("maxQos"); pushErr != nil {
		return pushErr
	}
	_maxQosErr := m.MaxQos.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("maxQos"); popErr != nil {
		return popErr
	}
	if _maxQosErr != nil {
		return errors.Wrap(_maxQosErr, "Error serializing 'maxQos' field")
	}

	if popErr := writeBuffer.PopContext("Filter"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *Filter) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}



