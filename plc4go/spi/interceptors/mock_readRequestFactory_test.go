/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package interceptors

import (
	model "github.com/apache/plc4x/plc4go/pkg/api/model"
	mock "github.com/stretchr/testify/mock"

	spi "github.com/apache/plc4x/plc4go/spi"
)

// mockReadRequestFactory is an autogenerated mock type for the readRequestFactory type
type mockReadRequestFactory struct {
	mock.Mock
}

type mockReadRequestFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockReadRequestFactory) EXPECT() *mockReadRequestFactory_Expecter {
	return &mockReadRequestFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: tags, tagNames, reader, readRequestInterceptor
func (_m *mockReadRequestFactory) Execute(tags map[string]model.PlcTag, tagNames []string, reader spi.PlcReader, readRequestInterceptor ReadRequestInterceptor) model.PlcReadRequest {
	ret := _m.Called(tags, tagNames, reader, readRequestInterceptor)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 model.PlcReadRequest
	if rf, ok := ret.Get(0).(func(map[string]model.PlcTag, []string, spi.PlcReader, ReadRequestInterceptor) model.PlcReadRequest); ok {
		r0 = rf(tags, tagNames, reader, readRequestInterceptor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PlcReadRequest)
		}
	}

	return r0
}

// mockReadRequestFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockReadRequestFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - tags map[string]model.PlcTag
//   - tagNames []string
//   - reader spi.PlcReader
//   - readRequestInterceptor ReadRequestInterceptor
func (_e *mockReadRequestFactory_Expecter) Execute(tags interface{}, tagNames interface{}, reader interface{}, readRequestInterceptor interface{}) *mockReadRequestFactory_Execute_Call {
	return &mockReadRequestFactory_Execute_Call{Call: _e.mock.On("Execute", tags, tagNames, reader, readRequestInterceptor)}
}

func (_c *mockReadRequestFactory_Execute_Call) Run(run func(tags map[string]model.PlcTag, tagNames []string, reader spi.PlcReader, readRequestInterceptor ReadRequestInterceptor)) *mockReadRequestFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]model.PlcTag), args[1].([]string), args[2].(spi.PlcReader), args[3].(ReadRequestInterceptor))
	})
	return _c
}

func (_c *mockReadRequestFactory_Execute_Call) Return(_a0 model.PlcReadRequest) *mockReadRequestFactory_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReadRequestFactory_Execute_Call) RunAndReturn(run func(map[string]model.PlcTag, []string, spi.PlcReader, ReadRequestInterceptor) model.PlcReadRequest) *mockReadRequestFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockReadRequestFactory creates a new instance of mockReadRequestFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockReadRequestFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockReadRequestFactory {
	mock := &mockReadRequestFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
