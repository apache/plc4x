/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.27.1. DO NOT EDIT.

package spi

import mock "github.com/stretchr/testify/mock"

// MockRequestTransactionManagerOption is an autogenerated mock type for the RequestTransactionManagerOption type
type MockRequestTransactionManagerOption struct {
	mock.Mock
}

type MockRequestTransactionManagerOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestTransactionManagerOption) EXPECT() *MockRequestTransactionManagerOption_Expecter {
	return &MockRequestTransactionManagerOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: requestTransactionManager
func (_m *MockRequestTransactionManagerOption) Execute(requestTransactionManager *requestTransactionManager) {
	_m.Called(requestTransactionManager)
}

// MockRequestTransactionManagerOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRequestTransactionManagerOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - requestTransactionManager *requestTransactionManager
func (_e *MockRequestTransactionManagerOption_Expecter) Execute(requestTransactionManager interface{}) *MockRequestTransactionManagerOption_Execute_Call {
	return &MockRequestTransactionManagerOption_Execute_Call{Call: _e.mock.On("Execute", requestTransactionManager)}
}

func (_c *MockRequestTransactionManagerOption_Execute_Call) Run(run func(requestTransactionManager *requestTransactionManager)) *MockRequestTransactionManagerOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*requestTransactionManager))
	})
	return _c
}

func (_c *MockRequestTransactionManagerOption_Execute_Call) Return() *MockRequestTransactionManagerOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequestTransactionManagerOption_Execute_Call) RunAndReturn(run func(*requestTransactionManager)) *MockRequestTransactionManagerOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRequestTransactionManagerOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRequestTransactionManagerOption creates a new instance of MockRequestTransactionManagerOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRequestTransactionManagerOption(t mockConstructorTestingTNewMockRequestTransactionManagerOption) *MockRequestTransactionManagerOption {
	mock := &MockRequestTransactionManagerOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
