/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// SetMonitoringModeRequest is the corresponding interface of SetMonitoringModeRequest
type SetMonitoringModeRequest interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetRequestHeader returns RequestHeader (property field)
	GetRequestHeader() ExtensionObjectDefinition
	// GetSubscriptionId returns SubscriptionId (property field)
	GetSubscriptionId() uint32
	// GetMonitoringMode returns MonitoringMode (property field)
	GetMonitoringMode() MonitoringMode
	// GetNoOfMonitoredItemIds returns NoOfMonitoredItemIds (property field)
	GetNoOfMonitoredItemIds() int32
	// GetMonitoredItemIds returns MonitoredItemIds (property field)
	GetMonitoredItemIds() []uint32
	// IsSetMonitoringModeRequest is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsSetMonitoringModeRequest()
	// CreateBuilder creates a SetMonitoringModeRequestBuilder
	CreateSetMonitoringModeRequestBuilder() SetMonitoringModeRequestBuilder
}

// _SetMonitoringModeRequest is the data-structure of this message
type _SetMonitoringModeRequest struct {
	ExtensionObjectDefinitionContract
	RequestHeader        ExtensionObjectDefinition
	SubscriptionId       uint32
	MonitoringMode       MonitoringMode
	NoOfMonitoredItemIds int32
	MonitoredItemIds     []uint32
}

var _ SetMonitoringModeRequest = (*_SetMonitoringModeRequest)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_SetMonitoringModeRequest)(nil)

// NewSetMonitoringModeRequest factory function for _SetMonitoringModeRequest
func NewSetMonitoringModeRequest(requestHeader ExtensionObjectDefinition, subscriptionId uint32, monitoringMode MonitoringMode, noOfMonitoredItemIds int32, monitoredItemIds []uint32) *_SetMonitoringModeRequest {
	if requestHeader == nil {
		panic("requestHeader of type ExtensionObjectDefinition for SetMonitoringModeRequest must not be nil")
	}
	_result := &_SetMonitoringModeRequest{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		RequestHeader:                     requestHeader,
		SubscriptionId:                    subscriptionId,
		MonitoringMode:                    monitoringMode,
		NoOfMonitoredItemIds:              noOfMonitoredItemIds,
		MonitoredItemIds:                  monitoredItemIds,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// SetMonitoringModeRequestBuilder is a builder for SetMonitoringModeRequest
type SetMonitoringModeRequestBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(requestHeader ExtensionObjectDefinition, subscriptionId uint32, monitoringMode MonitoringMode, noOfMonitoredItemIds int32, monitoredItemIds []uint32) SetMonitoringModeRequestBuilder
	// WithRequestHeader adds RequestHeader (property field)
	WithRequestHeader(ExtensionObjectDefinition) SetMonitoringModeRequestBuilder
	// WithSubscriptionId adds SubscriptionId (property field)
	WithSubscriptionId(uint32) SetMonitoringModeRequestBuilder
	// WithMonitoringMode adds MonitoringMode (property field)
	WithMonitoringMode(MonitoringMode) SetMonitoringModeRequestBuilder
	// WithNoOfMonitoredItemIds adds NoOfMonitoredItemIds (property field)
	WithNoOfMonitoredItemIds(int32) SetMonitoringModeRequestBuilder
	// WithMonitoredItemIds adds MonitoredItemIds (property field)
	WithMonitoredItemIds(...uint32) SetMonitoringModeRequestBuilder
	// Build builds the SetMonitoringModeRequest or returns an error if something is wrong
	Build() (SetMonitoringModeRequest, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() SetMonitoringModeRequest
}

// NewSetMonitoringModeRequestBuilder() creates a SetMonitoringModeRequestBuilder
func NewSetMonitoringModeRequestBuilder() SetMonitoringModeRequestBuilder {
	return &_SetMonitoringModeRequestBuilder{_SetMonitoringModeRequest: new(_SetMonitoringModeRequest)}
}

type _SetMonitoringModeRequestBuilder struct {
	*_SetMonitoringModeRequest

	err *utils.MultiError
}

var _ (SetMonitoringModeRequestBuilder) = (*_SetMonitoringModeRequestBuilder)(nil)

func (m *_SetMonitoringModeRequestBuilder) WithMandatoryFields(requestHeader ExtensionObjectDefinition, subscriptionId uint32, monitoringMode MonitoringMode, noOfMonitoredItemIds int32, monitoredItemIds []uint32) SetMonitoringModeRequestBuilder {
	return m.WithRequestHeader(requestHeader).WithSubscriptionId(subscriptionId).WithMonitoringMode(monitoringMode).WithNoOfMonitoredItemIds(noOfMonitoredItemIds).WithMonitoredItemIds(monitoredItemIds...)
}

func (m *_SetMonitoringModeRequestBuilder) WithRequestHeader(requestHeader ExtensionObjectDefinition) SetMonitoringModeRequestBuilder {
	m.RequestHeader = requestHeader
	return m
}

func (m *_SetMonitoringModeRequestBuilder) WithSubscriptionId(subscriptionId uint32) SetMonitoringModeRequestBuilder {
	m.SubscriptionId = subscriptionId
	return m
}

func (m *_SetMonitoringModeRequestBuilder) WithMonitoringMode(monitoringMode MonitoringMode) SetMonitoringModeRequestBuilder {
	m.MonitoringMode = monitoringMode
	return m
}

func (m *_SetMonitoringModeRequestBuilder) WithNoOfMonitoredItemIds(noOfMonitoredItemIds int32) SetMonitoringModeRequestBuilder {
	m.NoOfMonitoredItemIds = noOfMonitoredItemIds
	return m
}

func (m *_SetMonitoringModeRequestBuilder) WithMonitoredItemIds(monitoredItemIds ...uint32) SetMonitoringModeRequestBuilder {
	m.MonitoredItemIds = monitoredItemIds
	return m
}

func (m *_SetMonitoringModeRequestBuilder) Build() (SetMonitoringModeRequest, error) {
	if m.RequestHeader == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'requestHeader' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._SetMonitoringModeRequest.deepCopy(), nil
}

func (m *_SetMonitoringModeRequestBuilder) MustBuild() SetMonitoringModeRequest {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_SetMonitoringModeRequestBuilder) DeepCopy() any {
	return m.CreateSetMonitoringModeRequestBuilder()
}

// CreateSetMonitoringModeRequestBuilder creates a SetMonitoringModeRequestBuilder
func (m *_SetMonitoringModeRequest) CreateSetMonitoringModeRequestBuilder() SetMonitoringModeRequestBuilder {
	if m == nil {
		return NewSetMonitoringModeRequestBuilder()
	}
	return &_SetMonitoringModeRequestBuilder{_SetMonitoringModeRequest: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_SetMonitoringModeRequest) GetIdentifier() string {
	return "769"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_SetMonitoringModeRequest) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_SetMonitoringModeRequest) GetRequestHeader() ExtensionObjectDefinition {
	return m.RequestHeader
}

func (m *_SetMonitoringModeRequest) GetSubscriptionId() uint32 {
	return m.SubscriptionId
}

func (m *_SetMonitoringModeRequest) GetMonitoringMode() MonitoringMode {
	return m.MonitoringMode
}

func (m *_SetMonitoringModeRequest) GetNoOfMonitoredItemIds() int32 {
	return m.NoOfMonitoredItemIds
}

func (m *_SetMonitoringModeRequest) GetMonitoredItemIds() []uint32 {
	return m.MonitoredItemIds
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastSetMonitoringModeRequest(structType any) SetMonitoringModeRequest {
	if casted, ok := structType.(SetMonitoringModeRequest); ok {
		return casted
	}
	if casted, ok := structType.(*SetMonitoringModeRequest); ok {
		return *casted
	}
	return nil
}

func (m *_SetMonitoringModeRequest) GetTypeName() string {
	return "SetMonitoringModeRequest"
}

func (m *_SetMonitoringModeRequest) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (requestHeader)
	lengthInBits += m.RequestHeader.GetLengthInBits(ctx)

	// Simple field (subscriptionId)
	lengthInBits += 32

	// Simple field (monitoringMode)
	lengthInBits += 32

	// Simple field (noOfMonitoredItemIds)
	lengthInBits += 32

	// Array field
	if len(m.MonitoredItemIds) > 0 {
		lengthInBits += 32 * uint16(len(m.MonitoredItemIds))
	}

	return lengthInBits
}

func (m *_SetMonitoringModeRequest) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_SetMonitoringModeRequest) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__setMonitoringModeRequest SetMonitoringModeRequest, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("SetMonitoringModeRequest"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for SetMonitoringModeRequest")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	requestHeader, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "requestHeader", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("391")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'requestHeader' field"))
	}
	m.RequestHeader = requestHeader

	subscriptionId, err := ReadSimpleField(ctx, "subscriptionId", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subscriptionId' field"))
	}
	m.SubscriptionId = subscriptionId

	monitoringMode, err := ReadEnumField[MonitoringMode](ctx, "monitoringMode", "MonitoringMode", ReadEnum(MonitoringModeByValue, ReadUnsignedInt(readBuffer, uint8(32))))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'monitoringMode' field"))
	}
	m.MonitoringMode = monitoringMode

	noOfMonitoredItemIds, err := ReadSimpleField(ctx, "noOfMonitoredItemIds", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfMonitoredItemIds' field"))
	}
	m.NoOfMonitoredItemIds = noOfMonitoredItemIds

	monitoredItemIds, err := ReadCountArrayField[uint32](ctx, "monitoredItemIds", ReadUnsignedInt(readBuffer, uint8(32)), uint64(noOfMonitoredItemIds))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'monitoredItemIds' field"))
	}
	m.MonitoredItemIds = monitoredItemIds

	if closeErr := readBuffer.CloseContext("SetMonitoringModeRequest"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for SetMonitoringModeRequest")
	}

	return m, nil
}

func (m *_SetMonitoringModeRequest) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_SetMonitoringModeRequest) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("SetMonitoringModeRequest"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for SetMonitoringModeRequest")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "requestHeader", m.GetRequestHeader(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'requestHeader' field")
		}

		if err := WriteSimpleField[uint32](ctx, "subscriptionId", m.GetSubscriptionId(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'subscriptionId' field")
		}

		if err := WriteSimpleEnumField[MonitoringMode](ctx, "monitoringMode", "MonitoringMode", m.GetMonitoringMode(), WriteEnum[MonitoringMode, uint32](MonitoringMode.GetValue, MonitoringMode.PLC4XEnumName, WriteUnsignedInt(writeBuffer, 32))); err != nil {
			return errors.Wrap(err, "Error serializing 'monitoringMode' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfMonitoredItemIds", m.GetNoOfMonitoredItemIds(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfMonitoredItemIds' field")
		}

		if err := WriteSimpleTypeArrayField(ctx, "monitoredItemIds", m.GetMonitoredItemIds(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'monitoredItemIds' field")
		}

		if popErr := writeBuffer.PopContext("SetMonitoringModeRequest"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for SetMonitoringModeRequest")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_SetMonitoringModeRequest) IsSetMonitoringModeRequest() {}

func (m *_SetMonitoringModeRequest) DeepCopy() any {
	return m.deepCopy()
}

func (m *_SetMonitoringModeRequest) deepCopy() *_SetMonitoringModeRequest {
	if m == nil {
		return nil
	}
	_SetMonitoringModeRequestCopy := &_SetMonitoringModeRequest{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.RequestHeader.DeepCopy().(ExtensionObjectDefinition),
		m.SubscriptionId,
		m.MonitoringMode,
		m.NoOfMonitoredItemIds,
		utils.DeepCopySlice[uint32, uint32](m.MonitoredItemIds),
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _SetMonitoringModeRequestCopy
}

func (m *_SetMonitoringModeRequest) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
