/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// ContentFilterElement is the corresponding interface of ContentFilterElement
type ContentFilterElement interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	ExtensionObjectDefinition
	// GetFilterOperator returns FilterOperator (property field)
	GetFilterOperator() FilterOperator
	// GetNoOfFilterOperands returns NoOfFilterOperands (property field)
	GetNoOfFilterOperands() int32
	// GetFilterOperands returns FilterOperands (property field)
	GetFilterOperands() []ExtensionObject
	// IsContentFilterElement is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsContentFilterElement()
}

// _ContentFilterElement is the data-structure of this message
type _ContentFilterElement struct {
	ExtensionObjectDefinitionContract
	FilterOperator     FilterOperator
	NoOfFilterOperands int32
	FilterOperands     []ExtensionObject
}

var _ ContentFilterElement = (*_ContentFilterElement)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_ContentFilterElement)(nil)

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_ContentFilterElement) GetIdentifier() string {
	return "585"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_ContentFilterElement) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_ContentFilterElement) GetFilterOperator() FilterOperator {
	return m.FilterOperator
}

func (m *_ContentFilterElement) GetNoOfFilterOperands() int32 {
	return m.NoOfFilterOperands
}

func (m *_ContentFilterElement) GetFilterOperands() []ExtensionObject {
	return m.FilterOperands
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewContentFilterElement factory function for _ContentFilterElement
func NewContentFilterElement(filterOperator FilterOperator, noOfFilterOperands int32, filterOperands []ExtensionObject) *_ContentFilterElement {
	_result := &_ContentFilterElement{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		FilterOperator:                    filterOperator,
		NoOfFilterOperands:                noOfFilterOperands,
		FilterOperands:                    filterOperands,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastContentFilterElement(structType any) ContentFilterElement {
	if casted, ok := structType.(ContentFilterElement); ok {
		return casted
	}
	if casted, ok := structType.(*ContentFilterElement); ok {
		return *casted
	}
	return nil
}

func (m *_ContentFilterElement) GetTypeName() string {
	return "ContentFilterElement"
}

func (m *_ContentFilterElement) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (filterOperator)
	lengthInBits += 32

	// Simple field (noOfFilterOperands)
	lengthInBits += 32

	// Array field
	if len(m.FilterOperands) > 0 {
		for _curItem, element := range m.FilterOperands {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.FilterOperands), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	return lengthInBits
}

func (m *_ContentFilterElement) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_ContentFilterElement) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__contentFilterElement ContentFilterElement, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("ContentFilterElement"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ContentFilterElement")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	filterOperator, err := ReadEnumField[FilterOperator](ctx, "filterOperator", "FilterOperator", ReadEnum(FilterOperatorByValue, ReadUnsignedInt(readBuffer, uint8(32))))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'filterOperator' field"))
	}
	m.FilterOperator = filterOperator

	noOfFilterOperands, err := ReadSimpleField(ctx, "noOfFilterOperands", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfFilterOperands' field"))
	}
	m.NoOfFilterOperands = noOfFilterOperands

	filterOperands, err := ReadCountArrayField[ExtensionObject](ctx, "filterOperands", ReadComplex[ExtensionObject](ExtensionObjectParseWithBufferProducer((bool)(bool(true))), readBuffer), uint64(noOfFilterOperands))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'filterOperands' field"))
	}
	m.FilterOperands = filterOperands

	if closeErr := readBuffer.CloseContext("ContentFilterElement"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ContentFilterElement")
	}

	return m, nil
}

func (m *_ContentFilterElement) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_ContentFilterElement) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("ContentFilterElement"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for ContentFilterElement")
		}

		if err := WriteSimpleEnumField[FilterOperator](ctx, "filterOperator", "FilterOperator", m.GetFilterOperator(), WriteEnum[FilterOperator, uint32](FilterOperator.GetValue, FilterOperator.PLC4XEnumName, WriteUnsignedInt(writeBuffer, 32))); err != nil {
			return errors.Wrap(err, "Error serializing 'filterOperator' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfFilterOperands", m.GetNoOfFilterOperands(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfFilterOperands' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "filterOperands", m.GetFilterOperands(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'filterOperands' field")
		}

		if popErr := writeBuffer.PopContext("ContentFilterElement"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for ContentFilterElement")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_ContentFilterElement) IsContentFilterElement() {}

func (m *_ContentFilterElement) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
