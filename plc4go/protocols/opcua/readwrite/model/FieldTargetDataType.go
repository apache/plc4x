/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// FieldTargetDataType is the corresponding interface of FieldTargetDataType
type FieldTargetDataType interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetDataSetFieldId returns DataSetFieldId (property field)
	GetDataSetFieldId() GuidValue
	// GetReceiverIndexRange returns ReceiverIndexRange (property field)
	GetReceiverIndexRange() PascalString
	// GetTargetNodeId returns TargetNodeId (property field)
	GetTargetNodeId() NodeId
	// GetAttributeId returns AttributeId (property field)
	GetAttributeId() uint32
	// GetWriteIndexRange returns WriteIndexRange (property field)
	GetWriteIndexRange() PascalString
	// GetOverrideValueHandling returns OverrideValueHandling (property field)
	GetOverrideValueHandling() OverrideValueHandling
	// GetOverrideValue returns OverrideValue (property field)
	GetOverrideValue() Variant
	// IsFieldTargetDataType is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsFieldTargetDataType()
	// CreateBuilder creates a FieldTargetDataTypeBuilder
	CreateFieldTargetDataTypeBuilder() FieldTargetDataTypeBuilder
}

// _FieldTargetDataType is the data-structure of this message
type _FieldTargetDataType struct {
	ExtensionObjectDefinitionContract
	DataSetFieldId        GuidValue
	ReceiverIndexRange    PascalString
	TargetNodeId          NodeId
	AttributeId           uint32
	WriteIndexRange       PascalString
	OverrideValueHandling OverrideValueHandling
	OverrideValue         Variant
}

var _ FieldTargetDataType = (*_FieldTargetDataType)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_FieldTargetDataType)(nil)

// NewFieldTargetDataType factory function for _FieldTargetDataType
func NewFieldTargetDataType(dataSetFieldId GuidValue, receiverIndexRange PascalString, targetNodeId NodeId, attributeId uint32, writeIndexRange PascalString, overrideValueHandling OverrideValueHandling, overrideValue Variant) *_FieldTargetDataType {
	if dataSetFieldId == nil {
		panic("dataSetFieldId of type GuidValue for FieldTargetDataType must not be nil")
	}
	if receiverIndexRange == nil {
		panic("receiverIndexRange of type PascalString for FieldTargetDataType must not be nil")
	}
	if targetNodeId == nil {
		panic("targetNodeId of type NodeId for FieldTargetDataType must not be nil")
	}
	if writeIndexRange == nil {
		panic("writeIndexRange of type PascalString for FieldTargetDataType must not be nil")
	}
	if overrideValue == nil {
		panic("overrideValue of type Variant for FieldTargetDataType must not be nil")
	}
	_result := &_FieldTargetDataType{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		DataSetFieldId:                    dataSetFieldId,
		ReceiverIndexRange:                receiverIndexRange,
		TargetNodeId:                      targetNodeId,
		AttributeId:                       attributeId,
		WriteIndexRange:                   writeIndexRange,
		OverrideValueHandling:             overrideValueHandling,
		OverrideValue:                     overrideValue,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// FieldTargetDataTypeBuilder is a builder for FieldTargetDataType
type FieldTargetDataTypeBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(dataSetFieldId GuidValue, receiverIndexRange PascalString, targetNodeId NodeId, attributeId uint32, writeIndexRange PascalString, overrideValueHandling OverrideValueHandling, overrideValue Variant) FieldTargetDataTypeBuilder
	// WithDataSetFieldId adds DataSetFieldId (property field)
	WithDataSetFieldId(GuidValue) FieldTargetDataTypeBuilder
	// WithDataSetFieldIdBuilder adds DataSetFieldId (property field) which is build by the builder
	WithDataSetFieldIdBuilder(func(GuidValueBuilder) GuidValueBuilder) FieldTargetDataTypeBuilder
	// WithReceiverIndexRange adds ReceiverIndexRange (property field)
	WithReceiverIndexRange(PascalString) FieldTargetDataTypeBuilder
	// WithReceiverIndexRangeBuilder adds ReceiverIndexRange (property field) which is build by the builder
	WithReceiverIndexRangeBuilder(func(PascalStringBuilder) PascalStringBuilder) FieldTargetDataTypeBuilder
	// WithTargetNodeId adds TargetNodeId (property field)
	WithTargetNodeId(NodeId) FieldTargetDataTypeBuilder
	// WithTargetNodeIdBuilder adds TargetNodeId (property field) which is build by the builder
	WithTargetNodeIdBuilder(func(NodeIdBuilder) NodeIdBuilder) FieldTargetDataTypeBuilder
	// WithAttributeId adds AttributeId (property field)
	WithAttributeId(uint32) FieldTargetDataTypeBuilder
	// WithWriteIndexRange adds WriteIndexRange (property field)
	WithWriteIndexRange(PascalString) FieldTargetDataTypeBuilder
	// WithWriteIndexRangeBuilder adds WriteIndexRange (property field) which is build by the builder
	WithWriteIndexRangeBuilder(func(PascalStringBuilder) PascalStringBuilder) FieldTargetDataTypeBuilder
	// WithOverrideValueHandling adds OverrideValueHandling (property field)
	WithOverrideValueHandling(OverrideValueHandling) FieldTargetDataTypeBuilder
	// WithOverrideValue adds OverrideValue (property field)
	WithOverrideValue(Variant) FieldTargetDataTypeBuilder
	// Build builds the FieldTargetDataType or returns an error if something is wrong
	Build() (FieldTargetDataType, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() FieldTargetDataType
}

// NewFieldTargetDataTypeBuilder() creates a FieldTargetDataTypeBuilder
func NewFieldTargetDataTypeBuilder() FieldTargetDataTypeBuilder {
	return &_FieldTargetDataTypeBuilder{_FieldTargetDataType: new(_FieldTargetDataType)}
}

type _FieldTargetDataTypeBuilder struct {
	*_FieldTargetDataType

	err *utils.MultiError
}

var _ (FieldTargetDataTypeBuilder) = (*_FieldTargetDataTypeBuilder)(nil)

func (m *_FieldTargetDataTypeBuilder) WithMandatoryFields(dataSetFieldId GuidValue, receiverIndexRange PascalString, targetNodeId NodeId, attributeId uint32, writeIndexRange PascalString, overrideValueHandling OverrideValueHandling, overrideValue Variant) FieldTargetDataTypeBuilder {
	return m.WithDataSetFieldId(dataSetFieldId).WithReceiverIndexRange(receiverIndexRange).WithTargetNodeId(targetNodeId).WithAttributeId(attributeId).WithWriteIndexRange(writeIndexRange).WithOverrideValueHandling(overrideValueHandling).WithOverrideValue(overrideValue)
}

func (m *_FieldTargetDataTypeBuilder) WithDataSetFieldId(dataSetFieldId GuidValue) FieldTargetDataTypeBuilder {
	m.DataSetFieldId = dataSetFieldId
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithDataSetFieldIdBuilder(builderSupplier func(GuidValueBuilder) GuidValueBuilder) FieldTargetDataTypeBuilder {
	builder := builderSupplier(m.DataSetFieldId.CreateGuidValueBuilder())
	var err error
	m.DataSetFieldId, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "GuidValueBuilder failed"))
	}
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithReceiverIndexRange(receiverIndexRange PascalString) FieldTargetDataTypeBuilder {
	m.ReceiverIndexRange = receiverIndexRange
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithReceiverIndexRangeBuilder(builderSupplier func(PascalStringBuilder) PascalStringBuilder) FieldTargetDataTypeBuilder {
	builder := builderSupplier(m.ReceiverIndexRange.CreatePascalStringBuilder())
	var err error
	m.ReceiverIndexRange, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalStringBuilder failed"))
	}
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithTargetNodeId(targetNodeId NodeId) FieldTargetDataTypeBuilder {
	m.TargetNodeId = targetNodeId
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithTargetNodeIdBuilder(builderSupplier func(NodeIdBuilder) NodeIdBuilder) FieldTargetDataTypeBuilder {
	builder := builderSupplier(m.TargetNodeId.CreateNodeIdBuilder())
	var err error
	m.TargetNodeId, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "NodeIdBuilder failed"))
	}
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithAttributeId(attributeId uint32) FieldTargetDataTypeBuilder {
	m.AttributeId = attributeId
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithWriteIndexRange(writeIndexRange PascalString) FieldTargetDataTypeBuilder {
	m.WriteIndexRange = writeIndexRange
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithWriteIndexRangeBuilder(builderSupplier func(PascalStringBuilder) PascalStringBuilder) FieldTargetDataTypeBuilder {
	builder := builderSupplier(m.WriteIndexRange.CreatePascalStringBuilder())
	var err error
	m.WriteIndexRange, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalStringBuilder failed"))
	}
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithOverrideValueHandling(overrideValueHandling OverrideValueHandling) FieldTargetDataTypeBuilder {
	m.OverrideValueHandling = overrideValueHandling
	return m
}

func (m *_FieldTargetDataTypeBuilder) WithOverrideValue(overrideValue Variant) FieldTargetDataTypeBuilder {
	m.OverrideValue = overrideValue
	return m
}

func (m *_FieldTargetDataTypeBuilder) Build() (FieldTargetDataType, error) {
	if m.DataSetFieldId == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'dataSetFieldId' not set"))
	}
	if m.ReceiverIndexRange == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'receiverIndexRange' not set"))
	}
	if m.TargetNodeId == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'targetNodeId' not set"))
	}
	if m.WriteIndexRange == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'writeIndexRange' not set"))
	}
	if m.OverrideValue == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'overrideValue' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._FieldTargetDataType.deepCopy(), nil
}

func (m *_FieldTargetDataTypeBuilder) MustBuild() FieldTargetDataType {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_FieldTargetDataTypeBuilder) DeepCopy() any {
	return m.CreateFieldTargetDataTypeBuilder()
}

// CreateFieldTargetDataTypeBuilder creates a FieldTargetDataTypeBuilder
func (m *_FieldTargetDataType) CreateFieldTargetDataTypeBuilder() FieldTargetDataTypeBuilder {
	if m == nil {
		return NewFieldTargetDataTypeBuilder()
	}
	return &_FieldTargetDataTypeBuilder{_FieldTargetDataType: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_FieldTargetDataType) GetIdentifier() string {
	return "14746"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_FieldTargetDataType) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_FieldTargetDataType) GetDataSetFieldId() GuidValue {
	return m.DataSetFieldId
}

func (m *_FieldTargetDataType) GetReceiverIndexRange() PascalString {
	return m.ReceiverIndexRange
}

func (m *_FieldTargetDataType) GetTargetNodeId() NodeId {
	return m.TargetNodeId
}

func (m *_FieldTargetDataType) GetAttributeId() uint32 {
	return m.AttributeId
}

func (m *_FieldTargetDataType) GetWriteIndexRange() PascalString {
	return m.WriteIndexRange
}

func (m *_FieldTargetDataType) GetOverrideValueHandling() OverrideValueHandling {
	return m.OverrideValueHandling
}

func (m *_FieldTargetDataType) GetOverrideValue() Variant {
	return m.OverrideValue
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastFieldTargetDataType(structType any) FieldTargetDataType {
	if casted, ok := structType.(FieldTargetDataType); ok {
		return casted
	}
	if casted, ok := structType.(*FieldTargetDataType); ok {
		return *casted
	}
	return nil
}

func (m *_FieldTargetDataType) GetTypeName() string {
	return "FieldTargetDataType"
}

func (m *_FieldTargetDataType) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (dataSetFieldId)
	lengthInBits += m.DataSetFieldId.GetLengthInBits(ctx)

	// Simple field (receiverIndexRange)
	lengthInBits += m.ReceiverIndexRange.GetLengthInBits(ctx)

	// Simple field (targetNodeId)
	lengthInBits += m.TargetNodeId.GetLengthInBits(ctx)

	// Simple field (attributeId)
	lengthInBits += 32

	// Simple field (writeIndexRange)
	lengthInBits += m.WriteIndexRange.GetLengthInBits(ctx)

	// Simple field (overrideValueHandling)
	lengthInBits += 32

	// Simple field (overrideValue)
	lengthInBits += m.OverrideValue.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_FieldTargetDataType) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_FieldTargetDataType) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__fieldTargetDataType FieldTargetDataType, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("FieldTargetDataType"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for FieldTargetDataType")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	dataSetFieldId, err := ReadSimpleField[GuidValue](ctx, "dataSetFieldId", ReadComplex[GuidValue](GuidValueParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'dataSetFieldId' field"))
	}
	m.DataSetFieldId = dataSetFieldId

	receiverIndexRange, err := ReadSimpleField[PascalString](ctx, "receiverIndexRange", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'receiverIndexRange' field"))
	}
	m.ReceiverIndexRange = receiverIndexRange

	targetNodeId, err := ReadSimpleField[NodeId](ctx, "targetNodeId", ReadComplex[NodeId](NodeIdParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'targetNodeId' field"))
	}
	m.TargetNodeId = targetNodeId

	attributeId, err := ReadSimpleField(ctx, "attributeId", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'attributeId' field"))
	}
	m.AttributeId = attributeId

	writeIndexRange, err := ReadSimpleField[PascalString](ctx, "writeIndexRange", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'writeIndexRange' field"))
	}
	m.WriteIndexRange = writeIndexRange

	overrideValueHandling, err := ReadEnumField[OverrideValueHandling](ctx, "overrideValueHandling", "OverrideValueHandling", ReadEnum(OverrideValueHandlingByValue, ReadUnsignedInt(readBuffer, uint8(32))))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'overrideValueHandling' field"))
	}
	m.OverrideValueHandling = overrideValueHandling

	overrideValue, err := ReadSimpleField[Variant](ctx, "overrideValue", ReadComplex[Variant](VariantParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'overrideValue' field"))
	}
	m.OverrideValue = overrideValue

	if closeErr := readBuffer.CloseContext("FieldTargetDataType"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for FieldTargetDataType")
	}

	return m, nil
}

func (m *_FieldTargetDataType) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_FieldTargetDataType) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("FieldTargetDataType"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for FieldTargetDataType")
		}

		if err := WriteSimpleField[GuidValue](ctx, "dataSetFieldId", m.GetDataSetFieldId(), WriteComplex[GuidValue](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'dataSetFieldId' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "receiverIndexRange", m.GetReceiverIndexRange(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'receiverIndexRange' field")
		}

		if err := WriteSimpleField[NodeId](ctx, "targetNodeId", m.GetTargetNodeId(), WriteComplex[NodeId](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'targetNodeId' field")
		}

		if err := WriteSimpleField[uint32](ctx, "attributeId", m.GetAttributeId(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'attributeId' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "writeIndexRange", m.GetWriteIndexRange(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'writeIndexRange' field")
		}

		if err := WriteSimpleEnumField[OverrideValueHandling](ctx, "overrideValueHandling", "OverrideValueHandling", m.GetOverrideValueHandling(), WriteEnum[OverrideValueHandling, uint32](OverrideValueHandling.GetValue, OverrideValueHandling.PLC4XEnumName, WriteUnsignedInt(writeBuffer, 32))); err != nil {
			return errors.Wrap(err, "Error serializing 'overrideValueHandling' field")
		}

		if err := WriteSimpleField[Variant](ctx, "overrideValue", m.GetOverrideValue(), WriteComplex[Variant](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'overrideValue' field")
		}

		if popErr := writeBuffer.PopContext("FieldTargetDataType"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for FieldTargetDataType")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_FieldTargetDataType) IsFieldTargetDataType() {}

func (m *_FieldTargetDataType) DeepCopy() any {
	return m.deepCopy()
}

func (m *_FieldTargetDataType) deepCopy() *_FieldTargetDataType {
	if m == nil {
		return nil
	}
	_FieldTargetDataTypeCopy := &_FieldTargetDataType{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.DataSetFieldId.DeepCopy().(GuidValue),
		m.ReceiverIndexRange.DeepCopy().(PascalString),
		m.TargetNodeId.DeepCopy().(NodeId),
		m.AttributeId,
		m.WriteIndexRange.DeepCopy().(PascalString),
		m.OverrideValueHandling,
		m.OverrideValue.DeepCopy().(Variant),
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _FieldTargetDataTypeCopy
}

func (m *_FieldTargetDataType) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
