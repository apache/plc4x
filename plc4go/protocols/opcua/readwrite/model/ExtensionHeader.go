/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// ExtensionHeader is the corresponding interface of ExtensionHeader
type ExtensionHeader interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	// GetXmlbody returns Xmlbody (property field)
	GetXmlbody() bool
	// GetBinaryBody returns BinaryBody (property field)
	GetBinaryBody() bool
	// IsExtensionHeader is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsExtensionHeader()
}

// _ExtensionHeader is the data-structure of this message
type _ExtensionHeader struct {
	Xmlbody    bool
	BinaryBody bool
	// Reserved Fields
	reservedField0 *int8
}

var _ ExtensionHeader = (*_ExtensionHeader)(nil)

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_ExtensionHeader) GetXmlbody() bool {
	return m.Xmlbody
}

func (m *_ExtensionHeader) GetBinaryBody() bool {
	return m.BinaryBody
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewExtensionHeader factory function for _ExtensionHeader
func NewExtensionHeader(xmlbody bool, binaryBody bool) *_ExtensionHeader {
	return &_ExtensionHeader{Xmlbody: xmlbody, BinaryBody: binaryBody}
}

// Deprecated: use the interface for direct cast
func CastExtensionHeader(structType any) ExtensionHeader {
	if casted, ok := structType.(ExtensionHeader); ok {
		return casted
	}
	if casted, ok := structType.(*ExtensionHeader); ok {
		return *casted
	}
	return nil
}

func (m *_ExtensionHeader) GetTypeName() string {
	return "ExtensionHeader"
}

func (m *_ExtensionHeader) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Reserved Field (reserved)
	lengthInBits += 5

	// Simple field (xmlbody)
	lengthInBits += 1

	// Simple field (binaryBody)
	lengthInBits += 1

	return lengthInBits
}

func (m *_ExtensionHeader) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func ExtensionHeaderParse(ctx context.Context, theBytes []byte) (ExtensionHeader, error) {
	return ExtensionHeaderParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func ExtensionHeaderParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (ExtensionHeader, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (ExtensionHeader, error) {
		return ExtensionHeaderParseWithBuffer(ctx, readBuffer)
	}
}

func ExtensionHeaderParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (ExtensionHeader, error) {
	v, err := (&_ExtensionHeader{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, err
}

func (m *_ExtensionHeader) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__extensionHeader ExtensionHeader, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("ExtensionHeader"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ExtensionHeader")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	reservedField0, err := ReadReservedField(ctx, "reserved", ReadSignedByte(readBuffer, uint8(5)), int8(0x00))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing reserved field"))
	}
	m.reservedField0 = reservedField0

	xmlbody, err := ReadSimpleField(ctx, "xmlbody", ReadBoolean(readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'xmlbody' field"))
	}
	m.Xmlbody = xmlbody

	binaryBody, err := ReadSimpleField(ctx, "binaryBody", ReadBoolean(readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'binaryBody' field"))
	}
	m.BinaryBody = binaryBody

	if closeErr := readBuffer.CloseContext("ExtensionHeader"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ExtensionHeader")
	}

	return m, nil
}

func (m *_ExtensionHeader) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_ExtensionHeader) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("ExtensionHeader"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for ExtensionHeader")
	}

	if err := WriteReservedField[int8](ctx, "reserved", int8(0x00), WriteSignedByte(writeBuffer, 5)); err != nil {
		return errors.Wrap(err, "Error serializing 'reserved' field number 1")
	}

	if err := WriteSimpleField[bool](ctx, "xmlbody", m.GetXmlbody(), WriteBoolean(writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'xmlbody' field")
	}

	if err := WriteSimpleField[bool](ctx, "binaryBody", m.GetBinaryBody(), WriteBoolean(writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'binaryBody' field")
	}

	if popErr := writeBuffer.PopContext("ExtensionHeader"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for ExtensionHeader")
	}
	return nil
}

func (m *_ExtensionHeader) IsExtensionHeader() {}

func (m *_ExtensionHeader) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
