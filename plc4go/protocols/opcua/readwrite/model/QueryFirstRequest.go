/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// QueryFirstRequest is the corresponding interface of QueryFirstRequest
type QueryFirstRequest interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetRequestHeader returns RequestHeader (property field)
	GetRequestHeader() ExtensionObjectDefinition
	// GetView returns View (property field)
	GetView() ExtensionObjectDefinition
	// GetNoOfNodeTypes returns NoOfNodeTypes (property field)
	GetNoOfNodeTypes() int32
	// GetNodeTypes returns NodeTypes (property field)
	GetNodeTypes() []ExtensionObjectDefinition
	// GetFilter returns Filter (property field)
	GetFilter() ExtensionObjectDefinition
	// GetMaxDataSetsToReturn returns MaxDataSetsToReturn (property field)
	GetMaxDataSetsToReturn() uint32
	// GetMaxReferencesToReturn returns MaxReferencesToReturn (property field)
	GetMaxReferencesToReturn() uint32
	// IsQueryFirstRequest is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsQueryFirstRequest()
	// CreateBuilder creates a QueryFirstRequestBuilder
	CreateQueryFirstRequestBuilder() QueryFirstRequestBuilder
}

// _QueryFirstRequest is the data-structure of this message
type _QueryFirstRequest struct {
	ExtensionObjectDefinitionContract
	RequestHeader         ExtensionObjectDefinition
	View                  ExtensionObjectDefinition
	NoOfNodeTypes         int32
	NodeTypes             []ExtensionObjectDefinition
	Filter                ExtensionObjectDefinition
	MaxDataSetsToReturn   uint32
	MaxReferencesToReturn uint32
}

var _ QueryFirstRequest = (*_QueryFirstRequest)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_QueryFirstRequest)(nil)

// NewQueryFirstRequest factory function for _QueryFirstRequest
func NewQueryFirstRequest(requestHeader ExtensionObjectDefinition, view ExtensionObjectDefinition, noOfNodeTypes int32, nodeTypes []ExtensionObjectDefinition, filter ExtensionObjectDefinition, maxDataSetsToReturn uint32, maxReferencesToReturn uint32) *_QueryFirstRequest {
	if requestHeader == nil {
		panic("requestHeader of type ExtensionObjectDefinition for QueryFirstRequest must not be nil")
	}
	if view == nil {
		panic("view of type ExtensionObjectDefinition for QueryFirstRequest must not be nil")
	}
	if filter == nil {
		panic("filter of type ExtensionObjectDefinition for QueryFirstRequest must not be nil")
	}
	_result := &_QueryFirstRequest{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		RequestHeader:                     requestHeader,
		View:                              view,
		NoOfNodeTypes:                     noOfNodeTypes,
		NodeTypes:                         nodeTypes,
		Filter:                            filter,
		MaxDataSetsToReturn:               maxDataSetsToReturn,
		MaxReferencesToReturn:             maxReferencesToReturn,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// QueryFirstRequestBuilder is a builder for QueryFirstRequest
type QueryFirstRequestBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(requestHeader ExtensionObjectDefinition, view ExtensionObjectDefinition, noOfNodeTypes int32, nodeTypes []ExtensionObjectDefinition, filter ExtensionObjectDefinition, maxDataSetsToReturn uint32, maxReferencesToReturn uint32) QueryFirstRequestBuilder
	// WithRequestHeader adds RequestHeader (property field)
	WithRequestHeader(ExtensionObjectDefinition) QueryFirstRequestBuilder
	// WithRequestHeaderBuilder adds RequestHeader (property field) which is build by the builder
	WithRequestHeaderBuilder(func(ExtensionObjectDefinitionBuilder) ExtensionObjectDefinitionBuilder) QueryFirstRequestBuilder
	// WithView adds View (property field)
	WithView(ExtensionObjectDefinition) QueryFirstRequestBuilder
	// WithViewBuilder adds View (property field) which is build by the builder
	WithViewBuilder(func(ExtensionObjectDefinitionBuilder) ExtensionObjectDefinitionBuilder) QueryFirstRequestBuilder
	// WithNoOfNodeTypes adds NoOfNodeTypes (property field)
	WithNoOfNodeTypes(int32) QueryFirstRequestBuilder
	// WithNodeTypes adds NodeTypes (property field)
	WithNodeTypes(...ExtensionObjectDefinition) QueryFirstRequestBuilder
	// WithFilter adds Filter (property field)
	WithFilter(ExtensionObjectDefinition) QueryFirstRequestBuilder
	// WithFilterBuilder adds Filter (property field) which is build by the builder
	WithFilterBuilder(func(ExtensionObjectDefinitionBuilder) ExtensionObjectDefinitionBuilder) QueryFirstRequestBuilder
	// WithMaxDataSetsToReturn adds MaxDataSetsToReturn (property field)
	WithMaxDataSetsToReturn(uint32) QueryFirstRequestBuilder
	// WithMaxReferencesToReturn adds MaxReferencesToReturn (property field)
	WithMaxReferencesToReturn(uint32) QueryFirstRequestBuilder
	// Build builds the QueryFirstRequest or returns an error if something is wrong
	Build() (QueryFirstRequest, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() QueryFirstRequest
}

// NewQueryFirstRequestBuilder() creates a QueryFirstRequestBuilder
func NewQueryFirstRequestBuilder() QueryFirstRequestBuilder {
	return &_QueryFirstRequestBuilder{_QueryFirstRequest: new(_QueryFirstRequest)}
}

type _QueryFirstRequestBuilder struct {
	*_QueryFirstRequest

	parentBuilder *_ExtensionObjectDefinitionBuilder

	err *utils.MultiError
}

var _ (QueryFirstRequestBuilder) = (*_QueryFirstRequestBuilder)(nil)

func (b *_QueryFirstRequestBuilder) setParent(contract ExtensionObjectDefinitionContract) {
	b.ExtensionObjectDefinitionContract = contract
}

func (b *_QueryFirstRequestBuilder) WithMandatoryFields(requestHeader ExtensionObjectDefinition, view ExtensionObjectDefinition, noOfNodeTypes int32, nodeTypes []ExtensionObjectDefinition, filter ExtensionObjectDefinition, maxDataSetsToReturn uint32, maxReferencesToReturn uint32) QueryFirstRequestBuilder {
	return b.WithRequestHeader(requestHeader).WithView(view).WithNoOfNodeTypes(noOfNodeTypes).WithNodeTypes(nodeTypes...).WithFilter(filter).WithMaxDataSetsToReturn(maxDataSetsToReturn).WithMaxReferencesToReturn(maxReferencesToReturn)
}

func (b *_QueryFirstRequestBuilder) WithRequestHeader(requestHeader ExtensionObjectDefinition) QueryFirstRequestBuilder {
	b.RequestHeader = requestHeader
	return b
}

func (b *_QueryFirstRequestBuilder) WithRequestHeaderBuilder(builderSupplier func(ExtensionObjectDefinitionBuilder) ExtensionObjectDefinitionBuilder) QueryFirstRequestBuilder {
	builder := builderSupplier(b.RequestHeader.CreateExtensionObjectDefinitionBuilder())
	var err error
	b.RequestHeader, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ExtensionObjectDefinitionBuilder failed"))
	}
	return b
}

func (b *_QueryFirstRequestBuilder) WithView(view ExtensionObjectDefinition) QueryFirstRequestBuilder {
	b.View = view
	return b
}

func (b *_QueryFirstRequestBuilder) WithViewBuilder(builderSupplier func(ExtensionObjectDefinitionBuilder) ExtensionObjectDefinitionBuilder) QueryFirstRequestBuilder {
	builder := builderSupplier(b.View.CreateExtensionObjectDefinitionBuilder())
	var err error
	b.View, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ExtensionObjectDefinitionBuilder failed"))
	}
	return b
}

func (b *_QueryFirstRequestBuilder) WithNoOfNodeTypes(noOfNodeTypes int32) QueryFirstRequestBuilder {
	b.NoOfNodeTypes = noOfNodeTypes
	return b
}

func (b *_QueryFirstRequestBuilder) WithNodeTypes(nodeTypes ...ExtensionObjectDefinition) QueryFirstRequestBuilder {
	b.NodeTypes = nodeTypes
	return b
}

func (b *_QueryFirstRequestBuilder) WithFilter(filter ExtensionObjectDefinition) QueryFirstRequestBuilder {
	b.Filter = filter
	return b
}

func (b *_QueryFirstRequestBuilder) WithFilterBuilder(builderSupplier func(ExtensionObjectDefinitionBuilder) ExtensionObjectDefinitionBuilder) QueryFirstRequestBuilder {
	builder := builderSupplier(b.Filter.CreateExtensionObjectDefinitionBuilder())
	var err error
	b.Filter, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ExtensionObjectDefinitionBuilder failed"))
	}
	return b
}

func (b *_QueryFirstRequestBuilder) WithMaxDataSetsToReturn(maxDataSetsToReturn uint32) QueryFirstRequestBuilder {
	b.MaxDataSetsToReturn = maxDataSetsToReturn
	return b
}

func (b *_QueryFirstRequestBuilder) WithMaxReferencesToReturn(maxReferencesToReturn uint32) QueryFirstRequestBuilder {
	b.MaxReferencesToReturn = maxReferencesToReturn
	return b
}

func (b *_QueryFirstRequestBuilder) Build() (QueryFirstRequest, error) {
	if b.RequestHeader == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'requestHeader' not set"))
	}
	if b.View == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'view' not set"))
	}
	if b.Filter == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'filter' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._QueryFirstRequest.deepCopy(), nil
}

func (b *_QueryFirstRequestBuilder) MustBuild() QueryFirstRequest {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

// Done is used to finish work on this child and return to the parent builder
func (b *_QueryFirstRequestBuilder) Done() ExtensionObjectDefinitionBuilder {
	return b.parentBuilder
}

func (b *_QueryFirstRequestBuilder) buildForExtensionObjectDefinition() (ExtensionObjectDefinition, error) {
	return b.Build()
}

func (b *_QueryFirstRequestBuilder) DeepCopy() any {
	_copy := b.CreateQueryFirstRequestBuilder().(*_QueryFirstRequestBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateQueryFirstRequestBuilder creates a QueryFirstRequestBuilder
func (b *_QueryFirstRequest) CreateQueryFirstRequestBuilder() QueryFirstRequestBuilder {
	if b == nil {
		return NewQueryFirstRequestBuilder()
	}
	return &_QueryFirstRequestBuilder{_QueryFirstRequest: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_QueryFirstRequest) GetIdentifier() string {
	return "615"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_QueryFirstRequest) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_QueryFirstRequest) GetRequestHeader() ExtensionObjectDefinition {
	return m.RequestHeader
}

func (m *_QueryFirstRequest) GetView() ExtensionObjectDefinition {
	return m.View
}

func (m *_QueryFirstRequest) GetNoOfNodeTypes() int32 {
	return m.NoOfNodeTypes
}

func (m *_QueryFirstRequest) GetNodeTypes() []ExtensionObjectDefinition {
	return m.NodeTypes
}

func (m *_QueryFirstRequest) GetFilter() ExtensionObjectDefinition {
	return m.Filter
}

func (m *_QueryFirstRequest) GetMaxDataSetsToReturn() uint32 {
	return m.MaxDataSetsToReturn
}

func (m *_QueryFirstRequest) GetMaxReferencesToReturn() uint32 {
	return m.MaxReferencesToReturn
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastQueryFirstRequest(structType any) QueryFirstRequest {
	if casted, ok := structType.(QueryFirstRequest); ok {
		return casted
	}
	if casted, ok := structType.(*QueryFirstRequest); ok {
		return *casted
	}
	return nil
}

func (m *_QueryFirstRequest) GetTypeName() string {
	return "QueryFirstRequest"
}

func (m *_QueryFirstRequest) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (requestHeader)
	lengthInBits += m.RequestHeader.GetLengthInBits(ctx)

	// Simple field (view)
	lengthInBits += m.View.GetLengthInBits(ctx)

	// Simple field (noOfNodeTypes)
	lengthInBits += 32

	// Array field
	if len(m.NodeTypes) > 0 {
		for _curItem, element := range m.NodeTypes {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.NodeTypes), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	// Simple field (filter)
	lengthInBits += m.Filter.GetLengthInBits(ctx)

	// Simple field (maxDataSetsToReturn)
	lengthInBits += 32

	// Simple field (maxReferencesToReturn)
	lengthInBits += 32

	return lengthInBits
}

func (m *_QueryFirstRequest) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_QueryFirstRequest) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__queryFirstRequest QueryFirstRequest, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("QueryFirstRequest"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for QueryFirstRequest")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	requestHeader, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "requestHeader", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("391")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'requestHeader' field"))
	}
	m.RequestHeader = requestHeader

	view, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "view", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("513")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'view' field"))
	}
	m.View = view

	noOfNodeTypes, err := ReadSimpleField(ctx, "noOfNodeTypes", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfNodeTypes' field"))
	}
	m.NoOfNodeTypes = noOfNodeTypes

	nodeTypes, err := ReadCountArrayField[ExtensionObjectDefinition](ctx, "nodeTypes", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("575")), readBuffer), uint64(noOfNodeTypes))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'nodeTypes' field"))
	}
	m.NodeTypes = nodeTypes

	filter, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "filter", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("588")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'filter' field"))
	}
	m.Filter = filter

	maxDataSetsToReturn, err := ReadSimpleField(ctx, "maxDataSetsToReturn", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxDataSetsToReturn' field"))
	}
	m.MaxDataSetsToReturn = maxDataSetsToReturn

	maxReferencesToReturn, err := ReadSimpleField(ctx, "maxReferencesToReturn", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxReferencesToReturn' field"))
	}
	m.MaxReferencesToReturn = maxReferencesToReturn

	if closeErr := readBuffer.CloseContext("QueryFirstRequest"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for QueryFirstRequest")
	}

	return m, nil
}

func (m *_QueryFirstRequest) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_QueryFirstRequest) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("QueryFirstRequest"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for QueryFirstRequest")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "requestHeader", m.GetRequestHeader(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'requestHeader' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "view", m.GetView(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'view' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfNodeTypes", m.GetNoOfNodeTypes(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfNodeTypes' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "nodeTypes", m.GetNodeTypes(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'nodeTypes' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "filter", m.GetFilter(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'filter' field")
		}

		if err := WriteSimpleField[uint32](ctx, "maxDataSetsToReturn", m.GetMaxDataSetsToReturn(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'maxDataSetsToReturn' field")
		}

		if err := WriteSimpleField[uint32](ctx, "maxReferencesToReturn", m.GetMaxReferencesToReturn(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'maxReferencesToReturn' field")
		}

		if popErr := writeBuffer.PopContext("QueryFirstRequest"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for QueryFirstRequest")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_QueryFirstRequest) IsQueryFirstRequest() {}

func (m *_QueryFirstRequest) DeepCopy() any {
	return m.deepCopy()
}

func (m *_QueryFirstRequest) deepCopy() *_QueryFirstRequest {
	if m == nil {
		return nil
	}
	_QueryFirstRequestCopy := &_QueryFirstRequest{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.RequestHeader.DeepCopy().(ExtensionObjectDefinition),
		m.View.DeepCopy().(ExtensionObjectDefinition),
		m.NoOfNodeTypes,
		utils.DeepCopySlice[ExtensionObjectDefinition, ExtensionObjectDefinition](m.NodeTypes),
		m.Filter.DeepCopy().(ExtensionObjectDefinition),
		m.MaxDataSetsToReturn,
		m.MaxReferencesToReturn,
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _QueryFirstRequestCopy
}

func (m *_QueryFirstRequest) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
