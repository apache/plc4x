/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// PubSubKeyPushTargetDataType is the corresponding interface of PubSubKeyPushTargetDataType
type PubSubKeyPushTargetDataType interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetApplicationUri returns ApplicationUri (property field)
	GetApplicationUri() PascalString
	// GetNoOfPushTargetFolder returns NoOfPushTargetFolder (property field)
	GetNoOfPushTargetFolder() int32
	// GetPushTargetFolder returns PushTargetFolder (property field)
	GetPushTargetFolder() []PascalString
	// GetEndpointUrl returns EndpointUrl (property field)
	GetEndpointUrl() PascalString
	// GetSecurityPolicyUri returns SecurityPolicyUri (property field)
	GetSecurityPolicyUri() PascalString
	// GetUserTokenType returns UserTokenType (property field)
	GetUserTokenType() ExtensionObjectDefinition
	// GetRequestedKeyCount returns RequestedKeyCount (property field)
	GetRequestedKeyCount() uint16
	// GetRetryInterval returns RetryInterval (property field)
	GetRetryInterval() float64
	// GetNoOfPushTargetProperties returns NoOfPushTargetProperties (property field)
	GetNoOfPushTargetProperties() int32
	// GetPushTargetProperties returns PushTargetProperties (property field)
	GetPushTargetProperties() []ExtensionObjectDefinition
	// GetNoOfSecurityGroups returns NoOfSecurityGroups (property field)
	GetNoOfSecurityGroups() int32
	// GetSecurityGroups returns SecurityGroups (property field)
	GetSecurityGroups() []PascalString
	// IsPubSubKeyPushTargetDataType is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsPubSubKeyPushTargetDataType()
	// CreateBuilder creates a PubSubKeyPushTargetDataTypeBuilder
	CreatePubSubKeyPushTargetDataTypeBuilder() PubSubKeyPushTargetDataTypeBuilder
}

// _PubSubKeyPushTargetDataType is the data-structure of this message
type _PubSubKeyPushTargetDataType struct {
	ExtensionObjectDefinitionContract
	ApplicationUri           PascalString
	NoOfPushTargetFolder     int32
	PushTargetFolder         []PascalString
	EndpointUrl              PascalString
	SecurityPolicyUri        PascalString
	UserTokenType            ExtensionObjectDefinition
	RequestedKeyCount        uint16
	RetryInterval            float64
	NoOfPushTargetProperties int32
	PushTargetProperties     []ExtensionObjectDefinition
	NoOfSecurityGroups       int32
	SecurityGroups           []PascalString
}

var _ PubSubKeyPushTargetDataType = (*_PubSubKeyPushTargetDataType)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_PubSubKeyPushTargetDataType)(nil)

// NewPubSubKeyPushTargetDataType factory function for _PubSubKeyPushTargetDataType
func NewPubSubKeyPushTargetDataType(applicationUri PascalString, noOfPushTargetFolder int32, pushTargetFolder []PascalString, endpointUrl PascalString, securityPolicyUri PascalString, userTokenType ExtensionObjectDefinition, requestedKeyCount uint16, retryInterval float64, noOfPushTargetProperties int32, pushTargetProperties []ExtensionObjectDefinition, noOfSecurityGroups int32, securityGroups []PascalString) *_PubSubKeyPushTargetDataType {
	if applicationUri == nil {
		panic("applicationUri of type PascalString for PubSubKeyPushTargetDataType must not be nil")
	}
	if endpointUrl == nil {
		panic("endpointUrl of type PascalString for PubSubKeyPushTargetDataType must not be nil")
	}
	if securityPolicyUri == nil {
		panic("securityPolicyUri of type PascalString for PubSubKeyPushTargetDataType must not be nil")
	}
	if userTokenType == nil {
		panic("userTokenType of type ExtensionObjectDefinition for PubSubKeyPushTargetDataType must not be nil")
	}
	_result := &_PubSubKeyPushTargetDataType{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		ApplicationUri:                    applicationUri,
		NoOfPushTargetFolder:              noOfPushTargetFolder,
		PushTargetFolder:                  pushTargetFolder,
		EndpointUrl:                       endpointUrl,
		SecurityPolicyUri:                 securityPolicyUri,
		UserTokenType:                     userTokenType,
		RequestedKeyCount:                 requestedKeyCount,
		RetryInterval:                     retryInterval,
		NoOfPushTargetProperties:          noOfPushTargetProperties,
		PushTargetProperties:              pushTargetProperties,
		NoOfSecurityGroups:                noOfSecurityGroups,
		SecurityGroups:                    securityGroups,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// PubSubKeyPushTargetDataTypeBuilder is a builder for PubSubKeyPushTargetDataType
type PubSubKeyPushTargetDataTypeBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(applicationUri PascalString, noOfPushTargetFolder int32, pushTargetFolder []PascalString, endpointUrl PascalString, securityPolicyUri PascalString, userTokenType ExtensionObjectDefinition, requestedKeyCount uint16, retryInterval float64, noOfPushTargetProperties int32, pushTargetProperties []ExtensionObjectDefinition, noOfSecurityGroups int32, securityGroups []PascalString) PubSubKeyPushTargetDataTypeBuilder
	// WithApplicationUri adds ApplicationUri (property field)
	WithApplicationUri(PascalString) PubSubKeyPushTargetDataTypeBuilder
	// WithApplicationUriBuilder adds ApplicationUri (property field) which is build by the builder
	WithApplicationUriBuilder(func(PascalStringBuilder) PascalStringBuilder) PubSubKeyPushTargetDataTypeBuilder
	// WithNoOfPushTargetFolder adds NoOfPushTargetFolder (property field)
	WithNoOfPushTargetFolder(int32) PubSubKeyPushTargetDataTypeBuilder
	// WithPushTargetFolder adds PushTargetFolder (property field)
	WithPushTargetFolder(...PascalString) PubSubKeyPushTargetDataTypeBuilder
	// WithEndpointUrl adds EndpointUrl (property field)
	WithEndpointUrl(PascalString) PubSubKeyPushTargetDataTypeBuilder
	// WithEndpointUrlBuilder adds EndpointUrl (property field) which is build by the builder
	WithEndpointUrlBuilder(func(PascalStringBuilder) PascalStringBuilder) PubSubKeyPushTargetDataTypeBuilder
	// WithSecurityPolicyUri adds SecurityPolicyUri (property field)
	WithSecurityPolicyUri(PascalString) PubSubKeyPushTargetDataTypeBuilder
	// WithSecurityPolicyUriBuilder adds SecurityPolicyUri (property field) which is build by the builder
	WithSecurityPolicyUriBuilder(func(PascalStringBuilder) PascalStringBuilder) PubSubKeyPushTargetDataTypeBuilder
	// WithUserTokenType adds UserTokenType (property field)
	WithUserTokenType(ExtensionObjectDefinition) PubSubKeyPushTargetDataTypeBuilder
	// WithRequestedKeyCount adds RequestedKeyCount (property field)
	WithRequestedKeyCount(uint16) PubSubKeyPushTargetDataTypeBuilder
	// WithRetryInterval adds RetryInterval (property field)
	WithRetryInterval(float64) PubSubKeyPushTargetDataTypeBuilder
	// WithNoOfPushTargetProperties adds NoOfPushTargetProperties (property field)
	WithNoOfPushTargetProperties(int32) PubSubKeyPushTargetDataTypeBuilder
	// WithPushTargetProperties adds PushTargetProperties (property field)
	WithPushTargetProperties(...ExtensionObjectDefinition) PubSubKeyPushTargetDataTypeBuilder
	// WithNoOfSecurityGroups adds NoOfSecurityGroups (property field)
	WithNoOfSecurityGroups(int32) PubSubKeyPushTargetDataTypeBuilder
	// WithSecurityGroups adds SecurityGroups (property field)
	WithSecurityGroups(...PascalString) PubSubKeyPushTargetDataTypeBuilder
	// Build builds the PubSubKeyPushTargetDataType or returns an error if something is wrong
	Build() (PubSubKeyPushTargetDataType, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() PubSubKeyPushTargetDataType
}

// NewPubSubKeyPushTargetDataTypeBuilder() creates a PubSubKeyPushTargetDataTypeBuilder
func NewPubSubKeyPushTargetDataTypeBuilder() PubSubKeyPushTargetDataTypeBuilder {
	return &_PubSubKeyPushTargetDataTypeBuilder{_PubSubKeyPushTargetDataType: new(_PubSubKeyPushTargetDataType)}
}

type _PubSubKeyPushTargetDataTypeBuilder struct {
	*_PubSubKeyPushTargetDataType

	err *utils.MultiError
}

var _ (PubSubKeyPushTargetDataTypeBuilder) = (*_PubSubKeyPushTargetDataTypeBuilder)(nil)

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithMandatoryFields(applicationUri PascalString, noOfPushTargetFolder int32, pushTargetFolder []PascalString, endpointUrl PascalString, securityPolicyUri PascalString, userTokenType ExtensionObjectDefinition, requestedKeyCount uint16, retryInterval float64, noOfPushTargetProperties int32, pushTargetProperties []ExtensionObjectDefinition, noOfSecurityGroups int32, securityGroups []PascalString) PubSubKeyPushTargetDataTypeBuilder {
	return m.WithApplicationUri(applicationUri).WithNoOfPushTargetFolder(noOfPushTargetFolder).WithPushTargetFolder(pushTargetFolder...).WithEndpointUrl(endpointUrl).WithSecurityPolicyUri(securityPolicyUri).WithUserTokenType(userTokenType).WithRequestedKeyCount(requestedKeyCount).WithRetryInterval(retryInterval).WithNoOfPushTargetProperties(noOfPushTargetProperties).WithPushTargetProperties(pushTargetProperties...).WithNoOfSecurityGroups(noOfSecurityGroups).WithSecurityGroups(securityGroups...)
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithApplicationUri(applicationUri PascalString) PubSubKeyPushTargetDataTypeBuilder {
	m.ApplicationUri = applicationUri
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithApplicationUriBuilder(builderSupplier func(PascalStringBuilder) PascalStringBuilder) PubSubKeyPushTargetDataTypeBuilder {
	builder := builderSupplier(m.ApplicationUri.CreatePascalStringBuilder())
	var err error
	m.ApplicationUri, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalStringBuilder failed"))
	}
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithNoOfPushTargetFolder(noOfPushTargetFolder int32) PubSubKeyPushTargetDataTypeBuilder {
	m.NoOfPushTargetFolder = noOfPushTargetFolder
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithPushTargetFolder(pushTargetFolder ...PascalString) PubSubKeyPushTargetDataTypeBuilder {
	m.PushTargetFolder = pushTargetFolder
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithEndpointUrl(endpointUrl PascalString) PubSubKeyPushTargetDataTypeBuilder {
	m.EndpointUrl = endpointUrl
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithEndpointUrlBuilder(builderSupplier func(PascalStringBuilder) PascalStringBuilder) PubSubKeyPushTargetDataTypeBuilder {
	builder := builderSupplier(m.EndpointUrl.CreatePascalStringBuilder())
	var err error
	m.EndpointUrl, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalStringBuilder failed"))
	}
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithSecurityPolicyUri(securityPolicyUri PascalString) PubSubKeyPushTargetDataTypeBuilder {
	m.SecurityPolicyUri = securityPolicyUri
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithSecurityPolicyUriBuilder(builderSupplier func(PascalStringBuilder) PascalStringBuilder) PubSubKeyPushTargetDataTypeBuilder {
	builder := builderSupplier(m.SecurityPolicyUri.CreatePascalStringBuilder())
	var err error
	m.SecurityPolicyUri, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalStringBuilder failed"))
	}
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithUserTokenType(userTokenType ExtensionObjectDefinition) PubSubKeyPushTargetDataTypeBuilder {
	m.UserTokenType = userTokenType
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithRequestedKeyCount(requestedKeyCount uint16) PubSubKeyPushTargetDataTypeBuilder {
	m.RequestedKeyCount = requestedKeyCount
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithRetryInterval(retryInterval float64) PubSubKeyPushTargetDataTypeBuilder {
	m.RetryInterval = retryInterval
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithNoOfPushTargetProperties(noOfPushTargetProperties int32) PubSubKeyPushTargetDataTypeBuilder {
	m.NoOfPushTargetProperties = noOfPushTargetProperties
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithPushTargetProperties(pushTargetProperties ...ExtensionObjectDefinition) PubSubKeyPushTargetDataTypeBuilder {
	m.PushTargetProperties = pushTargetProperties
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithNoOfSecurityGroups(noOfSecurityGroups int32) PubSubKeyPushTargetDataTypeBuilder {
	m.NoOfSecurityGroups = noOfSecurityGroups
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) WithSecurityGroups(securityGroups ...PascalString) PubSubKeyPushTargetDataTypeBuilder {
	m.SecurityGroups = securityGroups
	return m
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) Build() (PubSubKeyPushTargetDataType, error) {
	if m.ApplicationUri == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'applicationUri' not set"))
	}
	if m.EndpointUrl == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'endpointUrl' not set"))
	}
	if m.SecurityPolicyUri == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'securityPolicyUri' not set"))
	}
	if m.UserTokenType == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'userTokenType' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._PubSubKeyPushTargetDataType.deepCopy(), nil
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) MustBuild() PubSubKeyPushTargetDataType {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_PubSubKeyPushTargetDataTypeBuilder) DeepCopy() any {
	return m.CreatePubSubKeyPushTargetDataTypeBuilder()
}

// CreatePubSubKeyPushTargetDataTypeBuilder creates a PubSubKeyPushTargetDataTypeBuilder
func (m *_PubSubKeyPushTargetDataType) CreatePubSubKeyPushTargetDataTypeBuilder() PubSubKeyPushTargetDataTypeBuilder {
	if m == nil {
		return NewPubSubKeyPushTargetDataTypeBuilder()
	}
	return &_PubSubKeyPushTargetDataTypeBuilder{_PubSubKeyPushTargetDataType: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_PubSubKeyPushTargetDataType) GetIdentifier() string {
	return "25272"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_PubSubKeyPushTargetDataType) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_PubSubKeyPushTargetDataType) GetApplicationUri() PascalString {
	return m.ApplicationUri
}

func (m *_PubSubKeyPushTargetDataType) GetNoOfPushTargetFolder() int32 {
	return m.NoOfPushTargetFolder
}

func (m *_PubSubKeyPushTargetDataType) GetPushTargetFolder() []PascalString {
	return m.PushTargetFolder
}

func (m *_PubSubKeyPushTargetDataType) GetEndpointUrl() PascalString {
	return m.EndpointUrl
}

func (m *_PubSubKeyPushTargetDataType) GetSecurityPolicyUri() PascalString {
	return m.SecurityPolicyUri
}

func (m *_PubSubKeyPushTargetDataType) GetUserTokenType() ExtensionObjectDefinition {
	return m.UserTokenType
}

func (m *_PubSubKeyPushTargetDataType) GetRequestedKeyCount() uint16 {
	return m.RequestedKeyCount
}

func (m *_PubSubKeyPushTargetDataType) GetRetryInterval() float64 {
	return m.RetryInterval
}

func (m *_PubSubKeyPushTargetDataType) GetNoOfPushTargetProperties() int32 {
	return m.NoOfPushTargetProperties
}

func (m *_PubSubKeyPushTargetDataType) GetPushTargetProperties() []ExtensionObjectDefinition {
	return m.PushTargetProperties
}

func (m *_PubSubKeyPushTargetDataType) GetNoOfSecurityGroups() int32 {
	return m.NoOfSecurityGroups
}

func (m *_PubSubKeyPushTargetDataType) GetSecurityGroups() []PascalString {
	return m.SecurityGroups
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastPubSubKeyPushTargetDataType(structType any) PubSubKeyPushTargetDataType {
	if casted, ok := structType.(PubSubKeyPushTargetDataType); ok {
		return casted
	}
	if casted, ok := structType.(*PubSubKeyPushTargetDataType); ok {
		return *casted
	}
	return nil
}

func (m *_PubSubKeyPushTargetDataType) GetTypeName() string {
	return "PubSubKeyPushTargetDataType"
}

func (m *_PubSubKeyPushTargetDataType) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (applicationUri)
	lengthInBits += m.ApplicationUri.GetLengthInBits(ctx)

	// Simple field (noOfPushTargetFolder)
	lengthInBits += 32

	// Array field
	if len(m.PushTargetFolder) > 0 {
		for _curItem, element := range m.PushTargetFolder {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.PushTargetFolder), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	// Simple field (endpointUrl)
	lengthInBits += m.EndpointUrl.GetLengthInBits(ctx)

	// Simple field (securityPolicyUri)
	lengthInBits += m.SecurityPolicyUri.GetLengthInBits(ctx)

	// Simple field (userTokenType)
	lengthInBits += m.UserTokenType.GetLengthInBits(ctx)

	// Simple field (requestedKeyCount)
	lengthInBits += 16

	// Simple field (retryInterval)
	lengthInBits += 64

	// Simple field (noOfPushTargetProperties)
	lengthInBits += 32

	// Array field
	if len(m.PushTargetProperties) > 0 {
		for _curItem, element := range m.PushTargetProperties {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.PushTargetProperties), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	// Simple field (noOfSecurityGroups)
	lengthInBits += 32

	// Array field
	if len(m.SecurityGroups) > 0 {
		for _curItem, element := range m.SecurityGroups {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.SecurityGroups), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	return lengthInBits
}

func (m *_PubSubKeyPushTargetDataType) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_PubSubKeyPushTargetDataType) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__pubSubKeyPushTargetDataType PubSubKeyPushTargetDataType, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("PubSubKeyPushTargetDataType"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for PubSubKeyPushTargetDataType")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	applicationUri, err := ReadSimpleField[PascalString](ctx, "applicationUri", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'applicationUri' field"))
	}
	m.ApplicationUri = applicationUri

	noOfPushTargetFolder, err := ReadSimpleField(ctx, "noOfPushTargetFolder", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfPushTargetFolder' field"))
	}
	m.NoOfPushTargetFolder = noOfPushTargetFolder

	pushTargetFolder, err := ReadCountArrayField[PascalString](ctx, "pushTargetFolder", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer), uint64(noOfPushTargetFolder))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'pushTargetFolder' field"))
	}
	m.PushTargetFolder = pushTargetFolder

	endpointUrl, err := ReadSimpleField[PascalString](ctx, "endpointUrl", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'endpointUrl' field"))
	}
	m.EndpointUrl = endpointUrl

	securityPolicyUri, err := ReadSimpleField[PascalString](ctx, "securityPolicyUri", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'securityPolicyUri' field"))
	}
	m.SecurityPolicyUri = securityPolicyUri

	userTokenType, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "userTokenType", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("306")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'userTokenType' field"))
	}
	m.UserTokenType = userTokenType

	requestedKeyCount, err := ReadSimpleField(ctx, "requestedKeyCount", ReadUnsignedShort(readBuffer, uint8(16)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'requestedKeyCount' field"))
	}
	m.RequestedKeyCount = requestedKeyCount

	retryInterval, err := ReadSimpleField(ctx, "retryInterval", ReadDouble(readBuffer, uint8(64)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'retryInterval' field"))
	}
	m.RetryInterval = retryInterval

	noOfPushTargetProperties, err := ReadSimpleField(ctx, "noOfPushTargetProperties", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfPushTargetProperties' field"))
	}
	m.NoOfPushTargetProperties = noOfPushTargetProperties

	pushTargetProperties, err := ReadCountArrayField[ExtensionObjectDefinition](ctx, "pushTargetProperties", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("14535")), readBuffer), uint64(noOfPushTargetProperties))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'pushTargetProperties' field"))
	}
	m.PushTargetProperties = pushTargetProperties

	noOfSecurityGroups, err := ReadSimpleField(ctx, "noOfSecurityGroups", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfSecurityGroups' field"))
	}
	m.NoOfSecurityGroups = noOfSecurityGroups

	securityGroups, err := ReadCountArrayField[PascalString](ctx, "securityGroups", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer), uint64(noOfSecurityGroups))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'securityGroups' field"))
	}
	m.SecurityGroups = securityGroups

	if closeErr := readBuffer.CloseContext("PubSubKeyPushTargetDataType"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for PubSubKeyPushTargetDataType")
	}

	return m, nil
}

func (m *_PubSubKeyPushTargetDataType) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_PubSubKeyPushTargetDataType) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("PubSubKeyPushTargetDataType"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for PubSubKeyPushTargetDataType")
		}

		if err := WriteSimpleField[PascalString](ctx, "applicationUri", m.GetApplicationUri(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'applicationUri' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfPushTargetFolder", m.GetNoOfPushTargetFolder(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfPushTargetFolder' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "pushTargetFolder", m.GetPushTargetFolder(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'pushTargetFolder' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "endpointUrl", m.GetEndpointUrl(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'endpointUrl' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "securityPolicyUri", m.GetSecurityPolicyUri(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'securityPolicyUri' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "userTokenType", m.GetUserTokenType(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'userTokenType' field")
		}

		if err := WriteSimpleField[uint16](ctx, "requestedKeyCount", m.GetRequestedKeyCount(), WriteUnsignedShort(writeBuffer, 16)); err != nil {
			return errors.Wrap(err, "Error serializing 'requestedKeyCount' field")
		}

		if err := WriteSimpleField[float64](ctx, "retryInterval", m.GetRetryInterval(), WriteDouble(writeBuffer, 64)); err != nil {
			return errors.Wrap(err, "Error serializing 'retryInterval' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfPushTargetProperties", m.GetNoOfPushTargetProperties(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfPushTargetProperties' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "pushTargetProperties", m.GetPushTargetProperties(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'pushTargetProperties' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfSecurityGroups", m.GetNoOfSecurityGroups(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfSecurityGroups' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "securityGroups", m.GetSecurityGroups(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'securityGroups' field")
		}

		if popErr := writeBuffer.PopContext("PubSubKeyPushTargetDataType"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for PubSubKeyPushTargetDataType")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_PubSubKeyPushTargetDataType) IsPubSubKeyPushTargetDataType() {}

func (m *_PubSubKeyPushTargetDataType) DeepCopy() any {
	return m.deepCopy()
}

func (m *_PubSubKeyPushTargetDataType) deepCopy() *_PubSubKeyPushTargetDataType {
	if m == nil {
		return nil
	}
	_PubSubKeyPushTargetDataTypeCopy := &_PubSubKeyPushTargetDataType{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.ApplicationUri.DeepCopy().(PascalString),
		m.NoOfPushTargetFolder,
		utils.DeepCopySlice[PascalString, PascalString](m.PushTargetFolder),
		m.EndpointUrl.DeepCopy().(PascalString),
		m.SecurityPolicyUri.DeepCopy().(PascalString),
		m.UserTokenType.DeepCopy().(ExtensionObjectDefinition),
		m.RequestedKeyCount,
		m.RetryInterval,
		m.NoOfPushTargetProperties,
		utils.DeepCopySlice[ExtensionObjectDefinition, ExtensionObjectDefinition](m.PushTargetProperties),
		m.NoOfSecurityGroups,
		utils.DeepCopySlice[PascalString, PascalString](m.SecurityGroups),
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _PubSubKeyPushTargetDataTypeCopy
}

func (m *_PubSubKeyPushTargetDataType) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
