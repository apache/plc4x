/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// HistoryEvent is the corresponding interface of HistoryEvent
type HistoryEvent interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetNoOfEvents returns NoOfEvents (property field)
	GetNoOfEvents() int32
	// GetEvents returns Events (property field)
	GetEvents() []ExtensionObjectDefinition
	// IsHistoryEvent is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsHistoryEvent()
	// CreateBuilder creates a HistoryEventBuilder
	CreateHistoryEventBuilder() HistoryEventBuilder
}

// _HistoryEvent is the data-structure of this message
type _HistoryEvent struct {
	ExtensionObjectDefinitionContract
	NoOfEvents int32
	Events     []ExtensionObjectDefinition
}

var _ HistoryEvent = (*_HistoryEvent)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_HistoryEvent)(nil)

// NewHistoryEvent factory function for _HistoryEvent
func NewHistoryEvent(noOfEvents int32, events []ExtensionObjectDefinition) *_HistoryEvent {
	_result := &_HistoryEvent{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		NoOfEvents:                        noOfEvents,
		Events:                            events,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// HistoryEventBuilder is a builder for HistoryEvent
type HistoryEventBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(noOfEvents int32, events []ExtensionObjectDefinition) HistoryEventBuilder
	// WithNoOfEvents adds NoOfEvents (property field)
	WithNoOfEvents(int32) HistoryEventBuilder
	// WithEvents adds Events (property field)
	WithEvents(...ExtensionObjectDefinition) HistoryEventBuilder
	// Build builds the HistoryEvent or returns an error if something is wrong
	Build() (HistoryEvent, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() HistoryEvent
}

// NewHistoryEventBuilder() creates a HistoryEventBuilder
func NewHistoryEventBuilder() HistoryEventBuilder {
	return &_HistoryEventBuilder{_HistoryEvent: new(_HistoryEvent)}
}

type _HistoryEventBuilder struct {
	*_HistoryEvent

	err *utils.MultiError
}

var _ (HistoryEventBuilder) = (*_HistoryEventBuilder)(nil)

func (m *_HistoryEventBuilder) WithMandatoryFields(noOfEvents int32, events []ExtensionObjectDefinition) HistoryEventBuilder {
	return m.WithNoOfEvents(noOfEvents).WithEvents(events...)
}

func (m *_HistoryEventBuilder) WithNoOfEvents(noOfEvents int32) HistoryEventBuilder {
	m.NoOfEvents = noOfEvents
	return m
}

func (m *_HistoryEventBuilder) WithEvents(events ...ExtensionObjectDefinition) HistoryEventBuilder {
	m.Events = events
	return m
}

func (m *_HistoryEventBuilder) Build() (HistoryEvent, error) {
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._HistoryEvent.deepCopy(), nil
}

func (m *_HistoryEventBuilder) MustBuild() HistoryEvent {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_HistoryEventBuilder) DeepCopy() any {
	return m.CreateHistoryEventBuilder()
}

// CreateHistoryEventBuilder creates a HistoryEventBuilder
func (m *_HistoryEvent) CreateHistoryEventBuilder() HistoryEventBuilder {
	if m == nil {
		return NewHistoryEventBuilder()
	}
	return &_HistoryEventBuilder{_HistoryEvent: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_HistoryEvent) GetIdentifier() string {
	return "661"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_HistoryEvent) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_HistoryEvent) GetNoOfEvents() int32 {
	return m.NoOfEvents
}

func (m *_HistoryEvent) GetEvents() []ExtensionObjectDefinition {
	return m.Events
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastHistoryEvent(structType any) HistoryEvent {
	if casted, ok := structType.(HistoryEvent); ok {
		return casted
	}
	if casted, ok := structType.(*HistoryEvent); ok {
		return *casted
	}
	return nil
}

func (m *_HistoryEvent) GetTypeName() string {
	return "HistoryEvent"
}

func (m *_HistoryEvent) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (noOfEvents)
	lengthInBits += 32

	// Array field
	if len(m.Events) > 0 {
		for _curItem, element := range m.Events {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.Events), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	return lengthInBits
}

func (m *_HistoryEvent) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_HistoryEvent) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__historyEvent HistoryEvent, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("HistoryEvent"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for HistoryEvent")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	noOfEvents, err := ReadSimpleField(ctx, "noOfEvents", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfEvents' field"))
	}
	m.NoOfEvents = noOfEvents

	events, err := ReadCountArrayField[ExtensionObjectDefinition](ctx, "events", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("922")), readBuffer), uint64(noOfEvents))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'events' field"))
	}
	m.Events = events

	if closeErr := readBuffer.CloseContext("HistoryEvent"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for HistoryEvent")
	}

	return m, nil
}

func (m *_HistoryEvent) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_HistoryEvent) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("HistoryEvent"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for HistoryEvent")
		}

		if err := WriteSimpleField[int32](ctx, "noOfEvents", m.GetNoOfEvents(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfEvents' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "events", m.GetEvents(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'events' field")
		}

		if popErr := writeBuffer.PopContext("HistoryEvent"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for HistoryEvent")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_HistoryEvent) IsHistoryEvent() {}

func (m *_HistoryEvent) DeepCopy() any {
	return m.deepCopy()
}

func (m *_HistoryEvent) deepCopy() *_HistoryEvent {
	if m == nil {
		return nil
	}
	_HistoryEventCopy := &_HistoryEvent{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.NoOfEvents,
		utils.DeepCopySlice[ExtensionObjectDefinition, ExtensionObjectDefinition](m.Events),
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _HistoryEventCopy
}

func (m *_HistoryEvent) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
