/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AddNodesItem is the corresponding interface of AddNodesItem
type AddNodesItem interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetParentNodeId returns ParentNodeId (property field)
	GetParentNodeId() ExpandedNodeId
	// GetReferenceTypeId returns ReferenceTypeId (property field)
	GetReferenceTypeId() NodeId
	// GetRequestedNewNodeId returns RequestedNewNodeId (property field)
	GetRequestedNewNodeId() ExpandedNodeId
	// GetBrowseName returns BrowseName (property field)
	GetBrowseName() QualifiedName
	// GetNodeClass returns NodeClass (property field)
	GetNodeClass() NodeClass
	// GetNodeAttributes returns NodeAttributes (property field)
	GetNodeAttributes() ExtensionObject
	// GetTypeDefinition returns TypeDefinition (property field)
	GetTypeDefinition() ExpandedNodeId
	// IsAddNodesItem is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAddNodesItem()
}

// _AddNodesItem is the data-structure of this message
type _AddNodesItem struct {
	ExtensionObjectDefinitionContract
	ParentNodeId       ExpandedNodeId
	ReferenceTypeId    NodeId
	RequestedNewNodeId ExpandedNodeId
	BrowseName         QualifiedName
	NodeClass          NodeClass
	NodeAttributes     ExtensionObject
	TypeDefinition     ExpandedNodeId
}

var _ AddNodesItem = (*_AddNodesItem)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_AddNodesItem)(nil)

// NewAddNodesItem factory function for _AddNodesItem
func NewAddNodesItem(parentNodeId ExpandedNodeId, referenceTypeId NodeId, requestedNewNodeId ExpandedNodeId, browseName QualifiedName, nodeClass NodeClass, nodeAttributes ExtensionObject, typeDefinition ExpandedNodeId) *_AddNodesItem {
	if parentNodeId == nil {
		panic("parentNodeId of type ExpandedNodeId for AddNodesItem must not be nil")
	}
	if referenceTypeId == nil {
		panic("referenceTypeId of type NodeId for AddNodesItem must not be nil")
	}
	if requestedNewNodeId == nil {
		panic("requestedNewNodeId of type ExpandedNodeId for AddNodesItem must not be nil")
	}
	if browseName == nil {
		panic("browseName of type QualifiedName for AddNodesItem must not be nil")
	}
	if nodeAttributes == nil {
		panic("nodeAttributes of type ExtensionObject for AddNodesItem must not be nil")
	}
	if typeDefinition == nil {
		panic("typeDefinition of type ExpandedNodeId for AddNodesItem must not be nil")
	}
	_result := &_AddNodesItem{
		ExtensionObjectDefinitionContract: NewExtensionObjectDefinition(),
		ParentNodeId:                      parentNodeId,
		ReferenceTypeId:                   referenceTypeId,
		RequestedNewNodeId:                requestedNewNodeId,
		BrowseName:                        browseName,
		NodeClass:                         nodeClass,
		NodeAttributes:                    nodeAttributes,
		TypeDefinition:                    typeDefinition,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_AddNodesItem) GetIdentifier() string {
	return "378"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_AddNodesItem) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AddNodesItem) GetParentNodeId() ExpandedNodeId {
	return m.ParentNodeId
}

func (m *_AddNodesItem) GetReferenceTypeId() NodeId {
	return m.ReferenceTypeId
}

func (m *_AddNodesItem) GetRequestedNewNodeId() ExpandedNodeId {
	return m.RequestedNewNodeId
}

func (m *_AddNodesItem) GetBrowseName() QualifiedName {
	return m.BrowseName
}

func (m *_AddNodesItem) GetNodeClass() NodeClass {
	return m.NodeClass
}

func (m *_AddNodesItem) GetNodeAttributes() ExtensionObject {
	return m.NodeAttributes
}

func (m *_AddNodesItem) GetTypeDefinition() ExpandedNodeId {
	return m.TypeDefinition
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAddNodesItem(structType any) AddNodesItem {
	if casted, ok := structType.(AddNodesItem); ok {
		return casted
	}
	if casted, ok := structType.(*AddNodesItem); ok {
		return *casted
	}
	return nil
}

func (m *_AddNodesItem) GetTypeName() string {
	return "AddNodesItem"
}

func (m *_AddNodesItem) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (parentNodeId)
	lengthInBits += m.ParentNodeId.GetLengthInBits(ctx)

	// Simple field (referenceTypeId)
	lengthInBits += m.ReferenceTypeId.GetLengthInBits(ctx)

	// Simple field (requestedNewNodeId)
	lengthInBits += m.RequestedNewNodeId.GetLengthInBits(ctx)

	// Simple field (browseName)
	lengthInBits += m.BrowseName.GetLengthInBits(ctx)

	// Simple field (nodeClass)
	lengthInBits += 32

	// Simple field (nodeAttributes)
	lengthInBits += m.NodeAttributes.GetLengthInBits(ctx)

	// Simple field (typeDefinition)
	lengthInBits += m.TypeDefinition.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AddNodesItem) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_AddNodesItem) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__addNodesItem AddNodesItem, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AddNodesItem"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AddNodesItem")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	parentNodeId, err := ReadSimpleField[ExpandedNodeId](ctx, "parentNodeId", ReadComplex[ExpandedNodeId](ExpandedNodeIdParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'parentNodeId' field"))
	}
	m.ParentNodeId = parentNodeId

	referenceTypeId, err := ReadSimpleField[NodeId](ctx, "referenceTypeId", ReadComplex[NodeId](NodeIdParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'referenceTypeId' field"))
	}
	m.ReferenceTypeId = referenceTypeId

	requestedNewNodeId, err := ReadSimpleField[ExpandedNodeId](ctx, "requestedNewNodeId", ReadComplex[ExpandedNodeId](ExpandedNodeIdParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'requestedNewNodeId' field"))
	}
	m.RequestedNewNodeId = requestedNewNodeId

	browseName, err := ReadSimpleField[QualifiedName](ctx, "browseName", ReadComplex[QualifiedName](QualifiedNameParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'browseName' field"))
	}
	m.BrowseName = browseName

	nodeClass, err := ReadEnumField[NodeClass](ctx, "nodeClass", "NodeClass", ReadEnum(NodeClassByValue, ReadUnsignedInt(readBuffer, uint8(32))))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'nodeClass' field"))
	}
	m.NodeClass = nodeClass

	nodeAttributes, err := ReadSimpleField[ExtensionObject](ctx, "nodeAttributes", ReadComplex[ExtensionObject](ExtensionObjectParseWithBufferProducer((bool)(bool(true))), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'nodeAttributes' field"))
	}
	m.NodeAttributes = nodeAttributes

	typeDefinition, err := ReadSimpleField[ExpandedNodeId](ctx, "typeDefinition", ReadComplex[ExpandedNodeId](ExpandedNodeIdParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'typeDefinition' field"))
	}
	m.TypeDefinition = typeDefinition

	if closeErr := readBuffer.CloseContext("AddNodesItem"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AddNodesItem")
	}

	return m, nil
}

func (m *_AddNodesItem) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AddNodesItem) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("AddNodesItem"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for AddNodesItem")
		}

		if err := WriteSimpleField[ExpandedNodeId](ctx, "parentNodeId", m.GetParentNodeId(), WriteComplex[ExpandedNodeId](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'parentNodeId' field")
		}

		if err := WriteSimpleField[NodeId](ctx, "referenceTypeId", m.GetReferenceTypeId(), WriteComplex[NodeId](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'referenceTypeId' field")
		}

		if err := WriteSimpleField[ExpandedNodeId](ctx, "requestedNewNodeId", m.GetRequestedNewNodeId(), WriteComplex[ExpandedNodeId](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'requestedNewNodeId' field")
		}

		if err := WriteSimpleField[QualifiedName](ctx, "browseName", m.GetBrowseName(), WriteComplex[QualifiedName](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'browseName' field")
		}

		if err := WriteSimpleEnumField[NodeClass](ctx, "nodeClass", "NodeClass", m.GetNodeClass(), WriteEnum[NodeClass, uint32](NodeClass.GetValue, NodeClass.PLC4XEnumName, WriteUnsignedInt(writeBuffer, 32))); err != nil {
			return errors.Wrap(err, "Error serializing 'nodeClass' field")
		}

		if err := WriteSimpleField[ExtensionObject](ctx, "nodeAttributes", m.GetNodeAttributes(), WriteComplex[ExtensionObject](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'nodeAttributes' field")
		}

		if err := WriteSimpleField[ExpandedNodeId](ctx, "typeDefinition", m.GetTypeDefinition(), WriteComplex[ExpandedNodeId](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'typeDefinition' field")
		}

		if popErr := writeBuffer.PopContext("AddNodesItem"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for AddNodesItem")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_AddNodesItem) IsAddNodesItem() {}

func (m *_AddNodesItem) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AddNodesItem) deepCopy() *_AddNodesItem {
	if m == nil {
		return nil
	}
	_AddNodesItemCopy := &_AddNodesItem{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.ParentNodeId.DeepCopy().(ExpandedNodeId),
		m.ReferenceTypeId.DeepCopy().(NodeId),
		m.RequestedNewNodeId.DeepCopy().(ExpandedNodeId),
		m.BrowseName.DeepCopy().(QualifiedName),
		m.NodeClass,
		m.NodeAttributes.DeepCopy().(ExtensionObject),
		m.TypeDefinition.DeepCopy().(ExpandedNodeId),
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _AddNodesItemCopy
}

func (m *_AddNodesItem) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
