/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// IssuedIdentityToken is the corresponding interface of IssuedIdentityToken
type IssuedIdentityToken interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	UserIdentityTokenDefinition
	// GetTokenData returns TokenData (property field)
	GetTokenData() PascalByteString
	// GetEncryptionAlgorithm returns EncryptionAlgorithm (property field)
	GetEncryptionAlgorithm() PascalString
	// IsIssuedIdentityToken is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsIssuedIdentityToken()
	// CreateBuilder creates a IssuedIdentityTokenBuilder
	CreateIssuedIdentityTokenBuilder() IssuedIdentityTokenBuilder
}

// _IssuedIdentityToken is the data-structure of this message
type _IssuedIdentityToken struct {
	UserIdentityTokenDefinitionContract
	TokenData           PascalByteString
	EncryptionAlgorithm PascalString
}

var _ IssuedIdentityToken = (*_IssuedIdentityToken)(nil)
var _ UserIdentityTokenDefinitionRequirements = (*_IssuedIdentityToken)(nil)

// NewIssuedIdentityToken factory function for _IssuedIdentityToken
func NewIssuedIdentityToken(tokenData PascalByteString, encryptionAlgorithm PascalString) *_IssuedIdentityToken {
	if tokenData == nil {
		panic("tokenData of type PascalByteString for IssuedIdentityToken must not be nil")
	}
	if encryptionAlgorithm == nil {
		panic("encryptionAlgorithm of type PascalString for IssuedIdentityToken must not be nil")
	}
	_result := &_IssuedIdentityToken{
		UserIdentityTokenDefinitionContract: NewUserIdentityTokenDefinition(),
		TokenData:                           tokenData,
		EncryptionAlgorithm:                 encryptionAlgorithm,
	}
	_result.UserIdentityTokenDefinitionContract.(*_UserIdentityTokenDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// IssuedIdentityTokenBuilder is a builder for IssuedIdentityToken
type IssuedIdentityTokenBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(tokenData PascalByteString, encryptionAlgorithm PascalString) IssuedIdentityTokenBuilder
	// WithTokenData adds TokenData (property field)
	WithTokenData(PascalByteString) IssuedIdentityTokenBuilder
	// WithTokenDataBuilder adds TokenData (property field) which is build by the builder
	WithTokenDataBuilder(func(PascalByteStringBuilder) PascalByteStringBuilder) IssuedIdentityTokenBuilder
	// WithEncryptionAlgorithm adds EncryptionAlgorithm (property field)
	WithEncryptionAlgorithm(PascalString) IssuedIdentityTokenBuilder
	// WithEncryptionAlgorithmBuilder adds EncryptionAlgorithm (property field) which is build by the builder
	WithEncryptionAlgorithmBuilder(func(PascalStringBuilder) PascalStringBuilder) IssuedIdentityTokenBuilder
	// Build builds the IssuedIdentityToken or returns an error if something is wrong
	Build() (IssuedIdentityToken, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() IssuedIdentityToken
}

// NewIssuedIdentityTokenBuilder() creates a IssuedIdentityTokenBuilder
func NewIssuedIdentityTokenBuilder() IssuedIdentityTokenBuilder {
	return &_IssuedIdentityTokenBuilder{_IssuedIdentityToken: new(_IssuedIdentityToken)}
}

type _IssuedIdentityTokenBuilder struct {
	*_IssuedIdentityToken

	err *utils.MultiError
}

var _ (IssuedIdentityTokenBuilder) = (*_IssuedIdentityTokenBuilder)(nil)

func (m *_IssuedIdentityTokenBuilder) WithMandatoryFields(tokenData PascalByteString, encryptionAlgorithm PascalString) IssuedIdentityTokenBuilder {
	return m.WithTokenData(tokenData).WithEncryptionAlgorithm(encryptionAlgorithm)
}

func (m *_IssuedIdentityTokenBuilder) WithTokenData(tokenData PascalByteString) IssuedIdentityTokenBuilder {
	m.TokenData = tokenData
	return m
}

func (m *_IssuedIdentityTokenBuilder) WithTokenDataBuilder(builderSupplier func(PascalByteStringBuilder) PascalByteStringBuilder) IssuedIdentityTokenBuilder {
	builder := builderSupplier(m.TokenData.CreatePascalByteStringBuilder())
	var err error
	m.TokenData, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalByteStringBuilder failed"))
	}
	return m
}

func (m *_IssuedIdentityTokenBuilder) WithEncryptionAlgorithm(encryptionAlgorithm PascalString) IssuedIdentityTokenBuilder {
	m.EncryptionAlgorithm = encryptionAlgorithm
	return m
}

func (m *_IssuedIdentityTokenBuilder) WithEncryptionAlgorithmBuilder(builderSupplier func(PascalStringBuilder) PascalStringBuilder) IssuedIdentityTokenBuilder {
	builder := builderSupplier(m.EncryptionAlgorithm.CreatePascalStringBuilder())
	var err error
	m.EncryptionAlgorithm, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "PascalStringBuilder failed"))
	}
	return m
}

func (m *_IssuedIdentityTokenBuilder) Build() (IssuedIdentityToken, error) {
	if m.TokenData == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'tokenData' not set"))
	}
	if m.EncryptionAlgorithm == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'encryptionAlgorithm' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._IssuedIdentityToken.deepCopy(), nil
}

func (m *_IssuedIdentityTokenBuilder) MustBuild() IssuedIdentityToken {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_IssuedIdentityTokenBuilder) DeepCopy() any {
	return m.CreateIssuedIdentityTokenBuilder()
}

// CreateIssuedIdentityTokenBuilder creates a IssuedIdentityTokenBuilder
func (m *_IssuedIdentityToken) CreateIssuedIdentityTokenBuilder() IssuedIdentityTokenBuilder {
	if m == nil {
		return NewIssuedIdentityTokenBuilder()
	}
	return &_IssuedIdentityTokenBuilder{_IssuedIdentityToken: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_IssuedIdentityToken) GetIdentifier() string {
	return "identity"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_IssuedIdentityToken) GetParent() UserIdentityTokenDefinitionContract {
	return m.UserIdentityTokenDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_IssuedIdentityToken) GetTokenData() PascalByteString {
	return m.TokenData
}

func (m *_IssuedIdentityToken) GetEncryptionAlgorithm() PascalString {
	return m.EncryptionAlgorithm
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastIssuedIdentityToken(structType any) IssuedIdentityToken {
	if casted, ok := structType.(IssuedIdentityToken); ok {
		return casted
	}
	if casted, ok := structType.(*IssuedIdentityToken); ok {
		return *casted
	}
	return nil
}

func (m *_IssuedIdentityToken) GetTypeName() string {
	return "IssuedIdentityToken"
}

func (m *_IssuedIdentityToken) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.UserIdentityTokenDefinitionContract.(*_UserIdentityTokenDefinition).getLengthInBits(ctx))

	// Simple field (tokenData)
	lengthInBits += m.TokenData.GetLengthInBits(ctx)

	// Simple field (encryptionAlgorithm)
	lengthInBits += m.EncryptionAlgorithm.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_IssuedIdentityToken) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_IssuedIdentityToken) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_UserIdentityTokenDefinition, identifier string) (__issuedIdentityToken IssuedIdentityToken, err error) {
	m.UserIdentityTokenDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("IssuedIdentityToken"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for IssuedIdentityToken")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	tokenData, err := ReadSimpleField[PascalByteString](ctx, "tokenData", ReadComplex[PascalByteString](PascalByteStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tokenData' field"))
	}
	m.TokenData = tokenData

	encryptionAlgorithm, err := ReadSimpleField[PascalString](ctx, "encryptionAlgorithm", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'encryptionAlgorithm' field"))
	}
	m.EncryptionAlgorithm = encryptionAlgorithm

	if closeErr := readBuffer.CloseContext("IssuedIdentityToken"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for IssuedIdentityToken")
	}

	return m, nil
}

func (m *_IssuedIdentityToken) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_IssuedIdentityToken) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("IssuedIdentityToken"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for IssuedIdentityToken")
		}

		if err := WriteSimpleField[PascalByteString](ctx, "tokenData", m.GetTokenData(), WriteComplex[PascalByteString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'tokenData' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "encryptionAlgorithm", m.GetEncryptionAlgorithm(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'encryptionAlgorithm' field")
		}

		if popErr := writeBuffer.PopContext("IssuedIdentityToken"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for IssuedIdentityToken")
		}
		return nil
	}
	return m.UserIdentityTokenDefinitionContract.(*_UserIdentityTokenDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_IssuedIdentityToken) IsIssuedIdentityToken() {}

func (m *_IssuedIdentityToken) DeepCopy() any {
	return m.deepCopy()
}

func (m *_IssuedIdentityToken) deepCopy() *_IssuedIdentityToken {
	if m == nil {
		return nil
	}
	_IssuedIdentityTokenCopy := &_IssuedIdentityToken{
		m.UserIdentityTokenDefinitionContract.(*_UserIdentityTokenDefinition).deepCopy(),
		m.TokenData.DeepCopy().(PascalByteString),
		m.EncryptionAlgorithm.DeepCopy().(PascalString),
	}
	m.UserIdentityTokenDefinitionContract.(*_UserIdentityTokenDefinition)._SubType = m
	return _IssuedIdentityTokenCopy
}

func (m *_IssuedIdentityToken) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
