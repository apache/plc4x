/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// SessionDiagnosticsDataType is the corresponding interface of SessionDiagnosticsDataType
type SessionDiagnosticsDataType interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ExtensionObjectDefinition
	// GetSessionId returns SessionId (property field)
	GetSessionId() NodeId
	// GetSessionName returns SessionName (property field)
	GetSessionName() PascalString
	// GetClientDescription returns ClientDescription (property field)
	GetClientDescription() ExtensionObjectDefinition
	// GetServerUri returns ServerUri (property field)
	GetServerUri() PascalString
	// GetEndpointUrl returns EndpointUrl (property field)
	GetEndpointUrl() PascalString
	// GetNoOfLocaleIds returns NoOfLocaleIds (property field)
	GetNoOfLocaleIds() int32
	// GetLocaleIds returns LocaleIds (property field)
	GetLocaleIds() []PascalString
	// GetActualSessionTimeout returns ActualSessionTimeout (property field)
	GetActualSessionTimeout() float64
	// GetMaxResponseMessageSize returns MaxResponseMessageSize (property field)
	GetMaxResponseMessageSize() uint32
	// GetClientConnectionTime returns ClientConnectionTime (property field)
	GetClientConnectionTime() int64
	// GetClientLastContactTime returns ClientLastContactTime (property field)
	GetClientLastContactTime() int64
	// GetCurrentSubscriptionsCount returns CurrentSubscriptionsCount (property field)
	GetCurrentSubscriptionsCount() uint32
	// GetCurrentMonitoredItemsCount returns CurrentMonitoredItemsCount (property field)
	GetCurrentMonitoredItemsCount() uint32
	// GetCurrentPublishRequestsInQueue returns CurrentPublishRequestsInQueue (property field)
	GetCurrentPublishRequestsInQueue() uint32
	// GetTotalRequestCount returns TotalRequestCount (property field)
	GetTotalRequestCount() ExtensionObjectDefinition
	// GetUnauthorizedRequestCount returns UnauthorizedRequestCount (property field)
	GetUnauthorizedRequestCount() uint32
	// GetReadCount returns ReadCount (property field)
	GetReadCount() ExtensionObjectDefinition
	// GetHistoryReadCount returns HistoryReadCount (property field)
	GetHistoryReadCount() ExtensionObjectDefinition
	// GetWriteCount returns WriteCount (property field)
	GetWriteCount() ExtensionObjectDefinition
	// GetHistoryUpdateCount returns HistoryUpdateCount (property field)
	GetHistoryUpdateCount() ExtensionObjectDefinition
	// GetCallCount returns CallCount (property field)
	GetCallCount() ExtensionObjectDefinition
	// GetCreateMonitoredItemsCount returns CreateMonitoredItemsCount (property field)
	GetCreateMonitoredItemsCount() ExtensionObjectDefinition
	// GetModifyMonitoredItemsCount returns ModifyMonitoredItemsCount (property field)
	GetModifyMonitoredItemsCount() ExtensionObjectDefinition
	// GetSetMonitoringModeCount returns SetMonitoringModeCount (property field)
	GetSetMonitoringModeCount() ExtensionObjectDefinition
	// GetSetTriggeringCount returns SetTriggeringCount (property field)
	GetSetTriggeringCount() ExtensionObjectDefinition
	// GetDeleteMonitoredItemsCount returns DeleteMonitoredItemsCount (property field)
	GetDeleteMonitoredItemsCount() ExtensionObjectDefinition
	// GetCreateSubscriptionCount returns CreateSubscriptionCount (property field)
	GetCreateSubscriptionCount() ExtensionObjectDefinition
	// GetModifySubscriptionCount returns ModifySubscriptionCount (property field)
	GetModifySubscriptionCount() ExtensionObjectDefinition
	// GetSetPublishingModeCount returns SetPublishingModeCount (property field)
	GetSetPublishingModeCount() ExtensionObjectDefinition
	// GetPublishCount returns PublishCount (property field)
	GetPublishCount() ExtensionObjectDefinition
	// GetRepublishCount returns RepublishCount (property field)
	GetRepublishCount() ExtensionObjectDefinition
	// GetTransferSubscriptionsCount returns TransferSubscriptionsCount (property field)
	GetTransferSubscriptionsCount() ExtensionObjectDefinition
	// GetDeleteSubscriptionsCount returns DeleteSubscriptionsCount (property field)
	GetDeleteSubscriptionsCount() ExtensionObjectDefinition
	// GetAddNodesCount returns AddNodesCount (property field)
	GetAddNodesCount() ExtensionObjectDefinition
	// GetAddReferencesCount returns AddReferencesCount (property field)
	GetAddReferencesCount() ExtensionObjectDefinition
	// GetDeleteNodesCount returns DeleteNodesCount (property field)
	GetDeleteNodesCount() ExtensionObjectDefinition
	// GetDeleteReferencesCount returns DeleteReferencesCount (property field)
	GetDeleteReferencesCount() ExtensionObjectDefinition
	// GetBrowseCount returns BrowseCount (property field)
	GetBrowseCount() ExtensionObjectDefinition
	// GetBrowseNextCount returns BrowseNextCount (property field)
	GetBrowseNextCount() ExtensionObjectDefinition
	// GetTranslateBrowsePathsToNodeIdsCount returns TranslateBrowsePathsToNodeIdsCount (property field)
	GetTranslateBrowsePathsToNodeIdsCount() ExtensionObjectDefinition
	// GetQueryFirstCount returns QueryFirstCount (property field)
	GetQueryFirstCount() ExtensionObjectDefinition
	// GetQueryNextCount returns QueryNextCount (property field)
	GetQueryNextCount() ExtensionObjectDefinition
	// GetRegisterNodesCount returns RegisterNodesCount (property field)
	GetRegisterNodesCount() ExtensionObjectDefinition
	// GetUnregisterNodesCount returns UnregisterNodesCount (property field)
	GetUnregisterNodesCount() ExtensionObjectDefinition
	// IsSessionDiagnosticsDataType is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsSessionDiagnosticsDataType()
}

// _SessionDiagnosticsDataType is the data-structure of this message
type _SessionDiagnosticsDataType struct {
	ExtensionObjectDefinitionContract
	SessionId                          NodeId
	SessionName                        PascalString
	ClientDescription                  ExtensionObjectDefinition
	ServerUri                          PascalString
	EndpointUrl                        PascalString
	NoOfLocaleIds                      int32
	LocaleIds                          []PascalString
	ActualSessionTimeout               float64
	MaxResponseMessageSize             uint32
	ClientConnectionTime               int64
	ClientLastContactTime              int64
	CurrentSubscriptionsCount          uint32
	CurrentMonitoredItemsCount         uint32
	CurrentPublishRequestsInQueue      uint32
	TotalRequestCount                  ExtensionObjectDefinition
	UnauthorizedRequestCount           uint32
	ReadCount                          ExtensionObjectDefinition
	HistoryReadCount                   ExtensionObjectDefinition
	WriteCount                         ExtensionObjectDefinition
	HistoryUpdateCount                 ExtensionObjectDefinition
	CallCount                          ExtensionObjectDefinition
	CreateMonitoredItemsCount          ExtensionObjectDefinition
	ModifyMonitoredItemsCount          ExtensionObjectDefinition
	SetMonitoringModeCount             ExtensionObjectDefinition
	SetTriggeringCount                 ExtensionObjectDefinition
	DeleteMonitoredItemsCount          ExtensionObjectDefinition
	CreateSubscriptionCount            ExtensionObjectDefinition
	ModifySubscriptionCount            ExtensionObjectDefinition
	SetPublishingModeCount             ExtensionObjectDefinition
	PublishCount                       ExtensionObjectDefinition
	RepublishCount                     ExtensionObjectDefinition
	TransferSubscriptionsCount         ExtensionObjectDefinition
	DeleteSubscriptionsCount           ExtensionObjectDefinition
	AddNodesCount                      ExtensionObjectDefinition
	AddReferencesCount                 ExtensionObjectDefinition
	DeleteNodesCount                   ExtensionObjectDefinition
	DeleteReferencesCount              ExtensionObjectDefinition
	BrowseCount                        ExtensionObjectDefinition
	BrowseNextCount                    ExtensionObjectDefinition
	TranslateBrowsePathsToNodeIdsCount ExtensionObjectDefinition
	QueryFirstCount                    ExtensionObjectDefinition
	QueryNextCount                     ExtensionObjectDefinition
	RegisterNodesCount                 ExtensionObjectDefinition
	UnregisterNodesCount               ExtensionObjectDefinition
}

var _ SessionDiagnosticsDataType = (*_SessionDiagnosticsDataType)(nil)
var _ ExtensionObjectDefinitionRequirements = (*_SessionDiagnosticsDataType)(nil)

// NewSessionDiagnosticsDataType factory function for _SessionDiagnosticsDataType
func NewSessionDiagnosticsDataType(sessionId NodeId, sessionName PascalString, clientDescription ExtensionObjectDefinition, serverUri PascalString, endpointUrl PascalString, noOfLocaleIds int32, localeIds []PascalString, actualSessionTimeout float64, maxResponseMessageSize uint32, clientConnectionTime int64, clientLastContactTime int64, currentSubscriptionsCount uint32, currentMonitoredItemsCount uint32, currentPublishRequestsInQueue uint32, totalRequestCount ExtensionObjectDefinition, unauthorizedRequestCount uint32, readCount ExtensionObjectDefinition, historyReadCount ExtensionObjectDefinition, writeCount ExtensionObjectDefinition, historyUpdateCount ExtensionObjectDefinition, callCount ExtensionObjectDefinition, createMonitoredItemsCount ExtensionObjectDefinition, modifyMonitoredItemsCount ExtensionObjectDefinition, setMonitoringModeCount ExtensionObjectDefinition, setTriggeringCount ExtensionObjectDefinition, deleteMonitoredItemsCount ExtensionObjectDefinition, createSubscriptionCount ExtensionObjectDefinition, modifySubscriptionCount ExtensionObjectDefinition, setPublishingModeCount ExtensionObjectDefinition, publishCount ExtensionObjectDefinition, republishCount ExtensionObjectDefinition, transferSubscriptionsCount ExtensionObjectDefinition, deleteSubscriptionsCount ExtensionObjectDefinition, addNodesCount ExtensionObjectDefinition, addReferencesCount ExtensionObjectDefinition, deleteNodesCount ExtensionObjectDefinition, deleteReferencesCount ExtensionObjectDefinition, browseCount ExtensionObjectDefinition, browseNextCount ExtensionObjectDefinition, translateBrowsePathsToNodeIdsCount ExtensionObjectDefinition, queryFirstCount ExtensionObjectDefinition, queryNextCount ExtensionObjectDefinition, registerNodesCount ExtensionObjectDefinition, unregisterNodesCount ExtensionObjectDefinition) *_SessionDiagnosticsDataType {
	if sessionId == nil {
		panic("sessionId of type NodeId for SessionDiagnosticsDataType must not be nil")
	}
	if sessionName == nil {
		panic("sessionName of type PascalString for SessionDiagnosticsDataType must not be nil")
	}
	if clientDescription == nil {
		panic("clientDescription of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if serverUri == nil {
		panic("serverUri of type PascalString for SessionDiagnosticsDataType must not be nil")
	}
	if endpointUrl == nil {
		panic("endpointUrl of type PascalString for SessionDiagnosticsDataType must not be nil")
	}
	if totalRequestCount == nil {
		panic("totalRequestCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if readCount == nil {
		panic("readCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if historyReadCount == nil {
		panic("historyReadCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if writeCount == nil {
		panic("writeCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if historyUpdateCount == nil {
		panic("historyUpdateCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if callCount == nil {
		panic("callCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if createMonitoredItemsCount == nil {
		panic("createMonitoredItemsCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if modifyMonitoredItemsCount == nil {
		panic("modifyMonitoredItemsCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if setMonitoringModeCount == nil {
		panic("setMonitoringModeCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if setTriggeringCount == nil {
		panic("setTriggeringCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if deleteMonitoredItemsCount == nil {
		panic("deleteMonitoredItemsCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if createSubscriptionCount == nil {
		panic("createSubscriptionCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if modifySubscriptionCount == nil {
		panic("modifySubscriptionCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if setPublishingModeCount == nil {
		panic("setPublishingModeCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if publishCount == nil {
		panic("publishCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if republishCount == nil {
		panic("republishCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if transferSubscriptionsCount == nil {
		panic("transferSubscriptionsCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if deleteSubscriptionsCount == nil {
		panic("deleteSubscriptionsCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if addNodesCount == nil {
		panic("addNodesCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if addReferencesCount == nil {
		panic("addReferencesCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if deleteNodesCount == nil {
		panic("deleteNodesCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if deleteReferencesCount == nil {
		panic("deleteReferencesCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if browseCount == nil {
		panic("browseCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if browseNextCount == nil {
		panic("browseNextCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if translateBrowsePathsToNodeIdsCount == nil {
		panic("translateBrowsePathsToNodeIdsCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if queryFirstCount == nil {
		panic("queryFirstCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if queryNextCount == nil {
		panic("queryNextCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if registerNodesCount == nil {
		panic("registerNodesCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	if unregisterNodesCount == nil {
		panic("unregisterNodesCount of type ExtensionObjectDefinition for SessionDiagnosticsDataType must not be nil")
	}
	_result := &_SessionDiagnosticsDataType{
		ExtensionObjectDefinitionContract:  NewExtensionObjectDefinition(),
		SessionId:                          sessionId,
		SessionName:                        sessionName,
		ClientDescription:                  clientDescription,
		ServerUri:                          serverUri,
		EndpointUrl:                        endpointUrl,
		NoOfLocaleIds:                      noOfLocaleIds,
		LocaleIds:                          localeIds,
		ActualSessionTimeout:               actualSessionTimeout,
		MaxResponseMessageSize:             maxResponseMessageSize,
		ClientConnectionTime:               clientConnectionTime,
		ClientLastContactTime:              clientLastContactTime,
		CurrentSubscriptionsCount:          currentSubscriptionsCount,
		CurrentMonitoredItemsCount:         currentMonitoredItemsCount,
		CurrentPublishRequestsInQueue:      currentPublishRequestsInQueue,
		TotalRequestCount:                  totalRequestCount,
		UnauthorizedRequestCount:           unauthorizedRequestCount,
		ReadCount:                          readCount,
		HistoryReadCount:                   historyReadCount,
		WriteCount:                         writeCount,
		HistoryUpdateCount:                 historyUpdateCount,
		CallCount:                          callCount,
		CreateMonitoredItemsCount:          createMonitoredItemsCount,
		ModifyMonitoredItemsCount:          modifyMonitoredItemsCount,
		SetMonitoringModeCount:             setMonitoringModeCount,
		SetTriggeringCount:                 setTriggeringCount,
		DeleteMonitoredItemsCount:          deleteMonitoredItemsCount,
		CreateSubscriptionCount:            createSubscriptionCount,
		ModifySubscriptionCount:            modifySubscriptionCount,
		SetPublishingModeCount:             setPublishingModeCount,
		PublishCount:                       publishCount,
		RepublishCount:                     republishCount,
		TransferSubscriptionsCount:         transferSubscriptionsCount,
		DeleteSubscriptionsCount:           deleteSubscriptionsCount,
		AddNodesCount:                      addNodesCount,
		AddReferencesCount:                 addReferencesCount,
		DeleteNodesCount:                   deleteNodesCount,
		DeleteReferencesCount:              deleteReferencesCount,
		BrowseCount:                        browseCount,
		BrowseNextCount:                    browseNextCount,
		TranslateBrowsePathsToNodeIdsCount: translateBrowsePathsToNodeIdsCount,
		QueryFirstCount:                    queryFirstCount,
		QueryNextCount:                     queryNextCount,
		RegisterNodesCount:                 registerNodesCount,
		UnregisterNodesCount:               unregisterNodesCount,
	}
	_result.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_SessionDiagnosticsDataType) GetIdentifier() string {
	return "867"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_SessionDiagnosticsDataType) GetParent() ExtensionObjectDefinitionContract {
	return m.ExtensionObjectDefinitionContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_SessionDiagnosticsDataType) GetSessionId() NodeId {
	return m.SessionId
}

func (m *_SessionDiagnosticsDataType) GetSessionName() PascalString {
	return m.SessionName
}

func (m *_SessionDiagnosticsDataType) GetClientDescription() ExtensionObjectDefinition {
	return m.ClientDescription
}

func (m *_SessionDiagnosticsDataType) GetServerUri() PascalString {
	return m.ServerUri
}

func (m *_SessionDiagnosticsDataType) GetEndpointUrl() PascalString {
	return m.EndpointUrl
}

func (m *_SessionDiagnosticsDataType) GetNoOfLocaleIds() int32 {
	return m.NoOfLocaleIds
}

func (m *_SessionDiagnosticsDataType) GetLocaleIds() []PascalString {
	return m.LocaleIds
}

func (m *_SessionDiagnosticsDataType) GetActualSessionTimeout() float64 {
	return m.ActualSessionTimeout
}

func (m *_SessionDiagnosticsDataType) GetMaxResponseMessageSize() uint32 {
	return m.MaxResponseMessageSize
}

func (m *_SessionDiagnosticsDataType) GetClientConnectionTime() int64 {
	return m.ClientConnectionTime
}

func (m *_SessionDiagnosticsDataType) GetClientLastContactTime() int64 {
	return m.ClientLastContactTime
}

func (m *_SessionDiagnosticsDataType) GetCurrentSubscriptionsCount() uint32 {
	return m.CurrentSubscriptionsCount
}

func (m *_SessionDiagnosticsDataType) GetCurrentMonitoredItemsCount() uint32 {
	return m.CurrentMonitoredItemsCount
}

func (m *_SessionDiagnosticsDataType) GetCurrentPublishRequestsInQueue() uint32 {
	return m.CurrentPublishRequestsInQueue
}

func (m *_SessionDiagnosticsDataType) GetTotalRequestCount() ExtensionObjectDefinition {
	return m.TotalRequestCount
}

func (m *_SessionDiagnosticsDataType) GetUnauthorizedRequestCount() uint32 {
	return m.UnauthorizedRequestCount
}

func (m *_SessionDiagnosticsDataType) GetReadCount() ExtensionObjectDefinition {
	return m.ReadCount
}

func (m *_SessionDiagnosticsDataType) GetHistoryReadCount() ExtensionObjectDefinition {
	return m.HistoryReadCount
}

func (m *_SessionDiagnosticsDataType) GetWriteCount() ExtensionObjectDefinition {
	return m.WriteCount
}

func (m *_SessionDiagnosticsDataType) GetHistoryUpdateCount() ExtensionObjectDefinition {
	return m.HistoryUpdateCount
}

func (m *_SessionDiagnosticsDataType) GetCallCount() ExtensionObjectDefinition {
	return m.CallCount
}

func (m *_SessionDiagnosticsDataType) GetCreateMonitoredItemsCount() ExtensionObjectDefinition {
	return m.CreateMonitoredItemsCount
}

func (m *_SessionDiagnosticsDataType) GetModifyMonitoredItemsCount() ExtensionObjectDefinition {
	return m.ModifyMonitoredItemsCount
}

func (m *_SessionDiagnosticsDataType) GetSetMonitoringModeCount() ExtensionObjectDefinition {
	return m.SetMonitoringModeCount
}

func (m *_SessionDiagnosticsDataType) GetSetTriggeringCount() ExtensionObjectDefinition {
	return m.SetTriggeringCount
}

func (m *_SessionDiagnosticsDataType) GetDeleteMonitoredItemsCount() ExtensionObjectDefinition {
	return m.DeleteMonitoredItemsCount
}

func (m *_SessionDiagnosticsDataType) GetCreateSubscriptionCount() ExtensionObjectDefinition {
	return m.CreateSubscriptionCount
}

func (m *_SessionDiagnosticsDataType) GetModifySubscriptionCount() ExtensionObjectDefinition {
	return m.ModifySubscriptionCount
}

func (m *_SessionDiagnosticsDataType) GetSetPublishingModeCount() ExtensionObjectDefinition {
	return m.SetPublishingModeCount
}

func (m *_SessionDiagnosticsDataType) GetPublishCount() ExtensionObjectDefinition {
	return m.PublishCount
}

func (m *_SessionDiagnosticsDataType) GetRepublishCount() ExtensionObjectDefinition {
	return m.RepublishCount
}

func (m *_SessionDiagnosticsDataType) GetTransferSubscriptionsCount() ExtensionObjectDefinition {
	return m.TransferSubscriptionsCount
}

func (m *_SessionDiagnosticsDataType) GetDeleteSubscriptionsCount() ExtensionObjectDefinition {
	return m.DeleteSubscriptionsCount
}

func (m *_SessionDiagnosticsDataType) GetAddNodesCount() ExtensionObjectDefinition {
	return m.AddNodesCount
}

func (m *_SessionDiagnosticsDataType) GetAddReferencesCount() ExtensionObjectDefinition {
	return m.AddReferencesCount
}

func (m *_SessionDiagnosticsDataType) GetDeleteNodesCount() ExtensionObjectDefinition {
	return m.DeleteNodesCount
}

func (m *_SessionDiagnosticsDataType) GetDeleteReferencesCount() ExtensionObjectDefinition {
	return m.DeleteReferencesCount
}

func (m *_SessionDiagnosticsDataType) GetBrowseCount() ExtensionObjectDefinition {
	return m.BrowseCount
}

func (m *_SessionDiagnosticsDataType) GetBrowseNextCount() ExtensionObjectDefinition {
	return m.BrowseNextCount
}

func (m *_SessionDiagnosticsDataType) GetTranslateBrowsePathsToNodeIdsCount() ExtensionObjectDefinition {
	return m.TranslateBrowsePathsToNodeIdsCount
}

func (m *_SessionDiagnosticsDataType) GetQueryFirstCount() ExtensionObjectDefinition {
	return m.QueryFirstCount
}

func (m *_SessionDiagnosticsDataType) GetQueryNextCount() ExtensionObjectDefinition {
	return m.QueryNextCount
}

func (m *_SessionDiagnosticsDataType) GetRegisterNodesCount() ExtensionObjectDefinition {
	return m.RegisterNodesCount
}

func (m *_SessionDiagnosticsDataType) GetUnregisterNodesCount() ExtensionObjectDefinition {
	return m.UnregisterNodesCount
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastSessionDiagnosticsDataType(structType any) SessionDiagnosticsDataType {
	if casted, ok := structType.(SessionDiagnosticsDataType); ok {
		return casted
	}
	if casted, ok := structType.(*SessionDiagnosticsDataType); ok {
		return *casted
	}
	return nil
}

func (m *_SessionDiagnosticsDataType) GetTypeName() string {
	return "SessionDiagnosticsDataType"
}

func (m *_SessionDiagnosticsDataType) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).getLengthInBits(ctx))

	// Simple field (sessionId)
	lengthInBits += m.SessionId.GetLengthInBits(ctx)

	// Simple field (sessionName)
	lengthInBits += m.SessionName.GetLengthInBits(ctx)

	// Simple field (clientDescription)
	lengthInBits += m.ClientDescription.GetLengthInBits(ctx)

	// Simple field (serverUri)
	lengthInBits += m.ServerUri.GetLengthInBits(ctx)

	// Simple field (endpointUrl)
	lengthInBits += m.EndpointUrl.GetLengthInBits(ctx)

	// Simple field (noOfLocaleIds)
	lengthInBits += 32

	// Array field
	if len(m.LocaleIds) > 0 {
		for _curItem, element := range m.LocaleIds {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.LocaleIds), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	// Simple field (actualSessionTimeout)
	lengthInBits += 64

	// Simple field (maxResponseMessageSize)
	lengthInBits += 32

	// Simple field (clientConnectionTime)
	lengthInBits += 64

	// Simple field (clientLastContactTime)
	lengthInBits += 64

	// Simple field (currentSubscriptionsCount)
	lengthInBits += 32

	// Simple field (currentMonitoredItemsCount)
	lengthInBits += 32

	// Simple field (currentPublishRequestsInQueue)
	lengthInBits += 32

	// Simple field (totalRequestCount)
	lengthInBits += m.TotalRequestCount.GetLengthInBits(ctx)

	// Simple field (unauthorizedRequestCount)
	lengthInBits += 32

	// Simple field (readCount)
	lengthInBits += m.ReadCount.GetLengthInBits(ctx)

	// Simple field (historyReadCount)
	lengthInBits += m.HistoryReadCount.GetLengthInBits(ctx)

	// Simple field (writeCount)
	lengthInBits += m.WriteCount.GetLengthInBits(ctx)

	// Simple field (historyUpdateCount)
	lengthInBits += m.HistoryUpdateCount.GetLengthInBits(ctx)

	// Simple field (callCount)
	lengthInBits += m.CallCount.GetLengthInBits(ctx)

	// Simple field (createMonitoredItemsCount)
	lengthInBits += m.CreateMonitoredItemsCount.GetLengthInBits(ctx)

	// Simple field (modifyMonitoredItemsCount)
	lengthInBits += m.ModifyMonitoredItemsCount.GetLengthInBits(ctx)

	// Simple field (setMonitoringModeCount)
	lengthInBits += m.SetMonitoringModeCount.GetLengthInBits(ctx)

	// Simple field (setTriggeringCount)
	lengthInBits += m.SetTriggeringCount.GetLengthInBits(ctx)

	// Simple field (deleteMonitoredItemsCount)
	lengthInBits += m.DeleteMonitoredItemsCount.GetLengthInBits(ctx)

	// Simple field (createSubscriptionCount)
	lengthInBits += m.CreateSubscriptionCount.GetLengthInBits(ctx)

	// Simple field (modifySubscriptionCount)
	lengthInBits += m.ModifySubscriptionCount.GetLengthInBits(ctx)

	// Simple field (setPublishingModeCount)
	lengthInBits += m.SetPublishingModeCount.GetLengthInBits(ctx)

	// Simple field (publishCount)
	lengthInBits += m.PublishCount.GetLengthInBits(ctx)

	// Simple field (republishCount)
	lengthInBits += m.RepublishCount.GetLengthInBits(ctx)

	// Simple field (transferSubscriptionsCount)
	lengthInBits += m.TransferSubscriptionsCount.GetLengthInBits(ctx)

	// Simple field (deleteSubscriptionsCount)
	lengthInBits += m.DeleteSubscriptionsCount.GetLengthInBits(ctx)

	// Simple field (addNodesCount)
	lengthInBits += m.AddNodesCount.GetLengthInBits(ctx)

	// Simple field (addReferencesCount)
	lengthInBits += m.AddReferencesCount.GetLengthInBits(ctx)

	// Simple field (deleteNodesCount)
	lengthInBits += m.DeleteNodesCount.GetLengthInBits(ctx)

	// Simple field (deleteReferencesCount)
	lengthInBits += m.DeleteReferencesCount.GetLengthInBits(ctx)

	// Simple field (browseCount)
	lengthInBits += m.BrowseCount.GetLengthInBits(ctx)

	// Simple field (browseNextCount)
	lengthInBits += m.BrowseNextCount.GetLengthInBits(ctx)

	// Simple field (translateBrowsePathsToNodeIdsCount)
	lengthInBits += m.TranslateBrowsePathsToNodeIdsCount.GetLengthInBits(ctx)

	// Simple field (queryFirstCount)
	lengthInBits += m.QueryFirstCount.GetLengthInBits(ctx)

	// Simple field (queryNextCount)
	lengthInBits += m.QueryNextCount.GetLengthInBits(ctx)

	// Simple field (registerNodesCount)
	lengthInBits += m.RegisterNodesCount.GetLengthInBits(ctx)

	// Simple field (unregisterNodesCount)
	lengthInBits += m.UnregisterNodesCount.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_SessionDiagnosticsDataType) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_SessionDiagnosticsDataType) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ExtensionObjectDefinition, identifier string) (__sessionDiagnosticsDataType SessionDiagnosticsDataType, err error) {
	m.ExtensionObjectDefinitionContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("SessionDiagnosticsDataType"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for SessionDiagnosticsDataType")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	sessionId, err := ReadSimpleField[NodeId](ctx, "sessionId", ReadComplex[NodeId](NodeIdParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'sessionId' field"))
	}
	m.SessionId = sessionId

	sessionName, err := ReadSimpleField[PascalString](ctx, "sessionName", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'sessionName' field"))
	}
	m.SessionName = sessionName

	clientDescription, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "clientDescription", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("310")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'clientDescription' field"))
	}
	m.ClientDescription = clientDescription

	serverUri, err := ReadSimpleField[PascalString](ctx, "serverUri", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'serverUri' field"))
	}
	m.ServerUri = serverUri

	endpointUrl, err := ReadSimpleField[PascalString](ctx, "endpointUrl", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'endpointUrl' field"))
	}
	m.EndpointUrl = endpointUrl

	noOfLocaleIds, err := ReadSimpleField(ctx, "noOfLocaleIds", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfLocaleIds' field"))
	}
	m.NoOfLocaleIds = noOfLocaleIds

	localeIds, err := ReadCountArrayField[PascalString](ctx, "localeIds", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer), uint64(noOfLocaleIds))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'localeIds' field"))
	}
	m.LocaleIds = localeIds

	actualSessionTimeout, err := ReadSimpleField(ctx, "actualSessionTimeout", ReadDouble(readBuffer, uint8(64)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'actualSessionTimeout' field"))
	}
	m.ActualSessionTimeout = actualSessionTimeout

	maxResponseMessageSize, err := ReadSimpleField(ctx, "maxResponseMessageSize", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxResponseMessageSize' field"))
	}
	m.MaxResponseMessageSize = maxResponseMessageSize

	clientConnectionTime, err := ReadSimpleField(ctx, "clientConnectionTime", ReadSignedLong(readBuffer, uint8(64)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'clientConnectionTime' field"))
	}
	m.ClientConnectionTime = clientConnectionTime

	clientLastContactTime, err := ReadSimpleField(ctx, "clientLastContactTime", ReadSignedLong(readBuffer, uint8(64)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'clientLastContactTime' field"))
	}
	m.ClientLastContactTime = clientLastContactTime

	currentSubscriptionsCount, err := ReadSimpleField(ctx, "currentSubscriptionsCount", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'currentSubscriptionsCount' field"))
	}
	m.CurrentSubscriptionsCount = currentSubscriptionsCount

	currentMonitoredItemsCount, err := ReadSimpleField(ctx, "currentMonitoredItemsCount", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'currentMonitoredItemsCount' field"))
	}
	m.CurrentMonitoredItemsCount = currentMonitoredItemsCount

	currentPublishRequestsInQueue, err := ReadSimpleField(ctx, "currentPublishRequestsInQueue", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'currentPublishRequestsInQueue' field"))
	}
	m.CurrentPublishRequestsInQueue = currentPublishRequestsInQueue

	totalRequestCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "totalRequestCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'totalRequestCount' field"))
	}
	m.TotalRequestCount = totalRequestCount

	unauthorizedRequestCount, err := ReadSimpleField(ctx, "unauthorizedRequestCount", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'unauthorizedRequestCount' field"))
	}
	m.UnauthorizedRequestCount = unauthorizedRequestCount

	readCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "readCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'readCount' field"))
	}
	m.ReadCount = readCount

	historyReadCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "historyReadCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'historyReadCount' field"))
	}
	m.HistoryReadCount = historyReadCount

	writeCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "writeCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'writeCount' field"))
	}
	m.WriteCount = writeCount

	historyUpdateCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "historyUpdateCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'historyUpdateCount' field"))
	}
	m.HistoryUpdateCount = historyUpdateCount

	callCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "callCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'callCount' field"))
	}
	m.CallCount = callCount

	createMonitoredItemsCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "createMonitoredItemsCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'createMonitoredItemsCount' field"))
	}
	m.CreateMonitoredItemsCount = createMonitoredItemsCount

	modifyMonitoredItemsCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "modifyMonitoredItemsCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'modifyMonitoredItemsCount' field"))
	}
	m.ModifyMonitoredItemsCount = modifyMonitoredItemsCount

	setMonitoringModeCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "setMonitoringModeCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'setMonitoringModeCount' field"))
	}
	m.SetMonitoringModeCount = setMonitoringModeCount

	setTriggeringCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "setTriggeringCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'setTriggeringCount' field"))
	}
	m.SetTriggeringCount = setTriggeringCount

	deleteMonitoredItemsCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "deleteMonitoredItemsCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deleteMonitoredItemsCount' field"))
	}
	m.DeleteMonitoredItemsCount = deleteMonitoredItemsCount

	createSubscriptionCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "createSubscriptionCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'createSubscriptionCount' field"))
	}
	m.CreateSubscriptionCount = createSubscriptionCount

	modifySubscriptionCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "modifySubscriptionCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'modifySubscriptionCount' field"))
	}
	m.ModifySubscriptionCount = modifySubscriptionCount

	setPublishingModeCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "setPublishingModeCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'setPublishingModeCount' field"))
	}
	m.SetPublishingModeCount = setPublishingModeCount

	publishCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "publishCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'publishCount' field"))
	}
	m.PublishCount = publishCount

	republishCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "republishCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'republishCount' field"))
	}
	m.RepublishCount = republishCount

	transferSubscriptionsCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "transferSubscriptionsCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'transferSubscriptionsCount' field"))
	}
	m.TransferSubscriptionsCount = transferSubscriptionsCount

	deleteSubscriptionsCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "deleteSubscriptionsCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deleteSubscriptionsCount' field"))
	}
	m.DeleteSubscriptionsCount = deleteSubscriptionsCount

	addNodesCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "addNodesCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'addNodesCount' field"))
	}
	m.AddNodesCount = addNodesCount

	addReferencesCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "addReferencesCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'addReferencesCount' field"))
	}
	m.AddReferencesCount = addReferencesCount

	deleteNodesCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "deleteNodesCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deleteNodesCount' field"))
	}
	m.DeleteNodesCount = deleteNodesCount

	deleteReferencesCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "deleteReferencesCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deleteReferencesCount' field"))
	}
	m.DeleteReferencesCount = deleteReferencesCount

	browseCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "browseCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'browseCount' field"))
	}
	m.BrowseCount = browseCount

	browseNextCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "browseNextCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'browseNextCount' field"))
	}
	m.BrowseNextCount = browseNextCount

	translateBrowsePathsToNodeIdsCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "translateBrowsePathsToNodeIdsCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'translateBrowsePathsToNodeIdsCount' field"))
	}
	m.TranslateBrowsePathsToNodeIdsCount = translateBrowsePathsToNodeIdsCount

	queryFirstCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "queryFirstCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'queryFirstCount' field"))
	}
	m.QueryFirstCount = queryFirstCount

	queryNextCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "queryNextCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'queryNextCount' field"))
	}
	m.QueryNextCount = queryNextCount

	registerNodesCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "registerNodesCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'registerNodesCount' field"))
	}
	m.RegisterNodesCount = registerNodesCount

	unregisterNodesCount, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "unregisterNodesCount", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("873")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'unregisterNodesCount' field"))
	}
	m.UnregisterNodesCount = unregisterNodesCount

	if closeErr := readBuffer.CloseContext("SessionDiagnosticsDataType"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for SessionDiagnosticsDataType")
	}

	return m, nil
}

func (m *_SessionDiagnosticsDataType) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_SessionDiagnosticsDataType) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("SessionDiagnosticsDataType"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for SessionDiagnosticsDataType")
		}

		if err := WriteSimpleField[NodeId](ctx, "sessionId", m.GetSessionId(), WriteComplex[NodeId](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'sessionId' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "sessionName", m.GetSessionName(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'sessionName' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "clientDescription", m.GetClientDescription(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'clientDescription' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "serverUri", m.GetServerUri(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'serverUri' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "endpointUrl", m.GetEndpointUrl(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'endpointUrl' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfLocaleIds", m.GetNoOfLocaleIds(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfLocaleIds' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "localeIds", m.GetLocaleIds(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'localeIds' field")
		}

		if err := WriteSimpleField[float64](ctx, "actualSessionTimeout", m.GetActualSessionTimeout(), WriteDouble(writeBuffer, 64)); err != nil {
			return errors.Wrap(err, "Error serializing 'actualSessionTimeout' field")
		}

		if err := WriteSimpleField[uint32](ctx, "maxResponseMessageSize", m.GetMaxResponseMessageSize(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'maxResponseMessageSize' field")
		}

		if err := WriteSimpleField[int64](ctx, "clientConnectionTime", m.GetClientConnectionTime(), WriteSignedLong(writeBuffer, 64)); err != nil {
			return errors.Wrap(err, "Error serializing 'clientConnectionTime' field")
		}

		if err := WriteSimpleField[int64](ctx, "clientLastContactTime", m.GetClientLastContactTime(), WriteSignedLong(writeBuffer, 64)); err != nil {
			return errors.Wrap(err, "Error serializing 'clientLastContactTime' field")
		}

		if err := WriteSimpleField[uint32](ctx, "currentSubscriptionsCount", m.GetCurrentSubscriptionsCount(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'currentSubscriptionsCount' field")
		}

		if err := WriteSimpleField[uint32](ctx, "currentMonitoredItemsCount", m.GetCurrentMonitoredItemsCount(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'currentMonitoredItemsCount' field")
		}

		if err := WriteSimpleField[uint32](ctx, "currentPublishRequestsInQueue", m.GetCurrentPublishRequestsInQueue(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'currentPublishRequestsInQueue' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "totalRequestCount", m.GetTotalRequestCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'totalRequestCount' field")
		}

		if err := WriteSimpleField[uint32](ctx, "unauthorizedRequestCount", m.GetUnauthorizedRequestCount(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'unauthorizedRequestCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "readCount", m.GetReadCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'readCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "historyReadCount", m.GetHistoryReadCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'historyReadCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "writeCount", m.GetWriteCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'writeCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "historyUpdateCount", m.GetHistoryUpdateCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'historyUpdateCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "callCount", m.GetCallCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'callCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "createMonitoredItemsCount", m.GetCreateMonitoredItemsCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'createMonitoredItemsCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "modifyMonitoredItemsCount", m.GetModifyMonitoredItemsCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'modifyMonitoredItemsCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "setMonitoringModeCount", m.GetSetMonitoringModeCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'setMonitoringModeCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "setTriggeringCount", m.GetSetTriggeringCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'setTriggeringCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "deleteMonitoredItemsCount", m.GetDeleteMonitoredItemsCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'deleteMonitoredItemsCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "createSubscriptionCount", m.GetCreateSubscriptionCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'createSubscriptionCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "modifySubscriptionCount", m.GetModifySubscriptionCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'modifySubscriptionCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "setPublishingModeCount", m.GetSetPublishingModeCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'setPublishingModeCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "publishCount", m.GetPublishCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'publishCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "republishCount", m.GetRepublishCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'republishCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "transferSubscriptionsCount", m.GetTransferSubscriptionsCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'transferSubscriptionsCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "deleteSubscriptionsCount", m.GetDeleteSubscriptionsCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'deleteSubscriptionsCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "addNodesCount", m.GetAddNodesCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'addNodesCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "addReferencesCount", m.GetAddReferencesCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'addReferencesCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "deleteNodesCount", m.GetDeleteNodesCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'deleteNodesCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "deleteReferencesCount", m.GetDeleteReferencesCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'deleteReferencesCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "browseCount", m.GetBrowseCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'browseCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "browseNextCount", m.GetBrowseNextCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'browseNextCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "translateBrowsePathsToNodeIdsCount", m.GetTranslateBrowsePathsToNodeIdsCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'translateBrowsePathsToNodeIdsCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "queryFirstCount", m.GetQueryFirstCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'queryFirstCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "queryNextCount", m.GetQueryNextCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'queryNextCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "registerNodesCount", m.GetRegisterNodesCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'registerNodesCount' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "unregisterNodesCount", m.GetUnregisterNodesCount(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'unregisterNodesCount' field")
		}

		if popErr := writeBuffer.PopContext("SessionDiagnosticsDataType"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for SessionDiagnosticsDataType")
		}
		return nil
	}
	return m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_SessionDiagnosticsDataType) IsSessionDiagnosticsDataType() {}

func (m *_SessionDiagnosticsDataType) DeepCopy() any {
	return m.deepCopy()
}

func (m *_SessionDiagnosticsDataType) deepCopy() *_SessionDiagnosticsDataType {
	if m == nil {
		return nil
	}
	_SessionDiagnosticsDataTypeCopy := &_SessionDiagnosticsDataType{
		m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition).deepCopy(),
		m.SessionId.DeepCopy().(NodeId),
		m.SessionName.DeepCopy().(PascalString),
		m.ClientDescription.DeepCopy().(ExtensionObjectDefinition),
		m.ServerUri.DeepCopy().(PascalString),
		m.EndpointUrl.DeepCopy().(PascalString),
		m.NoOfLocaleIds,
		utils.DeepCopySlice[PascalString, PascalString](m.LocaleIds),
		m.ActualSessionTimeout,
		m.MaxResponseMessageSize,
		m.ClientConnectionTime,
		m.ClientLastContactTime,
		m.CurrentSubscriptionsCount,
		m.CurrentMonitoredItemsCount,
		m.CurrentPublishRequestsInQueue,
		m.TotalRequestCount.DeepCopy().(ExtensionObjectDefinition),
		m.UnauthorizedRequestCount,
		m.ReadCount.DeepCopy().(ExtensionObjectDefinition),
		m.HistoryReadCount.DeepCopy().(ExtensionObjectDefinition),
		m.WriteCount.DeepCopy().(ExtensionObjectDefinition),
		m.HistoryUpdateCount.DeepCopy().(ExtensionObjectDefinition),
		m.CallCount.DeepCopy().(ExtensionObjectDefinition),
		m.CreateMonitoredItemsCount.DeepCopy().(ExtensionObjectDefinition),
		m.ModifyMonitoredItemsCount.DeepCopy().(ExtensionObjectDefinition),
		m.SetMonitoringModeCount.DeepCopy().(ExtensionObjectDefinition),
		m.SetTriggeringCount.DeepCopy().(ExtensionObjectDefinition),
		m.DeleteMonitoredItemsCount.DeepCopy().(ExtensionObjectDefinition),
		m.CreateSubscriptionCount.DeepCopy().(ExtensionObjectDefinition),
		m.ModifySubscriptionCount.DeepCopy().(ExtensionObjectDefinition),
		m.SetPublishingModeCount.DeepCopy().(ExtensionObjectDefinition),
		m.PublishCount.DeepCopy().(ExtensionObjectDefinition),
		m.RepublishCount.DeepCopy().(ExtensionObjectDefinition),
		m.TransferSubscriptionsCount.DeepCopy().(ExtensionObjectDefinition),
		m.DeleteSubscriptionsCount.DeepCopy().(ExtensionObjectDefinition),
		m.AddNodesCount.DeepCopy().(ExtensionObjectDefinition),
		m.AddReferencesCount.DeepCopy().(ExtensionObjectDefinition),
		m.DeleteNodesCount.DeepCopy().(ExtensionObjectDefinition),
		m.DeleteReferencesCount.DeepCopy().(ExtensionObjectDefinition),
		m.BrowseCount.DeepCopy().(ExtensionObjectDefinition),
		m.BrowseNextCount.DeepCopy().(ExtensionObjectDefinition),
		m.TranslateBrowsePathsToNodeIdsCount.DeepCopy().(ExtensionObjectDefinition),
		m.QueryFirstCount.DeepCopy().(ExtensionObjectDefinition),
		m.QueryNextCount.DeepCopy().(ExtensionObjectDefinition),
		m.RegisterNodesCount.DeepCopy().(ExtensionObjectDefinition),
		m.UnregisterNodesCount.DeepCopy().(ExtensionObjectDefinition),
	}
	m.ExtensionObjectDefinitionContract.(*_ExtensionObjectDefinition)._SubType = m
	return _SessionDiagnosticsDataTypeCopy
}

func (m *_SessionDiagnosticsDataType) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
