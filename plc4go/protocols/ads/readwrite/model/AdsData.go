/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// AdsData is the corresponding interface of AdsData
type AdsData interface {
	utils.LengthAware
	utils.Serializable
	// GetCommandId returns CommandId (discriminator field)
	GetCommandId() CommandId
	// GetResponse returns Response (discriminator field)
	GetResponse() bool
}

// AdsDataExactly can be used when we want exactly this type and not a type which fulfills AdsData.
// This is useful for switch cases.
type AdsDataExactly interface {
	AdsData
	isAdsData() bool
}

// _AdsData is the data-structure of this message
type _AdsData struct {
	_AdsDataChildRequirements
}

type _AdsDataChildRequirements interface {
	utils.Serializable
	GetLengthInBits() uint16
	GetLengthInBitsConditional(lastItem bool) uint16
	GetCommandId() CommandId
	GetResponse() bool
}

type AdsDataParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child AdsData, serializeChildFunction func() error) error
	GetTypeName() string
}

type AdsDataChild interface {
	utils.Serializable
	InitializeParent(parent AdsData)
	GetParent() *AdsData

	GetTypeName() string
	AdsData
}

// NewAdsData factory function for _AdsData
func NewAdsData() *_AdsData {
	return &_AdsData{}
}

// Deprecated: use the interface for direct cast
func CastAdsData(structType interface{}) AdsData {
	if casted, ok := structType.(AdsData); ok {
		return casted
	}
	if casted, ok := structType.(*AdsData); ok {
		return *casted
	}
	return nil
}

func (m *_AdsData) GetTypeName() string {
	return "AdsData"
}

func (m *_AdsData) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	return lengthInBits
}

func (m *_AdsData) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func AdsDataParse(readBuffer utils.ReadBuffer, commandId CommandId, response bool) (AdsData, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AdsData"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AdsData")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type AdsDataChildSerializeRequirement interface {
		AdsData
		InitializeParent(AdsData)
		GetParent() AdsData
	}
	var _childTemp interface{}
	var _child AdsDataChildSerializeRequirement
	var typeSwitchError error
	switch {
	case commandId == CommandId_INVALID && response == bool(false): // AdsInvalidRequest
		_childTemp, typeSwitchError = AdsInvalidRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_INVALID && response == bool(true): // AdsInvalidResponse
		_childTemp, typeSwitchError = AdsInvalidResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ_DEVICE_INFO && response == bool(false): // AdsReadDeviceInfoRequest
		_childTemp, typeSwitchError = AdsReadDeviceInfoRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ_DEVICE_INFO && response == bool(true): // AdsReadDeviceInfoResponse
		_childTemp, typeSwitchError = AdsReadDeviceInfoResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ && response == bool(false): // AdsReadRequest
		_childTemp, typeSwitchError = AdsReadRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ && response == bool(true): // AdsReadResponse
		_childTemp, typeSwitchError = AdsReadResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_WRITE && response == bool(false): // AdsWriteRequest
		_childTemp, typeSwitchError = AdsWriteRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_WRITE && response == bool(true): // AdsWriteResponse
		_childTemp, typeSwitchError = AdsWriteResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ_STATE && response == bool(false): // AdsReadStateRequest
		_childTemp, typeSwitchError = AdsReadStateRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ_STATE && response == bool(true): // AdsReadStateResponse
		_childTemp, typeSwitchError = AdsReadStateResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_WRITE_CONTROL && response == bool(false): // AdsWriteControlRequest
		_childTemp, typeSwitchError = AdsWriteControlRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_WRITE_CONTROL && response == bool(true): // AdsWriteControlResponse
		_childTemp, typeSwitchError = AdsWriteControlResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_ADD_DEVICE_NOTIFICATION && response == bool(false): // AdsAddDeviceNotificationRequest
		_childTemp, typeSwitchError = AdsAddDeviceNotificationRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_ADD_DEVICE_NOTIFICATION && response == bool(true): // AdsAddDeviceNotificationResponse
		_childTemp, typeSwitchError = AdsAddDeviceNotificationResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_DELETE_DEVICE_NOTIFICATION && response == bool(false): // AdsDeleteDeviceNotificationRequest
		_childTemp, typeSwitchError = AdsDeleteDeviceNotificationRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_DELETE_DEVICE_NOTIFICATION && response == bool(true): // AdsDeleteDeviceNotificationResponse
		_childTemp, typeSwitchError = AdsDeleteDeviceNotificationResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_DEVICE_NOTIFICATION && response == bool(false): // AdsDeviceNotificationRequest
		_childTemp, typeSwitchError = AdsDeviceNotificationRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_DEVICE_NOTIFICATION && response == bool(true): // AdsDeviceNotificationResponse
		_childTemp, typeSwitchError = AdsDeviceNotificationResponseParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ_WRITE && response == bool(false): // AdsReadWriteRequest
		_childTemp, typeSwitchError = AdsReadWriteRequestParse(readBuffer, commandId, response)
	case commandId == CommandId_ADS_READ_WRITE && response == bool(true): // AdsReadWriteResponse
		_childTemp, typeSwitchError = AdsReadWriteResponseParse(readBuffer, commandId, response)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}
	_child = _childTemp.(AdsDataChildSerializeRequirement)

	if closeErr := readBuffer.CloseContext("AdsData"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AdsData")
	}

	// Finish initializing
	_child.InitializeParent(_child)
	return _child, nil
}

func (pm *_AdsData) SerializeParent(writeBuffer utils.WriteBuffer, child AdsData, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("AdsData"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AdsData")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("AdsData"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AdsData")
	}
	return nil
}

func (m *_AdsData) isAdsData() bool {
	return true
}

func (m *_AdsData) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
