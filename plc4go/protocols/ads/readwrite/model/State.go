/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// State is the corresponding interface of State
type State interface {
	utils.LengthAware
	utils.Serializable
	// GetInitCommand returns InitCommand (property field)
	GetInitCommand() bool
	// GetUpdCommand returns UpdCommand (property field)
	GetUpdCommand() bool
	// GetTimestampAdded returns TimestampAdded (property field)
	GetTimestampAdded() bool
	// GetHighPriorityCommand returns HighPriorityCommand (property field)
	GetHighPriorityCommand() bool
	// GetSystemCommand returns SystemCommand (property field)
	GetSystemCommand() bool
	// GetAdsCommand returns AdsCommand (property field)
	GetAdsCommand() bool
	// GetNoReturn returns NoReturn (property field)
	GetNoReturn() bool
	// GetResponse returns Response (property field)
	GetResponse() bool
	// GetBroadcast returns Broadcast (property field)
	GetBroadcast() bool
}

// StateExactly can be used when we want exactly this type and not a type which fulfills State.
// This is useful for switch cases.
type StateExactly interface {
	State
	isState() bool
}

// _State is the data-structure of this message
type _State struct {
	InitCommand         bool
	UpdCommand          bool
	TimestampAdded      bool
	HighPriorityCommand bool
	SystemCommand       bool
	AdsCommand          bool
	NoReturn            bool
	Response            bool
	Broadcast           bool
	// Reserved Fields
	reservedField0 *int8
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_State) GetInitCommand() bool {
	return m.InitCommand
}

func (m *_State) GetUpdCommand() bool {
	return m.UpdCommand
}

func (m *_State) GetTimestampAdded() bool {
	return m.TimestampAdded
}

func (m *_State) GetHighPriorityCommand() bool {
	return m.HighPriorityCommand
}

func (m *_State) GetSystemCommand() bool {
	return m.SystemCommand
}

func (m *_State) GetAdsCommand() bool {
	return m.AdsCommand
}

func (m *_State) GetNoReturn() bool {
	return m.NoReturn
}

func (m *_State) GetResponse() bool {
	return m.Response
}

func (m *_State) GetBroadcast() bool {
	return m.Broadcast
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewState factory function for _State
func NewState(initCommand bool, updCommand bool, timestampAdded bool, highPriorityCommand bool, systemCommand bool, adsCommand bool, noReturn bool, response bool, broadcast bool) *_State {
	return &_State{InitCommand: initCommand, UpdCommand: updCommand, TimestampAdded: timestampAdded, HighPriorityCommand: highPriorityCommand, SystemCommand: systemCommand, AdsCommand: adsCommand, NoReturn: noReturn, Response: response, Broadcast: broadcast}
}

// Deprecated: use the interface for direct cast
func CastState(structType interface{}) State {
	if casted, ok := structType.(State); ok {
		return casted
	}
	if casted, ok := structType.(*State); ok {
		return *casted
	}
	return nil
}

func (m *_State) GetTypeName() string {
	return "State"
}

func (m *_State) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_State) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (initCommand)
	lengthInBits += 1

	// Simple field (updCommand)
	lengthInBits += 1

	// Simple field (timestampAdded)
	lengthInBits += 1

	// Simple field (highPriorityCommand)
	lengthInBits += 1

	// Simple field (systemCommand)
	lengthInBits += 1

	// Simple field (adsCommand)
	lengthInBits += 1

	// Simple field (noReturn)
	lengthInBits += 1

	// Simple field (response)
	lengthInBits += 1

	// Simple field (broadcast)
	lengthInBits += 1

	// Reserved Field (reserved)
	lengthInBits += 7

	return lengthInBits
}

func (m *_State) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func StateParse(readBuffer utils.ReadBuffer) (State, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("State"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for State")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (initCommand)
	_initCommand, _initCommandErr := readBuffer.ReadBit("initCommand")
	if _initCommandErr != nil {
		return nil, errors.Wrap(_initCommandErr, "Error parsing 'initCommand' field of State")
	}
	initCommand := _initCommand

	// Simple Field (updCommand)
	_updCommand, _updCommandErr := readBuffer.ReadBit("updCommand")
	if _updCommandErr != nil {
		return nil, errors.Wrap(_updCommandErr, "Error parsing 'updCommand' field of State")
	}
	updCommand := _updCommand

	// Simple Field (timestampAdded)
	_timestampAdded, _timestampAddedErr := readBuffer.ReadBit("timestampAdded")
	if _timestampAddedErr != nil {
		return nil, errors.Wrap(_timestampAddedErr, "Error parsing 'timestampAdded' field of State")
	}
	timestampAdded := _timestampAdded

	// Simple Field (highPriorityCommand)
	_highPriorityCommand, _highPriorityCommandErr := readBuffer.ReadBit("highPriorityCommand")
	if _highPriorityCommandErr != nil {
		return nil, errors.Wrap(_highPriorityCommandErr, "Error parsing 'highPriorityCommand' field of State")
	}
	highPriorityCommand := _highPriorityCommand

	// Simple Field (systemCommand)
	_systemCommand, _systemCommandErr := readBuffer.ReadBit("systemCommand")
	if _systemCommandErr != nil {
		return nil, errors.Wrap(_systemCommandErr, "Error parsing 'systemCommand' field of State")
	}
	systemCommand := _systemCommand

	// Simple Field (adsCommand)
	_adsCommand, _adsCommandErr := readBuffer.ReadBit("adsCommand")
	if _adsCommandErr != nil {
		return nil, errors.Wrap(_adsCommandErr, "Error parsing 'adsCommand' field of State")
	}
	adsCommand := _adsCommand

	// Simple Field (noReturn)
	_noReturn, _noReturnErr := readBuffer.ReadBit("noReturn")
	if _noReturnErr != nil {
		return nil, errors.Wrap(_noReturnErr, "Error parsing 'noReturn' field of State")
	}
	noReturn := _noReturn

	// Simple Field (response)
	_response, _responseErr := readBuffer.ReadBit("response")
	if _responseErr != nil {
		return nil, errors.Wrap(_responseErr, "Error parsing 'response' field of State")
	}
	response := _response

	// Simple Field (broadcast)
	_broadcast, _broadcastErr := readBuffer.ReadBit("broadcast")
	if _broadcastErr != nil {
		return nil, errors.Wrap(_broadcastErr, "Error parsing 'broadcast' field of State")
	}
	broadcast := _broadcast

	var reservedField0 *int8
	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadInt8("reserved", 7)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field of State")
		}
		if reserved != int8(0x0) {
			log.Info().Fields(map[string]interface{}{
				"expected value": int8(0x0),
				"got value":      reserved,
			}).Msg("Got unexpected response for reserved field.")
			// We save the value, so it can be re-serialized
			reservedField0 = &reserved
		}
	}

	if closeErr := readBuffer.CloseContext("State"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for State")
	}

	// Create the instance
	return &_State{
		InitCommand:         initCommand,
		UpdCommand:          updCommand,
		TimestampAdded:      timestampAdded,
		HighPriorityCommand: highPriorityCommand,
		SystemCommand:       systemCommand,
		AdsCommand:          adsCommand,
		NoReturn:            noReturn,
		Response:            response,
		Broadcast:           broadcast,
		reservedField0:      reservedField0,
	}, nil
}

func (m *_State) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("State"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for State")
	}

	// Simple Field (initCommand)
	initCommand := bool(m.GetInitCommand())
	_initCommandErr := writeBuffer.WriteBit("initCommand", (initCommand))
	if _initCommandErr != nil {
		return errors.Wrap(_initCommandErr, "Error serializing 'initCommand' field")
	}

	// Simple Field (updCommand)
	updCommand := bool(m.GetUpdCommand())
	_updCommandErr := writeBuffer.WriteBit("updCommand", (updCommand))
	if _updCommandErr != nil {
		return errors.Wrap(_updCommandErr, "Error serializing 'updCommand' field")
	}

	// Simple Field (timestampAdded)
	timestampAdded := bool(m.GetTimestampAdded())
	_timestampAddedErr := writeBuffer.WriteBit("timestampAdded", (timestampAdded))
	if _timestampAddedErr != nil {
		return errors.Wrap(_timestampAddedErr, "Error serializing 'timestampAdded' field")
	}

	// Simple Field (highPriorityCommand)
	highPriorityCommand := bool(m.GetHighPriorityCommand())
	_highPriorityCommandErr := writeBuffer.WriteBit("highPriorityCommand", (highPriorityCommand))
	if _highPriorityCommandErr != nil {
		return errors.Wrap(_highPriorityCommandErr, "Error serializing 'highPriorityCommand' field")
	}

	// Simple Field (systemCommand)
	systemCommand := bool(m.GetSystemCommand())
	_systemCommandErr := writeBuffer.WriteBit("systemCommand", (systemCommand))
	if _systemCommandErr != nil {
		return errors.Wrap(_systemCommandErr, "Error serializing 'systemCommand' field")
	}

	// Simple Field (adsCommand)
	adsCommand := bool(m.GetAdsCommand())
	_adsCommandErr := writeBuffer.WriteBit("adsCommand", (adsCommand))
	if _adsCommandErr != nil {
		return errors.Wrap(_adsCommandErr, "Error serializing 'adsCommand' field")
	}

	// Simple Field (noReturn)
	noReturn := bool(m.GetNoReturn())
	_noReturnErr := writeBuffer.WriteBit("noReturn", (noReturn))
	if _noReturnErr != nil {
		return errors.Wrap(_noReturnErr, "Error serializing 'noReturn' field")
	}

	// Simple Field (response)
	response := bool(m.GetResponse())
	_responseErr := writeBuffer.WriteBit("response", (response))
	if _responseErr != nil {
		return errors.Wrap(_responseErr, "Error serializing 'response' field")
	}

	// Simple Field (broadcast)
	broadcast := bool(m.GetBroadcast())
	_broadcastErr := writeBuffer.WriteBit("broadcast", (broadcast))
	if _broadcastErr != nil {
		return errors.Wrap(_broadcastErr, "Error serializing 'broadcast' field")
	}

	// Reserved Field (reserved)
	{
		var reserved int8 = int8(0x0)
		if m.reservedField0 != nil {
			log.Info().Fields(map[string]interface{}{
				"expected value": int8(0x0),
				"got value":      reserved,
			}).Msg("Overriding reserved field with unexpected value.")
			reserved = *m.reservedField0
		}
		_err := writeBuffer.WriteInt8("reserved", 7, reserved)
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")
		}
	}

	if popErr := writeBuffer.PopContext("State"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for State")
	}
	return nil
}

func (m *_State) isState() bool {
	return true
}

func (m *_State) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
