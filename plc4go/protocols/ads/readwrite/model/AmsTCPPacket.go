/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// AmsTCPPacket is the corresponding interface of AmsTCPPacket
type AmsTCPPacket interface {
	utils.LengthAware
	utils.Serializable
	// GetUserdata returns Userdata (property field)
	GetUserdata() AmsPacket
}

// AmsTCPPacketExactly can be used when we want exactly this type and not a type which fulfills AmsTCPPacket.
// This is useful for switch cases.
type AmsTCPPacketExactly interface {
	AmsTCPPacket
	isAmsTCPPacket() bool
}

// _AmsTCPPacket is the data-structure of this message
type _AmsTCPPacket struct {
	Userdata AmsPacket
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AmsTCPPacket) GetUserdata() AmsPacket {
	return m.Userdata
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewAmsTCPPacket factory function for _AmsTCPPacket
func NewAmsTCPPacket(userdata AmsPacket) *_AmsTCPPacket {
	return &_AmsTCPPacket{Userdata: userdata}
}

// Deprecated: use the interface for direct cast
func CastAmsTCPPacket(structType interface{}) AmsTCPPacket {
	if casted, ok := structType.(AmsTCPPacket); ok {
		return casted
	}
	if casted, ok := structType.(*AmsTCPPacket); ok {
		return *casted
	}
	return nil
}

func (m *_AmsTCPPacket) GetTypeName() string {
	return "AmsTCPPacket"
}

func (m *_AmsTCPPacket) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_AmsTCPPacket) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Reserved Field (reserved)
	lengthInBits += 16

	// Implicit Field (length)
	lengthInBits += 32

	// Simple field (userdata)
	lengthInBits += m.Userdata.GetLengthInBits()

	return lengthInBits
}

func (m *_AmsTCPPacket) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func AmsTCPPacketParse(readBuffer utils.ReadBuffer) (AmsTCPPacket, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AmsTCPPacket"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AmsTCPPacket")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadUint16("reserved", 16)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint16(0x0000) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint16(0x0000),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Implicit Field (length) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
	length, _lengthErr := readBuffer.ReadUint32("length", 32)
	_ = length
	if _lengthErr != nil {
		return nil, errors.Wrap(_lengthErr, "Error parsing 'length' field")
	}

	// Simple Field (userdata)
	if pullErr := readBuffer.PullContext("userdata"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for userdata")
	}
	_userdata, _userdataErr := AmsPacketParse(readBuffer)
	if _userdataErr != nil {
		return nil, errors.Wrap(_userdataErr, "Error parsing 'userdata' field")
	}
	userdata := _userdata.(AmsPacket)
	if closeErr := readBuffer.CloseContext("userdata"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for userdata")
	}

	if closeErr := readBuffer.CloseContext("AmsTCPPacket"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AmsTCPPacket")
	}

	// Create the instance
	return NewAmsTCPPacket(userdata), nil
}

func (m *_AmsTCPPacket) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("AmsTCPPacket"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AmsTCPPacket")
	}

	// Reserved Field (reserved)
	{
		_err := writeBuffer.WriteUint16("reserved", 16, uint16(0x0000))
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")
		}
	}

	// Implicit Field (length) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	length := uint32(m.GetUserdata().GetLengthInBytes())
	_lengthErr := writeBuffer.WriteUint32("length", 32, (length))
	if _lengthErr != nil {
		return errors.Wrap(_lengthErr, "Error serializing 'length' field")
	}

	// Simple Field (userdata)
	if pushErr := writeBuffer.PushContext("userdata"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for userdata")
	}
	_userdataErr := writeBuffer.WriteSerializable(m.GetUserdata())
	if popErr := writeBuffer.PopContext("userdata"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for userdata")
	}
	if _userdataErr != nil {
		return errors.Wrap(_userdataErr, "Error serializing 'userdata' field")
	}

	if popErr := writeBuffer.PopContext("AmsTCPPacket"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AmsTCPPacket")
	}
	return nil
}

func (m *_AmsTCPPacket) isAmsTCPPacket() bool {
	return true
}

func (m *_AmsTCPPacket) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
