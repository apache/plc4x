/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// StandardFormatStatusReply is the corresponding interface of StandardFormatStatusReply
type StandardFormatStatusReply interface {
	utils.LengthAware
	utils.Serializable
	// GetStatusHeader returns StatusHeader (property field)
	GetStatusHeader() StatusHeader
	// GetApplication returns Application (property field)
	GetApplication() ApplicationIdContainer
	// GetBlockStart returns BlockStart (property field)
	GetBlockStart() uint8
	// GetStatusBytes returns StatusBytes (property field)
	GetStatusBytes() []StatusByte
}

// StandardFormatStatusReplyExactly can be used when we want exactly this type and not a type which fulfills StandardFormatStatusReply.
// This is useful for switch cases.
type StandardFormatStatusReplyExactly interface {
	StandardFormatStatusReply
	isStandardFormatStatusReply() bool
}

// _StandardFormatStatusReply is the data-structure of this message
type _StandardFormatStatusReply struct {
	StatusHeader StatusHeader
	Application  ApplicationIdContainer
	BlockStart   uint8
	StatusBytes  []StatusByte
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_StandardFormatStatusReply) GetStatusHeader() StatusHeader {
	return m.StatusHeader
}

func (m *_StandardFormatStatusReply) GetApplication() ApplicationIdContainer {
	return m.Application
}

func (m *_StandardFormatStatusReply) GetBlockStart() uint8 {
	return m.BlockStart
}

func (m *_StandardFormatStatusReply) GetStatusBytes() []StatusByte {
	return m.StatusBytes
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewStandardFormatStatusReply factory function for _StandardFormatStatusReply
func NewStandardFormatStatusReply(statusHeader StatusHeader, application ApplicationIdContainer, blockStart uint8, statusBytes []StatusByte) *_StandardFormatStatusReply {
	return &_StandardFormatStatusReply{StatusHeader: statusHeader, Application: application, BlockStart: blockStart, StatusBytes: statusBytes}
}

// Deprecated: use the interface for direct cast
func CastStandardFormatStatusReply(structType interface{}) StandardFormatStatusReply {
	if casted, ok := structType.(StandardFormatStatusReply); ok {
		return casted
	}
	if casted, ok := structType.(*StandardFormatStatusReply); ok {
		return *casted
	}
	return nil
}

func (m *_StandardFormatStatusReply) GetTypeName() string {
	return "StandardFormatStatusReply"
}

func (m *_StandardFormatStatusReply) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_StandardFormatStatusReply) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (statusHeader)
	lengthInBits += m.StatusHeader.GetLengthInBits()

	// Simple field (application)
	lengthInBits += 8

	// Simple field (blockStart)
	lengthInBits += 8

	// Array field
	if len(m.StatusBytes) > 0 {
		for i, element := range m.StatusBytes {
			last := i == len(m.StatusBytes)-1
			lengthInBits += element.(interface{ GetLengthInBitsConditional(bool) uint16 }).GetLengthInBitsConditional(last)
		}
	}

	return lengthInBits
}

func (m *_StandardFormatStatusReply) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func StandardFormatStatusReplyParse(readBuffer utils.ReadBuffer) (StandardFormatStatusReply, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("StandardFormatStatusReply"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for StandardFormatStatusReply")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (statusHeader)
	if pullErr := readBuffer.PullContext("statusHeader"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for statusHeader")
	}
	_statusHeader, _statusHeaderErr := StatusHeaderParse(readBuffer)
	if _statusHeaderErr != nil {
		return nil, errors.Wrap(_statusHeaderErr, "Error parsing 'statusHeader' field of StandardFormatStatusReply")
	}
	statusHeader := _statusHeader.(StatusHeader)
	if closeErr := readBuffer.CloseContext("statusHeader"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for statusHeader")
	}

	// Simple Field (application)
	if pullErr := readBuffer.PullContext("application"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for application")
	}
	_application, _applicationErr := ApplicationIdContainerParse(readBuffer)
	if _applicationErr != nil {
		return nil, errors.Wrap(_applicationErr, "Error parsing 'application' field of StandardFormatStatusReply")
	}
	application := _application
	if closeErr := readBuffer.CloseContext("application"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for application")
	}

	// Simple Field (blockStart)
	_blockStart, _blockStartErr := readBuffer.ReadUint8("blockStart", 8)
	if _blockStartErr != nil {
		return nil, errors.Wrap(_blockStartErr, "Error parsing 'blockStart' field of StandardFormatStatusReply")
	}
	blockStart := _blockStart

	// Array field (statusBytes)
	if pullErr := readBuffer.PullContext("statusBytes", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for statusBytes")
	}
	// Count array
	statusBytes := make([]StatusByte, uint16(statusHeader.GetNumberOfCharacterPairs())-uint16(uint16(2)))
	// This happens when the size is set conditional to 0
	if len(statusBytes) == 0 {
		statusBytes = nil
	}
	{
		for curItem := uint16(0); curItem < uint16(uint16(statusHeader.GetNumberOfCharacterPairs())-uint16(uint16(2))); curItem++ {
			_item, _err := StatusByteParse(readBuffer)
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'statusBytes' field of StandardFormatStatusReply")
			}
			statusBytes[curItem] = _item.(StatusByte)
		}
	}
	if closeErr := readBuffer.CloseContext("statusBytes", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for statusBytes")
	}

	if closeErr := readBuffer.CloseContext("StandardFormatStatusReply"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for StandardFormatStatusReply")
	}

	// Create the instance
	return NewStandardFormatStatusReply(statusHeader, application, blockStart, statusBytes), nil
}

func (m *_StandardFormatStatusReply) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("StandardFormatStatusReply"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for StandardFormatStatusReply")
	}

	// Simple Field (statusHeader)
	if pushErr := writeBuffer.PushContext("statusHeader"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for statusHeader")
	}
	_statusHeaderErr := writeBuffer.WriteSerializable(m.GetStatusHeader())
	if popErr := writeBuffer.PopContext("statusHeader"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for statusHeader")
	}
	if _statusHeaderErr != nil {
		return errors.Wrap(_statusHeaderErr, "Error serializing 'statusHeader' field")
	}

	// Simple Field (application)
	if pushErr := writeBuffer.PushContext("application"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for application")
	}
	_applicationErr := writeBuffer.WriteSerializable(m.GetApplication())
	if popErr := writeBuffer.PopContext("application"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for application")
	}
	if _applicationErr != nil {
		return errors.Wrap(_applicationErr, "Error serializing 'application' field")
	}

	// Simple Field (blockStart)
	blockStart := uint8(m.GetBlockStart())
	_blockStartErr := writeBuffer.WriteUint8("blockStart", 8, (blockStart))
	if _blockStartErr != nil {
		return errors.Wrap(_blockStartErr, "Error serializing 'blockStart' field")
	}

	// Array Field (statusBytes)
	if pushErr := writeBuffer.PushContext("statusBytes", utils.WithRenderAsList(true)); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for statusBytes")
	}
	for _, _element := range m.GetStatusBytes() {
		_elementErr := writeBuffer.WriteSerializable(_element)
		if _elementErr != nil {
			return errors.Wrap(_elementErr, "Error serializing 'statusBytes' field")
		}
	}
	if popErr := writeBuffer.PopContext("statusBytes", utils.WithRenderAsList(true)); popErr != nil {
		return errors.Wrap(popErr, "Error popping for statusBytes")
	}

	if popErr := writeBuffer.PopContext("StandardFormatStatusReply"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for StandardFormatStatusReply")
	}
	return nil
}

func (m *_StandardFormatStatusReply) isStandardFormatStatusReply() bool {
	return true
}

func (m *_StandardFormatStatusReply) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
