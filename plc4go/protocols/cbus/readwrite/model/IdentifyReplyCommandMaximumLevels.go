/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// IdentifyReplyCommandMaximumLevels is the corresponding interface of IdentifyReplyCommandMaximumLevels
type IdentifyReplyCommandMaximumLevels interface {
	utils.LengthAware
	utils.Serializable
	IdentifyReplyCommand
}

// IdentifyReplyCommandMaximumLevelsExactly can be used when we want exactly this type and not a type which fulfills IdentifyReplyCommandMaximumLevels.
// This is useful for switch cases.
type IdentifyReplyCommandMaximumLevelsExactly interface {
	IdentifyReplyCommandMaximumLevels
	isIdentifyReplyCommandMaximumLevels() bool
}

// _IdentifyReplyCommandMaximumLevels is the data-structure of this message
type _IdentifyReplyCommandMaximumLevels struct {
	*_IdentifyReplyCommand
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_IdentifyReplyCommandMaximumLevels) GetAttribute() Attribute {
	return Attribute_MaximumLevels
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_IdentifyReplyCommandMaximumLevels) InitializeParent(parent IdentifyReplyCommand) {}

func (m *_IdentifyReplyCommandMaximumLevels) GetParent() IdentifyReplyCommand {
	return m._IdentifyReplyCommand
}

// NewIdentifyReplyCommandMaximumLevels factory function for _IdentifyReplyCommandMaximumLevels
func NewIdentifyReplyCommandMaximumLevels() *_IdentifyReplyCommandMaximumLevels {
	_result := &_IdentifyReplyCommandMaximumLevels{
		_IdentifyReplyCommand: NewIdentifyReplyCommand(),
	}
	_result._IdentifyReplyCommand._IdentifyReplyCommandChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastIdentifyReplyCommandMaximumLevels(structType interface{}) IdentifyReplyCommandMaximumLevels {
	if casted, ok := structType.(IdentifyReplyCommandMaximumLevels); ok {
		return casted
	}
	if casted, ok := structType.(*IdentifyReplyCommandMaximumLevels); ok {
		return *casted
	}
	return nil
}

func (m *_IdentifyReplyCommandMaximumLevels) GetTypeName() string {
	return "IdentifyReplyCommandMaximumLevels"
}

func (m *_IdentifyReplyCommandMaximumLevels) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_IdentifyReplyCommandMaximumLevels) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	return lengthInBits
}

func (m *_IdentifyReplyCommandMaximumLevels) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func IdentifyReplyCommandMaximumLevelsParse(readBuffer utils.ReadBuffer, attribute Attribute) (IdentifyReplyCommandMaximumLevels, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("IdentifyReplyCommandMaximumLevels"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for IdentifyReplyCommandMaximumLevels")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	if closeErr := readBuffer.CloseContext("IdentifyReplyCommandMaximumLevels"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for IdentifyReplyCommandMaximumLevels")
	}

	// Create a partially initialized instance
	_child := &_IdentifyReplyCommandMaximumLevels{
		_IdentifyReplyCommand: &_IdentifyReplyCommand{},
	}
	_child._IdentifyReplyCommand._IdentifyReplyCommandChildRequirements = _child
	return _child, nil
}

func (m *_IdentifyReplyCommandMaximumLevels) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("IdentifyReplyCommandMaximumLevels"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for IdentifyReplyCommandMaximumLevels")
		}

		if popErr := writeBuffer.PopContext("IdentifyReplyCommandMaximumLevels"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for IdentifyReplyCommandMaximumLevels")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_IdentifyReplyCommandMaximumLevels) isIdentifyReplyCommandMaximumLevels() bool {
	return true
}

func (m *_IdentifyReplyCommandMaximumLevels) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
