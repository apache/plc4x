/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CALDataReplyReply is the corresponding interface of CALDataReplyReply
type CALDataReplyReply interface {
	utils.LengthAware
	utils.Serializable
	CALData
	// GetParamNumber returns ParamNumber (property field)
	GetParamNumber() uint8
	// GetData returns Data (property field)
	GetData() []byte
}

// CALDataReplyReplyExactly can be used when we want exactly this type and not a type which fulfills CALDataReplyReply.
// This is useful for switch cases.
type CALDataReplyReplyExactly interface {
	CALDataReplyReply
	isCALDataReplyReply() bool
}

// _CALDataReplyReply is the data-structure of this message
type _CALDataReplyReply struct {
	*_CALData
	ParamNumber uint8
	Data        []byte
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_CALDataReplyReply) InitializeParent(parent CALData, commandTypeContainer CALCommandTypeContainer) {
	m.CommandTypeContainer = commandTypeContainer
}

func (m *_CALDataReplyReply) GetParent() CALData {
	return m._CALData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataReplyReply) GetParamNumber() uint8 {
	return m.ParamNumber
}

func (m *_CALDataReplyReply) GetData() []byte {
	return m.Data
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataReplyReply factory function for _CALDataReplyReply
func NewCALDataReplyReply(paramNumber uint8, data []byte, commandTypeContainer CALCommandTypeContainer) *_CALDataReplyReply {
	_result := &_CALDataReplyReply{
		ParamNumber: paramNumber,
		Data:        data,
		_CALData:    NewCALData(commandTypeContainer),
	}
	_result._CALData._CALDataChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastCALDataReplyReply(structType interface{}) CALDataReplyReply {
	if casted, ok := structType.(CALDataReplyReply); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataReplyReply); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataReplyReply) GetTypeName() string {
	return "CALDataReplyReply"
}

func (m *_CALDataReplyReply) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_CALDataReplyReply) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (paramNumber)
	lengthInBits += 8

	// Array field
	if len(m.Data) > 0 {
		lengthInBits += 8 * uint16(len(m.Data))
	}

	return lengthInBits
}

func (m *_CALDataReplyReply) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataReplyReplyParse(readBuffer utils.ReadBuffer, commandTypeContainer CALCommandTypeContainer) (CALDataReplyReply, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataReplyReply"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataReplyReply")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (paramNumber)
	_paramNumber, _paramNumberErr := readBuffer.ReadUint8("paramNumber", 8)
	if _paramNumberErr != nil {
		return nil, errors.Wrap(_paramNumberErr, "Error parsing 'paramNumber' field")
	}
	paramNumber := _paramNumber
	// Byte Array field (data)
	numberOfBytesdata := int(commandTypeContainer.NumBytes())
	data, _readArrayErr := readBuffer.ReadByteArray("data", numberOfBytesdata)
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing 'data' field")
	}

	if closeErr := readBuffer.CloseContext("CALDataReplyReply"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataReplyReply")
	}

	// Create a partially initialized instance
	_child := &_CALDataReplyReply{
		ParamNumber: paramNumber,
		Data:        data,
		_CALData:    &_CALData{},
	}
	_child._CALData._CALDataChildRequirements = _child
	return _child, nil
}

func (m *_CALDataReplyReply) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("CALDataReplyReply"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for CALDataReplyReply")
		}

		// Simple Field (paramNumber)
		paramNumber := uint8(m.GetParamNumber())
		_paramNumberErr := writeBuffer.WriteUint8("paramNumber", 8, (paramNumber))
		if _paramNumberErr != nil {
			return errors.Wrap(_paramNumberErr, "Error serializing 'paramNumber' field")
		}

		// Array Field (data)
		// Byte Array field (data)
		if err := writeBuffer.WriteByteArray("data", m.GetData()); err != nil {
			return errors.Wrap(err, "Error serializing 'data' field")
		}

		if popErr := writeBuffer.PopContext("CALDataReplyReply"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for CALDataReplyReply")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_CALDataReplyReply) isCALDataReplyReply() bool {
	return true
}

func (m *_CALDataReplyReply) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
