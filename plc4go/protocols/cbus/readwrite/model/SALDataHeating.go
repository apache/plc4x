/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// SALDataHeating is the corresponding interface of SALDataHeating
type SALDataHeating interface {
	utils.LengthAware
	utils.Serializable
	SALData
}

// SALDataHeatingExactly can be used when we want exactly this type and not a type which fulfills SALDataHeating.
// This is useful for switch cases.
type SALDataHeatingExactly interface {
	SALDataHeating
	isSALDataHeating() bool
}

// _SALDataHeating is the data-structure of this message
type _SALDataHeating struct {
	*_SALData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_SALDataHeating) GetApplicationId() ApplicationId {
	return ApplicationId_HEATING
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_SALDataHeating) InitializeParent(parent SALData, salData SALData) {
	m.SalData = salData
}

func (m *_SALDataHeating) GetParent() SALData {
	return m._SALData
}

// NewSALDataHeating factory function for _SALDataHeating
func NewSALDataHeating(salData SALData) *_SALDataHeating {
	_result := &_SALDataHeating{
		_SALData: NewSALData(salData),
	}
	_result._SALData._SALDataChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastSALDataHeating(structType interface{}) SALDataHeating {
	if casted, ok := structType.(SALDataHeating); ok {
		return casted
	}
	if casted, ok := structType.(*SALDataHeating); ok {
		return *casted
	}
	return nil
}

func (m *_SALDataHeating) GetTypeName() string {
	return "SALDataHeating"
}

func (m *_SALDataHeating) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_SALDataHeating) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	return lengthInBits
}

func (m *_SALDataHeating) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func SALDataHeatingParse(readBuffer utils.ReadBuffer, applicationId ApplicationId) (SALDataHeating, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("SALDataHeating"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for SALDataHeating")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Validation
	if !(bool((1) == (2))) {
		return nil, errors.WithStack(utils.ParseValidationError{"HEATING Not yet implemented"})
	}

	if closeErr := readBuffer.CloseContext("SALDataHeating"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for SALDataHeating")
	}

	// Create a partially initialized instance
	_child := &_SALDataHeating{
		_SALData: &_SALData{},
	}
	_child._SALData._SALDataChildRequirements = _child
	return _child, nil
}

func (m *_SALDataHeating) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("SALDataHeating"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for SALDataHeating")
		}

		if popErr := writeBuffer.PopContext("SALDataHeating"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for SALDataHeating")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_SALDataHeating) isSALDataHeating() bool {
	return true
}

func (m *_SALDataHeating) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
