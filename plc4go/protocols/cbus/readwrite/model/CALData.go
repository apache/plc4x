/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CALData is the corresponding interface of CALData
type CALData interface {
	utils.LengthAware
	utils.Serializable
	// GetCommandTypeContainer returns CommandTypeContainer (property field)
	GetCommandTypeContainer() CALCommandTypeContainer
	// GetCommandType returns CommandType (virtual field)
	GetCommandType() CALCommandType
}

// CALDataExactly can be used when we want exactly this type and not a type which fulfills CALData.
// This is useful for switch cases.
type CALDataExactly interface {
	CALData
	isCALData() bool
}

// _CALData is the data-structure of this message
type _CALData struct {
	_CALDataChildRequirements
	CommandTypeContainer CALCommandTypeContainer
}

type _CALDataChildRequirements interface {
	utils.Serializable
	GetLengthInBits() uint16
	GetLengthInBitsConditional(lastItem bool) uint16
}

type CALDataParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child CALData, serializeChildFunction func() error) error
	GetTypeName() string
}

type CALDataChild interface {
	utils.Serializable
	InitializeParent(parent CALData, commandTypeContainer CALCommandTypeContainer)
	GetParent() *CALData

	GetTypeName() string
	CALData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALData) GetCommandTypeContainer() CALCommandTypeContainer {
	return m.CommandTypeContainer
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *_CALData) GetCommandType() CALCommandType {
	return CastCALCommandType(m.GetCommandTypeContainer().CommandType())
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALData factory function for _CALData
func NewCALData(commandTypeContainer CALCommandTypeContainer) *_CALData {
	return &_CALData{CommandTypeContainer: commandTypeContainer}
}

// Deprecated: use the interface for direct cast
func CastCALData(structType interface{}) CALData {
	if casted, ok := structType.(CALData); ok {
		return casted
	}
	if casted, ok := structType.(*CALData); ok {
		return *casted
	}
	return nil
}

func (m *_CALData) GetTypeName() string {
	return "CALData"
}

func (m *_CALData) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	// Simple field (commandTypeContainer)
	lengthInBits += 8

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *_CALData) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataParse(readBuffer utils.ReadBuffer) (CALData, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALData"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALData")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (commandTypeContainer)
	if pullErr := readBuffer.PullContext("commandTypeContainer"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for commandTypeContainer")
	}
	_commandTypeContainer, _commandTypeContainerErr := CALCommandTypeContainerParse(readBuffer)
	if _commandTypeContainerErr != nil {
		return nil, errors.Wrap(_commandTypeContainerErr, "Error parsing 'commandTypeContainer' field")
	}
	commandTypeContainer := _commandTypeContainer
	if closeErr := readBuffer.CloseContext("commandTypeContainer"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for commandTypeContainer")
	}

	// Virtual field
	_commandType := commandTypeContainer.CommandType()
	commandType := CALCommandType(_commandType)
	_ = commandType

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type CALDataChildSerializeRequirement interface {
		CALData
		InitializeParent(CALData, CALCommandTypeContainer)
		GetParent() CALData
	}
	var _childTemp interface{}
	var _child CALDataChildSerializeRequirement
	var typeSwitchError error
	switch {
	case commandType == CALCommandType_RESET: // CALDataRequestReset
		_childTemp, typeSwitchError = CALDataRequestResetParse(readBuffer)
	case commandType == CALCommandType_RECALL: // CALDataRequestRecall
		_childTemp, typeSwitchError = CALDataRequestRecallParse(readBuffer)
	case commandType == CALCommandType_IDENTIFY: // CALDataRequestIdentify
		_childTemp, typeSwitchError = CALDataRequestIdentifyParse(readBuffer)
	case commandType == CALCommandType_GET_STATUS: // CALDataRequestGetStatus
		_childTemp, typeSwitchError = CALDataRequestGetStatusParse(readBuffer)
	case commandType == CALCommandType_REPLY: // CALDataReplyReply
		_childTemp, typeSwitchError = CALDataReplyReplyParse(readBuffer, commandTypeContainer)
	case commandType == CALCommandType_ACKNOWLEDGE: // CALDataReplyAcknowledge
		_childTemp, typeSwitchError = CALDataReplyAcknowledgeParse(readBuffer)
	case commandType == CALCommandType_STATUS: // CALDataReplyStatus
		_childTemp, typeSwitchError = CALDataReplyStatusParse(readBuffer, commandTypeContainer)
	case commandType == CALCommandType_STATUS_EXTENDED: // CALDataReplyStatusExtended
		_childTemp, typeSwitchError = CALDataReplyStatusExtendedParse(readBuffer, commandTypeContainer)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}
	_child = _childTemp.(CALDataChildSerializeRequirement)

	if closeErr := readBuffer.CloseContext("CALData"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALData")
	}

	// Finish initializing
	_child.InitializeParent(_child, commandTypeContainer)
	return _child, nil
}

func (pm *_CALData) SerializeParent(writeBuffer utils.WriteBuffer, child CALData, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("CALData"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for CALData")
	}

	// Simple Field (commandTypeContainer)
	if pushErr := writeBuffer.PushContext("commandTypeContainer"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for commandTypeContainer")
	}
	_commandTypeContainerErr := writeBuffer.WriteSerializable(m.GetCommandTypeContainer())
	if popErr := writeBuffer.PopContext("commandTypeContainer"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for commandTypeContainer")
	}
	if _commandTypeContainerErr != nil {
		return errors.Wrap(_commandTypeContainerErr, "Error serializing 'commandTypeContainer' field")
	}
	// Virtual field
	if _commandTypeErr := writeBuffer.WriteVirtual("commandType", m.GetCommandType()); _commandTypeErr != nil {
		return errors.Wrap(_commandTypeErr, "Error serializing 'commandType' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("CALData"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for CALData")
	}
	return nil
}

func (m *_CALData) isCALData() bool {
	return true
}

func (m *_CALData) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
