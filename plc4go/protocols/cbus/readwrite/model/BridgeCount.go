/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BridgeCount is the corresponding interface of BridgeCount
type BridgeCount interface {
	utils.LengthAware
	utils.Serializable
	// GetCount returns Count (property field)
	GetCount() uint8
}

// BridgeCountExactly can be used when we want exactly this type and not a type which fulfills BridgeCount.
// This is useful for switch cases.
type BridgeCountExactly interface {
	BridgeCount
	isBridgeCount() bool
}

// _BridgeCount is the data-structure of this message
type _BridgeCount struct {
	Count uint8
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BridgeCount) GetCount() uint8 {
	return m.Count
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBridgeCount factory function for _BridgeCount
func NewBridgeCount(count uint8) *_BridgeCount {
	return &_BridgeCount{Count: count}
}

// Deprecated: use the interface for direct cast
func CastBridgeCount(structType interface{}) BridgeCount {
	if casted, ok := structType.(BridgeCount); ok {
		return casted
	}
	if casted, ok := structType.(*BridgeCount); ok {
		return *casted
	}
	return nil
}

func (m *_BridgeCount) GetTypeName() string {
	return "BridgeCount"
}

func (m *_BridgeCount) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_BridgeCount) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (count)
	lengthInBits += 8

	return lengthInBits
}

func (m *_BridgeCount) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BridgeCountParse(readBuffer utils.ReadBuffer) (BridgeCount, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BridgeCount"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BridgeCount")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (count)
	_count, _countErr := readBuffer.ReadUint8("count", 8)
	if _countErr != nil {
		return nil, errors.Wrap(_countErr, "Error parsing 'count' field")
	}
	count := _count

	if closeErr := readBuffer.CloseContext("BridgeCount"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BridgeCount")
	}

	// Create the instance
	return NewBridgeCount(count), nil
}

func (m *_BridgeCount) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BridgeCount"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BridgeCount")
	}

	// Simple Field (count)
	count := uint8(m.GetCount())
	_countErr := writeBuffer.WriteUint8("count", 8, (count))
	if _countErr != nil {
		return errors.Wrap(_countErr, "Error serializing 'count' field")
	}

	if popErr := writeBuffer.PopContext("BridgeCount"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BridgeCount")
	}
	return nil
}

func (m *_BridgeCount) isBridgeCount() bool {
	return true
}

func (m *_BridgeCount) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
