/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package readwrite

import (
	"github.com/apache/plc4x/plc4go/protocols/knxnetip/readwrite/model"
	"github.com/apache/plc4x/plc4go/spi/utils"
	"github.com/pkg/errors"
	"strconv"
	"strings"
)

// Code generated by code-generation. DO NOT EDIT.

type KnxnetipXmlParserHelper struct {
}

// Temporary imports to silent compiler warnings (TODO: migrate from static to emission based imports)
func init() {
	_ = strconv.ParseUint
	_ = strconv.ParseInt
	_ = strings.Join
	_ = utils.Dump
}

func (m KnxnetipXmlParserHelper) Parse(typeName string, xmlString string, parserArguments ...string) (interface{}, error) {
	switch typeName {
	case "KnxProperty":
		propertyType, _ := model.KnxPropertyDataTypeByName(parserArguments[0])
		parsedUint1, err := strconv.ParseUint(parserArguments[1], 10, 8)
		if err != nil {
			return nil, err
		}
		dataLengthInBytes := uint8(parsedUint1)
		return model.KnxPropertyParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), propertyType, dataLengthInBytes)
	case "HPAIControlEndpoint":
		return model.HPAIControlEndpointParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "TunnelingResponseDataBlock":
		return model.TunnelingResponseDataBlockParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "DeviceDescriptorType2":
		return model.DeviceDescriptorType2ParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ChannelInformation":
		return model.ChannelInformationParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "KnxDatapoint":
		datapointType, _ := model.KnxDatapointTypeByName(parserArguments[0])
		return model.KnxDatapointParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), datapointType)
	case "DeviceConfigurationAckDataBlock":
		return model.DeviceConfigurationAckDataBlockParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ConnectionRequestInformation":
		return model.ConnectionRequestInformationParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "Apdu":
		parsedUint0, err := strconv.ParseUint(parserArguments[0], 10, 8)
		if err != nil {
			return nil, err
		}
		dataLength := uint8(parsedUint0)
		return model.ApduParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), dataLength)
	case "HPAIDiscoveryEndpoint":
		return model.HPAIDiscoveryEndpointParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ProjectInstallationIdentifier":
		return model.ProjectInstallationIdentifierParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ServiceId":
		return model.ServiceIdParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "HPAIDataEndpoint":
		return model.HPAIDataEndpointParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "RelativeTimestamp":
		return model.RelativeTimestampParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "CEMI":
		parsedUint0, err := strconv.ParseUint(parserArguments[0], 10, 16)
		if err != nil {
			return nil, err
		}
		size := uint16(parsedUint0)
		return model.CEMIParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), size)
	case "KnxNetIpMessage":
		return model.KnxNetIpMessageParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "DeviceStatus":
		return model.DeviceStatusParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "IPAddress":
		return model.IPAddressParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "GroupObjectDescriptorRealisationTypeB":
		return model.GroupObjectDescriptorRealisationTypeBParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "CEMIAdditionalInformation":
		return model.CEMIAdditionalInformationParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ComObjectTable":
		firmwareType, _ := model.FirmwareTypeByName(parserArguments[0])
		return model.ComObjectTableParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), firmwareType)
	case "KnxAddress":
		return model.KnxAddressParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ConnectionResponseDataBlock":
		return model.ConnectionResponseDataBlockParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "TunnelingRequestDataBlock":
		return model.TunnelingRequestDataBlockParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "DIBDeviceInfo":
		return model.DIBDeviceInfoParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "DeviceConfigurationRequestDataBlock":
		return model.DeviceConfigurationRequestDataBlockParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "DIBSuppSvcFamilies":
		return model.DIBSuppSvcFamiliesParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "LDataFrame":
		return model.LDataFrameParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ApduDataExt":
		parsedUint0, err := strconv.ParseUint(parserArguments[0], 10, 8)
		if err != nil {
			return nil, err
		}
		length := uint8(parsedUint0)
		return model.ApduDataExtParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), length)
	case "ApduControl":
		return model.ApduControlParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "KnxGroupAddress":
		parsedUint0, err := strconv.ParseUint(parserArguments[0], 10, 2)
		if err != nil {
			return nil, err
		}
		numLevels := uint8(parsedUint0)
		return model.KnxGroupAddressParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), numLevels)
	case "GroupObjectDescriptorRealisationType6":
		return model.GroupObjectDescriptorRealisationType6ParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "GroupObjectDescriptorRealisationType7":
		return model.GroupObjectDescriptorRealisationType7ParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "MACAddress":
		return model.MACAddressParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "GroupObjectDescriptorRealisationType2":
		return model.GroupObjectDescriptorRealisationType2ParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	case "ApduData":
		parsedUint0, err := strconv.ParseUint(parserArguments[0], 10, 8)
		if err != nil {
			return nil, err
		}
		dataLength := uint8(parsedUint0)
		return model.ApduDataParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)), dataLength)
	case "GroupObjectDescriptorRealisationType1":
		return model.GroupObjectDescriptorRealisationType1ParseWithBuffer(utils.NewXmlReadBuffer(strings.NewReader(xmlString)))
	}
	return nil, errors.Errorf("Unsupported type %s", typeName)
}
