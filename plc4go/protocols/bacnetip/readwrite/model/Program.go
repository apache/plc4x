/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Program is the corresponding interface of Program
type Program interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetProgramState returns ProgramState (property field)
	GetProgramState() ReadableProperty
	// GetProgramChange returns ProgramChange (property field)
	GetProgramChange() WritableProperty
	// GetReasonForHalt returns ReasonForHalt (property field)
	GetReasonForHalt() OptionalProperty
	// GetDescriptionOfHalt returns DescriptionOfHalt (property field)
	GetDescriptionOfHalt() OptionalProperty
	// GetProgramLocation returns ProgramLocation (property field)
	GetProgramLocation() OptionalProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetInstanceOf returns InstanceOf (property field)
	GetInstanceOf() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsProgram is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsProgram()
	// CreateBuilder creates a ProgramBuilder
	CreateProgramBuilder() ProgramBuilder
}

// _Program is the data-structure of this message
type _Program struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	ProgramState                 ReadableProperty
	ProgramChange                WritableProperty
	ReasonForHalt                OptionalProperty
	DescriptionOfHalt            OptionalProperty
	ProgramLocation              OptionalProperty
	Description                  OptionalProperty
	InstanceOf                   OptionalProperty
	StatusFlags                  ReadableProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	EventDetectionEnable         OptionalProperty
	NotificationClass            OptionalProperty
	EventEnable                  OptionalProperty
	EventState                   OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ Program = (*_Program)(nil)

// NewProgram factory function for _Program
func NewProgram(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, programState ReadableProperty, programChange WritableProperty, reasonForHalt OptionalProperty, descriptionOfHalt OptionalProperty, programLocation OptionalProperty, description OptionalProperty, instanceOf OptionalProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Program {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Program must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Program must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Program must not be nil")
	}
	if programState == nil {
		panic("programState of type ReadableProperty for Program must not be nil")
	}
	if programChange == nil {
		panic("programChange of type WritableProperty for Program must not be nil")
	}
	if reasonForHalt == nil {
		panic("reasonForHalt of type OptionalProperty for Program must not be nil")
	}
	if descriptionOfHalt == nil {
		panic("descriptionOfHalt of type OptionalProperty for Program must not be nil")
	}
	if programLocation == nil {
		panic("programLocation of type OptionalProperty for Program must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Program must not be nil")
	}
	if instanceOf == nil {
		panic("instanceOf of type OptionalProperty for Program must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Program must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Program must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for Program must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Program must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Program must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Program must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for Program must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Program must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Program must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Program must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Program must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Program must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Program must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Program must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Program must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Program must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Program must not be nil")
	}
	return &_Program{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, ProgramState: programState, ProgramChange: programChange, ReasonForHalt: reasonForHalt, DescriptionOfHalt: descriptionOfHalt, ProgramLocation: programLocation, Description: description, InstanceOf: instanceOf, StatusFlags: statusFlags, Reliability: reliability, OutOfService: outOfService, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, EventState: eventState, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// ProgramBuilder is a builder for Program
type ProgramBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, programState ReadableProperty, programChange WritableProperty, reasonForHalt OptionalProperty, descriptionOfHalt OptionalProperty, programLocation OptionalProperty, description OptionalProperty, instanceOf OptionalProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) ProgramBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) ProgramBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) ProgramBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) ProgramBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithProgramState adds ProgramState (property field)
	WithProgramState(ReadableProperty) ProgramBuilder
	// WithProgramStateBuilder adds ProgramState (property field) which is build by the builder
	WithProgramStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithProgramChange adds ProgramChange (property field)
	WithProgramChange(WritableProperty) ProgramBuilder
	// WithProgramChangeBuilder adds ProgramChange (property field) which is build by the builder
	WithProgramChangeBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) ProgramBuilder
	// WithReasonForHalt adds ReasonForHalt (property field)
	WithReasonForHalt(OptionalProperty) ProgramBuilder
	// WithReasonForHaltBuilder adds ReasonForHalt (property field) which is build by the builder
	WithReasonForHaltBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithDescriptionOfHalt adds DescriptionOfHalt (property field)
	WithDescriptionOfHalt(OptionalProperty) ProgramBuilder
	// WithDescriptionOfHaltBuilder adds DescriptionOfHalt (property field) which is build by the builder
	WithDescriptionOfHaltBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithProgramLocation adds ProgramLocation (property field)
	WithProgramLocation(OptionalProperty) ProgramBuilder
	// WithProgramLocationBuilder adds ProgramLocation (property field) which is build by the builder
	WithProgramLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) ProgramBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithInstanceOf adds InstanceOf (property field)
	WithInstanceOf(OptionalProperty) ProgramBuilder
	// WithInstanceOfBuilder adds InstanceOf (property field) which is build by the builder
	WithInstanceOfBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) ProgramBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) ProgramBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) ProgramBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) ProgramBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) ProgramBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) ProgramBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) ProgramBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) ProgramBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) ProgramBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) ProgramBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) ProgramBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) ProgramBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) ProgramBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) ProgramBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) ProgramBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) ProgramBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) ProgramBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder
	// Build builds the Program or returns an error if something is wrong
	Build() (Program, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Program
}

// NewProgramBuilder() creates a ProgramBuilder
func NewProgramBuilder() ProgramBuilder {
	return &_ProgramBuilder{_Program: new(_Program)}
}

type _ProgramBuilder struct {
	*_Program

	err *utils.MultiError
}

var _ (ProgramBuilder) = (*_ProgramBuilder)(nil)

func (b *_ProgramBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, programState ReadableProperty, programChange WritableProperty, reasonForHalt OptionalProperty, descriptionOfHalt OptionalProperty, programLocation OptionalProperty, description OptionalProperty, instanceOf OptionalProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) ProgramBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithProgramState(programState).WithProgramChange(programChange).WithReasonForHalt(reasonForHalt).WithDescriptionOfHalt(descriptionOfHalt).WithProgramLocation(programLocation).WithDescription(description).WithInstanceOf(instanceOf).WithStatusFlags(statusFlags).WithReliability(reliability).WithOutOfService(outOfService).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithEventState(eventState).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_ProgramBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) ProgramBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_ProgramBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithObjectName(objectName ReadableProperty) ProgramBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_ProgramBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithObjectType(objectType ReadableProperty) ProgramBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_ProgramBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithProgramState(programState ReadableProperty) ProgramBuilder {
	b.ProgramState = programState
	return b
}

func (b *_ProgramBuilder) WithProgramStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ProgramState.CreateReadablePropertyBuilder())
	var err error
	b.ProgramState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithProgramChange(programChange WritableProperty) ProgramBuilder {
	b.ProgramChange = programChange
	return b
}

func (b *_ProgramBuilder) WithProgramChangeBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ProgramChange.CreateWritablePropertyBuilder())
	var err error
	b.ProgramChange, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithReasonForHalt(reasonForHalt OptionalProperty) ProgramBuilder {
	b.ReasonForHalt = reasonForHalt
	return b
}

func (b *_ProgramBuilder) WithReasonForHaltBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ReasonForHalt.CreateOptionalPropertyBuilder())
	var err error
	b.ReasonForHalt, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithDescriptionOfHalt(descriptionOfHalt OptionalProperty) ProgramBuilder {
	b.DescriptionOfHalt = descriptionOfHalt
	return b
}

func (b *_ProgramBuilder) WithDescriptionOfHaltBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.DescriptionOfHalt.CreateOptionalPropertyBuilder())
	var err error
	b.DescriptionOfHalt, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithProgramLocation(programLocation OptionalProperty) ProgramBuilder {
	b.ProgramLocation = programLocation
	return b
}

func (b *_ProgramBuilder) WithProgramLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ProgramLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProgramLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithDescription(description OptionalProperty) ProgramBuilder {
	b.Description = description
	return b
}

func (b *_ProgramBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithInstanceOf(instanceOf OptionalProperty) ProgramBuilder {
	b.InstanceOf = instanceOf
	return b
}

func (b *_ProgramBuilder) WithInstanceOfBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.InstanceOf.CreateOptionalPropertyBuilder())
	var err error
	b.InstanceOf, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithStatusFlags(statusFlags ReadableProperty) ProgramBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_ProgramBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithReliability(reliability OptionalProperty) ProgramBuilder {
	b.Reliability = reliability
	return b
}

func (b *_ProgramBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithOutOfService(outOfService ReadableProperty) ProgramBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_ProgramBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) ProgramBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_ProgramBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithNotificationClass(notificationClass OptionalProperty) ProgramBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_ProgramBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithEventEnable(eventEnable OptionalProperty) ProgramBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_ProgramBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithEventState(eventState OptionalProperty) ProgramBuilder {
	b.EventState = eventState
	return b
}

func (b *_ProgramBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) ProgramBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_ProgramBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithNotifyType(notifyType OptionalProperty) ProgramBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_ProgramBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) ProgramBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_ProgramBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) ProgramBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_ProgramBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) ProgramBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_ProgramBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) ProgramBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_ProgramBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithPropertyList(propertyList ReadableProperty) ProgramBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_ProgramBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithTags(tags OptionalProperty) ProgramBuilder {
	b.Tags = tags
	return b
}

func (b *_ProgramBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithProfileLocation(profileLocation OptionalProperty) ProgramBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_ProgramBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) WithProfileName(profileName OptionalProperty) ProgramBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_ProgramBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ProgramBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ProgramBuilder) Build() (Program, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.ProgramState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'programState' not set"))
	}
	if b.ProgramChange == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'programChange' not set"))
	}
	if b.ReasonForHalt == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reasonForHalt' not set"))
	}
	if b.DescriptionOfHalt == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'descriptionOfHalt' not set"))
	}
	if b.ProgramLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'programLocation' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.InstanceOf == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'instanceOf' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Program.deepCopy(), nil
}

func (b *_ProgramBuilder) MustBuild() Program {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_ProgramBuilder) DeepCopy() any {
	_copy := b.CreateProgramBuilder().(*_ProgramBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateProgramBuilder creates a ProgramBuilder
func (b *_Program) CreateProgramBuilder() ProgramBuilder {
	if b == nil {
		return NewProgramBuilder()
	}
	return &_ProgramBuilder{_Program: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Program) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Program) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Program) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Program) GetProgramState() ReadableProperty {
	return m.ProgramState
}

func (m *_Program) GetProgramChange() WritableProperty {
	return m.ProgramChange
}

func (m *_Program) GetReasonForHalt() OptionalProperty {
	return m.ReasonForHalt
}

func (m *_Program) GetDescriptionOfHalt() OptionalProperty {
	return m.DescriptionOfHalt
}

func (m *_Program) GetProgramLocation() OptionalProperty {
	return m.ProgramLocation
}

func (m *_Program) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Program) GetInstanceOf() OptionalProperty {
	return m.InstanceOf
}

func (m *_Program) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Program) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Program) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_Program) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Program) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Program) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Program) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_Program) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Program) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Program) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Program) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Program) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Program) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Program) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Program) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Program) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Program) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastProgram(structType any) Program {
	if casted, ok := structType.(Program); ok {
		return casted
	}
	if casted, ok := structType.(*Program); ok {
		return *casted
	}
	return nil
}

func (m *_Program) GetTypeName() string {
	return "Program"
}

func (m *_Program) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (programState)
	lengthInBits += m.ProgramState.GetLengthInBits(ctx)

	// Simple field (programChange)
	lengthInBits += m.ProgramChange.GetLengthInBits(ctx)

	// Simple field (reasonForHalt)
	lengthInBits += m.ReasonForHalt.GetLengthInBits(ctx)

	// Simple field (descriptionOfHalt)
	lengthInBits += m.DescriptionOfHalt.GetLengthInBits(ctx)

	// Simple field (programLocation)
	lengthInBits += m.ProgramLocation.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (instanceOf)
	lengthInBits += m.InstanceOf.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Program) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func ProgramParse(ctx context.Context, theBytes []byte) (Program, error) {
	return ProgramParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func ProgramParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Program, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Program, error) {
		return ProgramParseWithBuffer(ctx, readBuffer)
	}
}

func ProgramParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Program, error) {
	v, err := (&_Program{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Program) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__program Program, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Program"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Program")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	programState, err := ReadSimpleField[ReadableProperty](ctx, "programState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetProgramState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'programState' field"))
	}
	m.ProgramState = programState

	programChange, err := ReadSimpleField[WritableProperty](ctx, "programChange", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetProgramRequest")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'programChange' field"))
	}
	m.ProgramChange = programChange

	reasonForHalt, err := ReadSimpleField[OptionalProperty](ctx, "reasonForHalt", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetProgramError")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reasonForHalt' field"))
	}
	m.ReasonForHalt = reasonForHalt

	descriptionOfHalt, err := ReadSimpleField[OptionalProperty](ctx, "descriptionOfHalt", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'descriptionOfHalt' field"))
	}
	m.DescriptionOfHalt = descriptionOfHalt

	programLocation, err := ReadSimpleField[OptionalProperty](ctx, "programLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'programLocation' field"))
	}
	m.ProgramLocation = programLocation

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	instanceOf, err := ReadSimpleField[OptionalProperty](ctx, "instanceOf", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'instanceOf' field"))
	}
	m.InstanceOf = instanceOf

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Program"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Program")
	}

	return m, nil
}

func (m *_Program) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Program) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Program"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Program")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "programState", m.GetProgramState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'programState' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "programChange", m.GetProgramChange(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'programChange' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reasonForHalt", m.GetReasonForHalt(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reasonForHalt' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "descriptionOfHalt", m.GetDescriptionOfHalt(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'descriptionOfHalt' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "programLocation", m.GetProgramLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'programLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "instanceOf", m.GetInstanceOf(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'instanceOf' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Program"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Program")
	}
	return nil
}

func (m *_Program) IsProgram() {}

func (m *_Program) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Program) deepCopy() *_Program {
	if m == nil {
		return nil
	}
	_ProgramCopy := &_Program{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.ProgramState.DeepCopy().(ReadableProperty),
		m.ProgramChange.DeepCopy().(WritableProperty),
		m.ReasonForHalt.DeepCopy().(OptionalProperty),
		m.DescriptionOfHalt.DeepCopy().(OptionalProperty),
		m.ProgramLocation.DeepCopy().(OptionalProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.InstanceOf.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _ProgramCopy
}

func (m *_Program) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
