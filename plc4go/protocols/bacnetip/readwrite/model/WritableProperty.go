/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// WritableProperty is the corresponding interface of WritableProperty
type WritableProperty interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// IsWritableProperty is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsWritableProperty()
	// CreateBuilder creates a WritablePropertyBuilder
	CreateWritablePropertyBuilder() WritablePropertyBuilder
}

// _WritableProperty is the data-structure of this message
type _WritableProperty struct {

	// Arguments.
	BacType string
}

var _ WritableProperty = (*_WritableProperty)(nil)

// NewWritableProperty factory function for _WritableProperty
func NewWritableProperty(bacType string) *_WritableProperty {
	return &_WritableProperty{BacType: bacType}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// WritablePropertyBuilder is a builder for WritableProperty
type WritablePropertyBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields() WritablePropertyBuilder
	// Build builds the WritableProperty or returns an error if something is wrong
	Build() (WritableProperty, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() WritableProperty
}

// NewWritablePropertyBuilder() creates a WritablePropertyBuilder
func NewWritablePropertyBuilder() WritablePropertyBuilder {
	return &_WritablePropertyBuilder{_WritableProperty: new(_WritableProperty)}
}

type _WritablePropertyBuilder struct {
	*_WritableProperty

	err *utils.MultiError
}

var _ (WritablePropertyBuilder) = (*_WritablePropertyBuilder)(nil)

func (b *_WritablePropertyBuilder) WithMandatoryFields() WritablePropertyBuilder {
	return b
}

func (b *_WritablePropertyBuilder) Build() (WritableProperty, error) {
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._WritableProperty.deepCopy(), nil
}

func (b *_WritablePropertyBuilder) MustBuild() WritableProperty {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_WritablePropertyBuilder) DeepCopy() any {
	_copy := b.CreateWritablePropertyBuilder().(*_WritablePropertyBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateWritablePropertyBuilder creates a WritablePropertyBuilder
func (b *_WritableProperty) CreateWritablePropertyBuilder() WritablePropertyBuilder {
	if b == nil {
		return NewWritablePropertyBuilder()
	}
	return &_WritablePropertyBuilder{_WritableProperty: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastWritableProperty(structType any) WritableProperty {
	if casted, ok := structType.(WritableProperty); ok {
		return casted
	}
	if casted, ok := structType.(*WritableProperty); ok {
		return *casted
	}
	return nil
}

func (m *_WritableProperty) GetTypeName() string {
	return "WritableProperty"
}

func (m *_WritableProperty) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	return lengthInBits
}

func (m *_WritableProperty) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func WritablePropertyParse(ctx context.Context, theBytes []byte, bacType string) (WritableProperty, error) {
	return WritablePropertyParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes), bacType)
}

func WritablePropertyParseWithBufferProducer(bacType string) func(ctx context.Context, readBuffer utils.ReadBuffer) (WritableProperty, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (WritableProperty, error) {
		return WritablePropertyParseWithBuffer(ctx, readBuffer, bacType)
	}
}

func WritablePropertyParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer, bacType string) (WritableProperty, error) {
	v, err := (&_WritableProperty{BacType: bacType}).parse(ctx, readBuffer, bacType)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_WritableProperty) parse(ctx context.Context, readBuffer utils.ReadBuffer, bacType string) (__writableProperty WritableProperty, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("WritableProperty"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for WritableProperty")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	if closeErr := readBuffer.CloseContext("WritableProperty"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for WritableProperty")
	}

	return m, nil
}

func (m *_WritableProperty) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_WritableProperty) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("WritableProperty"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for WritableProperty")
	}

	if popErr := writeBuffer.PopContext("WritableProperty"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for WritableProperty")
	}
	return nil
}

////
// Arguments Getter

func (m *_WritableProperty) GetBacType() string {
	return m.BacType
}

//
////

func (m *_WritableProperty) IsWritableProperty() {}

func (m *_WritableProperty) DeepCopy() any {
	return m.deepCopy()
}

func (m *_WritableProperty) deepCopy() *_WritableProperty {
	if m == nil {
		return nil
	}
	_WritablePropertyCopy := &_WritableProperty{
		m.BacType,
	}
	return _WritablePropertyCopy
}

func (m *_WritableProperty) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
