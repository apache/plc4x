/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// EventLog is the corresponding interface of EventLog
type EventLog interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetEnable returns Enable (property field)
	GetEnable() WritableProperty
	// GetStartTime returns StartTime (property field)
	GetStartTime() OptionalProperty
	// GetStopTime returns StopTime (property field)
	GetStopTime() OptionalProperty
	// GetStopWhenFull returns StopWhenFull (property field)
	GetStopWhenFull() ReadableProperty
	// GetBufferSize returns BufferSize (property field)
	GetBufferSize() ReadableProperty
	// GetLogBuffer returns LogBuffer (property field)
	GetLogBuffer() ReadableProperty
	// GetRecordCount returns RecordCount (property field)
	GetRecordCount() WritableProperty
	// GetTotalRecordCount returns TotalRecordCount (property field)
	GetTotalRecordCount() ReadableProperty
	// GetNotificationThreshold returns NotificationThreshold (property field)
	GetNotificationThreshold() OptionalProperty
	// GetRecordsSinceNotification returns RecordsSinceNotification (property field)
	GetRecordsSinceNotification() OptionalProperty
	// GetLastNotifyRecord returns LastNotifyRecord (property field)
	GetLastNotifyRecord() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsEventLog is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsEventLog()
	// CreateBuilder creates a EventLogBuilder
	CreateEventLogBuilder() EventLogBuilder
}

// _EventLog is the data-structure of this message
type _EventLog struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	PropertyList                 ReadableProperty
	Description                  OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  OptionalProperty
	Enable                       WritableProperty
	StartTime                    OptionalProperty
	StopTime                     OptionalProperty
	StopWhenFull                 ReadableProperty
	BufferSize                   ReadableProperty
	LogBuffer                    ReadableProperty
	RecordCount                  WritableProperty
	TotalRecordCount             ReadableProperty
	NotificationThreshold        OptionalProperty
	RecordsSinceNotification     OptionalProperty
	LastNotifyRecord             OptionalProperty
	NotificationClass            OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ EventLog = (*_EventLog)(nil)

// NewEventLog factory function for _EventLog
func NewEventLog(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, propertyList ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, enable WritableProperty, startTime OptionalProperty, stopTime OptionalProperty, stopWhenFull ReadableProperty, bufferSize ReadableProperty, logBuffer ReadableProperty, recordCount WritableProperty, totalRecordCount ReadableProperty, notificationThreshold OptionalProperty, recordsSinceNotification OptionalProperty, lastNotifyRecord OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_EventLog {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for EventLog must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for EventLog must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for EventLog must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for EventLog must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for EventLog must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for EventLog must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for EventLog must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for EventLog must not be nil")
	}
	if enable == nil {
		panic("enable of type WritableProperty for EventLog must not be nil")
	}
	if startTime == nil {
		panic("startTime of type OptionalProperty for EventLog must not be nil")
	}
	if stopTime == nil {
		panic("stopTime of type OptionalProperty for EventLog must not be nil")
	}
	if stopWhenFull == nil {
		panic("stopWhenFull of type ReadableProperty for EventLog must not be nil")
	}
	if bufferSize == nil {
		panic("bufferSize of type ReadableProperty for EventLog must not be nil")
	}
	if logBuffer == nil {
		panic("logBuffer of type ReadableProperty for EventLog must not be nil")
	}
	if recordCount == nil {
		panic("recordCount of type WritableProperty for EventLog must not be nil")
	}
	if totalRecordCount == nil {
		panic("totalRecordCount of type ReadableProperty for EventLog must not be nil")
	}
	if notificationThreshold == nil {
		panic("notificationThreshold of type OptionalProperty for EventLog must not be nil")
	}
	if recordsSinceNotification == nil {
		panic("recordsSinceNotification of type OptionalProperty for EventLog must not be nil")
	}
	if lastNotifyRecord == nil {
		panic("lastNotifyRecord of type OptionalProperty for EventLog must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for EventLog must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for EventLog must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for EventLog must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for EventLog must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for EventLog must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for EventLog must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for EventLog must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for EventLog must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for EventLog must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for EventLog must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for EventLog must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for EventLog must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for EventLog must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for EventLog must not be nil")
	}
	return &_EventLog{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, PropertyList: propertyList, Description: description, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, Enable: enable, StartTime: startTime, StopTime: stopTime, StopWhenFull: stopWhenFull, BufferSize: bufferSize, LogBuffer: logBuffer, RecordCount: recordCount, TotalRecordCount: totalRecordCount, NotificationThreshold: notificationThreshold, RecordsSinceNotification: recordsSinceNotification, LastNotifyRecord: lastNotifyRecord, NotificationClass: notificationClass, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// EventLogBuilder is a builder for EventLog
type EventLogBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, propertyList ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, enable WritableProperty, startTime OptionalProperty, stopTime OptionalProperty, stopWhenFull ReadableProperty, bufferSize ReadableProperty, logBuffer ReadableProperty, recordCount WritableProperty, totalRecordCount ReadableProperty, notificationThreshold OptionalProperty, recordsSinceNotification OptionalProperty, lastNotifyRecord OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) EventLogBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) EventLogBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) EventLogBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) EventLogBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) EventLogBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) EventLogBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) EventLogBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) EventLogBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) EventLogBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEnable adds Enable (property field)
	WithEnable(WritableProperty) EventLogBuilder
	// WithEnableBuilder adds Enable (property field) which is build by the builder
	WithEnableBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) EventLogBuilder
	// WithStartTime adds StartTime (property field)
	WithStartTime(OptionalProperty) EventLogBuilder
	// WithStartTimeBuilder adds StartTime (property field) which is build by the builder
	WithStartTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithStopTime adds StopTime (property field)
	WithStopTime(OptionalProperty) EventLogBuilder
	// WithStopTimeBuilder adds StopTime (property field) which is build by the builder
	WithStopTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithStopWhenFull adds StopWhenFull (property field)
	WithStopWhenFull(ReadableProperty) EventLogBuilder
	// WithStopWhenFullBuilder adds StopWhenFull (property field) which is build by the builder
	WithStopWhenFullBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithBufferSize adds BufferSize (property field)
	WithBufferSize(ReadableProperty) EventLogBuilder
	// WithBufferSizeBuilder adds BufferSize (property field) which is build by the builder
	WithBufferSizeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithLogBuffer adds LogBuffer (property field)
	WithLogBuffer(ReadableProperty) EventLogBuilder
	// WithLogBufferBuilder adds LogBuffer (property field) which is build by the builder
	WithLogBufferBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithRecordCount adds RecordCount (property field)
	WithRecordCount(WritableProperty) EventLogBuilder
	// WithRecordCountBuilder adds RecordCount (property field) which is build by the builder
	WithRecordCountBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) EventLogBuilder
	// WithTotalRecordCount adds TotalRecordCount (property field)
	WithTotalRecordCount(ReadableProperty) EventLogBuilder
	// WithTotalRecordCountBuilder adds TotalRecordCount (property field) which is build by the builder
	WithTotalRecordCountBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder
	// WithNotificationThreshold adds NotificationThreshold (property field)
	WithNotificationThreshold(OptionalProperty) EventLogBuilder
	// WithNotificationThresholdBuilder adds NotificationThreshold (property field) which is build by the builder
	WithNotificationThresholdBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithRecordsSinceNotification adds RecordsSinceNotification (property field)
	WithRecordsSinceNotification(OptionalProperty) EventLogBuilder
	// WithRecordsSinceNotificationBuilder adds RecordsSinceNotification (property field) which is build by the builder
	WithRecordsSinceNotificationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithLastNotifyRecord adds LastNotifyRecord (property field)
	WithLastNotifyRecord(OptionalProperty) EventLogBuilder
	// WithLastNotifyRecordBuilder adds LastNotifyRecord (property field) which is build by the builder
	WithLastNotifyRecordBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) EventLogBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) EventLogBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) EventLogBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) EventLogBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) EventLogBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) EventLogBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) EventLogBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) EventLogBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) EventLogBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) EventLogBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) EventLogBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) EventLogBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) EventLogBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) EventLogBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder
	// Build builds the EventLog or returns an error if something is wrong
	Build() (EventLog, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() EventLog
}

// NewEventLogBuilder() creates a EventLogBuilder
func NewEventLogBuilder() EventLogBuilder {
	return &_EventLogBuilder{_EventLog: new(_EventLog)}
}

type _EventLogBuilder struct {
	*_EventLog

	err *utils.MultiError
}

var _ (EventLogBuilder) = (*_EventLogBuilder)(nil)

func (b *_EventLogBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, propertyList ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, enable WritableProperty, startTime OptionalProperty, stopTime OptionalProperty, stopWhenFull ReadableProperty, bufferSize ReadableProperty, logBuffer ReadableProperty, recordCount WritableProperty, totalRecordCount ReadableProperty, notificationThreshold OptionalProperty, recordsSinceNotification OptionalProperty, lastNotifyRecord OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) EventLogBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithPropertyList(propertyList).WithDescription(description).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithEnable(enable).WithStartTime(startTime).WithStopTime(stopTime).WithStopWhenFull(stopWhenFull).WithBufferSize(bufferSize).WithLogBuffer(logBuffer).WithRecordCount(recordCount).WithTotalRecordCount(totalRecordCount).WithNotificationThreshold(notificationThreshold).WithRecordsSinceNotification(recordsSinceNotification).WithLastNotifyRecord(lastNotifyRecord).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_EventLogBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) EventLogBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_EventLogBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithObjectName(objectName ReadableProperty) EventLogBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_EventLogBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithObjectType(objectType ReadableProperty) EventLogBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_EventLogBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithPropertyList(propertyList ReadableProperty) EventLogBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_EventLogBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithDescription(description OptionalProperty) EventLogBuilder {
	b.Description = description
	return b
}

func (b *_EventLogBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithStatusFlags(statusFlags ReadableProperty) EventLogBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_EventLogBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventState(eventState ReadableProperty) EventLogBuilder {
	b.EventState = eventState
	return b
}

func (b *_EventLogBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithReliability(reliability OptionalProperty) EventLogBuilder {
	b.Reliability = reliability
	return b
}

func (b *_EventLogBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEnable(enable WritableProperty) EventLogBuilder {
	b.Enable = enable
	return b
}

func (b *_EventLogBuilder) WithEnableBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.Enable.CreateWritablePropertyBuilder())
	var err error
	b.Enable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithStartTime(startTime OptionalProperty) EventLogBuilder {
	b.StartTime = startTime
	return b
}

func (b *_EventLogBuilder) WithStartTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.StartTime.CreateOptionalPropertyBuilder())
	var err error
	b.StartTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithStopTime(stopTime OptionalProperty) EventLogBuilder {
	b.StopTime = stopTime
	return b
}

func (b *_EventLogBuilder) WithStopTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.StopTime.CreateOptionalPropertyBuilder())
	var err error
	b.StopTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithStopWhenFull(stopWhenFull ReadableProperty) EventLogBuilder {
	b.StopWhenFull = stopWhenFull
	return b
}

func (b *_EventLogBuilder) WithStopWhenFullBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.StopWhenFull.CreateReadablePropertyBuilder())
	var err error
	b.StopWhenFull, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithBufferSize(bufferSize ReadableProperty) EventLogBuilder {
	b.BufferSize = bufferSize
	return b
}

func (b *_EventLogBuilder) WithBufferSizeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.BufferSize.CreateReadablePropertyBuilder())
	var err error
	b.BufferSize, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithLogBuffer(logBuffer ReadableProperty) EventLogBuilder {
	b.LogBuffer = logBuffer
	return b
}

func (b *_EventLogBuilder) WithLogBufferBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.LogBuffer.CreateReadablePropertyBuilder())
	var err error
	b.LogBuffer, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithRecordCount(recordCount WritableProperty) EventLogBuilder {
	b.RecordCount = recordCount
	return b
}

func (b *_EventLogBuilder) WithRecordCountBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.RecordCount.CreateWritablePropertyBuilder())
	var err error
	b.RecordCount, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithTotalRecordCount(totalRecordCount ReadableProperty) EventLogBuilder {
	b.TotalRecordCount = totalRecordCount
	return b
}

func (b *_EventLogBuilder) WithTotalRecordCountBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.TotalRecordCount.CreateReadablePropertyBuilder())
	var err error
	b.TotalRecordCount, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithNotificationThreshold(notificationThreshold OptionalProperty) EventLogBuilder {
	b.NotificationThreshold = notificationThreshold
	return b
}

func (b *_EventLogBuilder) WithNotificationThresholdBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.NotificationThreshold.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationThreshold, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithRecordsSinceNotification(recordsSinceNotification OptionalProperty) EventLogBuilder {
	b.RecordsSinceNotification = recordsSinceNotification
	return b
}

func (b *_EventLogBuilder) WithRecordsSinceNotificationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.RecordsSinceNotification.CreateOptionalPropertyBuilder())
	var err error
	b.RecordsSinceNotification, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithLastNotifyRecord(lastNotifyRecord OptionalProperty) EventLogBuilder {
	b.LastNotifyRecord = lastNotifyRecord
	return b
}

func (b *_EventLogBuilder) WithLastNotifyRecordBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.LastNotifyRecord.CreateOptionalPropertyBuilder())
	var err error
	b.LastNotifyRecord, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithNotificationClass(notificationClass OptionalProperty) EventLogBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_EventLogBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventEnable(eventEnable OptionalProperty) EventLogBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_EventLogBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) EventLogBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_EventLogBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithNotifyType(notifyType OptionalProperty) EventLogBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_EventLogBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) EventLogBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_EventLogBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) EventLogBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_EventLogBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) EventLogBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_EventLogBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) EventLogBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_EventLogBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) EventLogBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_EventLogBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) EventLogBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_EventLogBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) EventLogBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_EventLogBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithTags(tags OptionalProperty) EventLogBuilder {
	b.Tags = tags
	return b
}

func (b *_EventLogBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithProfileLocation(profileLocation OptionalProperty) EventLogBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_EventLogBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) WithProfileName(profileName OptionalProperty) EventLogBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_EventLogBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventLogBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventLogBuilder) Build() (EventLog, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.Enable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'enable' not set"))
	}
	if b.StartTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'startTime' not set"))
	}
	if b.StopTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'stopTime' not set"))
	}
	if b.StopWhenFull == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'stopWhenFull' not set"))
	}
	if b.BufferSize == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bufferSize' not set"))
	}
	if b.LogBuffer == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'logBuffer' not set"))
	}
	if b.RecordCount == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'recordCount' not set"))
	}
	if b.TotalRecordCount == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'totalRecordCount' not set"))
	}
	if b.NotificationThreshold == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationThreshold' not set"))
	}
	if b.RecordsSinceNotification == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'recordsSinceNotification' not set"))
	}
	if b.LastNotifyRecord == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastNotifyRecord' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._EventLog.deepCopy(), nil
}

func (b *_EventLogBuilder) MustBuild() EventLog {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_EventLogBuilder) DeepCopy() any {
	_copy := b.CreateEventLogBuilder().(*_EventLogBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateEventLogBuilder creates a EventLogBuilder
func (b *_EventLog) CreateEventLogBuilder() EventLogBuilder {
	if b == nil {
		return NewEventLogBuilder()
	}
	return &_EventLogBuilder{_EventLog: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_EventLog) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_EventLog) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_EventLog) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_EventLog) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_EventLog) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_EventLog) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_EventLog) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_EventLog) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_EventLog) GetEnable() WritableProperty {
	return m.Enable
}

func (m *_EventLog) GetStartTime() OptionalProperty {
	return m.StartTime
}

func (m *_EventLog) GetStopTime() OptionalProperty {
	return m.StopTime
}

func (m *_EventLog) GetStopWhenFull() ReadableProperty {
	return m.StopWhenFull
}

func (m *_EventLog) GetBufferSize() ReadableProperty {
	return m.BufferSize
}

func (m *_EventLog) GetLogBuffer() ReadableProperty {
	return m.LogBuffer
}

func (m *_EventLog) GetRecordCount() WritableProperty {
	return m.RecordCount
}

func (m *_EventLog) GetTotalRecordCount() ReadableProperty {
	return m.TotalRecordCount
}

func (m *_EventLog) GetNotificationThreshold() OptionalProperty {
	return m.NotificationThreshold
}

func (m *_EventLog) GetRecordsSinceNotification() OptionalProperty {
	return m.RecordsSinceNotification
}

func (m *_EventLog) GetLastNotifyRecord() OptionalProperty {
	return m.LastNotifyRecord
}

func (m *_EventLog) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_EventLog) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_EventLog) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_EventLog) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_EventLog) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_EventLog) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_EventLog) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_EventLog) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_EventLog) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_EventLog) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_EventLog) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_EventLog) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_EventLog) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_EventLog) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastEventLog(structType any) EventLog {
	if casted, ok := structType.(EventLog); ok {
		return casted
	}
	if casted, ok := structType.(*EventLog); ok {
		return *casted
	}
	return nil
}

func (m *_EventLog) GetTypeName() string {
	return "EventLog"
}

func (m *_EventLog) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (enable)
	lengthInBits += m.Enable.GetLengthInBits(ctx)

	// Simple field (startTime)
	lengthInBits += m.StartTime.GetLengthInBits(ctx)

	// Simple field (stopTime)
	lengthInBits += m.StopTime.GetLengthInBits(ctx)

	// Simple field (stopWhenFull)
	lengthInBits += m.StopWhenFull.GetLengthInBits(ctx)

	// Simple field (bufferSize)
	lengthInBits += m.BufferSize.GetLengthInBits(ctx)

	// Simple field (logBuffer)
	lengthInBits += m.LogBuffer.GetLengthInBits(ctx)

	// Simple field (recordCount)
	lengthInBits += m.RecordCount.GetLengthInBits(ctx)

	// Simple field (totalRecordCount)
	lengthInBits += m.TotalRecordCount.GetLengthInBits(ctx)

	// Simple field (notificationThreshold)
	lengthInBits += m.NotificationThreshold.GetLengthInBits(ctx)

	// Simple field (recordsSinceNotification)
	lengthInBits += m.RecordsSinceNotification.GetLengthInBits(ctx)

	// Simple field (lastNotifyRecord)
	lengthInBits += m.LastNotifyRecord.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_EventLog) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func EventLogParse(ctx context.Context, theBytes []byte) (EventLog, error) {
	return EventLogParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func EventLogParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (EventLog, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (EventLog, error) {
		return EventLogParseWithBuffer(ctx, readBuffer)
	}
}

func EventLogParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (EventLog, error) {
	v, err := (&_EventLog{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_EventLog) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__eventLog EventLog, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("EventLog"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for EventLog")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	enable, err := ReadSimpleField[WritableProperty](ctx, "enable", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'enable' field"))
	}
	m.Enable = enable

	startTime, err := ReadSimpleField[OptionalProperty](ctx, "startTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'startTime' field"))
	}
	m.StartTime = startTime

	stopTime, err := ReadSimpleField[OptionalProperty](ctx, "stopTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'stopTime' field"))
	}
	m.StopTime = stopTime

	stopWhenFull, err := ReadSimpleField[ReadableProperty](ctx, "stopWhenFull", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'stopWhenFull' field"))
	}
	m.StopWhenFull = stopWhenFull

	bufferSize, err := ReadSimpleField[ReadableProperty](ctx, "bufferSize", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bufferSize' field"))
	}
	m.BufferSize = bufferSize

	logBuffer, err := ReadSimpleField[ReadableProperty](ctx, "logBuffer", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetEventLogRecord")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'logBuffer' field"))
	}
	m.LogBuffer = logBuffer

	recordCount, err := ReadSimpleField[WritableProperty](ctx, "recordCount", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'recordCount' field"))
	}
	m.RecordCount = recordCount

	totalRecordCount, err := ReadSimpleField[ReadableProperty](ctx, "totalRecordCount", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'totalRecordCount' field"))
	}
	m.TotalRecordCount = totalRecordCount

	notificationThreshold, err := ReadSimpleField[OptionalProperty](ctx, "notificationThreshold", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationThreshold' field"))
	}
	m.NotificationThreshold = notificationThreshold

	recordsSinceNotification, err := ReadSimpleField[OptionalProperty](ctx, "recordsSinceNotification", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'recordsSinceNotification' field"))
	}
	m.RecordsSinceNotification = recordsSinceNotification

	lastNotifyRecord, err := ReadSimpleField[OptionalProperty](ctx, "lastNotifyRecord", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastNotifyRecord' field"))
	}
	m.LastNotifyRecord = lastNotifyRecord

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("EventLog"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for EventLog")
	}

	return m, nil
}

func (m *_EventLog) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_EventLog) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("EventLog"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for EventLog")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "enable", m.GetEnable(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'enable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "startTime", m.GetStartTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'startTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "stopTime", m.GetStopTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'stopTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "stopWhenFull", m.GetStopWhenFull(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'stopWhenFull' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "bufferSize", m.GetBufferSize(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bufferSize' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "logBuffer", m.GetLogBuffer(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'logBuffer' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "recordCount", m.GetRecordCount(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'recordCount' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "totalRecordCount", m.GetTotalRecordCount(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'totalRecordCount' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationThreshold", m.GetNotificationThreshold(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationThreshold' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "recordsSinceNotification", m.GetRecordsSinceNotification(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'recordsSinceNotification' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastNotifyRecord", m.GetLastNotifyRecord(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastNotifyRecord' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("EventLog"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for EventLog")
	}
	return nil
}

func (m *_EventLog) IsEventLog() {}

func (m *_EventLog) DeepCopy() any {
	return m.deepCopy()
}

func (m *_EventLog) deepCopy() *_EventLog {
	if m == nil {
		return nil
	}
	_EventLogCopy := &_EventLog{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.Enable.DeepCopy().(WritableProperty),
		m.StartTime.DeepCopy().(OptionalProperty),
		m.StopTime.DeepCopy().(OptionalProperty),
		m.StopWhenFull.DeepCopy().(ReadableProperty),
		m.BufferSize.DeepCopy().(ReadableProperty),
		m.LogBuffer.DeepCopy().(ReadableProperty),
		m.RecordCount.DeepCopy().(WritableProperty),
		m.TotalRecordCount.DeepCopy().(ReadableProperty),
		m.NotificationThreshold.DeepCopy().(OptionalProperty),
		m.RecordsSinceNotification.DeepCopy().(OptionalProperty),
		m.LastNotifyRecord.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _EventLogCopy
}

func (m *_EventLog) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
