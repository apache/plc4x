/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Timer is the corresponding interface of Timer
type Timer interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() OptionalProperty
	// GetTimerState returns TimerState (property field)
	GetTimerState() ReadableProperty
	// GetTimerRunning returns TimerRunning (property field)
	GetTimerRunning() ReadableProperty
	// GetUpdateTime returns UpdateTime (property field)
	GetUpdateTime() OptionalProperty
	// GetLastStateChange returns LastStateChange (property field)
	GetLastStateChange() OptionalProperty
	// GetExpirationTime returns ExpirationTime (property field)
	GetExpirationTime() OptionalProperty
	// GetInitialTimeout returns InitialTimeout (property field)
	GetInitialTimeout() OptionalProperty
	// GetDefaultTimeout returns DefaultTimeout (property field)
	GetDefaultTimeout() OptionalProperty
	// GetMinPresValue returns MinPresValue (property field)
	GetMinPresValue() OptionalProperty
	// GetMaxPresValue returns MaxPresValue (property field)
	GetMaxPresValue() OptionalProperty
	// GetResolution returns Resolution (property field)
	GetResolution() OptionalProperty
	// GetStateChangeValues returns StateChangeValues (property field)
	GetStateChangeValues() OptionalProperty
	// GetListOfObjectPropertyReferences returns ListOfObjectPropertyReferences (property field)
	GetListOfObjectPropertyReferences() OptionalProperty
	// GetPriorityForWriting returns PriorityForWriting (property field)
	GetPriorityForWriting() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetAlarmValues returns AlarmValues (property field)
	GetAlarmValues() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsTimer is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsTimer()
	// CreateBuilder creates a TimerBuilder
	CreateTimerBuilder() TimerBuilder
}

// _Timer is the data-structure of this message
type _Timer struct {
	ObjectIdentifier               ReadableProperty
	ObjectName                     ReadableProperty
	ObjectType                     ReadableProperty
	Description                    OptionalProperty
	PresentValue                   ReadableProperty
	StatusFlags                    ReadableProperty
	EventState                     OptionalProperty
	Reliability                    OptionalProperty
	OutOfService                   OptionalProperty
	TimerState                     ReadableProperty
	TimerRunning                   ReadableProperty
	UpdateTime                     OptionalProperty
	LastStateChange                OptionalProperty
	ExpirationTime                 OptionalProperty
	InitialTimeout                 OptionalProperty
	DefaultTimeout                 OptionalProperty
	MinPresValue                   OptionalProperty
	MaxPresValue                   OptionalProperty
	Resolution                     OptionalProperty
	StateChangeValues              OptionalProperty
	ListOfObjectPropertyReferences OptionalProperty
	PriorityForWriting             OptionalProperty
	EventDetectionEnable           OptionalProperty
	NotificationClass              OptionalProperty
	TimeDelay                      OptionalProperty
	TimeDelayNormal                OptionalProperty
	AlarmValues                    OptionalProperty
	EventEnable                    OptionalProperty
	AckedTransitions               OptionalProperty
	NotifyType                     OptionalProperty
	EventTimeStamps                OptionalProperty
	EventMessageTexts              OptionalProperty
	EventMessageTextsConfig        OptionalProperty
	EventAlgorithmInhibitRef       OptionalProperty
	EventAlgorithmInhibit          OptionalProperty
	ReliabilityEvaluationInhibit   OptionalProperty
	PropertyList                   ReadableProperty
	Tags                           OptionalProperty
	ProfileLocation                OptionalProperty
	ProfileName                    OptionalProperty
}

var _ Timer = (*_Timer)(nil)

// NewTimer factory function for _Timer
func NewTimer(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState OptionalProperty, reliability OptionalProperty, outOfService OptionalProperty, timerState ReadableProperty, timerRunning ReadableProperty, updateTime OptionalProperty, lastStateChange OptionalProperty, expirationTime OptionalProperty, initialTimeout OptionalProperty, defaultTimeout OptionalProperty, minPresValue OptionalProperty, maxPresValue OptionalProperty, resolution OptionalProperty, stateChangeValues OptionalProperty, listOfObjectPropertyReferences OptionalProperty, priorityForWriting OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, alarmValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Timer {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Timer must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Timer must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Timer must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Timer must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for Timer must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Timer must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for Timer must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Timer must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type OptionalProperty for Timer must not be nil")
	}
	if timerState == nil {
		panic("timerState of type ReadableProperty for Timer must not be nil")
	}
	if timerRunning == nil {
		panic("timerRunning of type ReadableProperty for Timer must not be nil")
	}
	if updateTime == nil {
		panic("updateTime of type OptionalProperty for Timer must not be nil")
	}
	if lastStateChange == nil {
		panic("lastStateChange of type OptionalProperty for Timer must not be nil")
	}
	if expirationTime == nil {
		panic("expirationTime of type OptionalProperty for Timer must not be nil")
	}
	if initialTimeout == nil {
		panic("initialTimeout of type OptionalProperty for Timer must not be nil")
	}
	if defaultTimeout == nil {
		panic("defaultTimeout of type OptionalProperty for Timer must not be nil")
	}
	if minPresValue == nil {
		panic("minPresValue of type OptionalProperty for Timer must not be nil")
	}
	if maxPresValue == nil {
		panic("maxPresValue of type OptionalProperty for Timer must not be nil")
	}
	if resolution == nil {
		panic("resolution of type OptionalProperty for Timer must not be nil")
	}
	if stateChangeValues == nil {
		panic("stateChangeValues of type OptionalProperty for Timer must not be nil")
	}
	if listOfObjectPropertyReferences == nil {
		panic("listOfObjectPropertyReferences of type OptionalProperty for Timer must not be nil")
	}
	if priorityForWriting == nil {
		panic("priorityForWriting of type OptionalProperty for Timer must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Timer must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Timer must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for Timer must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for Timer must not be nil")
	}
	if alarmValues == nil {
		panic("alarmValues of type OptionalProperty for Timer must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Timer must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Timer must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Timer must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Timer must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Timer must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Timer must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for Timer must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for Timer must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Timer must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Timer must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Timer must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Timer must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Timer must not be nil")
	}
	return &_Timer{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, PresentValue: presentValue, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, TimerState: timerState, TimerRunning: timerRunning, UpdateTime: updateTime, LastStateChange: lastStateChange, ExpirationTime: expirationTime, InitialTimeout: initialTimeout, DefaultTimeout: defaultTimeout, MinPresValue: minPresValue, MaxPresValue: maxPresValue, Resolution: resolution, StateChangeValues: stateChangeValues, ListOfObjectPropertyReferences: listOfObjectPropertyReferences, PriorityForWriting: priorityForWriting, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, TimeDelay: timeDelay, TimeDelayNormal: timeDelayNormal, AlarmValues: alarmValues, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// TimerBuilder is a builder for Timer
type TimerBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState OptionalProperty, reliability OptionalProperty, outOfService OptionalProperty, timerState ReadableProperty, timerRunning ReadableProperty, updateTime OptionalProperty, lastStateChange OptionalProperty, expirationTime OptionalProperty, initialTimeout OptionalProperty, defaultTimeout OptionalProperty, minPresValue OptionalProperty, maxPresValue OptionalProperty, resolution OptionalProperty, stateChangeValues OptionalProperty, listOfObjectPropertyReferences OptionalProperty, priorityForWriting OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, alarmValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) TimerBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) TimerBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) TimerBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) TimerBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) TimerBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) TimerBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) TimerBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) TimerBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) TimerBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(OptionalProperty) TimerBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithTimerState adds TimerState (property field)
	WithTimerState(ReadableProperty) TimerBuilder
	// WithTimerStateBuilder adds TimerState (property field) which is build by the builder
	WithTimerStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithTimerRunning adds TimerRunning (property field)
	WithTimerRunning(ReadableProperty) TimerBuilder
	// WithTimerRunningBuilder adds TimerRunning (property field) which is build by the builder
	WithTimerRunningBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithUpdateTime adds UpdateTime (property field)
	WithUpdateTime(OptionalProperty) TimerBuilder
	// WithUpdateTimeBuilder adds UpdateTime (property field) which is build by the builder
	WithUpdateTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithLastStateChange adds LastStateChange (property field)
	WithLastStateChange(OptionalProperty) TimerBuilder
	// WithLastStateChangeBuilder adds LastStateChange (property field) which is build by the builder
	WithLastStateChangeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithExpirationTime adds ExpirationTime (property field)
	WithExpirationTime(OptionalProperty) TimerBuilder
	// WithExpirationTimeBuilder adds ExpirationTime (property field) which is build by the builder
	WithExpirationTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithInitialTimeout adds InitialTimeout (property field)
	WithInitialTimeout(OptionalProperty) TimerBuilder
	// WithInitialTimeoutBuilder adds InitialTimeout (property field) which is build by the builder
	WithInitialTimeoutBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithDefaultTimeout adds DefaultTimeout (property field)
	WithDefaultTimeout(OptionalProperty) TimerBuilder
	// WithDefaultTimeoutBuilder adds DefaultTimeout (property field) which is build by the builder
	WithDefaultTimeoutBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithMinPresValue adds MinPresValue (property field)
	WithMinPresValue(OptionalProperty) TimerBuilder
	// WithMinPresValueBuilder adds MinPresValue (property field) which is build by the builder
	WithMinPresValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithMaxPresValue adds MaxPresValue (property field)
	WithMaxPresValue(OptionalProperty) TimerBuilder
	// WithMaxPresValueBuilder adds MaxPresValue (property field) which is build by the builder
	WithMaxPresValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithResolution adds Resolution (property field)
	WithResolution(OptionalProperty) TimerBuilder
	// WithResolutionBuilder adds Resolution (property field) which is build by the builder
	WithResolutionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithStateChangeValues adds StateChangeValues (property field)
	WithStateChangeValues(OptionalProperty) TimerBuilder
	// WithStateChangeValuesBuilder adds StateChangeValues (property field) which is build by the builder
	WithStateChangeValuesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithListOfObjectPropertyReferences adds ListOfObjectPropertyReferences (property field)
	WithListOfObjectPropertyReferences(OptionalProperty) TimerBuilder
	// WithListOfObjectPropertyReferencesBuilder adds ListOfObjectPropertyReferences (property field) which is build by the builder
	WithListOfObjectPropertyReferencesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithPriorityForWriting adds PriorityForWriting (property field)
	WithPriorityForWriting(OptionalProperty) TimerBuilder
	// WithPriorityForWritingBuilder adds PriorityForWriting (property field) which is build by the builder
	WithPriorityForWritingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) TimerBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) TimerBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) TimerBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) TimerBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithAlarmValues adds AlarmValues (property field)
	WithAlarmValues(OptionalProperty) TimerBuilder
	// WithAlarmValuesBuilder adds AlarmValues (property field) which is build by the builder
	WithAlarmValuesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) TimerBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) TimerBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) TimerBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) TimerBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) TimerBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) TimerBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) TimerBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) TimerBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) TimerBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) TimerBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) TimerBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) TimerBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) TimerBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder
	// Build builds the Timer or returns an error if something is wrong
	Build() (Timer, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Timer
}

// NewTimerBuilder() creates a TimerBuilder
func NewTimerBuilder() TimerBuilder {
	return &_TimerBuilder{_Timer: new(_Timer)}
}

type _TimerBuilder struct {
	*_Timer

	err *utils.MultiError
}

var _ (TimerBuilder) = (*_TimerBuilder)(nil)

func (b *_TimerBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState OptionalProperty, reliability OptionalProperty, outOfService OptionalProperty, timerState ReadableProperty, timerRunning ReadableProperty, updateTime OptionalProperty, lastStateChange OptionalProperty, expirationTime OptionalProperty, initialTimeout OptionalProperty, defaultTimeout OptionalProperty, minPresValue OptionalProperty, maxPresValue OptionalProperty, resolution OptionalProperty, stateChangeValues OptionalProperty, listOfObjectPropertyReferences OptionalProperty, priorityForWriting OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, alarmValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) TimerBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithPresentValue(presentValue).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithTimerState(timerState).WithTimerRunning(timerRunning).WithUpdateTime(updateTime).WithLastStateChange(lastStateChange).WithExpirationTime(expirationTime).WithInitialTimeout(initialTimeout).WithDefaultTimeout(defaultTimeout).WithMinPresValue(minPresValue).WithMaxPresValue(maxPresValue).WithResolution(resolution).WithStateChangeValues(stateChangeValues).WithListOfObjectPropertyReferences(listOfObjectPropertyReferences).WithPriorityForWriting(priorityForWriting).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithTimeDelay(timeDelay).WithTimeDelayNormal(timeDelayNormal).WithAlarmValues(alarmValues).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_TimerBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) TimerBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_TimerBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithObjectName(objectName ReadableProperty) TimerBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_TimerBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithObjectType(objectType ReadableProperty) TimerBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_TimerBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithDescription(description OptionalProperty) TimerBuilder {
	b.Description = description
	return b
}

func (b *_TimerBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithPresentValue(presentValue ReadableProperty) TimerBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_TimerBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithStatusFlags(statusFlags ReadableProperty) TimerBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_TimerBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventState(eventState OptionalProperty) TimerBuilder {
	b.EventState = eventState
	return b
}

func (b *_TimerBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithReliability(reliability OptionalProperty) TimerBuilder {
	b.Reliability = reliability
	return b
}

func (b *_TimerBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithOutOfService(outOfService OptionalProperty) TimerBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_TimerBuilder) WithOutOfServiceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.OutOfService.CreateOptionalPropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithTimerState(timerState ReadableProperty) TimerBuilder {
	b.TimerState = timerState
	return b
}

func (b *_TimerBuilder) WithTimerStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.TimerState.CreateReadablePropertyBuilder())
	var err error
	b.TimerState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithTimerRunning(timerRunning ReadableProperty) TimerBuilder {
	b.TimerRunning = timerRunning
	return b
}

func (b *_TimerBuilder) WithTimerRunningBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.TimerRunning.CreateReadablePropertyBuilder())
	var err error
	b.TimerRunning, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithUpdateTime(updateTime OptionalProperty) TimerBuilder {
	b.UpdateTime = updateTime
	return b
}

func (b *_TimerBuilder) WithUpdateTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.UpdateTime.CreateOptionalPropertyBuilder())
	var err error
	b.UpdateTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithLastStateChange(lastStateChange OptionalProperty) TimerBuilder {
	b.LastStateChange = lastStateChange
	return b
}

func (b *_TimerBuilder) WithLastStateChangeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.LastStateChange.CreateOptionalPropertyBuilder())
	var err error
	b.LastStateChange, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithExpirationTime(expirationTime OptionalProperty) TimerBuilder {
	b.ExpirationTime = expirationTime
	return b
}

func (b *_TimerBuilder) WithExpirationTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ExpirationTime.CreateOptionalPropertyBuilder())
	var err error
	b.ExpirationTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithInitialTimeout(initialTimeout OptionalProperty) TimerBuilder {
	b.InitialTimeout = initialTimeout
	return b
}

func (b *_TimerBuilder) WithInitialTimeoutBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.InitialTimeout.CreateOptionalPropertyBuilder())
	var err error
	b.InitialTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithDefaultTimeout(defaultTimeout OptionalProperty) TimerBuilder {
	b.DefaultTimeout = defaultTimeout
	return b
}

func (b *_TimerBuilder) WithDefaultTimeoutBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.DefaultTimeout.CreateOptionalPropertyBuilder())
	var err error
	b.DefaultTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithMinPresValue(minPresValue OptionalProperty) TimerBuilder {
	b.MinPresValue = minPresValue
	return b
}

func (b *_TimerBuilder) WithMinPresValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.MinPresValue.CreateOptionalPropertyBuilder())
	var err error
	b.MinPresValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithMaxPresValue(maxPresValue OptionalProperty) TimerBuilder {
	b.MaxPresValue = maxPresValue
	return b
}

func (b *_TimerBuilder) WithMaxPresValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.MaxPresValue.CreateOptionalPropertyBuilder())
	var err error
	b.MaxPresValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithResolution(resolution OptionalProperty) TimerBuilder {
	b.Resolution = resolution
	return b
}

func (b *_TimerBuilder) WithResolutionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.Resolution.CreateOptionalPropertyBuilder())
	var err error
	b.Resolution, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithStateChangeValues(stateChangeValues OptionalProperty) TimerBuilder {
	b.StateChangeValues = stateChangeValues
	return b
}

func (b *_TimerBuilder) WithStateChangeValuesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.StateChangeValues.CreateOptionalPropertyBuilder())
	var err error
	b.StateChangeValues, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithListOfObjectPropertyReferences(listOfObjectPropertyReferences OptionalProperty) TimerBuilder {
	b.ListOfObjectPropertyReferences = listOfObjectPropertyReferences
	return b
}

func (b *_TimerBuilder) WithListOfObjectPropertyReferencesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ListOfObjectPropertyReferences.CreateOptionalPropertyBuilder())
	var err error
	b.ListOfObjectPropertyReferences, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithPriorityForWriting(priorityForWriting OptionalProperty) TimerBuilder {
	b.PriorityForWriting = priorityForWriting
	return b
}

func (b *_TimerBuilder) WithPriorityForWritingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.PriorityForWriting.CreateOptionalPropertyBuilder())
	var err error
	b.PriorityForWriting, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) TimerBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_TimerBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithNotificationClass(notificationClass OptionalProperty) TimerBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_TimerBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithTimeDelay(timeDelay OptionalProperty) TimerBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_TimerBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) TimerBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_TimerBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithAlarmValues(alarmValues OptionalProperty) TimerBuilder {
	b.AlarmValues = alarmValues
	return b
}

func (b *_TimerBuilder) WithAlarmValuesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.AlarmValues.CreateOptionalPropertyBuilder())
	var err error
	b.AlarmValues, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventEnable(eventEnable OptionalProperty) TimerBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_TimerBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) TimerBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_TimerBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithNotifyType(notifyType OptionalProperty) TimerBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_TimerBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) TimerBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_TimerBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) TimerBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_TimerBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) TimerBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_TimerBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) TimerBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_TimerBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) TimerBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_TimerBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) TimerBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_TimerBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithPropertyList(propertyList ReadableProperty) TimerBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_TimerBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithTags(tags OptionalProperty) TimerBuilder {
	b.Tags = tags
	return b
}

func (b *_TimerBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithProfileLocation(profileLocation OptionalProperty) TimerBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_TimerBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) WithProfileName(profileName OptionalProperty) TimerBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_TimerBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) TimerBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_TimerBuilder) Build() (Timer, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.TimerState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timerState' not set"))
	}
	if b.TimerRunning == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timerRunning' not set"))
	}
	if b.UpdateTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'updateTime' not set"))
	}
	if b.LastStateChange == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastStateChange' not set"))
	}
	if b.ExpirationTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'expirationTime' not set"))
	}
	if b.InitialTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'initialTimeout' not set"))
	}
	if b.DefaultTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'defaultTimeout' not set"))
	}
	if b.MinPresValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'minPresValue' not set"))
	}
	if b.MaxPresValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxPresValue' not set"))
	}
	if b.Resolution == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'resolution' not set"))
	}
	if b.StateChangeValues == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'stateChangeValues' not set"))
	}
	if b.ListOfObjectPropertyReferences == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'listOfObjectPropertyReferences' not set"))
	}
	if b.PriorityForWriting == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'priorityForWriting' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.AlarmValues == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'alarmValues' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Timer.deepCopy(), nil
}

func (b *_TimerBuilder) MustBuild() Timer {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_TimerBuilder) DeepCopy() any {
	_copy := b.CreateTimerBuilder().(*_TimerBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateTimerBuilder creates a TimerBuilder
func (b *_Timer) CreateTimerBuilder() TimerBuilder {
	if b == nil {
		return NewTimerBuilder()
	}
	return &_TimerBuilder{_Timer: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Timer) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Timer) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Timer) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Timer) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Timer) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_Timer) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Timer) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_Timer) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Timer) GetOutOfService() OptionalProperty {
	return m.OutOfService
}

func (m *_Timer) GetTimerState() ReadableProperty {
	return m.TimerState
}

func (m *_Timer) GetTimerRunning() ReadableProperty {
	return m.TimerRunning
}

func (m *_Timer) GetUpdateTime() OptionalProperty {
	return m.UpdateTime
}

func (m *_Timer) GetLastStateChange() OptionalProperty {
	return m.LastStateChange
}

func (m *_Timer) GetExpirationTime() OptionalProperty {
	return m.ExpirationTime
}

func (m *_Timer) GetInitialTimeout() OptionalProperty {
	return m.InitialTimeout
}

func (m *_Timer) GetDefaultTimeout() OptionalProperty {
	return m.DefaultTimeout
}

func (m *_Timer) GetMinPresValue() OptionalProperty {
	return m.MinPresValue
}

func (m *_Timer) GetMaxPresValue() OptionalProperty {
	return m.MaxPresValue
}

func (m *_Timer) GetResolution() OptionalProperty {
	return m.Resolution
}

func (m *_Timer) GetStateChangeValues() OptionalProperty {
	return m.StateChangeValues
}

func (m *_Timer) GetListOfObjectPropertyReferences() OptionalProperty {
	return m.ListOfObjectPropertyReferences
}

func (m *_Timer) GetPriorityForWriting() OptionalProperty {
	return m.PriorityForWriting
}

func (m *_Timer) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Timer) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Timer) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_Timer) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_Timer) GetAlarmValues() OptionalProperty {
	return m.AlarmValues
}

func (m *_Timer) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Timer) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Timer) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Timer) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Timer) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Timer) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Timer) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_Timer) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_Timer) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Timer) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Timer) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Timer) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Timer) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastTimer(structType any) Timer {
	if casted, ok := structType.(Timer); ok {
		return casted
	}
	if casted, ok := structType.(*Timer); ok {
		return *casted
	}
	return nil
}

func (m *_Timer) GetTypeName() string {
	return "Timer"
}

func (m *_Timer) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (timerState)
	lengthInBits += m.TimerState.GetLengthInBits(ctx)

	// Simple field (timerRunning)
	lengthInBits += m.TimerRunning.GetLengthInBits(ctx)

	// Simple field (updateTime)
	lengthInBits += m.UpdateTime.GetLengthInBits(ctx)

	// Simple field (lastStateChange)
	lengthInBits += m.LastStateChange.GetLengthInBits(ctx)

	// Simple field (expirationTime)
	lengthInBits += m.ExpirationTime.GetLengthInBits(ctx)

	// Simple field (initialTimeout)
	lengthInBits += m.InitialTimeout.GetLengthInBits(ctx)

	// Simple field (defaultTimeout)
	lengthInBits += m.DefaultTimeout.GetLengthInBits(ctx)

	// Simple field (minPresValue)
	lengthInBits += m.MinPresValue.GetLengthInBits(ctx)

	// Simple field (maxPresValue)
	lengthInBits += m.MaxPresValue.GetLengthInBits(ctx)

	// Simple field (resolution)
	lengthInBits += m.Resolution.GetLengthInBits(ctx)

	// Simple field (stateChangeValues)
	lengthInBits += m.StateChangeValues.GetLengthInBits(ctx)

	// Simple field (listOfObjectPropertyReferences)
	lengthInBits += m.ListOfObjectPropertyReferences.GetLengthInBits(ctx)

	// Simple field (priorityForWriting)
	lengthInBits += m.PriorityForWriting.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (alarmValues)
	lengthInBits += m.AlarmValues.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Timer) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func TimerParse(ctx context.Context, theBytes []byte) (Timer, error) {
	return TimerParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func TimerParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Timer, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Timer, error) {
		return TimerParseWithBuffer(ctx, readBuffer)
	}
}

func TimerParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Timer, error) {
	v, err := (&_Timer{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Timer) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__timer Timer, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Timer"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Timer")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[OptionalProperty](ctx, "outOfService", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	timerState, err := ReadSimpleField[ReadableProperty](ctx, "timerState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetTimerState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timerState' field"))
	}
	m.TimerState = timerState

	timerRunning, err := ReadSimpleField[ReadableProperty](ctx, "timerRunning", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timerRunning' field"))
	}
	m.TimerRunning = timerRunning

	updateTime, err := ReadSimpleField[OptionalProperty](ctx, "updateTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'updateTime' field"))
	}
	m.UpdateTime = updateTime

	lastStateChange, err := ReadSimpleField[OptionalProperty](ctx, "lastStateChange", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetTimerTransition")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastStateChange' field"))
	}
	m.LastStateChange = lastStateChange

	expirationTime, err := ReadSimpleField[OptionalProperty](ctx, "expirationTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'expirationTime' field"))
	}
	m.ExpirationTime = expirationTime

	initialTimeout, err := ReadSimpleField[OptionalProperty](ctx, "initialTimeout", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'initialTimeout' field"))
	}
	m.InitialTimeout = initialTimeout

	defaultTimeout, err := ReadSimpleField[OptionalProperty](ctx, "defaultTimeout", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'defaultTimeout' field"))
	}
	m.DefaultTimeout = defaultTimeout

	minPresValue, err := ReadSimpleField[OptionalProperty](ctx, "minPresValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'minPresValue' field"))
	}
	m.MinPresValue = minPresValue

	maxPresValue, err := ReadSimpleField[OptionalProperty](ctx, "maxPresValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxPresValue' field"))
	}
	m.MaxPresValue = maxPresValue

	resolution, err := ReadSimpleField[OptionalProperty](ctx, "resolution", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'resolution' field"))
	}
	m.Resolution = resolution

	stateChangeValues, err := ReadSimpleField[OptionalProperty](ctx, "stateChangeValues", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[7] of BACnetTimerStateChangeValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'stateChangeValues' field"))
	}
	m.StateChangeValues = stateChangeValues

	listOfObjectPropertyReferences, err := ReadSimpleField[OptionalProperty](ctx, "listOfObjectPropertyReferences", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'listOfObjectPropertyReferences' field"))
	}
	m.ListOfObjectPropertyReferences = listOfObjectPropertyReferences

	priorityForWriting, err := ReadSimpleField[OptionalProperty](ctx, "priorityForWriting", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned(1..16)")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'priorityForWriting' field"))
	}
	m.PriorityForWriting = priorityForWriting

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	alarmValues, err := ReadSimpleField[OptionalProperty](ctx, "alarmValues", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetTimerState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'alarmValues' field"))
	}
	m.AlarmValues = alarmValues

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Timer"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Timer")
	}

	return m, nil
}

func (m *_Timer) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Timer) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Timer"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Timer")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "timerState", m.GetTimerState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timerState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "timerRunning", m.GetTimerRunning(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timerRunning' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "updateTime", m.GetUpdateTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'updateTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastStateChange", m.GetLastStateChange(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastStateChange' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "expirationTime", m.GetExpirationTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'expirationTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "initialTimeout", m.GetInitialTimeout(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'initialTimeout' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "defaultTimeout", m.GetDefaultTimeout(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'defaultTimeout' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "minPresValue", m.GetMinPresValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'minPresValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxPresValue", m.GetMaxPresValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxPresValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "resolution", m.GetResolution(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'resolution' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "stateChangeValues", m.GetStateChangeValues(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'stateChangeValues' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "listOfObjectPropertyReferences", m.GetListOfObjectPropertyReferences(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'listOfObjectPropertyReferences' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "priorityForWriting", m.GetPriorityForWriting(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'priorityForWriting' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "alarmValues", m.GetAlarmValues(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'alarmValues' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Timer"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Timer")
	}
	return nil
}

func (m *_Timer) IsTimer() {}

func (m *_Timer) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Timer) deepCopy() *_Timer {
	if m == nil {
		return nil
	}
	_TimerCopy := &_Timer{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(OptionalProperty),
		m.TimerState.DeepCopy().(ReadableProperty),
		m.TimerRunning.DeepCopy().(ReadableProperty),
		m.UpdateTime.DeepCopy().(OptionalProperty),
		m.LastStateChange.DeepCopy().(OptionalProperty),
		m.ExpirationTime.DeepCopy().(OptionalProperty),
		m.InitialTimeout.DeepCopy().(OptionalProperty),
		m.DefaultTimeout.DeepCopy().(OptionalProperty),
		m.MinPresValue.DeepCopy().(OptionalProperty),
		m.MaxPresValue.DeepCopy().(OptionalProperty),
		m.Resolution.DeepCopy().(OptionalProperty),
		m.StateChangeValues.DeepCopy().(OptionalProperty),
		m.ListOfObjectPropertyReferences.DeepCopy().(OptionalProperty),
		m.PriorityForWriting.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.AlarmValues.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _TimerCopy
}

func (m *_Timer) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
