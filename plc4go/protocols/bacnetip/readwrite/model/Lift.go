/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Lift is the corresponding interface of Lift
type Lift interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetElevatorGroup returns ElevatorGroup (property field)
	GetElevatorGroup() ReadableProperty
	// GetGroupID returns GroupID (property field)
	GetGroupID() ReadableProperty
	// GetInstallationID returns InstallationID (property field)
	GetInstallationID() ReadableProperty
	// GetFloorText returns FloorText (property field)
	GetFloorText() OptionalProperty
	// GetCarDoorText returns CarDoorText (property field)
	GetCarDoorText() OptionalProperty
	// GetAssignedLandingCalls returns AssignedLandingCalls (property field)
	GetAssignedLandingCalls() OptionalProperty
	// GetMakingCarCall returns MakingCarCall (property field)
	GetMakingCarCall() OptionalProperty
	// GetRegisteredCarCall returns RegisteredCarCall (property field)
	GetRegisteredCarCall() OptionalProperty
	// GetCarPosition returns CarPosition (property field)
	GetCarPosition() ReadableProperty
	// GetCarMovingDirection returns CarMovingDirection (property field)
	GetCarMovingDirection() ReadableProperty
	// GetCarAssignedDirection returns CarAssignedDirection (property field)
	GetCarAssignedDirection() OptionalProperty
	// GetCarDoorStatus returns CarDoorStatus (property field)
	GetCarDoorStatus() ReadableProperty
	// GetCarDoorCommand returns CarDoorCommand (property field)
	GetCarDoorCommand() OptionalProperty
	// GetCarDoorZone returns CarDoorZone (property field)
	GetCarDoorZone() OptionalProperty
	// GetCarMode returns CarMode (property field)
	GetCarMode() OptionalProperty
	// GetCarLoad returns CarLoad (property field)
	GetCarLoad() OptionalProperty
	// GetCarLoadUnits returns CarLoadUnits (property field)
	GetCarLoadUnits() OptionalProperty
	// GetNextStoppingFloor returns NextStoppingFloor (property field)
	GetNextStoppingFloor() OptionalProperty
	// GetPassengerAlarm returns PassengerAlarm (property field)
	GetPassengerAlarm() ReadableProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetEnergyMeter returns EnergyMeter (property field)
	GetEnergyMeter() OptionalProperty
	// GetEnergyMeterRef returns EnergyMeterRef (property field)
	GetEnergyMeterRef() OptionalProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetCarDriveStatus returns CarDriveStatus (property field)
	GetCarDriveStatus() OptionalProperty
	// GetFaultSignals returns FaultSignals (property field)
	GetFaultSignals() ReadableProperty
	// GetLandingDoorStatus returns LandingDoorStatus (property field)
	GetLandingDoorStatus() OptionalProperty
	// GetHigherDeck returns HigherDeck (property field)
	GetHigherDeck() OptionalProperty
	// GetLowerDeck returns LowerDeck (property field)
	GetLowerDeck() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsLift is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsLift()
	// CreateBuilder creates a LiftBuilder
	CreateLiftBuilder() LiftBuilder
}

// _Lift is the data-structure of this message
type _Lift struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	StatusFlags                  ReadableProperty
	ElevatorGroup                ReadableProperty
	GroupID                      ReadableProperty
	InstallationID               ReadableProperty
	FloorText                    OptionalProperty
	CarDoorText                  OptionalProperty
	AssignedLandingCalls         OptionalProperty
	MakingCarCall                OptionalProperty
	RegisteredCarCall            OptionalProperty
	CarPosition                  ReadableProperty
	CarMovingDirection           ReadableProperty
	CarAssignedDirection         OptionalProperty
	CarDoorStatus                ReadableProperty
	CarDoorCommand               OptionalProperty
	CarDoorZone                  OptionalProperty
	CarMode                      OptionalProperty
	CarLoad                      OptionalProperty
	CarLoadUnits                 OptionalProperty
	NextStoppingFloor            OptionalProperty
	PassengerAlarm               ReadableProperty
	TimeDelay                    OptionalProperty
	TimeDelayNormal              OptionalProperty
	EnergyMeter                  OptionalProperty
	EnergyMeterRef               OptionalProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	CarDriveStatus               OptionalProperty
	FaultSignals                 ReadableProperty
	LandingDoorStatus            OptionalProperty
	HigherDeck                   OptionalProperty
	LowerDeck                    OptionalProperty
	EventDetectionEnable         OptionalProperty
	NotificationClass            OptionalProperty
	EventEnable                  OptionalProperty
	EventState                   OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ Lift = (*_Lift)(nil)

// NewLift factory function for _Lift
func NewLift(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, elevatorGroup ReadableProperty, groupID ReadableProperty, installationID ReadableProperty, floorText OptionalProperty, carDoorText OptionalProperty, assignedLandingCalls OptionalProperty, makingCarCall OptionalProperty, registeredCarCall OptionalProperty, carPosition ReadableProperty, carMovingDirection ReadableProperty, carAssignedDirection OptionalProperty, carDoorStatus ReadableProperty, carDoorCommand OptionalProperty, carDoorZone OptionalProperty, carMode OptionalProperty, carLoad OptionalProperty, carLoadUnits OptionalProperty, nextStoppingFloor OptionalProperty, passengerAlarm ReadableProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, energyMeter OptionalProperty, energyMeterRef OptionalProperty, reliability OptionalProperty, outOfService ReadableProperty, carDriveStatus OptionalProperty, faultSignals ReadableProperty, landingDoorStatus OptionalProperty, higherDeck OptionalProperty, lowerDeck OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Lift {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Lift must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Lift must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Lift must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Lift must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Lift must not be nil")
	}
	if elevatorGroup == nil {
		panic("elevatorGroup of type ReadableProperty for Lift must not be nil")
	}
	if groupID == nil {
		panic("groupID of type ReadableProperty for Lift must not be nil")
	}
	if installationID == nil {
		panic("installationID of type ReadableProperty for Lift must not be nil")
	}
	if floorText == nil {
		panic("floorText of type OptionalProperty for Lift must not be nil")
	}
	if carDoorText == nil {
		panic("carDoorText of type OptionalProperty for Lift must not be nil")
	}
	if assignedLandingCalls == nil {
		panic("assignedLandingCalls of type OptionalProperty for Lift must not be nil")
	}
	if makingCarCall == nil {
		panic("makingCarCall of type OptionalProperty for Lift must not be nil")
	}
	if registeredCarCall == nil {
		panic("registeredCarCall of type OptionalProperty for Lift must not be nil")
	}
	if carPosition == nil {
		panic("carPosition of type ReadableProperty for Lift must not be nil")
	}
	if carMovingDirection == nil {
		panic("carMovingDirection of type ReadableProperty for Lift must not be nil")
	}
	if carAssignedDirection == nil {
		panic("carAssignedDirection of type OptionalProperty for Lift must not be nil")
	}
	if carDoorStatus == nil {
		panic("carDoorStatus of type ReadableProperty for Lift must not be nil")
	}
	if carDoorCommand == nil {
		panic("carDoorCommand of type OptionalProperty for Lift must not be nil")
	}
	if carDoorZone == nil {
		panic("carDoorZone of type OptionalProperty for Lift must not be nil")
	}
	if carMode == nil {
		panic("carMode of type OptionalProperty for Lift must not be nil")
	}
	if carLoad == nil {
		panic("carLoad of type OptionalProperty for Lift must not be nil")
	}
	if carLoadUnits == nil {
		panic("carLoadUnits of type OptionalProperty for Lift must not be nil")
	}
	if nextStoppingFloor == nil {
		panic("nextStoppingFloor of type OptionalProperty for Lift must not be nil")
	}
	if passengerAlarm == nil {
		panic("passengerAlarm of type ReadableProperty for Lift must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for Lift must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for Lift must not be nil")
	}
	if energyMeter == nil {
		panic("energyMeter of type OptionalProperty for Lift must not be nil")
	}
	if energyMeterRef == nil {
		panic("energyMeterRef of type OptionalProperty for Lift must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Lift must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for Lift must not be nil")
	}
	if carDriveStatus == nil {
		panic("carDriveStatus of type OptionalProperty for Lift must not be nil")
	}
	if faultSignals == nil {
		panic("faultSignals of type ReadableProperty for Lift must not be nil")
	}
	if landingDoorStatus == nil {
		panic("landingDoorStatus of type OptionalProperty for Lift must not be nil")
	}
	if higherDeck == nil {
		panic("higherDeck of type OptionalProperty for Lift must not be nil")
	}
	if lowerDeck == nil {
		panic("lowerDeck of type OptionalProperty for Lift must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Lift must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Lift must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Lift must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for Lift must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Lift must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Lift must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Lift must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Lift must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Lift must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for Lift must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for Lift must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Lift must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Lift must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Lift must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Lift must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Lift must not be nil")
	}
	return &_Lift{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, StatusFlags: statusFlags, ElevatorGroup: elevatorGroup, GroupID: groupID, InstallationID: installationID, FloorText: floorText, CarDoorText: carDoorText, AssignedLandingCalls: assignedLandingCalls, MakingCarCall: makingCarCall, RegisteredCarCall: registeredCarCall, CarPosition: carPosition, CarMovingDirection: carMovingDirection, CarAssignedDirection: carAssignedDirection, CarDoorStatus: carDoorStatus, CarDoorCommand: carDoorCommand, CarDoorZone: carDoorZone, CarMode: carMode, CarLoad: carLoad, CarLoadUnits: carLoadUnits, NextStoppingFloor: nextStoppingFloor, PassengerAlarm: passengerAlarm, TimeDelay: timeDelay, TimeDelayNormal: timeDelayNormal, EnergyMeter: energyMeter, EnergyMeterRef: energyMeterRef, Reliability: reliability, OutOfService: outOfService, CarDriveStatus: carDriveStatus, FaultSignals: faultSignals, LandingDoorStatus: landingDoorStatus, HigherDeck: higherDeck, LowerDeck: lowerDeck, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, EventState: eventState, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// LiftBuilder is a builder for Lift
type LiftBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, elevatorGroup ReadableProperty, groupID ReadableProperty, installationID ReadableProperty, floorText OptionalProperty, carDoorText OptionalProperty, assignedLandingCalls OptionalProperty, makingCarCall OptionalProperty, registeredCarCall OptionalProperty, carPosition ReadableProperty, carMovingDirection ReadableProperty, carAssignedDirection OptionalProperty, carDoorStatus ReadableProperty, carDoorCommand OptionalProperty, carDoorZone OptionalProperty, carMode OptionalProperty, carLoad OptionalProperty, carLoadUnits OptionalProperty, nextStoppingFloor OptionalProperty, passengerAlarm ReadableProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, energyMeter OptionalProperty, energyMeterRef OptionalProperty, reliability OptionalProperty, outOfService ReadableProperty, carDriveStatus OptionalProperty, faultSignals ReadableProperty, landingDoorStatus OptionalProperty, higherDeck OptionalProperty, lowerDeck OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LiftBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) LiftBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) LiftBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) LiftBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) LiftBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) LiftBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithElevatorGroup adds ElevatorGroup (property field)
	WithElevatorGroup(ReadableProperty) LiftBuilder
	// WithElevatorGroupBuilder adds ElevatorGroup (property field) which is build by the builder
	WithElevatorGroupBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithGroupID adds GroupID (property field)
	WithGroupID(ReadableProperty) LiftBuilder
	// WithGroupIDBuilder adds GroupID (property field) which is build by the builder
	WithGroupIDBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithInstallationID adds InstallationID (property field)
	WithInstallationID(ReadableProperty) LiftBuilder
	// WithInstallationIDBuilder adds InstallationID (property field) which is build by the builder
	WithInstallationIDBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithFloorText adds FloorText (property field)
	WithFloorText(OptionalProperty) LiftBuilder
	// WithFloorTextBuilder adds FloorText (property field) which is build by the builder
	WithFloorTextBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarDoorText adds CarDoorText (property field)
	WithCarDoorText(OptionalProperty) LiftBuilder
	// WithCarDoorTextBuilder adds CarDoorText (property field) which is build by the builder
	WithCarDoorTextBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithAssignedLandingCalls adds AssignedLandingCalls (property field)
	WithAssignedLandingCalls(OptionalProperty) LiftBuilder
	// WithAssignedLandingCallsBuilder adds AssignedLandingCalls (property field) which is build by the builder
	WithAssignedLandingCallsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithMakingCarCall adds MakingCarCall (property field)
	WithMakingCarCall(OptionalProperty) LiftBuilder
	// WithMakingCarCallBuilder adds MakingCarCall (property field) which is build by the builder
	WithMakingCarCallBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithRegisteredCarCall adds RegisteredCarCall (property field)
	WithRegisteredCarCall(OptionalProperty) LiftBuilder
	// WithRegisteredCarCallBuilder adds RegisteredCarCall (property field) which is build by the builder
	WithRegisteredCarCallBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarPosition adds CarPosition (property field)
	WithCarPosition(ReadableProperty) LiftBuilder
	// WithCarPositionBuilder adds CarPosition (property field) which is build by the builder
	WithCarPositionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithCarMovingDirection adds CarMovingDirection (property field)
	WithCarMovingDirection(ReadableProperty) LiftBuilder
	// WithCarMovingDirectionBuilder adds CarMovingDirection (property field) which is build by the builder
	WithCarMovingDirectionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithCarAssignedDirection adds CarAssignedDirection (property field)
	WithCarAssignedDirection(OptionalProperty) LiftBuilder
	// WithCarAssignedDirectionBuilder adds CarAssignedDirection (property field) which is build by the builder
	WithCarAssignedDirectionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarDoorStatus adds CarDoorStatus (property field)
	WithCarDoorStatus(ReadableProperty) LiftBuilder
	// WithCarDoorStatusBuilder adds CarDoorStatus (property field) which is build by the builder
	WithCarDoorStatusBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithCarDoorCommand adds CarDoorCommand (property field)
	WithCarDoorCommand(OptionalProperty) LiftBuilder
	// WithCarDoorCommandBuilder adds CarDoorCommand (property field) which is build by the builder
	WithCarDoorCommandBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarDoorZone adds CarDoorZone (property field)
	WithCarDoorZone(OptionalProperty) LiftBuilder
	// WithCarDoorZoneBuilder adds CarDoorZone (property field) which is build by the builder
	WithCarDoorZoneBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarMode adds CarMode (property field)
	WithCarMode(OptionalProperty) LiftBuilder
	// WithCarModeBuilder adds CarMode (property field) which is build by the builder
	WithCarModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarLoad adds CarLoad (property field)
	WithCarLoad(OptionalProperty) LiftBuilder
	// WithCarLoadBuilder adds CarLoad (property field) which is build by the builder
	WithCarLoadBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithCarLoadUnits adds CarLoadUnits (property field)
	WithCarLoadUnits(OptionalProperty) LiftBuilder
	// WithCarLoadUnitsBuilder adds CarLoadUnits (property field) which is build by the builder
	WithCarLoadUnitsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithNextStoppingFloor adds NextStoppingFloor (property field)
	WithNextStoppingFloor(OptionalProperty) LiftBuilder
	// WithNextStoppingFloorBuilder adds NextStoppingFloor (property field) which is build by the builder
	WithNextStoppingFloorBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithPassengerAlarm adds PassengerAlarm (property field)
	WithPassengerAlarm(ReadableProperty) LiftBuilder
	// WithPassengerAlarmBuilder adds PassengerAlarm (property field) which is build by the builder
	WithPassengerAlarmBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) LiftBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) LiftBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEnergyMeter adds EnergyMeter (property field)
	WithEnergyMeter(OptionalProperty) LiftBuilder
	// WithEnergyMeterBuilder adds EnergyMeter (property field) which is build by the builder
	WithEnergyMeterBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEnergyMeterRef adds EnergyMeterRef (property field)
	WithEnergyMeterRef(OptionalProperty) LiftBuilder
	// WithEnergyMeterRefBuilder adds EnergyMeterRef (property field) which is build by the builder
	WithEnergyMeterRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) LiftBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) LiftBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithCarDriveStatus adds CarDriveStatus (property field)
	WithCarDriveStatus(OptionalProperty) LiftBuilder
	// WithCarDriveStatusBuilder adds CarDriveStatus (property field) which is build by the builder
	WithCarDriveStatusBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithFaultSignals adds FaultSignals (property field)
	WithFaultSignals(ReadableProperty) LiftBuilder
	// WithFaultSignalsBuilder adds FaultSignals (property field) which is build by the builder
	WithFaultSignalsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithLandingDoorStatus adds LandingDoorStatus (property field)
	WithLandingDoorStatus(OptionalProperty) LiftBuilder
	// WithLandingDoorStatusBuilder adds LandingDoorStatus (property field) which is build by the builder
	WithLandingDoorStatusBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithHigherDeck adds HigherDeck (property field)
	WithHigherDeck(OptionalProperty) LiftBuilder
	// WithHigherDeckBuilder adds HigherDeck (property field) which is build by the builder
	WithHigherDeckBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithLowerDeck adds LowerDeck (property field)
	WithLowerDeck(OptionalProperty) LiftBuilder
	// WithLowerDeckBuilder adds LowerDeck (property field) which is build by the builder
	WithLowerDeckBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) LiftBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) LiftBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) LiftBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) LiftBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) LiftBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) LiftBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) LiftBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) LiftBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) LiftBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) LiftBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) LiftBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) LiftBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) LiftBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) LiftBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) LiftBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) LiftBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder
	// Build builds the Lift or returns an error if something is wrong
	Build() (Lift, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Lift
}

// NewLiftBuilder() creates a LiftBuilder
func NewLiftBuilder() LiftBuilder {
	return &_LiftBuilder{_Lift: new(_Lift)}
}

type _LiftBuilder struct {
	*_Lift

	err *utils.MultiError
}

var _ (LiftBuilder) = (*_LiftBuilder)(nil)

func (b *_LiftBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, elevatorGroup ReadableProperty, groupID ReadableProperty, installationID ReadableProperty, floorText OptionalProperty, carDoorText OptionalProperty, assignedLandingCalls OptionalProperty, makingCarCall OptionalProperty, registeredCarCall OptionalProperty, carPosition ReadableProperty, carMovingDirection ReadableProperty, carAssignedDirection OptionalProperty, carDoorStatus ReadableProperty, carDoorCommand OptionalProperty, carDoorZone OptionalProperty, carMode OptionalProperty, carLoad OptionalProperty, carLoadUnits OptionalProperty, nextStoppingFloor OptionalProperty, passengerAlarm ReadableProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, energyMeter OptionalProperty, energyMeterRef OptionalProperty, reliability OptionalProperty, outOfService ReadableProperty, carDriveStatus OptionalProperty, faultSignals ReadableProperty, landingDoorStatus OptionalProperty, higherDeck OptionalProperty, lowerDeck OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LiftBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithStatusFlags(statusFlags).WithElevatorGroup(elevatorGroup).WithGroupID(groupID).WithInstallationID(installationID).WithFloorText(floorText).WithCarDoorText(carDoorText).WithAssignedLandingCalls(assignedLandingCalls).WithMakingCarCall(makingCarCall).WithRegisteredCarCall(registeredCarCall).WithCarPosition(carPosition).WithCarMovingDirection(carMovingDirection).WithCarAssignedDirection(carAssignedDirection).WithCarDoorStatus(carDoorStatus).WithCarDoorCommand(carDoorCommand).WithCarDoorZone(carDoorZone).WithCarMode(carMode).WithCarLoad(carLoad).WithCarLoadUnits(carLoadUnits).WithNextStoppingFloor(nextStoppingFloor).WithPassengerAlarm(passengerAlarm).WithTimeDelay(timeDelay).WithTimeDelayNormal(timeDelayNormal).WithEnergyMeter(energyMeter).WithEnergyMeterRef(energyMeterRef).WithReliability(reliability).WithOutOfService(outOfService).WithCarDriveStatus(carDriveStatus).WithFaultSignals(faultSignals).WithLandingDoorStatus(landingDoorStatus).WithHigherDeck(higherDeck).WithLowerDeck(lowerDeck).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithEventState(eventState).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_LiftBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) LiftBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_LiftBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithObjectName(objectName ReadableProperty) LiftBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_LiftBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithObjectType(objectType ReadableProperty) LiftBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_LiftBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithDescription(description OptionalProperty) LiftBuilder {
	b.Description = description
	return b
}

func (b *_LiftBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithStatusFlags(statusFlags ReadableProperty) LiftBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_LiftBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithElevatorGroup(elevatorGroup ReadableProperty) LiftBuilder {
	b.ElevatorGroup = elevatorGroup
	return b
}

func (b *_LiftBuilder) WithElevatorGroupBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ElevatorGroup.CreateReadablePropertyBuilder())
	var err error
	b.ElevatorGroup, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithGroupID(groupID ReadableProperty) LiftBuilder {
	b.GroupID = groupID
	return b
}

func (b *_LiftBuilder) WithGroupIDBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.GroupID.CreateReadablePropertyBuilder())
	var err error
	b.GroupID, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithInstallationID(installationID ReadableProperty) LiftBuilder {
	b.InstallationID = installationID
	return b
}

func (b *_LiftBuilder) WithInstallationIDBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.InstallationID.CreateReadablePropertyBuilder())
	var err error
	b.InstallationID, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithFloorText(floorText OptionalProperty) LiftBuilder {
	b.FloorText = floorText
	return b
}

func (b *_LiftBuilder) WithFloorTextBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.FloorText.CreateOptionalPropertyBuilder())
	var err error
	b.FloorText, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarDoorText(carDoorText OptionalProperty) LiftBuilder {
	b.CarDoorText = carDoorText
	return b
}

func (b *_LiftBuilder) WithCarDoorTextBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarDoorText.CreateOptionalPropertyBuilder())
	var err error
	b.CarDoorText, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithAssignedLandingCalls(assignedLandingCalls OptionalProperty) LiftBuilder {
	b.AssignedLandingCalls = assignedLandingCalls
	return b
}

func (b *_LiftBuilder) WithAssignedLandingCallsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.AssignedLandingCalls.CreateOptionalPropertyBuilder())
	var err error
	b.AssignedLandingCalls, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithMakingCarCall(makingCarCall OptionalProperty) LiftBuilder {
	b.MakingCarCall = makingCarCall
	return b
}

func (b *_LiftBuilder) WithMakingCarCallBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.MakingCarCall.CreateOptionalPropertyBuilder())
	var err error
	b.MakingCarCall, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithRegisteredCarCall(registeredCarCall OptionalProperty) LiftBuilder {
	b.RegisteredCarCall = registeredCarCall
	return b
}

func (b *_LiftBuilder) WithRegisteredCarCallBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.RegisteredCarCall.CreateOptionalPropertyBuilder())
	var err error
	b.RegisteredCarCall, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarPosition(carPosition ReadableProperty) LiftBuilder {
	b.CarPosition = carPosition
	return b
}

func (b *_LiftBuilder) WithCarPositionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarPosition.CreateReadablePropertyBuilder())
	var err error
	b.CarPosition, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarMovingDirection(carMovingDirection ReadableProperty) LiftBuilder {
	b.CarMovingDirection = carMovingDirection
	return b
}

func (b *_LiftBuilder) WithCarMovingDirectionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarMovingDirection.CreateReadablePropertyBuilder())
	var err error
	b.CarMovingDirection, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarAssignedDirection(carAssignedDirection OptionalProperty) LiftBuilder {
	b.CarAssignedDirection = carAssignedDirection
	return b
}

func (b *_LiftBuilder) WithCarAssignedDirectionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarAssignedDirection.CreateOptionalPropertyBuilder())
	var err error
	b.CarAssignedDirection, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarDoorStatus(carDoorStatus ReadableProperty) LiftBuilder {
	b.CarDoorStatus = carDoorStatus
	return b
}

func (b *_LiftBuilder) WithCarDoorStatusBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarDoorStatus.CreateReadablePropertyBuilder())
	var err error
	b.CarDoorStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarDoorCommand(carDoorCommand OptionalProperty) LiftBuilder {
	b.CarDoorCommand = carDoorCommand
	return b
}

func (b *_LiftBuilder) WithCarDoorCommandBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarDoorCommand.CreateOptionalPropertyBuilder())
	var err error
	b.CarDoorCommand, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarDoorZone(carDoorZone OptionalProperty) LiftBuilder {
	b.CarDoorZone = carDoorZone
	return b
}

func (b *_LiftBuilder) WithCarDoorZoneBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarDoorZone.CreateOptionalPropertyBuilder())
	var err error
	b.CarDoorZone, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarMode(carMode OptionalProperty) LiftBuilder {
	b.CarMode = carMode
	return b
}

func (b *_LiftBuilder) WithCarModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarMode.CreateOptionalPropertyBuilder())
	var err error
	b.CarMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarLoad(carLoad OptionalProperty) LiftBuilder {
	b.CarLoad = carLoad
	return b
}

func (b *_LiftBuilder) WithCarLoadBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarLoad.CreateOptionalPropertyBuilder())
	var err error
	b.CarLoad, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarLoadUnits(carLoadUnits OptionalProperty) LiftBuilder {
	b.CarLoadUnits = carLoadUnits
	return b
}

func (b *_LiftBuilder) WithCarLoadUnitsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarLoadUnits.CreateOptionalPropertyBuilder())
	var err error
	b.CarLoadUnits, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithNextStoppingFloor(nextStoppingFloor OptionalProperty) LiftBuilder {
	b.NextStoppingFloor = nextStoppingFloor
	return b
}

func (b *_LiftBuilder) WithNextStoppingFloorBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.NextStoppingFloor.CreateOptionalPropertyBuilder())
	var err error
	b.NextStoppingFloor, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithPassengerAlarm(passengerAlarm ReadableProperty) LiftBuilder {
	b.PassengerAlarm = passengerAlarm
	return b
}

func (b *_LiftBuilder) WithPassengerAlarmBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.PassengerAlarm.CreateReadablePropertyBuilder())
	var err error
	b.PassengerAlarm, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithTimeDelay(timeDelay OptionalProperty) LiftBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_LiftBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) LiftBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_LiftBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEnergyMeter(energyMeter OptionalProperty) LiftBuilder {
	b.EnergyMeter = energyMeter
	return b
}

func (b *_LiftBuilder) WithEnergyMeterBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EnergyMeter.CreateOptionalPropertyBuilder())
	var err error
	b.EnergyMeter, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEnergyMeterRef(energyMeterRef OptionalProperty) LiftBuilder {
	b.EnergyMeterRef = energyMeterRef
	return b
}

func (b *_LiftBuilder) WithEnergyMeterRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EnergyMeterRef.CreateOptionalPropertyBuilder())
	var err error
	b.EnergyMeterRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithReliability(reliability OptionalProperty) LiftBuilder {
	b.Reliability = reliability
	return b
}

func (b *_LiftBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithOutOfService(outOfService ReadableProperty) LiftBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_LiftBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithCarDriveStatus(carDriveStatus OptionalProperty) LiftBuilder {
	b.CarDriveStatus = carDriveStatus
	return b
}

func (b *_LiftBuilder) WithCarDriveStatusBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.CarDriveStatus.CreateOptionalPropertyBuilder())
	var err error
	b.CarDriveStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithFaultSignals(faultSignals ReadableProperty) LiftBuilder {
	b.FaultSignals = faultSignals
	return b
}

func (b *_LiftBuilder) WithFaultSignalsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.FaultSignals.CreateReadablePropertyBuilder())
	var err error
	b.FaultSignals, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithLandingDoorStatus(landingDoorStatus OptionalProperty) LiftBuilder {
	b.LandingDoorStatus = landingDoorStatus
	return b
}

func (b *_LiftBuilder) WithLandingDoorStatusBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.LandingDoorStatus.CreateOptionalPropertyBuilder())
	var err error
	b.LandingDoorStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithHigherDeck(higherDeck OptionalProperty) LiftBuilder {
	b.HigherDeck = higherDeck
	return b
}

func (b *_LiftBuilder) WithHigherDeckBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.HigherDeck.CreateOptionalPropertyBuilder())
	var err error
	b.HigherDeck, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithLowerDeck(lowerDeck OptionalProperty) LiftBuilder {
	b.LowerDeck = lowerDeck
	return b
}

func (b *_LiftBuilder) WithLowerDeckBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.LowerDeck.CreateOptionalPropertyBuilder())
	var err error
	b.LowerDeck, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) LiftBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_LiftBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithNotificationClass(notificationClass OptionalProperty) LiftBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_LiftBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventEnable(eventEnable OptionalProperty) LiftBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_LiftBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventState(eventState OptionalProperty) LiftBuilder {
	b.EventState = eventState
	return b
}

func (b *_LiftBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) LiftBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_LiftBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithNotifyType(notifyType OptionalProperty) LiftBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_LiftBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) LiftBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_LiftBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) LiftBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_LiftBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) LiftBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_LiftBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) LiftBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_LiftBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) LiftBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_LiftBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) LiftBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_LiftBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithPropertyList(propertyList ReadableProperty) LiftBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_LiftBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithTags(tags OptionalProperty) LiftBuilder {
	b.Tags = tags
	return b
}

func (b *_LiftBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithProfileLocation(profileLocation OptionalProperty) LiftBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_LiftBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) WithProfileName(profileName OptionalProperty) LiftBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_LiftBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LiftBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LiftBuilder) Build() (Lift, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.ElevatorGroup == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'elevatorGroup' not set"))
	}
	if b.GroupID == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupID' not set"))
	}
	if b.InstallationID == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'installationID' not set"))
	}
	if b.FloorText == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'floorText' not set"))
	}
	if b.CarDoorText == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carDoorText' not set"))
	}
	if b.AssignedLandingCalls == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'assignedLandingCalls' not set"))
	}
	if b.MakingCarCall == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'makingCarCall' not set"))
	}
	if b.RegisteredCarCall == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'registeredCarCall' not set"))
	}
	if b.CarPosition == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carPosition' not set"))
	}
	if b.CarMovingDirection == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carMovingDirection' not set"))
	}
	if b.CarAssignedDirection == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carAssignedDirection' not set"))
	}
	if b.CarDoorStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carDoorStatus' not set"))
	}
	if b.CarDoorCommand == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carDoorCommand' not set"))
	}
	if b.CarDoorZone == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carDoorZone' not set"))
	}
	if b.CarMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carMode' not set"))
	}
	if b.CarLoad == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carLoad' not set"))
	}
	if b.CarLoadUnits == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carLoadUnits' not set"))
	}
	if b.NextStoppingFloor == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'nextStoppingFloor' not set"))
	}
	if b.PassengerAlarm == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'passengerAlarm' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.EnergyMeter == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'energyMeter' not set"))
	}
	if b.EnergyMeterRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'energyMeterRef' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.CarDriveStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'carDriveStatus' not set"))
	}
	if b.FaultSignals == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultSignals' not set"))
	}
	if b.LandingDoorStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'landingDoorStatus' not set"))
	}
	if b.HigherDeck == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'higherDeck' not set"))
	}
	if b.LowerDeck == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lowerDeck' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Lift.deepCopy(), nil
}

func (b *_LiftBuilder) MustBuild() Lift {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_LiftBuilder) DeepCopy() any {
	_copy := b.CreateLiftBuilder().(*_LiftBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateLiftBuilder creates a LiftBuilder
func (b *_Lift) CreateLiftBuilder() LiftBuilder {
	if b == nil {
		return NewLiftBuilder()
	}
	return &_LiftBuilder{_Lift: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Lift) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Lift) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Lift) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Lift) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Lift) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Lift) GetElevatorGroup() ReadableProperty {
	return m.ElevatorGroup
}

func (m *_Lift) GetGroupID() ReadableProperty {
	return m.GroupID
}

func (m *_Lift) GetInstallationID() ReadableProperty {
	return m.InstallationID
}

func (m *_Lift) GetFloorText() OptionalProperty {
	return m.FloorText
}

func (m *_Lift) GetCarDoorText() OptionalProperty {
	return m.CarDoorText
}

func (m *_Lift) GetAssignedLandingCalls() OptionalProperty {
	return m.AssignedLandingCalls
}

func (m *_Lift) GetMakingCarCall() OptionalProperty {
	return m.MakingCarCall
}

func (m *_Lift) GetRegisteredCarCall() OptionalProperty {
	return m.RegisteredCarCall
}

func (m *_Lift) GetCarPosition() ReadableProperty {
	return m.CarPosition
}

func (m *_Lift) GetCarMovingDirection() ReadableProperty {
	return m.CarMovingDirection
}

func (m *_Lift) GetCarAssignedDirection() OptionalProperty {
	return m.CarAssignedDirection
}

func (m *_Lift) GetCarDoorStatus() ReadableProperty {
	return m.CarDoorStatus
}

func (m *_Lift) GetCarDoorCommand() OptionalProperty {
	return m.CarDoorCommand
}

func (m *_Lift) GetCarDoorZone() OptionalProperty {
	return m.CarDoorZone
}

func (m *_Lift) GetCarMode() OptionalProperty {
	return m.CarMode
}

func (m *_Lift) GetCarLoad() OptionalProperty {
	return m.CarLoad
}

func (m *_Lift) GetCarLoadUnits() OptionalProperty {
	return m.CarLoadUnits
}

func (m *_Lift) GetNextStoppingFloor() OptionalProperty {
	return m.NextStoppingFloor
}

func (m *_Lift) GetPassengerAlarm() ReadableProperty {
	return m.PassengerAlarm
}

func (m *_Lift) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_Lift) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_Lift) GetEnergyMeter() OptionalProperty {
	return m.EnergyMeter
}

func (m *_Lift) GetEnergyMeterRef() OptionalProperty {
	return m.EnergyMeterRef
}

func (m *_Lift) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Lift) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_Lift) GetCarDriveStatus() OptionalProperty {
	return m.CarDriveStatus
}

func (m *_Lift) GetFaultSignals() ReadableProperty {
	return m.FaultSignals
}

func (m *_Lift) GetLandingDoorStatus() OptionalProperty {
	return m.LandingDoorStatus
}

func (m *_Lift) GetHigherDeck() OptionalProperty {
	return m.HigherDeck
}

func (m *_Lift) GetLowerDeck() OptionalProperty {
	return m.LowerDeck
}

func (m *_Lift) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Lift) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Lift) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Lift) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_Lift) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Lift) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Lift) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Lift) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Lift) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Lift) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_Lift) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_Lift) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Lift) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Lift) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Lift) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Lift) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastLift(structType any) Lift {
	if casted, ok := structType.(Lift); ok {
		return casted
	}
	if casted, ok := structType.(*Lift); ok {
		return *casted
	}
	return nil
}

func (m *_Lift) GetTypeName() string {
	return "Lift"
}

func (m *_Lift) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (elevatorGroup)
	lengthInBits += m.ElevatorGroup.GetLengthInBits(ctx)

	// Simple field (groupID)
	lengthInBits += m.GroupID.GetLengthInBits(ctx)

	// Simple field (installationID)
	lengthInBits += m.InstallationID.GetLengthInBits(ctx)

	// Simple field (floorText)
	lengthInBits += m.FloorText.GetLengthInBits(ctx)

	// Simple field (carDoorText)
	lengthInBits += m.CarDoorText.GetLengthInBits(ctx)

	// Simple field (assignedLandingCalls)
	lengthInBits += m.AssignedLandingCalls.GetLengthInBits(ctx)

	// Simple field (makingCarCall)
	lengthInBits += m.MakingCarCall.GetLengthInBits(ctx)

	// Simple field (registeredCarCall)
	lengthInBits += m.RegisteredCarCall.GetLengthInBits(ctx)

	// Simple field (carPosition)
	lengthInBits += m.CarPosition.GetLengthInBits(ctx)

	// Simple field (carMovingDirection)
	lengthInBits += m.CarMovingDirection.GetLengthInBits(ctx)

	// Simple field (carAssignedDirection)
	lengthInBits += m.CarAssignedDirection.GetLengthInBits(ctx)

	// Simple field (carDoorStatus)
	lengthInBits += m.CarDoorStatus.GetLengthInBits(ctx)

	// Simple field (carDoorCommand)
	lengthInBits += m.CarDoorCommand.GetLengthInBits(ctx)

	// Simple field (carDoorZone)
	lengthInBits += m.CarDoorZone.GetLengthInBits(ctx)

	// Simple field (carMode)
	lengthInBits += m.CarMode.GetLengthInBits(ctx)

	// Simple field (carLoad)
	lengthInBits += m.CarLoad.GetLengthInBits(ctx)

	// Simple field (carLoadUnits)
	lengthInBits += m.CarLoadUnits.GetLengthInBits(ctx)

	// Simple field (nextStoppingFloor)
	lengthInBits += m.NextStoppingFloor.GetLengthInBits(ctx)

	// Simple field (passengerAlarm)
	lengthInBits += m.PassengerAlarm.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (energyMeter)
	lengthInBits += m.EnergyMeter.GetLengthInBits(ctx)

	// Simple field (energyMeterRef)
	lengthInBits += m.EnergyMeterRef.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (carDriveStatus)
	lengthInBits += m.CarDriveStatus.GetLengthInBits(ctx)

	// Simple field (faultSignals)
	lengthInBits += m.FaultSignals.GetLengthInBits(ctx)

	// Simple field (landingDoorStatus)
	lengthInBits += m.LandingDoorStatus.GetLengthInBits(ctx)

	// Simple field (higherDeck)
	lengthInBits += m.HigherDeck.GetLengthInBits(ctx)

	// Simple field (lowerDeck)
	lengthInBits += m.LowerDeck.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Lift) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func LiftParse(ctx context.Context, theBytes []byte) (Lift, error) {
	return LiftParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func LiftParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Lift, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Lift, error) {
		return LiftParseWithBuffer(ctx, readBuffer)
	}
}

func LiftParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Lift, error) {
	v, err := (&_Lift{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Lift) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__lift Lift, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Lift"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Lift")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	elevatorGroup, err := ReadSimpleField[ReadableProperty](ctx, "elevatorGroup", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'elevatorGroup' field"))
	}
	m.ElevatorGroup = elevatorGroup

	groupID, err := ReadSimpleField[ReadableProperty](ctx, "groupID", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupID' field"))
	}
	m.GroupID = groupID

	installationID, err := ReadSimpleField[ReadableProperty](ctx, "installationID", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'installationID' field"))
	}
	m.InstallationID = installationID

	floorText, err := ReadSimpleField[OptionalProperty](ctx, "floorText", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'floorText' field"))
	}
	m.FloorText = floorText

	carDoorText, err := ReadSimpleField[OptionalProperty](ctx, "carDoorText", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carDoorText' field"))
	}
	m.CarDoorText = carDoorText

	assignedLandingCalls, err := ReadSimpleField[OptionalProperty](ctx, "assignedLandingCalls", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetAssignedLandingCalls")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'assignedLandingCalls' field"))
	}
	m.AssignedLandingCalls = assignedLandingCalls

	makingCarCall, err := ReadSimpleField[OptionalProperty](ctx, "makingCarCall", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'makingCarCall' field"))
	}
	m.MakingCarCall = makingCarCall

	registeredCarCall, err := ReadSimpleField[OptionalProperty](ctx, "registeredCarCall", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetLiftCarCallList")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'registeredCarCall' field"))
	}
	m.RegisteredCarCall = registeredCarCall

	carPosition, err := ReadSimpleField[ReadableProperty](ctx, "carPosition", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carPosition' field"))
	}
	m.CarPosition = carPosition

	carMovingDirection, err := ReadSimpleField[ReadableProperty](ctx, "carMovingDirection", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLiftCarDirection")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carMovingDirection' field"))
	}
	m.CarMovingDirection = carMovingDirection

	carAssignedDirection, err := ReadSimpleField[OptionalProperty](ctx, "carAssignedDirection", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLiftCarDirection")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carAssignedDirection' field"))
	}
	m.CarAssignedDirection = carAssignedDirection

	carDoorStatus, err := ReadSimpleField[ReadableProperty](ctx, "carDoorStatus", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetDoorStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carDoorStatus' field"))
	}
	m.CarDoorStatus = carDoorStatus

	carDoorCommand, err := ReadSimpleField[OptionalProperty](ctx, "carDoorCommand", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetLiftCarDoorCommand")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carDoorCommand' field"))
	}
	m.CarDoorCommand = carDoorCommand

	carDoorZone, err := ReadSimpleField[OptionalProperty](ctx, "carDoorZone", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carDoorZone' field"))
	}
	m.CarDoorZone = carDoorZone

	carMode, err := ReadSimpleField[OptionalProperty](ctx, "carMode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLiftCarMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carMode' field"))
	}
	m.CarMode = carMode

	carLoad, err := ReadSimpleField[OptionalProperty](ctx, "carLoad", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carLoad' field"))
	}
	m.CarLoad = carLoad

	carLoadUnits, err := ReadSimpleField[OptionalProperty](ctx, "carLoadUnits", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carLoadUnits' field"))
	}
	m.CarLoadUnits = carLoadUnits

	nextStoppingFloor, err := ReadSimpleField[OptionalProperty](ctx, "nextStoppingFloor", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'nextStoppingFloor' field"))
	}
	m.NextStoppingFloor = nextStoppingFloor

	passengerAlarm, err := ReadSimpleField[ReadableProperty](ctx, "passengerAlarm", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'passengerAlarm' field"))
	}
	m.PassengerAlarm = passengerAlarm

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	energyMeter, err := ReadSimpleField[OptionalProperty](ctx, "energyMeter", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'energyMeter' field"))
	}
	m.EnergyMeter = energyMeter

	energyMeterRef, err := ReadSimpleField[OptionalProperty](ctx, "energyMeterRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'energyMeterRef' field"))
	}
	m.EnergyMeterRef = energyMeterRef

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	carDriveStatus, err := ReadSimpleField[OptionalProperty](ctx, "carDriveStatus", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLiftCarDriveStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'carDriveStatus' field"))
	}
	m.CarDriveStatus = carDriveStatus

	faultSignals, err := ReadSimpleField[ReadableProperty](ctx, "faultSignals", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetLiftFault")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultSignals' field"))
	}
	m.FaultSignals = faultSignals

	landingDoorStatus, err := ReadSimpleField[OptionalProperty](ctx, "landingDoorStatus", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetLandingDoorStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'landingDoorStatus' field"))
	}
	m.LandingDoorStatus = landingDoorStatus

	higherDeck, err := ReadSimpleField[OptionalProperty](ctx, "higherDeck", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'higherDeck' field"))
	}
	m.HigherDeck = higherDeck

	lowerDeck, err := ReadSimpleField[OptionalProperty](ctx, "lowerDeck", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lowerDeck' field"))
	}
	m.LowerDeck = lowerDeck

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Lift"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Lift")
	}

	return m, nil
}

func (m *_Lift) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Lift) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Lift"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Lift")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "elevatorGroup", m.GetElevatorGroup(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'elevatorGroup' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "groupID", m.GetGroupID(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupID' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "installationID", m.GetInstallationID(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'installationID' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "floorText", m.GetFloorText(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'floorText' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carDoorText", m.GetCarDoorText(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carDoorText' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "assignedLandingCalls", m.GetAssignedLandingCalls(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'assignedLandingCalls' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "makingCarCall", m.GetMakingCarCall(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'makingCarCall' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "registeredCarCall", m.GetRegisteredCarCall(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'registeredCarCall' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "carPosition", m.GetCarPosition(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carPosition' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "carMovingDirection", m.GetCarMovingDirection(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carMovingDirection' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carAssignedDirection", m.GetCarAssignedDirection(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carAssignedDirection' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "carDoorStatus", m.GetCarDoorStatus(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carDoorStatus' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carDoorCommand", m.GetCarDoorCommand(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carDoorCommand' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carDoorZone", m.GetCarDoorZone(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carDoorZone' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carMode", m.GetCarMode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carMode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carLoad", m.GetCarLoad(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carLoad' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carLoadUnits", m.GetCarLoadUnits(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carLoadUnits' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "nextStoppingFloor", m.GetNextStoppingFloor(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'nextStoppingFloor' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "passengerAlarm", m.GetPassengerAlarm(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'passengerAlarm' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "energyMeter", m.GetEnergyMeter(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'energyMeter' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "energyMeterRef", m.GetEnergyMeterRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'energyMeterRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "carDriveStatus", m.GetCarDriveStatus(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'carDriveStatus' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "faultSignals", m.GetFaultSignals(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultSignals' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "landingDoorStatus", m.GetLandingDoorStatus(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'landingDoorStatus' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "higherDeck", m.GetHigherDeck(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'higherDeck' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lowerDeck", m.GetLowerDeck(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lowerDeck' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Lift"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Lift")
	}
	return nil
}

func (m *_Lift) IsLift() {}

func (m *_Lift) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Lift) deepCopy() *_Lift {
	if m == nil {
		return nil
	}
	_LiftCopy := &_Lift{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.ElevatorGroup.DeepCopy().(ReadableProperty),
		m.GroupID.DeepCopy().(ReadableProperty),
		m.InstallationID.DeepCopy().(ReadableProperty),
		m.FloorText.DeepCopy().(OptionalProperty),
		m.CarDoorText.DeepCopy().(OptionalProperty),
		m.AssignedLandingCalls.DeepCopy().(OptionalProperty),
		m.MakingCarCall.DeepCopy().(OptionalProperty),
		m.RegisteredCarCall.DeepCopy().(OptionalProperty),
		m.CarPosition.DeepCopy().(ReadableProperty),
		m.CarMovingDirection.DeepCopy().(ReadableProperty),
		m.CarAssignedDirection.DeepCopy().(OptionalProperty),
		m.CarDoorStatus.DeepCopy().(ReadableProperty),
		m.CarDoorCommand.DeepCopy().(OptionalProperty),
		m.CarDoorZone.DeepCopy().(OptionalProperty),
		m.CarMode.DeepCopy().(OptionalProperty),
		m.CarLoad.DeepCopy().(OptionalProperty),
		m.CarLoadUnits.DeepCopy().(OptionalProperty),
		m.NextStoppingFloor.DeepCopy().(OptionalProperty),
		m.PassengerAlarm.DeepCopy().(ReadableProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.EnergyMeter.DeepCopy().(OptionalProperty),
		m.EnergyMeterRef.DeepCopy().(OptionalProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.CarDriveStatus.DeepCopy().(OptionalProperty),
		m.FaultSignals.DeepCopy().(ReadableProperty),
		m.LandingDoorStatus.DeepCopy().(OptionalProperty),
		m.HigherDeck.DeepCopy().(OptionalProperty),
		m.LowerDeck.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _LiftCopy
}

func (m *_Lift) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
