/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AlertEnrollment is the corresponding interface of AlertEnrollment
type AlertEnrollment interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() ReadableProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() ReadableProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() ReadableProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() ReadableProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() ReadableProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() ReadableProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAlertEnrollment is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAlertEnrollment()
	// CreateBuilder creates a AlertEnrollmentBuilder
	CreateAlertEnrollmentBuilder() AlertEnrollmentBuilder
}

// _AlertEnrollment is the data-structure of this message
type _AlertEnrollment struct {
	ObjectIdentifier         ReadableProperty
	ObjectName               ReadableProperty
	ObjectType               ReadableProperty
	Description              OptionalProperty
	PresentValue             ReadableProperty
	EventState               ReadableProperty
	EventDetectionEnable     ReadableProperty
	NotificationClass        ReadableProperty
	EventEnable              ReadableProperty
	AckedTransitions         ReadableProperty
	NotifyType               ReadableProperty
	EventTimeStamps          ReadableProperty
	EventMessageTexts        OptionalProperty
	EventMessageTextsConfig  OptionalProperty
	EventAlgorithmInhibitRef OptionalProperty
	EventAlgorithmInhibit    OptionalProperty
	PropertyList             ReadableProperty
	Tags                     OptionalProperty
	ProfileLocation          OptionalProperty
	ProfileName              OptionalProperty
}

var _ AlertEnrollment = (*_AlertEnrollment)(nil)

// NewAlertEnrollment factory function for _AlertEnrollment
func NewAlertEnrollment(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, eventState ReadableProperty, eventDetectionEnable ReadableProperty, notificationClass ReadableProperty, eventEnable ReadableProperty, ackedTransitions ReadableProperty, notifyType ReadableProperty, eventTimeStamps ReadableProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_AlertEnrollment {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for AlertEnrollment must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for AlertEnrollment must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for AlertEnrollment must not be nil")
	}
	return &_AlertEnrollment{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, PresentValue: presentValue, EventState: eventState, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AlertEnrollmentBuilder is a builder for AlertEnrollment
type AlertEnrollmentBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, eventState ReadableProperty, eventDetectionEnable ReadableProperty, notificationClass ReadableProperty, eventEnable ReadableProperty, ackedTransitions ReadableProperty, notifyType ReadableProperty, eventTimeStamps ReadableProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AlertEnrollmentBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AlertEnrollmentBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AlertEnrollmentBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AlertEnrollmentBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AlertEnrollmentBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) AlertEnrollmentBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) AlertEnrollmentBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(ReadableProperty) AlertEnrollmentBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(ReadableProperty) AlertEnrollmentBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(ReadableProperty) AlertEnrollmentBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(ReadableProperty) AlertEnrollmentBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(ReadableProperty) AlertEnrollmentBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(ReadableProperty) AlertEnrollmentBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) AlertEnrollmentBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) AlertEnrollmentBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) AlertEnrollmentBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) AlertEnrollmentBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AlertEnrollmentBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AlertEnrollmentBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AlertEnrollmentBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AlertEnrollmentBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder
	// Build builds the AlertEnrollment or returns an error if something is wrong
	Build() (AlertEnrollment, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() AlertEnrollment
}

// NewAlertEnrollmentBuilder() creates a AlertEnrollmentBuilder
func NewAlertEnrollmentBuilder() AlertEnrollmentBuilder {
	return &_AlertEnrollmentBuilder{_AlertEnrollment: new(_AlertEnrollment)}
}

type _AlertEnrollmentBuilder struct {
	*_AlertEnrollment

	err *utils.MultiError
}

var _ (AlertEnrollmentBuilder) = (*_AlertEnrollmentBuilder)(nil)

func (b *_AlertEnrollmentBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, eventState ReadableProperty, eventDetectionEnable ReadableProperty, notificationClass ReadableProperty, eventEnable ReadableProperty, ackedTransitions ReadableProperty, notifyType ReadableProperty, eventTimeStamps ReadableProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AlertEnrollmentBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithPresentValue(presentValue).WithEventState(eventState).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AlertEnrollmentBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AlertEnrollmentBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AlertEnrollmentBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithObjectName(objectName ReadableProperty) AlertEnrollmentBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AlertEnrollmentBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithObjectType(objectType ReadableProperty) AlertEnrollmentBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AlertEnrollmentBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithDescription(description OptionalProperty) AlertEnrollmentBuilder {
	b.Description = description
	return b
}

func (b *_AlertEnrollmentBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithPresentValue(presentValue ReadableProperty) AlertEnrollmentBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_AlertEnrollmentBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventState(eventState ReadableProperty) AlertEnrollmentBuilder {
	b.EventState = eventState
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventDetectionEnable(eventDetectionEnable ReadableProperty) AlertEnrollmentBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventDetectionEnableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateReadablePropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithNotificationClass(notificationClass ReadableProperty) AlertEnrollmentBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_AlertEnrollmentBuilder) WithNotificationClassBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.NotificationClass.CreateReadablePropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventEnable(eventEnable ReadableProperty) AlertEnrollmentBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventEnableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventEnable.CreateReadablePropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithAckedTransitions(ackedTransitions ReadableProperty) AlertEnrollmentBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_AlertEnrollmentBuilder) WithAckedTransitionsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateReadablePropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithNotifyType(notifyType ReadableProperty) AlertEnrollmentBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_AlertEnrollmentBuilder) WithNotifyTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.NotifyType.CreateReadablePropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventTimeStamps(eventTimeStamps ReadableProperty) AlertEnrollmentBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventTimeStampsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateReadablePropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) AlertEnrollmentBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) AlertEnrollmentBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) AlertEnrollmentBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) AlertEnrollmentBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_AlertEnrollmentBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithPropertyList(propertyList ReadableProperty) AlertEnrollmentBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AlertEnrollmentBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithTags(tags OptionalProperty) AlertEnrollmentBuilder {
	b.Tags = tags
	return b
}

func (b *_AlertEnrollmentBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithProfileLocation(profileLocation OptionalProperty) AlertEnrollmentBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AlertEnrollmentBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) WithProfileName(profileName OptionalProperty) AlertEnrollmentBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AlertEnrollmentBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AlertEnrollmentBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AlertEnrollmentBuilder) Build() (AlertEnrollment, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._AlertEnrollment.deepCopy(), nil
}

func (b *_AlertEnrollmentBuilder) MustBuild() AlertEnrollment {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AlertEnrollmentBuilder) DeepCopy() any {
	_copy := b.CreateAlertEnrollmentBuilder().(*_AlertEnrollmentBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAlertEnrollmentBuilder creates a AlertEnrollmentBuilder
func (b *_AlertEnrollment) CreateAlertEnrollmentBuilder() AlertEnrollmentBuilder {
	if b == nil {
		return NewAlertEnrollmentBuilder()
	}
	return &_AlertEnrollmentBuilder{_AlertEnrollment: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AlertEnrollment) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_AlertEnrollment) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_AlertEnrollment) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_AlertEnrollment) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_AlertEnrollment) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_AlertEnrollment) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_AlertEnrollment) GetEventDetectionEnable() ReadableProperty {
	return m.EventDetectionEnable
}

func (m *_AlertEnrollment) GetNotificationClass() ReadableProperty {
	return m.NotificationClass
}

func (m *_AlertEnrollment) GetEventEnable() ReadableProperty {
	return m.EventEnable
}

func (m *_AlertEnrollment) GetAckedTransitions() ReadableProperty {
	return m.AckedTransitions
}

func (m *_AlertEnrollment) GetNotifyType() ReadableProperty {
	return m.NotifyType
}

func (m *_AlertEnrollment) GetEventTimeStamps() ReadableProperty {
	return m.EventTimeStamps
}

func (m *_AlertEnrollment) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_AlertEnrollment) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_AlertEnrollment) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_AlertEnrollment) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_AlertEnrollment) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_AlertEnrollment) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_AlertEnrollment) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_AlertEnrollment) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAlertEnrollment(structType any) AlertEnrollment {
	if casted, ok := structType.(AlertEnrollment); ok {
		return casted
	}
	if casted, ok := structType.(*AlertEnrollment); ok {
		return *casted
	}
	return nil
}

func (m *_AlertEnrollment) GetTypeName() string {
	return "AlertEnrollment"
}

func (m *_AlertEnrollment) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AlertEnrollment) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AlertEnrollmentParse(ctx context.Context, theBytes []byte) (AlertEnrollment, error) {
	return AlertEnrollmentParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AlertEnrollmentParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (AlertEnrollment, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (AlertEnrollment, error) {
		return AlertEnrollmentParseWithBuffer(ctx, readBuffer)
	}
}

func AlertEnrollmentParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (AlertEnrollment, error) {
	v, err := (&_AlertEnrollment{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_AlertEnrollment) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__alertEnrollment AlertEnrollment, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AlertEnrollment"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AlertEnrollment")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	eventDetectionEnable, err := ReadSimpleField[ReadableProperty](ctx, "eventDetectionEnable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[ReadableProperty](ctx, "notificationClass", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[ReadableProperty](ctx, "eventEnable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[ReadableProperty](ctx, "ackedTransitions", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[ReadableProperty](ctx, "notifyType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[ReadableProperty](ctx, "eventTimeStamps", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("AlertEnrollment"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AlertEnrollment")
	}

	return m, nil
}

func (m *_AlertEnrollment) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AlertEnrollment) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("AlertEnrollment"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AlertEnrollment")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("AlertEnrollment"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AlertEnrollment")
	}
	return nil
}

func (m *_AlertEnrollment) IsAlertEnrollment() {}

func (m *_AlertEnrollment) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AlertEnrollment) deepCopy() *_AlertEnrollment {
	if m == nil {
		return nil
	}
	_AlertEnrollmentCopy := &_AlertEnrollment{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.EventDetectionEnable.DeepCopy().(ReadableProperty),
		m.NotificationClass.DeepCopy().(ReadableProperty),
		m.EventEnable.DeepCopy().(ReadableProperty),
		m.AckedTransitions.DeepCopy().(ReadableProperty),
		m.NotifyType.DeepCopy().(ReadableProperty),
		m.EventTimeStamps.DeepCopy().(ReadableProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AlertEnrollmentCopy
}

func (m *_AlertEnrollment) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
