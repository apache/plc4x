/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Loop is the corresponding interface of Loop
type Loop interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetUpdateInterval returns UpdateInterval (property field)
	GetUpdateInterval() OptionalProperty
	// GetOutputUnits returns OutputUnits (property field)
	GetOutputUnits() ReadableProperty
	// GetManipulatedVariableReference returns ManipulatedVariableReference (property field)
	GetManipulatedVariableReference() ReadableProperty
	// GetControlledVariableReference returns ControlledVariableReference (property field)
	GetControlledVariableReference() ReadableProperty
	// GetControlledVariableValue returns ControlledVariableValue (property field)
	GetControlledVariableValue() ReadableProperty
	// GetControlledVariableUnits returns ControlledVariableUnits (property field)
	GetControlledVariableUnits() ReadableProperty
	// GetSetpointReference returns SetpointReference (property field)
	GetSetpointReference() ReadableProperty
	// GetSetpoint returns Setpoint (property field)
	GetSetpoint() ReadableProperty
	// GetAction returns Action (property field)
	GetAction() ReadableProperty
	// GetProportionalConstant returns ProportionalConstant (property field)
	GetProportionalConstant() OptionalProperty
	// GetProportionalConstantUnits returns ProportionalConstantUnits (property field)
	GetProportionalConstantUnits() OptionalProperty
	// GetIntegralConstant returns IntegralConstant (property field)
	GetIntegralConstant() OptionalProperty
	// GetIntegralConstantUnits returns IntegralConstantUnits (property field)
	GetIntegralConstantUnits() OptionalProperty
	// GetDerivativeConstant returns DerivativeConstant (property field)
	GetDerivativeConstant() OptionalProperty
	// GetDerivativeConstantUnits returns DerivativeConstantUnits (property field)
	GetDerivativeConstantUnits() OptionalProperty
	// GetBias returns Bias (property field)
	GetBias() OptionalProperty
	// GetMaximumOutput returns MaximumOutput (property field)
	GetMaximumOutput() OptionalProperty
	// GetMinimumOutput returns MinimumOutput (property field)
	GetMinimumOutput() OptionalProperty
	// GetPriorityForWriting returns PriorityForWriting (property field)
	GetPriorityForWriting() ReadableProperty
	// GetCOVIncrement returns COVIncrement (property field)
	GetCOVIncrement() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetErrorLimit returns ErrorLimit (property field)
	GetErrorLimit() OptionalProperty
	// GetDeadband returns Deadband (property field)
	GetDeadband() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetLowDiffLimit returns LowDiffLimit (property field)
	GetLowDiffLimit() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsLoop is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsLoop()
	// CreateBuilder creates a LoopBuilder
	CreateLoopBuilder() LoopBuilder
}

// _Loop is the data-structure of this message
type _Loop struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	PresentValue                 ReadableProperty
	Description                  OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	UpdateInterval               OptionalProperty
	OutputUnits                  ReadableProperty
	ManipulatedVariableReference ReadableProperty
	ControlledVariableReference  ReadableProperty
	ControlledVariableValue      ReadableProperty
	ControlledVariableUnits      ReadableProperty
	SetpointReference            ReadableProperty
	Setpoint                     ReadableProperty
	Action                       ReadableProperty
	ProportionalConstant         OptionalProperty
	ProportionalConstantUnits    OptionalProperty
	IntegralConstant             OptionalProperty
	IntegralConstantUnits        OptionalProperty
	DerivativeConstant           OptionalProperty
	DerivativeConstantUnits      OptionalProperty
	Bias                         OptionalProperty
	MaximumOutput                OptionalProperty
	MinimumOutput                OptionalProperty
	PriorityForWriting           ReadableProperty
	COVIncrement                 OptionalProperty
	TimeDelay                    OptionalProperty
	NotificationClass            OptionalProperty
	ErrorLimit                   OptionalProperty
	Deadband                     OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	LowDiffLimit                 OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ Loop = (*_Loop)(nil)

// NewLoop factory function for _Loop
func NewLoop(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, updateInterval OptionalProperty, outputUnits ReadableProperty, manipulatedVariableReference ReadableProperty, controlledVariableReference ReadableProperty, controlledVariableValue ReadableProperty, controlledVariableUnits ReadableProperty, setpointReference ReadableProperty, setpoint ReadableProperty, action ReadableProperty, proportionalConstant OptionalProperty, proportionalConstantUnits OptionalProperty, integralConstant OptionalProperty, integralConstantUnits OptionalProperty, derivativeConstant OptionalProperty, derivativeConstantUnits OptionalProperty, bias OptionalProperty, maximumOutput OptionalProperty, minimumOutput OptionalProperty, priorityForWriting ReadableProperty, cOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, errorLimit OptionalProperty, deadband OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, lowDiffLimit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Loop {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Loop must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Loop must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Loop must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for Loop must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Loop must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Loop must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for Loop must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Loop must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for Loop must not be nil")
	}
	if updateInterval == nil {
		panic("updateInterval of type OptionalProperty for Loop must not be nil")
	}
	if outputUnits == nil {
		panic("outputUnits of type ReadableProperty for Loop must not be nil")
	}
	if manipulatedVariableReference == nil {
		panic("manipulatedVariableReference of type ReadableProperty for Loop must not be nil")
	}
	if controlledVariableReference == nil {
		panic("controlledVariableReference of type ReadableProperty for Loop must not be nil")
	}
	if controlledVariableValue == nil {
		panic("controlledVariableValue of type ReadableProperty for Loop must not be nil")
	}
	if controlledVariableUnits == nil {
		panic("controlledVariableUnits of type ReadableProperty for Loop must not be nil")
	}
	if setpointReference == nil {
		panic("setpointReference of type ReadableProperty for Loop must not be nil")
	}
	if setpoint == nil {
		panic("setpoint of type ReadableProperty for Loop must not be nil")
	}
	if action == nil {
		panic("action of type ReadableProperty for Loop must not be nil")
	}
	if proportionalConstant == nil {
		panic("proportionalConstant of type OptionalProperty for Loop must not be nil")
	}
	if proportionalConstantUnits == nil {
		panic("proportionalConstantUnits of type OptionalProperty for Loop must not be nil")
	}
	if integralConstant == nil {
		panic("integralConstant of type OptionalProperty for Loop must not be nil")
	}
	if integralConstantUnits == nil {
		panic("integralConstantUnits of type OptionalProperty for Loop must not be nil")
	}
	if derivativeConstant == nil {
		panic("derivativeConstant of type OptionalProperty for Loop must not be nil")
	}
	if derivativeConstantUnits == nil {
		panic("derivativeConstantUnits of type OptionalProperty for Loop must not be nil")
	}
	if bias == nil {
		panic("bias of type OptionalProperty for Loop must not be nil")
	}
	if maximumOutput == nil {
		panic("maximumOutput of type OptionalProperty for Loop must not be nil")
	}
	if minimumOutput == nil {
		panic("minimumOutput of type OptionalProperty for Loop must not be nil")
	}
	if priorityForWriting == nil {
		panic("priorityForWriting of type ReadableProperty for Loop must not be nil")
	}
	if cOVIncrement == nil {
		panic("cOVIncrement of type OptionalProperty for Loop must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for Loop must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Loop must not be nil")
	}
	if errorLimit == nil {
		panic("errorLimit of type OptionalProperty for Loop must not be nil")
	}
	if deadband == nil {
		panic("deadband of type OptionalProperty for Loop must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Loop must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Loop must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Loop must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Loop must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Loop must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Loop must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Loop must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for Loop must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for Loop must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for Loop must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Loop must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Loop must not be nil")
	}
	if lowDiffLimit == nil {
		panic("lowDiffLimit of type OptionalProperty for Loop must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Loop must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Loop must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Loop must not be nil")
	}
	return &_Loop{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, PresentValue: presentValue, Description: description, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, UpdateInterval: updateInterval, OutputUnits: outputUnits, ManipulatedVariableReference: manipulatedVariableReference, ControlledVariableReference: controlledVariableReference, ControlledVariableValue: controlledVariableValue, ControlledVariableUnits: controlledVariableUnits, SetpointReference: setpointReference, Setpoint: setpoint, Action: action, ProportionalConstant: proportionalConstant, ProportionalConstantUnits: proportionalConstantUnits, IntegralConstant: integralConstant, IntegralConstantUnits: integralConstantUnits, DerivativeConstant: derivativeConstant, DerivativeConstantUnits: derivativeConstantUnits, Bias: bias, MaximumOutput: maximumOutput, MinimumOutput: minimumOutput, PriorityForWriting: priorityForWriting, COVIncrement: cOVIncrement, TimeDelay: timeDelay, NotificationClass: notificationClass, ErrorLimit: errorLimit, Deadband: deadband, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, LowDiffLimit: lowDiffLimit, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// LoopBuilder is a builder for Loop
type LoopBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, updateInterval OptionalProperty, outputUnits ReadableProperty, manipulatedVariableReference ReadableProperty, controlledVariableReference ReadableProperty, controlledVariableValue ReadableProperty, controlledVariableUnits ReadableProperty, setpointReference ReadableProperty, setpoint ReadableProperty, action ReadableProperty, proportionalConstant OptionalProperty, proportionalConstantUnits OptionalProperty, integralConstant OptionalProperty, integralConstantUnits OptionalProperty, derivativeConstant OptionalProperty, derivativeConstantUnits OptionalProperty, bias OptionalProperty, maximumOutput OptionalProperty, minimumOutput OptionalProperty, priorityForWriting ReadableProperty, cOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, errorLimit OptionalProperty, deadband OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, lowDiffLimit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LoopBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) LoopBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) LoopBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) LoopBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) LoopBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) LoopBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) LoopBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) LoopBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) LoopBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) LoopBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithUpdateInterval adds UpdateInterval (property field)
	WithUpdateInterval(OptionalProperty) LoopBuilder
	// WithUpdateIntervalBuilder adds UpdateInterval (property field) which is build by the builder
	WithUpdateIntervalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithOutputUnits adds OutputUnits (property field)
	WithOutputUnits(ReadableProperty) LoopBuilder
	// WithOutputUnitsBuilder adds OutputUnits (property field) which is build by the builder
	WithOutputUnitsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithManipulatedVariableReference adds ManipulatedVariableReference (property field)
	WithManipulatedVariableReference(ReadableProperty) LoopBuilder
	// WithManipulatedVariableReferenceBuilder adds ManipulatedVariableReference (property field) which is build by the builder
	WithManipulatedVariableReferenceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithControlledVariableReference adds ControlledVariableReference (property field)
	WithControlledVariableReference(ReadableProperty) LoopBuilder
	// WithControlledVariableReferenceBuilder adds ControlledVariableReference (property field) which is build by the builder
	WithControlledVariableReferenceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithControlledVariableValue adds ControlledVariableValue (property field)
	WithControlledVariableValue(ReadableProperty) LoopBuilder
	// WithControlledVariableValueBuilder adds ControlledVariableValue (property field) which is build by the builder
	WithControlledVariableValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithControlledVariableUnits adds ControlledVariableUnits (property field)
	WithControlledVariableUnits(ReadableProperty) LoopBuilder
	// WithControlledVariableUnitsBuilder adds ControlledVariableUnits (property field) which is build by the builder
	WithControlledVariableUnitsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithSetpointReference adds SetpointReference (property field)
	WithSetpointReference(ReadableProperty) LoopBuilder
	// WithSetpointReferenceBuilder adds SetpointReference (property field) which is build by the builder
	WithSetpointReferenceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithSetpoint adds Setpoint (property field)
	WithSetpoint(ReadableProperty) LoopBuilder
	// WithSetpointBuilder adds Setpoint (property field) which is build by the builder
	WithSetpointBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithAction adds Action (property field)
	WithAction(ReadableProperty) LoopBuilder
	// WithActionBuilder adds Action (property field) which is build by the builder
	WithActionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithProportionalConstant adds ProportionalConstant (property field)
	WithProportionalConstant(OptionalProperty) LoopBuilder
	// WithProportionalConstantBuilder adds ProportionalConstant (property field) which is build by the builder
	WithProportionalConstantBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithProportionalConstantUnits adds ProportionalConstantUnits (property field)
	WithProportionalConstantUnits(OptionalProperty) LoopBuilder
	// WithProportionalConstantUnitsBuilder adds ProportionalConstantUnits (property field) which is build by the builder
	WithProportionalConstantUnitsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithIntegralConstant adds IntegralConstant (property field)
	WithIntegralConstant(OptionalProperty) LoopBuilder
	// WithIntegralConstantBuilder adds IntegralConstant (property field) which is build by the builder
	WithIntegralConstantBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithIntegralConstantUnits adds IntegralConstantUnits (property field)
	WithIntegralConstantUnits(OptionalProperty) LoopBuilder
	// WithIntegralConstantUnitsBuilder adds IntegralConstantUnits (property field) which is build by the builder
	WithIntegralConstantUnitsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithDerivativeConstant adds DerivativeConstant (property field)
	WithDerivativeConstant(OptionalProperty) LoopBuilder
	// WithDerivativeConstantBuilder adds DerivativeConstant (property field) which is build by the builder
	WithDerivativeConstantBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithDerivativeConstantUnits adds DerivativeConstantUnits (property field)
	WithDerivativeConstantUnits(OptionalProperty) LoopBuilder
	// WithDerivativeConstantUnitsBuilder adds DerivativeConstantUnits (property field) which is build by the builder
	WithDerivativeConstantUnitsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithBias adds Bias (property field)
	WithBias(OptionalProperty) LoopBuilder
	// WithBiasBuilder adds Bias (property field) which is build by the builder
	WithBiasBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithMaximumOutput adds MaximumOutput (property field)
	WithMaximumOutput(OptionalProperty) LoopBuilder
	// WithMaximumOutputBuilder adds MaximumOutput (property field) which is build by the builder
	WithMaximumOutputBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithMinimumOutput adds MinimumOutput (property field)
	WithMinimumOutput(OptionalProperty) LoopBuilder
	// WithMinimumOutputBuilder adds MinimumOutput (property field) which is build by the builder
	WithMinimumOutputBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithPriorityForWriting adds PriorityForWriting (property field)
	WithPriorityForWriting(ReadableProperty) LoopBuilder
	// WithPriorityForWritingBuilder adds PriorityForWriting (property field) which is build by the builder
	WithPriorityForWritingBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithCOVIncrement adds COVIncrement (property field)
	WithCOVIncrement(OptionalProperty) LoopBuilder
	// WithCOVIncrementBuilder adds COVIncrement (property field) which is build by the builder
	WithCOVIncrementBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) LoopBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) LoopBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithErrorLimit adds ErrorLimit (property field)
	WithErrorLimit(OptionalProperty) LoopBuilder
	// WithErrorLimitBuilder adds ErrorLimit (property field) which is build by the builder
	WithErrorLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithDeadband adds Deadband (property field)
	WithDeadband(OptionalProperty) LoopBuilder
	// WithDeadbandBuilder adds Deadband (property field) which is build by the builder
	WithDeadbandBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) LoopBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) LoopBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) LoopBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) LoopBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) LoopBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) LoopBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) LoopBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) LoopBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) LoopBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) LoopBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) LoopBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) LoopBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder
	// WithLowDiffLimit adds LowDiffLimit (property field)
	WithLowDiffLimit(OptionalProperty) LoopBuilder
	// WithLowDiffLimitBuilder adds LowDiffLimit (property field) which is build by the builder
	WithLowDiffLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) LoopBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) LoopBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) LoopBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder
	// Build builds the Loop or returns an error if something is wrong
	Build() (Loop, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Loop
}

// NewLoopBuilder() creates a LoopBuilder
func NewLoopBuilder() LoopBuilder {
	return &_LoopBuilder{_Loop: new(_Loop)}
}

type _LoopBuilder struct {
	*_Loop

	err *utils.MultiError
}

var _ (LoopBuilder) = (*_LoopBuilder)(nil)

func (b *_LoopBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, updateInterval OptionalProperty, outputUnits ReadableProperty, manipulatedVariableReference ReadableProperty, controlledVariableReference ReadableProperty, controlledVariableValue ReadableProperty, controlledVariableUnits ReadableProperty, setpointReference ReadableProperty, setpoint ReadableProperty, action ReadableProperty, proportionalConstant OptionalProperty, proportionalConstantUnits OptionalProperty, integralConstant OptionalProperty, integralConstantUnits OptionalProperty, derivativeConstant OptionalProperty, derivativeConstantUnits OptionalProperty, bias OptionalProperty, maximumOutput OptionalProperty, minimumOutput OptionalProperty, priorityForWriting ReadableProperty, cOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, errorLimit OptionalProperty, deadband OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, lowDiffLimit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LoopBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithPresentValue(presentValue).WithDescription(description).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithUpdateInterval(updateInterval).WithOutputUnits(outputUnits).WithManipulatedVariableReference(manipulatedVariableReference).WithControlledVariableReference(controlledVariableReference).WithControlledVariableValue(controlledVariableValue).WithControlledVariableUnits(controlledVariableUnits).WithSetpointReference(setpointReference).WithSetpoint(setpoint).WithAction(action).WithProportionalConstant(proportionalConstant).WithProportionalConstantUnits(proportionalConstantUnits).WithIntegralConstant(integralConstant).WithIntegralConstantUnits(integralConstantUnits).WithDerivativeConstant(derivativeConstant).WithDerivativeConstantUnits(derivativeConstantUnits).WithBias(bias).WithMaximumOutput(maximumOutput).WithMinimumOutput(minimumOutput).WithPriorityForWriting(priorityForWriting).WithCOVIncrement(cOVIncrement).WithTimeDelay(timeDelay).WithNotificationClass(notificationClass).WithErrorLimit(errorLimit).WithDeadband(deadband).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithLowDiffLimit(lowDiffLimit).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_LoopBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) LoopBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_LoopBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithObjectName(objectName ReadableProperty) LoopBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_LoopBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithObjectType(objectType ReadableProperty) LoopBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_LoopBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithPresentValue(presentValue ReadableProperty) LoopBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_LoopBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithDescription(description OptionalProperty) LoopBuilder {
	b.Description = description
	return b
}

func (b *_LoopBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithStatusFlags(statusFlags ReadableProperty) LoopBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_LoopBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventState(eventState ReadableProperty) LoopBuilder {
	b.EventState = eventState
	return b
}

func (b *_LoopBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithReliability(reliability OptionalProperty) LoopBuilder {
	b.Reliability = reliability
	return b
}

func (b *_LoopBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithOutOfService(outOfService ReadableProperty) LoopBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_LoopBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithUpdateInterval(updateInterval OptionalProperty) LoopBuilder {
	b.UpdateInterval = updateInterval
	return b
}

func (b *_LoopBuilder) WithUpdateIntervalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.UpdateInterval.CreateOptionalPropertyBuilder())
	var err error
	b.UpdateInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithOutputUnits(outputUnits ReadableProperty) LoopBuilder {
	b.OutputUnits = outputUnits
	return b
}

func (b *_LoopBuilder) WithOutputUnitsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.OutputUnits.CreateReadablePropertyBuilder())
	var err error
	b.OutputUnits, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithManipulatedVariableReference(manipulatedVariableReference ReadableProperty) LoopBuilder {
	b.ManipulatedVariableReference = manipulatedVariableReference
	return b
}

func (b *_LoopBuilder) WithManipulatedVariableReferenceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ManipulatedVariableReference.CreateReadablePropertyBuilder())
	var err error
	b.ManipulatedVariableReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithControlledVariableReference(controlledVariableReference ReadableProperty) LoopBuilder {
	b.ControlledVariableReference = controlledVariableReference
	return b
}

func (b *_LoopBuilder) WithControlledVariableReferenceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ControlledVariableReference.CreateReadablePropertyBuilder())
	var err error
	b.ControlledVariableReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithControlledVariableValue(controlledVariableValue ReadableProperty) LoopBuilder {
	b.ControlledVariableValue = controlledVariableValue
	return b
}

func (b *_LoopBuilder) WithControlledVariableValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ControlledVariableValue.CreateReadablePropertyBuilder())
	var err error
	b.ControlledVariableValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithControlledVariableUnits(controlledVariableUnits ReadableProperty) LoopBuilder {
	b.ControlledVariableUnits = controlledVariableUnits
	return b
}

func (b *_LoopBuilder) WithControlledVariableUnitsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ControlledVariableUnits.CreateReadablePropertyBuilder())
	var err error
	b.ControlledVariableUnits, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithSetpointReference(setpointReference ReadableProperty) LoopBuilder {
	b.SetpointReference = setpointReference
	return b
}

func (b *_LoopBuilder) WithSetpointReferenceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.SetpointReference.CreateReadablePropertyBuilder())
	var err error
	b.SetpointReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithSetpoint(setpoint ReadableProperty) LoopBuilder {
	b.Setpoint = setpoint
	return b
}

func (b *_LoopBuilder) WithSetpointBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Setpoint.CreateReadablePropertyBuilder())
	var err error
	b.Setpoint, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithAction(action ReadableProperty) LoopBuilder {
	b.Action = action
	return b
}

func (b *_LoopBuilder) WithActionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Action.CreateReadablePropertyBuilder())
	var err error
	b.Action, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithProportionalConstant(proportionalConstant OptionalProperty) LoopBuilder {
	b.ProportionalConstant = proportionalConstant
	return b
}

func (b *_LoopBuilder) WithProportionalConstantBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ProportionalConstant.CreateOptionalPropertyBuilder())
	var err error
	b.ProportionalConstant, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithProportionalConstantUnits(proportionalConstantUnits OptionalProperty) LoopBuilder {
	b.ProportionalConstantUnits = proportionalConstantUnits
	return b
}

func (b *_LoopBuilder) WithProportionalConstantUnitsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ProportionalConstantUnits.CreateOptionalPropertyBuilder())
	var err error
	b.ProportionalConstantUnits, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithIntegralConstant(integralConstant OptionalProperty) LoopBuilder {
	b.IntegralConstant = integralConstant
	return b
}

func (b *_LoopBuilder) WithIntegralConstantBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.IntegralConstant.CreateOptionalPropertyBuilder())
	var err error
	b.IntegralConstant, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithIntegralConstantUnits(integralConstantUnits OptionalProperty) LoopBuilder {
	b.IntegralConstantUnits = integralConstantUnits
	return b
}

func (b *_LoopBuilder) WithIntegralConstantUnitsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.IntegralConstantUnits.CreateOptionalPropertyBuilder())
	var err error
	b.IntegralConstantUnits, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithDerivativeConstant(derivativeConstant OptionalProperty) LoopBuilder {
	b.DerivativeConstant = derivativeConstant
	return b
}

func (b *_LoopBuilder) WithDerivativeConstantBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.DerivativeConstant.CreateOptionalPropertyBuilder())
	var err error
	b.DerivativeConstant, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithDerivativeConstantUnits(derivativeConstantUnits OptionalProperty) LoopBuilder {
	b.DerivativeConstantUnits = derivativeConstantUnits
	return b
}

func (b *_LoopBuilder) WithDerivativeConstantUnitsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.DerivativeConstantUnits.CreateOptionalPropertyBuilder())
	var err error
	b.DerivativeConstantUnits, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithBias(bias OptionalProperty) LoopBuilder {
	b.Bias = bias
	return b
}

func (b *_LoopBuilder) WithBiasBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Bias.CreateOptionalPropertyBuilder())
	var err error
	b.Bias, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithMaximumOutput(maximumOutput OptionalProperty) LoopBuilder {
	b.MaximumOutput = maximumOutput
	return b
}

func (b *_LoopBuilder) WithMaximumOutputBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.MaximumOutput.CreateOptionalPropertyBuilder())
	var err error
	b.MaximumOutput, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithMinimumOutput(minimumOutput OptionalProperty) LoopBuilder {
	b.MinimumOutput = minimumOutput
	return b
}

func (b *_LoopBuilder) WithMinimumOutputBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.MinimumOutput.CreateOptionalPropertyBuilder())
	var err error
	b.MinimumOutput, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithPriorityForWriting(priorityForWriting ReadableProperty) LoopBuilder {
	b.PriorityForWriting = priorityForWriting
	return b
}

func (b *_LoopBuilder) WithPriorityForWritingBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.PriorityForWriting.CreateReadablePropertyBuilder())
	var err error
	b.PriorityForWriting, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithCOVIncrement(cOVIncrement OptionalProperty) LoopBuilder {
	b.COVIncrement = cOVIncrement
	return b
}

func (b *_LoopBuilder) WithCOVIncrementBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.COVIncrement.CreateOptionalPropertyBuilder())
	var err error
	b.COVIncrement, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithTimeDelay(timeDelay OptionalProperty) LoopBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_LoopBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithNotificationClass(notificationClass OptionalProperty) LoopBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_LoopBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithErrorLimit(errorLimit OptionalProperty) LoopBuilder {
	b.ErrorLimit = errorLimit
	return b
}

func (b *_LoopBuilder) WithErrorLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ErrorLimit.CreateOptionalPropertyBuilder())
	var err error
	b.ErrorLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithDeadband(deadband OptionalProperty) LoopBuilder {
	b.Deadband = deadband
	return b
}

func (b *_LoopBuilder) WithDeadbandBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Deadband.CreateOptionalPropertyBuilder())
	var err error
	b.Deadband, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventEnable(eventEnable OptionalProperty) LoopBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_LoopBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) LoopBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_LoopBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithNotifyType(notifyType OptionalProperty) LoopBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_LoopBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) LoopBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_LoopBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) LoopBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_LoopBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) LoopBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_LoopBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) LoopBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_LoopBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) LoopBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_LoopBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) LoopBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_LoopBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) LoopBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_LoopBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) LoopBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_LoopBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithPropertyList(propertyList ReadableProperty) LoopBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_LoopBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithLowDiffLimit(lowDiffLimit OptionalProperty) LoopBuilder {
	b.LowDiffLimit = lowDiffLimit
	return b
}

func (b *_LoopBuilder) WithLowDiffLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.LowDiffLimit.CreateOptionalPropertyBuilder())
	var err error
	b.LowDiffLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithTags(tags OptionalProperty) LoopBuilder {
	b.Tags = tags
	return b
}

func (b *_LoopBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithProfileLocation(profileLocation OptionalProperty) LoopBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_LoopBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) WithProfileName(profileName OptionalProperty) LoopBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_LoopBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoopBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoopBuilder) Build() (Loop, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.UpdateInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'updateInterval' not set"))
	}
	if b.OutputUnits == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outputUnits' not set"))
	}
	if b.ManipulatedVariableReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'manipulatedVariableReference' not set"))
	}
	if b.ControlledVariableReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'controlledVariableReference' not set"))
	}
	if b.ControlledVariableValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'controlledVariableValue' not set"))
	}
	if b.ControlledVariableUnits == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'controlledVariableUnits' not set"))
	}
	if b.SetpointReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'setpointReference' not set"))
	}
	if b.Setpoint == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'setpoint' not set"))
	}
	if b.Action == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'action' not set"))
	}
	if b.ProportionalConstant == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'proportionalConstant' not set"))
	}
	if b.ProportionalConstantUnits == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'proportionalConstantUnits' not set"))
	}
	if b.IntegralConstant == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'integralConstant' not set"))
	}
	if b.IntegralConstantUnits == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'integralConstantUnits' not set"))
	}
	if b.DerivativeConstant == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'derivativeConstant' not set"))
	}
	if b.DerivativeConstantUnits == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'derivativeConstantUnits' not set"))
	}
	if b.Bias == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bias' not set"))
	}
	if b.MaximumOutput == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maximumOutput' not set"))
	}
	if b.MinimumOutput == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'minimumOutput' not set"))
	}
	if b.PriorityForWriting == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'priorityForWriting' not set"))
	}
	if b.COVIncrement == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVIncrement' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.ErrorLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'errorLimit' not set"))
	}
	if b.Deadband == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deadband' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.LowDiffLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lowDiffLimit' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Loop.deepCopy(), nil
}

func (b *_LoopBuilder) MustBuild() Loop {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_LoopBuilder) DeepCopy() any {
	_copy := b.CreateLoopBuilder().(*_LoopBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateLoopBuilder creates a LoopBuilder
func (b *_Loop) CreateLoopBuilder() LoopBuilder {
	if b == nil {
		return NewLoopBuilder()
	}
	return &_LoopBuilder{_Loop: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Loop) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Loop) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Loop) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Loop) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_Loop) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Loop) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Loop) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_Loop) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Loop) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_Loop) GetUpdateInterval() OptionalProperty {
	return m.UpdateInterval
}

func (m *_Loop) GetOutputUnits() ReadableProperty {
	return m.OutputUnits
}

func (m *_Loop) GetManipulatedVariableReference() ReadableProperty {
	return m.ManipulatedVariableReference
}

func (m *_Loop) GetControlledVariableReference() ReadableProperty {
	return m.ControlledVariableReference
}

func (m *_Loop) GetControlledVariableValue() ReadableProperty {
	return m.ControlledVariableValue
}

func (m *_Loop) GetControlledVariableUnits() ReadableProperty {
	return m.ControlledVariableUnits
}

func (m *_Loop) GetSetpointReference() ReadableProperty {
	return m.SetpointReference
}

func (m *_Loop) GetSetpoint() ReadableProperty {
	return m.Setpoint
}

func (m *_Loop) GetAction() ReadableProperty {
	return m.Action
}

func (m *_Loop) GetProportionalConstant() OptionalProperty {
	return m.ProportionalConstant
}

func (m *_Loop) GetProportionalConstantUnits() OptionalProperty {
	return m.ProportionalConstantUnits
}

func (m *_Loop) GetIntegralConstant() OptionalProperty {
	return m.IntegralConstant
}

func (m *_Loop) GetIntegralConstantUnits() OptionalProperty {
	return m.IntegralConstantUnits
}

func (m *_Loop) GetDerivativeConstant() OptionalProperty {
	return m.DerivativeConstant
}

func (m *_Loop) GetDerivativeConstantUnits() OptionalProperty {
	return m.DerivativeConstantUnits
}

func (m *_Loop) GetBias() OptionalProperty {
	return m.Bias
}

func (m *_Loop) GetMaximumOutput() OptionalProperty {
	return m.MaximumOutput
}

func (m *_Loop) GetMinimumOutput() OptionalProperty {
	return m.MinimumOutput
}

func (m *_Loop) GetPriorityForWriting() ReadableProperty {
	return m.PriorityForWriting
}

func (m *_Loop) GetCOVIncrement() OptionalProperty {
	return m.COVIncrement
}

func (m *_Loop) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_Loop) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Loop) GetErrorLimit() OptionalProperty {
	return m.ErrorLimit
}

func (m *_Loop) GetDeadband() OptionalProperty {
	return m.Deadband
}

func (m *_Loop) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Loop) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Loop) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Loop) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Loop) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Loop) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Loop) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Loop) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_Loop) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_Loop) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_Loop) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Loop) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Loop) GetLowDiffLimit() OptionalProperty {
	return m.LowDiffLimit
}

func (m *_Loop) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Loop) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Loop) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastLoop(structType any) Loop {
	if casted, ok := structType.(Loop); ok {
		return casted
	}
	if casted, ok := structType.(*Loop); ok {
		return *casted
	}
	return nil
}

func (m *_Loop) GetTypeName() string {
	return "Loop"
}

func (m *_Loop) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (updateInterval)
	lengthInBits += m.UpdateInterval.GetLengthInBits(ctx)

	// Simple field (outputUnits)
	lengthInBits += m.OutputUnits.GetLengthInBits(ctx)

	// Simple field (manipulatedVariableReference)
	lengthInBits += m.ManipulatedVariableReference.GetLengthInBits(ctx)

	// Simple field (controlledVariableReference)
	lengthInBits += m.ControlledVariableReference.GetLengthInBits(ctx)

	// Simple field (controlledVariableValue)
	lengthInBits += m.ControlledVariableValue.GetLengthInBits(ctx)

	// Simple field (controlledVariableUnits)
	lengthInBits += m.ControlledVariableUnits.GetLengthInBits(ctx)

	// Simple field (setpointReference)
	lengthInBits += m.SetpointReference.GetLengthInBits(ctx)

	// Simple field (setpoint)
	lengthInBits += m.Setpoint.GetLengthInBits(ctx)

	// Simple field (action)
	lengthInBits += m.Action.GetLengthInBits(ctx)

	// Simple field (proportionalConstant)
	lengthInBits += m.ProportionalConstant.GetLengthInBits(ctx)

	// Simple field (proportionalConstantUnits)
	lengthInBits += m.ProportionalConstantUnits.GetLengthInBits(ctx)

	// Simple field (integralConstant)
	lengthInBits += m.IntegralConstant.GetLengthInBits(ctx)

	// Simple field (integralConstantUnits)
	lengthInBits += m.IntegralConstantUnits.GetLengthInBits(ctx)

	// Simple field (derivativeConstant)
	lengthInBits += m.DerivativeConstant.GetLengthInBits(ctx)

	// Simple field (derivativeConstantUnits)
	lengthInBits += m.DerivativeConstantUnits.GetLengthInBits(ctx)

	// Simple field (bias)
	lengthInBits += m.Bias.GetLengthInBits(ctx)

	// Simple field (maximumOutput)
	lengthInBits += m.MaximumOutput.GetLengthInBits(ctx)

	// Simple field (minimumOutput)
	lengthInBits += m.MinimumOutput.GetLengthInBits(ctx)

	// Simple field (priorityForWriting)
	lengthInBits += m.PriorityForWriting.GetLengthInBits(ctx)

	// Simple field (cOVIncrement)
	lengthInBits += m.COVIncrement.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (errorLimit)
	lengthInBits += m.ErrorLimit.GetLengthInBits(ctx)

	// Simple field (deadband)
	lengthInBits += m.Deadband.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (lowDiffLimit)
	lengthInBits += m.LowDiffLimit.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Loop) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func LoopParse(ctx context.Context, theBytes []byte) (Loop, error) {
	return LoopParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func LoopParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Loop, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Loop, error) {
		return LoopParseWithBuffer(ctx, readBuffer)
	}
}

func LoopParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Loop, error) {
	v, err := (&_Loop{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Loop) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__loop Loop, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Loop"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Loop")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	updateInterval, err := ReadSimpleField[OptionalProperty](ctx, "updateInterval", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'updateInterval' field"))
	}
	m.UpdateInterval = updateInterval

	outputUnits, err := ReadSimpleField[ReadableProperty](ctx, "outputUnits", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outputUnits' field"))
	}
	m.OutputUnits = outputUnits

	manipulatedVariableReference, err := ReadSimpleField[ReadableProperty](ctx, "manipulatedVariableReference", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'manipulatedVariableReference' field"))
	}
	m.ManipulatedVariableReference = manipulatedVariableReference

	controlledVariableReference, err := ReadSimpleField[ReadableProperty](ctx, "controlledVariableReference", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'controlledVariableReference' field"))
	}
	m.ControlledVariableReference = controlledVariableReference

	controlledVariableValue, err := ReadSimpleField[ReadableProperty](ctx, "controlledVariableValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'controlledVariableValue' field"))
	}
	m.ControlledVariableValue = controlledVariableValue

	controlledVariableUnits, err := ReadSimpleField[ReadableProperty](ctx, "controlledVariableUnits", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'controlledVariableUnits' field"))
	}
	m.ControlledVariableUnits = controlledVariableUnits

	setpointReference, err := ReadSimpleField[ReadableProperty](ctx, "setpointReference", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetSetpointReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'setpointReference' field"))
	}
	m.SetpointReference = setpointReference

	setpoint, err := ReadSimpleField[ReadableProperty](ctx, "setpoint", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'setpoint' field"))
	}
	m.Setpoint = setpoint

	action, err := ReadSimpleField[ReadableProperty](ctx, "action", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAction")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'action' field"))
	}
	m.Action = action

	proportionalConstant, err := ReadSimpleField[OptionalProperty](ctx, "proportionalConstant", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'proportionalConstant' field"))
	}
	m.ProportionalConstant = proportionalConstant

	proportionalConstantUnits, err := ReadSimpleField[OptionalProperty](ctx, "proportionalConstantUnits", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'proportionalConstantUnits' field"))
	}
	m.ProportionalConstantUnits = proportionalConstantUnits

	integralConstant, err := ReadSimpleField[OptionalProperty](ctx, "integralConstant", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'integralConstant' field"))
	}
	m.IntegralConstant = integralConstant

	integralConstantUnits, err := ReadSimpleField[OptionalProperty](ctx, "integralConstantUnits", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'integralConstantUnits' field"))
	}
	m.IntegralConstantUnits = integralConstantUnits

	derivativeConstant, err := ReadSimpleField[OptionalProperty](ctx, "derivativeConstant", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'derivativeConstant' field"))
	}
	m.DerivativeConstant = derivativeConstant

	derivativeConstantUnits, err := ReadSimpleField[OptionalProperty](ctx, "derivativeConstantUnits", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'derivativeConstantUnits' field"))
	}
	m.DerivativeConstantUnits = derivativeConstantUnits

	bias, err := ReadSimpleField[OptionalProperty](ctx, "bias", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bias' field"))
	}
	m.Bias = bias

	maximumOutput, err := ReadSimpleField[OptionalProperty](ctx, "maximumOutput", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maximumOutput' field"))
	}
	m.MaximumOutput = maximumOutput

	minimumOutput, err := ReadSimpleField[OptionalProperty](ctx, "minimumOutput", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'minimumOutput' field"))
	}
	m.MinimumOutput = minimumOutput

	priorityForWriting, err := ReadSimpleField[ReadableProperty](ctx, "priorityForWriting", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned(1..16)")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'priorityForWriting' field"))
	}
	m.PriorityForWriting = priorityForWriting

	cOVIncrement, err := ReadSimpleField[OptionalProperty](ctx, "cOVIncrement", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVIncrement' field"))
	}
	m.COVIncrement = cOVIncrement

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	errorLimit, err := ReadSimpleField[OptionalProperty](ctx, "errorLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'errorLimit' field"))
	}
	m.ErrorLimit = errorLimit

	deadband, err := ReadSimpleField[OptionalProperty](ctx, "deadband", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deadband' field"))
	}
	m.Deadband = deadband

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	lowDiffLimit, err := ReadSimpleField[OptionalProperty](ctx, "lowDiffLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetOptionalREAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lowDiffLimit' field"))
	}
	m.LowDiffLimit = lowDiffLimit

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Loop"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Loop")
	}

	return m, nil
}

func (m *_Loop) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Loop) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Loop"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Loop")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "updateInterval", m.GetUpdateInterval(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'updateInterval' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outputUnits", m.GetOutputUnits(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outputUnits' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "manipulatedVariableReference", m.GetManipulatedVariableReference(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'manipulatedVariableReference' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "controlledVariableReference", m.GetControlledVariableReference(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'controlledVariableReference' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "controlledVariableValue", m.GetControlledVariableValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'controlledVariableValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "controlledVariableUnits", m.GetControlledVariableUnits(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'controlledVariableUnits' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "setpointReference", m.GetSetpointReference(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'setpointReference' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "setpoint", m.GetSetpoint(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'setpoint' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "action", m.GetAction(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'action' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "proportionalConstant", m.GetProportionalConstant(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'proportionalConstant' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "proportionalConstantUnits", m.GetProportionalConstantUnits(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'proportionalConstantUnits' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "integralConstant", m.GetIntegralConstant(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'integralConstant' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "integralConstantUnits", m.GetIntegralConstantUnits(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'integralConstantUnits' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "derivativeConstant", m.GetDerivativeConstant(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'derivativeConstant' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "derivativeConstantUnits", m.GetDerivativeConstantUnits(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'derivativeConstantUnits' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bias", m.GetBias(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bias' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maximumOutput", m.GetMaximumOutput(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maximumOutput' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "minimumOutput", m.GetMinimumOutput(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'minimumOutput' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "priorityForWriting", m.GetPriorityForWriting(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'priorityForWriting' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVIncrement", m.GetCOVIncrement(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVIncrement' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "errorLimit", m.GetErrorLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'errorLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deadband", m.GetDeadband(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deadband' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lowDiffLimit", m.GetLowDiffLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lowDiffLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Loop"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Loop")
	}
	return nil
}

func (m *_Loop) IsLoop() {}

func (m *_Loop) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Loop) deepCopy() *_Loop {
	if m == nil {
		return nil
	}
	_LoopCopy := &_Loop{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.UpdateInterval.DeepCopy().(OptionalProperty),
		m.OutputUnits.DeepCopy().(ReadableProperty),
		m.ManipulatedVariableReference.DeepCopy().(ReadableProperty),
		m.ControlledVariableReference.DeepCopy().(ReadableProperty),
		m.ControlledVariableValue.DeepCopy().(ReadableProperty),
		m.ControlledVariableUnits.DeepCopy().(ReadableProperty),
		m.SetpointReference.DeepCopy().(ReadableProperty),
		m.Setpoint.DeepCopy().(ReadableProperty),
		m.Action.DeepCopy().(ReadableProperty),
		m.ProportionalConstant.DeepCopy().(OptionalProperty),
		m.ProportionalConstantUnits.DeepCopy().(OptionalProperty),
		m.IntegralConstant.DeepCopy().(OptionalProperty),
		m.IntegralConstantUnits.DeepCopy().(OptionalProperty),
		m.DerivativeConstant.DeepCopy().(OptionalProperty),
		m.DerivativeConstantUnits.DeepCopy().(OptionalProperty),
		m.Bias.DeepCopy().(OptionalProperty),
		m.MaximumOutput.DeepCopy().(OptionalProperty),
		m.MinimumOutput.DeepCopy().(OptionalProperty),
		m.PriorityForWriting.DeepCopy().(ReadableProperty),
		m.COVIncrement.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.ErrorLimit.DeepCopy().(OptionalProperty),
		m.Deadband.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.LowDiffLimit.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _LoopCopy
}

func (m *_Loop) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
