/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// ElevatorGroup is the corresponding interface of ElevatorGroup
type ElevatorGroup interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetMachineRoomID returns MachineRoomID (property field)
	GetMachineRoomID() ReadableProperty
	// GetGroupID returns GroupID (property field)
	GetGroupID() ReadableProperty
	// GetGroupMembers returns GroupMembers (property field)
	GetGroupMembers() ReadableProperty
	// GetGroupMode returns GroupMode (property field)
	GetGroupMode() OptionalProperty
	// GetLandingCalls returns LandingCalls (property field)
	GetLandingCalls() OptionalProperty
	// GetLandingCallControl returns LandingCallControl (property field)
	GetLandingCallControl() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsElevatorGroup is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsElevatorGroup()
	// CreateBuilder creates a ElevatorGroupBuilder
	CreateElevatorGroupBuilder() ElevatorGroupBuilder
}

// _ElevatorGroup is the data-structure of this message
type _ElevatorGroup struct {
	ObjectIdentifier   ReadableProperty
	ObjectName         ReadableProperty
	ObjectType         ReadableProperty
	Description        OptionalProperty
	MachineRoomID      ReadableProperty
	GroupID            ReadableProperty
	GroupMembers       ReadableProperty
	GroupMode          OptionalProperty
	LandingCalls       OptionalProperty
	LandingCallControl OptionalProperty
	PropertyList       ReadableProperty
	Tags               OptionalProperty
	ProfileLocation    OptionalProperty
	ProfileName        OptionalProperty
}

var _ ElevatorGroup = (*_ElevatorGroup)(nil)

// NewElevatorGroup factory function for _ElevatorGroup
func NewElevatorGroup(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, machineRoomID ReadableProperty, groupID ReadableProperty, groupMembers ReadableProperty, groupMode OptionalProperty, landingCalls OptionalProperty, landingCallControl OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_ElevatorGroup {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for ElevatorGroup must not be nil")
	}
	if machineRoomID == nil {
		panic("machineRoomID of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if groupID == nil {
		panic("groupID of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if groupMembers == nil {
		panic("groupMembers of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if groupMode == nil {
		panic("groupMode of type OptionalProperty for ElevatorGroup must not be nil")
	}
	if landingCalls == nil {
		panic("landingCalls of type OptionalProperty for ElevatorGroup must not be nil")
	}
	if landingCallControl == nil {
		panic("landingCallControl of type OptionalProperty for ElevatorGroup must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for ElevatorGroup must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for ElevatorGroup must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for ElevatorGroup must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for ElevatorGroup must not be nil")
	}
	return &_ElevatorGroup{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, MachineRoomID: machineRoomID, GroupID: groupID, GroupMembers: groupMembers, GroupMode: groupMode, LandingCalls: landingCalls, LandingCallControl: landingCallControl, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// ElevatorGroupBuilder is a builder for ElevatorGroup
type ElevatorGroupBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, machineRoomID ReadableProperty, groupID ReadableProperty, groupMembers ReadableProperty, groupMode OptionalProperty, landingCalls OptionalProperty, landingCallControl OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) ElevatorGroupBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) ElevatorGroupBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) ElevatorGroupBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) ElevatorGroupBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) ElevatorGroupBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// WithMachineRoomID adds MachineRoomID (property field)
	WithMachineRoomID(ReadableProperty) ElevatorGroupBuilder
	// WithMachineRoomIDBuilder adds MachineRoomID (property field) which is build by the builder
	WithMachineRoomIDBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithGroupID adds GroupID (property field)
	WithGroupID(ReadableProperty) ElevatorGroupBuilder
	// WithGroupIDBuilder adds GroupID (property field) which is build by the builder
	WithGroupIDBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithGroupMembers adds GroupMembers (property field)
	WithGroupMembers(ReadableProperty) ElevatorGroupBuilder
	// WithGroupMembersBuilder adds GroupMembers (property field) which is build by the builder
	WithGroupMembersBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithGroupMode adds GroupMode (property field)
	WithGroupMode(OptionalProperty) ElevatorGroupBuilder
	// WithGroupModeBuilder adds GroupMode (property field) which is build by the builder
	WithGroupModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// WithLandingCalls adds LandingCalls (property field)
	WithLandingCalls(OptionalProperty) ElevatorGroupBuilder
	// WithLandingCallsBuilder adds LandingCalls (property field) which is build by the builder
	WithLandingCallsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// WithLandingCallControl adds LandingCallControl (property field)
	WithLandingCallControl(OptionalProperty) ElevatorGroupBuilder
	// WithLandingCallControlBuilder adds LandingCallControl (property field) which is build by the builder
	WithLandingCallControlBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) ElevatorGroupBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) ElevatorGroupBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) ElevatorGroupBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) ElevatorGroupBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder
	// Build builds the ElevatorGroup or returns an error if something is wrong
	Build() (ElevatorGroup, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() ElevatorGroup
}

// NewElevatorGroupBuilder() creates a ElevatorGroupBuilder
func NewElevatorGroupBuilder() ElevatorGroupBuilder {
	return &_ElevatorGroupBuilder{_ElevatorGroup: new(_ElevatorGroup)}
}

type _ElevatorGroupBuilder struct {
	*_ElevatorGroup

	err *utils.MultiError
}

var _ (ElevatorGroupBuilder) = (*_ElevatorGroupBuilder)(nil)

func (b *_ElevatorGroupBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, machineRoomID ReadableProperty, groupID ReadableProperty, groupMembers ReadableProperty, groupMode OptionalProperty, landingCalls OptionalProperty, landingCallControl OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) ElevatorGroupBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithMachineRoomID(machineRoomID).WithGroupID(groupID).WithGroupMembers(groupMembers).WithGroupMode(groupMode).WithLandingCalls(landingCalls).WithLandingCallControl(landingCallControl).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_ElevatorGroupBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) ElevatorGroupBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_ElevatorGroupBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithObjectName(objectName ReadableProperty) ElevatorGroupBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_ElevatorGroupBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithObjectType(objectType ReadableProperty) ElevatorGroupBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_ElevatorGroupBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithDescription(description OptionalProperty) ElevatorGroupBuilder {
	b.Description = description
	return b
}

func (b *_ElevatorGroupBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithMachineRoomID(machineRoomID ReadableProperty) ElevatorGroupBuilder {
	b.MachineRoomID = machineRoomID
	return b
}

func (b *_ElevatorGroupBuilder) WithMachineRoomIDBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.MachineRoomID.CreateReadablePropertyBuilder())
	var err error
	b.MachineRoomID, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithGroupID(groupID ReadableProperty) ElevatorGroupBuilder {
	b.GroupID = groupID
	return b
}

func (b *_ElevatorGroupBuilder) WithGroupIDBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.GroupID.CreateReadablePropertyBuilder())
	var err error
	b.GroupID, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithGroupMembers(groupMembers ReadableProperty) ElevatorGroupBuilder {
	b.GroupMembers = groupMembers
	return b
}

func (b *_ElevatorGroupBuilder) WithGroupMembersBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.GroupMembers.CreateReadablePropertyBuilder())
	var err error
	b.GroupMembers, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithGroupMode(groupMode OptionalProperty) ElevatorGroupBuilder {
	b.GroupMode = groupMode
	return b
}

func (b *_ElevatorGroupBuilder) WithGroupModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.GroupMode.CreateOptionalPropertyBuilder())
	var err error
	b.GroupMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithLandingCalls(landingCalls OptionalProperty) ElevatorGroupBuilder {
	b.LandingCalls = landingCalls
	return b
}

func (b *_ElevatorGroupBuilder) WithLandingCallsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.LandingCalls.CreateOptionalPropertyBuilder())
	var err error
	b.LandingCalls, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithLandingCallControl(landingCallControl OptionalProperty) ElevatorGroupBuilder {
	b.LandingCallControl = landingCallControl
	return b
}

func (b *_ElevatorGroupBuilder) WithLandingCallControlBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.LandingCallControl.CreateOptionalPropertyBuilder())
	var err error
	b.LandingCallControl, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithPropertyList(propertyList ReadableProperty) ElevatorGroupBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_ElevatorGroupBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithTags(tags OptionalProperty) ElevatorGroupBuilder {
	b.Tags = tags
	return b
}

func (b *_ElevatorGroupBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithProfileLocation(profileLocation OptionalProperty) ElevatorGroupBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_ElevatorGroupBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) WithProfileName(profileName OptionalProperty) ElevatorGroupBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_ElevatorGroupBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ElevatorGroupBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ElevatorGroupBuilder) Build() (ElevatorGroup, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.MachineRoomID == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'machineRoomID' not set"))
	}
	if b.GroupID == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupID' not set"))
	}
	if b.GroupMembers == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupMembers' not set"))
	}
	if b.GroupMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupMode' not set"))
	}
	if b.LandingCalls == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'landingCalls' not set"))
	}
	if b.LandingCallControl == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'landingCallControl' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._ElevatorGroup.deepCopy(), nil
}

func (b *_ElevatorGroupBuilder) MustBuild() ElevatorGroup {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_ElevatorGroupBuilder) DeepCopy() any {
	_copy := b.CreateElevatorGroupBuilder().(*_ElevatorGroupBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateElevatorGroupBuilder creates a ElevatorGroupBuilder
func (b *_ElevatorGroup) CreateElevatorGroupBuilder() ElevatorGroupBuilder {
	if b == nil {
		return NewElevatorGroupBuilder()
	}
	return &_ElevatorGroupBuilder{_ElevatorGroup: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_ElevatorGroup) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_ElevatorGroup) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_ElevatorGroup) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_ElevatorGroup) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_ElevatorGroup) GetMachineRoomID() ReadableProperty {
	return m.MachineRoomID
}

func (m *_ElevatorGroup) GetGroupID() ReadableProperty {
	return m.GroupID
}

func (m *_ElevatorGroup) GetGroupMembers() ReadableProperty {
	return m.GroupMembers
}

func (m *_ElevatorGroup) GetGroupMode() OptionalProperty {
	return m.GroupMode
}

func (m *_ElevatorGroup) GetLandingCalls() OptionalProperty {
	return m.LandingCalls
}

func (m *_ElevatorGroup) GetLandingCallControl() OptionalProperty {
	return m.LandingCallControl
}

func (m *_ElevatorGroup) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_ElevatorGroup) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_ElevatorGroup) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_ElevatorGroup) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastElevatorGroup(structType any) ElevatorGroup {
	if casted, ok := structType.(ElevatorGroup); ok {
		return casted
	}
	if casted, ok := structType.(*ElevatorGroup); ok {
		return *casted
	}
	return nil
}

func (m *_ElevatorGroup) GetTypeName() string {
	return "ElevatorGroup"
}

func (m *_ElevatorGroup) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (machineRoomID)
	lengthInBits += m.MachineRoomID.GetLengthInBits(ctx)

	// Simple field (groupID)
	lengthInBits += m.GroupID.GetLengthInBits(ctx)

	// Simple field (groupMembers)
	lengthInBits += m.GroupMembers.GetLengthInBits(ctx)

	// Simple field (groupMode)
	lengthInBits += m.GroupMode.GetLengthInBits(ctx)

	// Simple field (landingCalls)
	lengthInBits += m.LandingCalls.GetLengthInBits(ctx)

	// Simple field (landingCallControl)
	lengthInBits += m.LandingCallControl.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_ElevatorGroup) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func ElevatorGroupParse(ctx context.Context, theBytes []byte) (ElevatorGroup, error) {
	return ElevatorGroupParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func ElevatorGroupParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (ElevatorGroup, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (ElevatorGroup, error) {
		return ElevatorGroupParseWithBuffer(ctx, readBuffer)
	}
}

func ElevatorGroupParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (ElevatorGroup, error) {
	v, err := (&_ElevatorGroup{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_ElevatorGroup) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__elevatorGroup ElevatorGroup, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("ElevatorGroup"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ElevatorGroup")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	machineRoomID, err := ReadSimpleField[ReadableProperty](ctx, "machineRoomID", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'machineRoomID' field"))
	}
	m.MachineRoomID = machineRoomID

	groupID, err := ReadSimpleField[ReadableProperty](ctx, "groupID", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupID' field"))
	}
	m.GroupID = groupID

	groupMembers, err := ReadSimpleField[ReadableProperty](ctx, "groupMembers", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupMembers' field"))
	}
	m.GroupMembers = groupMembers

	groupMode, err := ReadSimpleField[OptionalProperty](ctx, "groupMode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLiftGroupMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupMode' field"))
	}
	m.GroupMode = groupMode

	landingCalls, err := ReadSimpleField[OptionalProperty](ctx, "landingCalls", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetLandingCallStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'landingCalls' field"))
	}
	m.LandingCalls = landingCalls

	landingCallControl, err := ReadSimpleField[OptionalProperty](ctx, "landingCallControl", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLandingCallStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'landingCallControl' field"))
	}
	m.LandingCallControl = landingCallControl

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("ElevatorGroup"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ElevatorGroup")
	}

	return m, nil
}

func (m *_ElevatorGroup) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_ElevatorGroup) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("ElevatorGroup"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for ElevatorGroup")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "machineRoomID", m.GetMachineRoomID(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'machineRoomID' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "groupID", m.GetGroupID(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupID' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "groupMembers", m.GetGroupMembers(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupMembers' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "groupMode", m.GetGroupMode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupMode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "landingCalls", m.GetLandingCalls(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'landingCalls' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "landingCallControl", m.GetLandingCallControl(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'landingCallControl' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("ElevatorGroup"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for ElevatorGroup")
	}
	return nil
}

func (m *_ElevatorGroup) IsElevatorGroup() {}

func (m *_ElevatorGroup) DeepCopy() any {
	return m.deepCopy()
}

func (m *_ElevatorGroup) deepCopy() *_ElevatorGroup {
	if m == nil {
		return nil
	}
	_ElevatorGroupCopy := &_ElevatorGroup{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.MachineRoomID.DeepCopy().(ReadableProperty),
		m.GroupID.DeepCopy().(ReadableProperty),
		m.GroupMembers.DeepCopy().(ReadableProperty),
		m.GroupMode.DeepCopy().(OptionalProperty),
		m.LandingCalls.DeepCopy().(OptionalProperty),
		m.LandingCallControl.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _ElevatorGroupCopy
}

func (m *_ElevatorGroup) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
