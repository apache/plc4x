/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLandingCallStatusCommandDirection is the corresponding interface of BACnetLandingCallStatusCommandDirection
type BACnetLandingCallStatusCommandDirection interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	BACnetLandingCallStatusCommand
	// GetDirection returns Direction (property field)
	GetDirection() BACnetLiftCarDirectionTagged
	// IsBACnetLandingCallStatusCommandDirection is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetLandingCallStatusCommandDirection()
	// CreateBuilder creates a BACnetLandingCallStatusCommandDirectionBuilder
	CreateBACnetLandingCallStatusCommandDirectionBuilder() BACnetLandingCallStatusCommandDirectionBuilder
}

// _BACnetLandingCallStatusCommandDirection is the data-structure of this message
type _BACnetLandingCallStatusCommandDirection struct {
	BACnetLandingCallStatusCommandContract
	Direction BACnetLiftCarDirectionTagged
}

var _ BACnetLandingCallStatusCommandDirection = (*_BACnetLandingCallStatusCommandDirection)(nil)
var _ BACnetLandingCallStatusCommandRequirements = (*_BACnetLandingCallStatusCommandDirection)(nil)

// NewBACnetLandingCallStatusCommandDirection factory function for _BACnetLandingCallStatusCommandDirection
func NewBACnetLandingCallStatusCommandDirection(peekedTagHeader BACnetTagHeader, direction BACnetLiftCarDirectionTagged) *_BACnetLandingCallStatusCommandDirection {
	if direction == nil {
		panic("direction of type BACnetLiftCarDirectionTagged for BACnetLandingCallStatusCommandDirection must not be nil")
	}
	_result := &_BACnetLandingCallStatusCommandDirection{
		BACnetLandingCallStatusCommandContract: NewBACnetLandingCallStatusCommand(peekedTagHeader),
		Direction:                              direction,
	}
	_result.BACnetLandingCallStatusCommandContract.(*_BACnetLandingCallStatusCommand)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// BACnetLandingCallStatusCommandDirectionBuilder is a builder for BACnetLandingCallStatusCommandDirection
type BACnetLandingCallStatusCommandDirectionBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(direction BACnetLiftCarDirectionTagged) BACnetLandingCallStatusCommandDirectionBuilder
	// WithDirection adds Direction (property field)
	WithDirection(BACnetLiftCarDirectionTagged) BACnetLandingCallStatusCommandDirectionBuilder
	// WithDirectionBuilder adds Direction (property field) which is build by the builder
	WithDirectionBuilder(func(BACnetLiftCarDirectionTaggedBuilder) BACnetLiftCarDirectionTaggedBuilder) BACnetLandingCallStatusCommandDirectionBuilder
	// Build builds the BACnetLandingCallStatusCommandDirection or returns an error if something is wrong
	Build() (BACnetLandingCallStatusCommandDirection, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() BACnetLandingCallStatusCommandDirection
}

// NewBACnetLandingCallStatusCommandDirectionBuilder() creates a BACnetLandingCallStatusCommandDirectionBuilder
func NewBACnetLandingCallStatusCommandDirectionBuilder() BACnetLandingCallStatusCommandDirectionBuilder {
	return &_BACnetLandingCallStatusCommandDirectionBuilder{_BACnetLandingCallStatusCommandDirection: new(_BACnetLandingCallStatusCommandDirection)}
}

type _BACnetLandingCallStatusCommandDirectionBuilder struct {
	*_BACnetLandingCallStatusCommandDirection

	err *utils.MultiError
}

var _ (BACnetLandingCallStatusCommandDirectionBuilder) = (*_BACnetLandingCallStatusCommandDirectionBuilder)(nil)

func (m *_BACnetLandingCallStatusCommandDirectionBuilder) WithMandatoryFields(direction BACnetLiftCarDirectionTagged) BACnetLandingCallStatusCommandDirectionBuilder {
	return m.WithDirection(direction)
}

func (m *_BACnetLandingCallStatusCommandDirectionBuilder) WithDirection(direction BACnetLiftCarDirectionTagged) BACnetLandingCallStatusCommandDirectionBuilder {
	m.Direction = direction
	return m
}

func (m *_BACnetLandingCallStatusCommandDirectionBuilder) WithDirectionBuilder(builderSupplier func(BACnetLiftCarDirectionTaggedBuilder) BACnetLiftCarDirectionTaggedBuilder) BACnetLandingCallStatusCommandDirectionBuilder {
	builder := builderSupplier(m.Direction.CreateBACnetLiftCarDirectionTaggedBuilder())
	var err error
	m.Direction, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "BACnetLiftCarDirectionTaggedBuilder failed"))
	}
	return m
}

func (m *_BACnetLandingCallStatusCommandDirectionBuilder) Build() (BACnetLandingCallStatusCommandDirection, error) {
	if m.Direction == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'direction' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._BACnetLandingCallStatusCommandDirection.deepCopy(), nil
}

func (m *_BACnetLandingCallStatusCommandDirectionBuilder) MustBuild() BACnetLandingCallStatusCommandDirection {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_BACnetLandingCallStatusCommandDirectionBuilder) DeepCopy() any {
	return m.CreateBACnetLandingCallStatusCommandDirectionBuilder()
}

// CreateBACnetLandingCallStatusCommandDirectionBuilder creates a BACnetLandingCallStatusCommandDirectionBuilder
func (m *_BACnetLandingCallStatusCommandDirection) CreateBACnetLandingCallStatusCommandDirectionBuilder() BACnetLandingCallStatusCommandDirectionBuilder {
	if m == nil {
		return NewBACnetLandingCallStatusCommandDirectionBuilder()
	}
	return &_BACnetLandingCallStatusCommandDirectionBuilder{_BACnetLandingCallStatusCommandDirection: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_BACnetLandingCallStatusCommandDirection) GetParent() BACnetLandingCallStatusCommandContract {
	return m.BACnetLandingCallStatusCommandContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BACnetLandingCallStatusCommandDirection) GetDirection() BACnetLiftCarDirectionTagged {
	return m.Direction
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastBACnetLandingCallStatusCommandDirection(structType any) BACnetLandingCallStatusCommandDirection {
	if casted, ok := structType.(BACnetLandingCallStatusCommandDirection); ok {
		return casted
	}
	if casted, ok := structType.(*BACnetLandingCallStatusCommandDirection); ok {
		return *casted
	}
	return nil
}

func (m *_BACnetLandingCallStatusCommandDirection) GetTypeName() string {
	return "BACnetLandingCallStatusCommandDirection"
}

func (m *_BACnetLandingCallStatusCommandDirection) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.BACnetLandingCallStatusCommandContract.(*_BACnetLandingCallStatusCommand).getLengthInBits(ctx))

	// Simple field (direction)
	lengthInBits += m.Direction.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_BACnetLandingCallStatusCommandDirection) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_BACnetLandingCallStatusCommandDirection) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_BACnetLandingCallStatusCommand) (__bACnetLandingCallStatusCommandDirection BACnetLandingCallStatusCommandDirection, err error) {
	m.BACnetLandingCallStatusCommandContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetLandingCallStatusCommandDirection"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetLandingCallStatusCommandDirection")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	direction, err := ReadSimpleField[BACnetLiftCarDirectionTagged](ctx, "direction", ReadComplex[BACnetLiftCarDirectionTagged](BACnetLiftCarDirectionTaggedParseWithBufferProducer((uint8)(uint8(1)), (TagClass)(TagClass_CONTEXT_SPECIFIC_TAGS)), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'direction' field"))
	}
	m.Direction = direction

	if closeErr := readBuffer.CloseContext("BACnetLandingCallStatusCommandDirection"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetLandingCallStatusCommandDirection")
	}

	return m, nil
}

func (m *_BACnetLandingCallStatusCommandDirection) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_BACnetLandingCallStatusCommandDirection) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetLandingCallStatusCommandDirection"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetLandingCallStatusCommandDirection")
		}

		if err := WriteSimpleField[BACnetLiftCarDirectionTagged](ctx, "direction", m.GetDirection(), WriteComplex[BACnetLiftCarDirectionTagged](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'direction' field")
		}

		if popErr := writeBuffer.PopContext("BACnetLandingCallStatusCommandDirection"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetLandingCallStatusCommandDirection")
		}
		return nil
	}
	return m.BACnetLandingCallStatusCommandContract.(*_BACnetLandingCallStatusCommand).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_BACnetLandingCallStatusCommandDirection) IsBACnetLandingCallStatusCommandDirection() {}

func (m *_BACnetLandingCallStatusCommandDirection) DeepCopy() any {
	return m.deepCopy()
}

func (m *_BACnetLandingCallStatusCommandDirection) deepCopy() *_BACnetLandingCallStatusCommandDirection {
	if m == nil {
		return nil
	}
	_BACnetLandingCallStatusCommandDirectionCopy := &_BACnetLandingCallStatusCommandDirection{
		m.BACnetLandingCallStatusCommandContract.(*_BACnetLandingCallStatusCommand).deepCopy(),
		m.Direction.DeepCopy().(BACnetLiftCarDirectionTagged),
	}
	m.BACnetLandingCallStatusCommandContract.(*_BACnetLandingCallStatusCommand)._SubType = m
	return _BACnetLandingCallStatusCommandDirectionCopy
}

func (m *_BACnetLandingCallStatusCommandDirection) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
