/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// PulseConverter is the corresponding interface of PulseConverter
type PulseConverter interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetInputReference returns InputReference (property field)
	GetInputReference() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetUnits returns Units (property field)
	GetUnits() ReadableProperty
	// GetScaleFactor returns ScaleFactor (property field)
	GetScaleFactor() ReadableProperty
	// GetAdjustValue returns AdjustValue (property field)
	GetAdjustValue() WritableProperty
	// GetCount returns Count (property field)
	GetCount() ReadableProperty
	// GetUpdateTime returns UpdateTime (property field)
	GetUpdateTime() ReadableProperty
	// GetCountChangeTime returns CountChangeTime (property field)
	GetCountChangeTime() ReadableProperty
	// GetCountBeforeChange returns CountBeforeChange (property field)
	GetCountBeforeChange() ReadableProperty
	// GetCOVIncrement returns COVIncrement (property field)
	GetCOVIncrement() OptionalProperty
	// GetCOVPeriod returns COVPeriod (property field)
	GetCOVPeriod() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetHighLimit returns HighLimit (property field)
	GetHighLimit() OptionalProperty
	// GetLowLimit returns LowLimit (property field)
	GetLowLimit() OptionalProperty
	// GetDeadband returns Deadband (property field)
	GetDeadband() OptionalProperty
	// GetLimitEnable returns LimitEnable (property field)
	GetLimitEnable() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsPulseConverter is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsPulseConverter()
	// CreateBuilder creates a PulseConverterBuilder
	CreatePulseConverterBuilder() PulseConverterBuilder
}

// _PulseConverter is the data-structure of this message
type _PulseConverter struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	PresentValue                 ReadableProperty
	InputReference               OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	Units                        ReadableProperty
	ScaleFactor                  ReadableProperty
	AdjustValue                  WritableProperty
	Count                        ReadableProperty
	UpdateTime                   ReadableProperty
	CountChangeTime              ReadableProperty
	CountBeforeChange            ReadableProperty
	COVIncrement                 OptionalProperty
	COVPeriod                    OptionalProperty
	NotificationClass            OptionalProperty
	TimeDelay                    OptionalProperty
	HighLimit                    OptionalProperty
	LowLimit                     OptionalProperty
	Deadband                     OptionalProperty
	LimitEnable                  OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ PulseConverter = (*_PulseConverter)(nil)

// NewPulseConverter factory function for _PulseConverter
func NewPulseConverter(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, inputReference OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, units ReadableProperty, scaleFactor ReadableProperty, adjustValue WritableProperty, count ReadableProperty, updateTime ReadableProperty, countChangeTime ReadableProperty, countBeforeChange ReadableProperty, cOVIncrement OptionalProperty, cOVPeriod OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, deadband OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_PulseConverter {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for PulseConverter must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for PulseConverter must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for PulseConverter must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for PulseConverter must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for PulseConverter must not be nil")
	}
	if inputReference == nil {
		panic("inputReference of type OptionalProperty for PulseConverter must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for PulseConverter must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for PulseConverter must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for PulseConverter must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for PulseConverter must not be nil")
	}
	if units == nil {
		panic("units of type ReadableProperty for PulseConverter must not be nil")
	}
	if scaleFactor == nil {
		panic("scaleFactor of type ReadableProperty for PulseConverter must not be nil")
	}
	if adjustValue == nil {
		panic("adjustValue of type WritableProperty for PulseConverter must not be nil")
	}
	if count == nil {
		panic("count of type ReadableProperty for PulseConverter must not be nil")
	}
	if updateTime == nil {
		panic("updateTime of type ReadableProperty for PulseConverter must not be nil")
	}
	if countChangeTime == nil {
		panic("countChangeTime of type ReadableProperty for PulseConverter must not be nil")
	}
	if countBeforeChange == nil {
		panic("countBeforeChange of type ReadableProperty for PulseConverter must not be nil")
	}
	if cOVIncrement == nil {
		panic("cOVIncrement of type OptionalProperty for PulseConverter must not be nil")
	}
	if cOVPeriod == nil {
		panic("cOVPeriod of type OptionalProperty for PulseConverter must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for PulseConverter must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for PulseConverter must not be nil")
	}
	if highLimit == nil {
		panic("highLimit of type OptionalProperty for PulseConverter must not be nil")
	}
	if lowLimit == nil {
		panic("lowLimit of type OptionalProperty for PulseConverter must not be nil")
	}
	if deadband == nil {
		panic("deadband of type OptionalProperty for PulseConverter must not be nil")
	}
	if limitEnable == nil {
		panic("limitEnable of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for PulseConverter must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for PulseConverter must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for PulseConverter must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for PulseConverter must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for PulseConverter must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for PulseConverter must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for PulseConverter must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for PulseConverter must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for PulseConverter must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for PulseConverter must not be nil")
	}
	return &_PulseConverter{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, PresentValue: presentValue, InputReference: inputReference, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, Units: units, ScaleFactor: scaleFactor, AdjustValue: adjustValue, Count: count, UpdateTime: updateTime, CountChangeTime: countChangeTime, CountBeforeChange: countBeforeChange, COVIncrement: cOVIncrement, COVPeriod: cOVPeriod, NotificationClass: notificationClass, TimeDelay: timeDelay, HighLimit: highLimit, LowLimit: lowLimit, Deadband: deadband, LimitEnable: limitEnable, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// PulseConverterBuilder is a builder for PulseConverter
type PulseConverterBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, inputReference OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, units ReadableProperty, scaleFactor ReadableProperty, adjustValue WritableProperty, count ReadableProperty, updateTime ReadableProperty, countChangeTime ReadableProperty, countBeforeChange ReadableProperty, cOVIncrement OptionalProperty, cOVPeriod OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, deadband OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) PulseConverterBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) PulseConverterBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) PulseConverterBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) PulseConverterBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) PulseConverterBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) PulseConverterBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithInputReference adds InputReference (property field)
	WithInputReference(OptionalProperty) PulseConverterBuilder
	// WithInputReferenceBuilder adds InputReference (property field) which is build by the builder
	WithInputReferenceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) PulseConverterBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) PulseConverterBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) PulseConverterBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) PulseConverterBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithUnits adds Units (property field)
	WithUnits(ReadableProperty) PulseConverterBuilder
	// WithUnitsBuilder adds Units (property field) which is build by the builder
	WithUnitsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithScaleFactor adds ScaleFactor (property field)
	WithScaleFactor(ReadableProperty) PulseConverterBuilder
	// WithScaleFactorBuilder adds ScaleFactor (property field) which is build by the builder
	WithScaleFactorBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithAdjustValue adds AdjustValue (property field)
	WithAdjustValue(WritableProperty) PulseConverterBuilder
	// WithAdjustValueBuilder adds AdjustValue (property field) which is build by the builder
	WithAdjustValueBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) PulseConverterBuilder
	// WithCount adds Count (property field)
	WithCount(ReadableProperty) PulseConverterBuilder
	// WithCountBuilder adds Count (property field) which is build by the builder
	WithCountBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithUpdateTime adds UpdateTime (property field)
	WithUpdateTime(ReadableProperty) PulseConverterBuilder
	// WithUpdateTimeBuilder adds UpdateTime (property field) which is build by the builder
	WithUpdateTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithCountChangeTime adds CountChangeTime (property field)
	WithCountChangeTime(ReadableProperty) PulseConverterBuilder
	// WithCountChangeTimeBuilder adds CountChangeTime (property field) which is build by the builder
	WithCountChangeTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithCountBeforeChange adds CountBeforeChange (property field)
	WithCountBeforeChange(ReadableProperty) PulseConverterBuilder
	// WithCountBeforeChangeBuilder adds CountBeforeChange (property field) which is build by the builder
	WithCountBeforeChangeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithCOVIncrement adds COVIncrement (property field)
	WithCOVIncrement(OptionalProperty) PulseConverterBuilder
	// WithCOVIncrementBuilder adds COVIncrement (property field) which is build by the builder
	WithCOVIncrementBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithCOVPeriod adds COVPeriod (property field)
	WithCOVPeriod(OptionalProperty) PulseConverterBuilder
	// WithCOVPeriodBuilder adds COVPeriod (property field) which is build by the builder
	WithCOVPeriodBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) PulseConverterBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) PulseConverterBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithHighLimit adds HighLimit (property field)
	WithHighLimit(OptionalProperty) PulseConverterBuilder
	// WithHighLimitBuilder adds HighLimit (property field) which is build by the builder
	WithHighLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithLowLimit adds LowLimit (property field)
	WithLowLimit(OptionalProperty) PulseConverterBuilder
	// WithLowLimitBuilder adds LowLimit (property field) which is build by the builder
	WithLowLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithDeadband adds Deadband (property field)
	WithDeadband(OptionalProperty) PulseConverterBuilder
	// WithDeadbandBuilder adds Deadband (property field) which is build by the builder
	WithDeadbandBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithLimitEnable adds LimitEnable (property field)
	WithLimitEnable(OptionalProperty) PulseConverterBuilder
	// WithLimitEnableBuilder adds LimitEnable (property field) which is build by the builder
	WithLimitEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) PulseConverterBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) PulseConverterBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) PulseConverterBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) PulseConverterBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) PulseConverterBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) PulseConverterBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) PulseConverterBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) PulseConverterBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) PulseConverterBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) PulseConverterBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) PulseConverterBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) PulseConverterBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) PulseConverterBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) PulseConverterBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) PulseConverterBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder
	// Build builds the PulseConverter or returns an error if something is wrong
	Build() (PulseConverter, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() PulseConverter
}

// NewPulseConverterBuilder() creates a PulseConverterBuilder
func NewPulseConverterBuilder() PulseConverterBuilder {
	return &_PulseConverterBuilder{_PulseConverter: new(_PulseConverter)}
}

type _PulseConverterBuilder struct {
	*_PulseConverter

	err *utils.MultiError
}

var _ (PulseConverterBuilder) = (*_PulseConverterBuilder)(nil)

func (b *_PulseConverterBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, inputReference OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, units ReadableProperty, scaleFactor ReadableProperty, adjustValue WritableProperty, count ReadableProperty, updateTime ReadableProperty, countChangeTime ReadableProperty, countBeforeChange ReadableProperty, cOVIncrement OptionalProperty, cOVPeriod OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, deadband OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) PulseConverterBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithPresentValue(presentValue).WithInputReference(inputReference).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithUnits(units).WithScaleFactor(scaleFactor).WithAdjustValue(adjustValue).WithCount(count).WithUpdateTime(updateTime).WithCountChangeTime(countChangeTime).WithCountBeforeChange(countBeforeChange).WithCOVIncrement(cOVIncrement).WithCOVPeriod(cOVPeriod).WithNotificationClass(notificationClass).WithTimeDelay(timeDelay).WithHighLimit(highLimit).WithLowLimit(lowLimit).WithDeadband(deadband).WithLimitEnable(limitEnable).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_PulseConverterBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) PulseConverterBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_PulseConverterBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithObjectName(objectName ReadableProperty) PulseConverterBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_PulseConverterBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithObjectType(objectType ReadableProperty) PulseConverterBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_PulseConverterBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithDescription(description OptionalProperty) PulseConverterBuilder {
	b.Description = description
	return b
}

func (b *_PulseConverterBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithPresentValue(presentValue ReadableProperty) PulseConverterBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_PulseConverterBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithInputReference(inputReference OptionalProperty) PulseConverterBuilder {
	b.InputReference = inputReference
	return b
}

func (b *_PulseConverterBuilder) WithInputReferenceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.InputReference.CreateOptionalPropertyBuilder())
	var err error
	b.InputReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithStatusFlags(statusFlags ReadableProperty) PulseConverterBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_PulseConverterBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventState(eventState ReadableProperty) PulseConverterBuilder {
	b.EventState = eventState
	return b
}

func (b *_PulseConverterBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithReliability(reliability OptionalProperty) PulseConverterBuilder {
	b.Reliability = reliability
	return b
}

func (b *_PulseConverterBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithOutOfService(outOfService ReadableProperty) PulseConverterBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_PulseConverterBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithUnits(units ReadableProperty) PulseConverterBuilder {
	b.Units = units
	return b
}

func (b *_PulseConverterBuilder) WithUnitsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.Units.CreateReadablePropertyBuilder())
	var err error
	b.Units, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithScaleFactor(scaleFactor ReadableProperty) PulseConverterBuilder {
	b.ScaleFactor = scaleFactor
	return b
}

func (b *_PulseConverterBuilder) WithScaleFactorBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ScaleFactor.CreateReadablePropertyBuilder())
	var err error
	b.ScaleFactor, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithAdjustValue(adjustValue WritableProperty) PulseConverterBuilder {
	b.AdjustValue = adjustValue
	return b
}

func (b *_PulseConverterBuilder) WithAdjustValueBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.AdjustValue.CreateWritablePropertyBuilder())
	var err error
	b.AdjustValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithCount(count ReadableProperty) PulseConverterBuilder {
	b.Count = count
	return b
}

func (b *_PulseConverterBuilder) WithCountBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.Count.CreateReadablePropertyBuilder())
	var err error
	b.Count, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithUpdateTime(updateTime ReadableProperty) PulseConverterBuilder {
	b.UpdateTime = updateTime
	return b
}

func (b *_PulseConverterBuilder) WithUpdateTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.UpdateTime.CreateReadablePropertyBuilder())
	var err error
	b.UpdateTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithCountChangeTime(countChangeTime ReadableProperty) PulseConverterBuilder {
	b.CountChangeTime = countChangeTime
	return b
}

func (b *_PulseConverterBuilder) WithCountChangeTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.CountChangeTime.CreateReadablePropertyBuilder())
	var err error
	b.CountChangeTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithCountBeforeChange(countBeforeChange ReadableProperty) PulseConverterBuilder {
	b.CountBeforeChange = countBeforeChange
	return b
}

func (b *_PulseConverterBuilder) WithCountBeforeChangeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.CountBeforeChange.CreateReadablePropertyBuilder())
	var err error
	b.CountBeforeChange, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithCOVIncrement(cOVIncrement OptionalProperty) PulseConverterBuilder {
	b.COVIncrement = cOVIncrement
	return b
}

func (b *_PulseConverterBuilder) WithCOVIncrementBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.COVIncrement.CreateOptionalPropertyBuilder())
	var err error
	b.COVIncrement, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithCOVPeriod(cOVPeriod OptionalProperty) PulseConverterBuilder {
	b.COVPeriod = cOVPeriod
	return b
}

func (b *_PulseConverterBuilder) WithCOVPeriodBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.COVPeriod.CreateOptionalPropertyBuilder())
	var err error
	b.COVPeriod, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithNotificationClass(notificationClass OptionalProperty) PulseConverterBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_PulseConverterBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithTimeDelay(timeDelay OptionalProperty) PulseConverterBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_PulseConverterBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithHighLimit(highLimit OptionalProperty) PulseConverterBuilder {
	b.HighLimit = highLimit
	return b
}

func (b *_PulseConverterBuilder) WithHighLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.HighLimit.CreateOptionalPropertyBuilder())
	var err error
	b.HighLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithLowLimit(lowLimit OptionalProperty) PulseConverterBuilder {
	b.LowLimit = lowLimit
	return b
}

func (b *_PulseConverterBuilder) WithLowLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.LowLimit.CreateOptionalPropertyBuilder())
	var err error
	b.LowLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithDeadband(deadband OptionalProperty) PulseConverterBuilder {
	b.Deadband = deadband
	return b
}

func (b *_PulseConverterBuilder) WithDeadbandBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.Deadband.CreateOptionalPropertyBuilder())
	var err error
	b.Deadband, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithLimitEnable(limitEnable OptionalProperty) PulseConverterBuilder {
	b.LimitEnable = limitEnable
	return b
}

func (b *_PulseConverterBuilder) WithLimitEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.LimitEnable.CreateOptionalPropertyBuilder())
	var err error
	b.LimitEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventEnable(eventEnable OptionalProperty) PulseConverterBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_PulseConverterBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) PulseConverterBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_PulseConverterBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithNotifyType(notifyType OptionalProperty) PulseConverterBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_PulseConverterBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) PulseConverterBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_PulseConverterBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) PulseConverterBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_PulseConverterBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) PulseConverterBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_PulseConverterBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) PulseConverterBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_PulseConverterBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) PulseConverterBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_PulseConverterBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) PulseConverterBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_PulseConverterBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) PulseConverterBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_PulseConverterBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) PulseConverterBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_PulseConverterBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithPropertyList(propertyList ReadableProperty) PulseConverterBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_PulseConverterBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithTags(tags OptionalProperty) PulseConverterBuilder {
	b.Tags = tags
	return b
}

func (b *_PulseConverterBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithProfileLocation(profileLocation OptionalProperty) PulseConverterBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_PulseConverterBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) WithProfileName(profileName OptionalProperty) PulseConverterBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_PulseConverterBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PulseConverterBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PulseConverterBuilder) Build() (PulseConverter, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.InputReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'inputReference' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.Units == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'units' not set"))
	}
	if b.ScaleFactor == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'scaleFactor' not set"))
	}
	if b.AdjustValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'adjustValue' not set"))
	}
	if b.Count == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'count' not set"))
	}
	if b.UpdateTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'updateTime' not set"))
	}
	if b.CountChangeTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'countChangeTime' not set"))
	}
	if b.CountBeforeChange == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'countBeforeChange' not set"))
	}
	if b.COVIncrement == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVIncrement' not set"))
	}
	if b.COVPeriod == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVPeriod' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.HighLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'highLimit' not set"))
	}
	if b.LowLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lowLimit' not set"))
	}
	if b.Deadband == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deadband' not set"))
	}
	if b.LimitEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'limitEnable' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._PulseConverter.deepCopy(), nil
}

func (b *_PulseConverterBuilder) MustBuild() PulseConverter {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_PulseConverterBuilder) DeepCopy() any {
	_copy := b.CreatePulseConverterBuilder().(*_PulseConverterBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreatePulseConverterBuilder creates a PulseConverterBuilder
func (b *_PulseConverter) CreatePulseConverterBuilder() PulseConverterBuilder {
	if b == nil {
		return NewPulseConverterBuilder()
	}
	return &_PulseConverterBuilder{_PulseConverter: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_PulseConverter) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_PulseConverter) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_PulseConverter) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_PulseConverter) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_PulseConverter) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_PulseConverter) GetInputReference() OptionalProperty {
	return m.InputReference
}

func (m *_PulseConverter) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_PulseConverter) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_PulseConverter) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_PulseConverter) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_PulseConverter) GetUnits() ReadableProperty {
	return m.Units
}

func (m *_PulseConverter) GetScaleFactor() ReadableProperty {
	return m.ScaleFactor
}

func (m *_PulseConverter) GetAdjustValue() WritableProperty {
	return m.AdjustValue
}

func (m *_PulseConverter) GetCount() ReadableProperty {
	return m.Count
}

func (m *_PulseConverter) GetUpdateTime() ReadableProperty {
	return m.UpdateTime
}

func (m *_PulseConverter) GetCountChangeTime() ReadableProperty {
	return m.CountChangeTime
}

func (m *_PulseConverter) GetCountBeforeChange() ReadableProperty {
	return m.CountBeforeChange
}

func (m *_PulseConverter) GetCOVIncrement() OptionalProperty {
	return m.COVIncrement
}

func (m *_PulseConverter) GetCOVPeriod() OptionalProperty {
	return m.COVPeriod
}

func (m *_PulseConverter) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_PulseConverter) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_PulseConverter) GetHighLimit() OptionalProperty {
	return m.HighLimit
}

func (m *_PulseConverter) GetLowLimit() OptionalProperty {
	return m.LowLimit
}

func (m *_PulseConverter) GetDeadband() OptionalProperty {
	return m.Deadband
}

func (m *_PulseConverter) GetLimitEnable() OptionalProperty {
	return m.LimitEnable
}

func (m *_PulseConverter) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_PulseConverter) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_PulseConverter) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_PulseConverter) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_PulseConverter) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_PulseConverter) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_PulseConverter) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_PulseConverter) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_PulseConverter) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_PulseConverter) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_PulseConverter) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_PulseConverter) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_PulseConverter) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_PulseConverter) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_PulseConverter) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastPulseConverter(structType any) PulseConverter {
	if casted, ok := structType.(PulseConverter); ok {
		return casted
	}
	if casted, ok := structType.(*PulseConverter); ok {
		return *casted
	}
	return nil
}

func (m *_PulseConverter) GetTypeName() string {
	return "PulseConverter"
}

func (m *_PulseConverter) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (inputReference)
	lengthInBits += m.InputReference.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (units)
	lengthInBits += m.Units.GetLengthInBits(ctx)

	// Simple field (scaleFactor)
	lengthInBits += m.ScaleFactor.GetLengthInBits(ctx)

	// Simple field (adjustValue)
	lengthInBits += m.AdjustValue.GetLengthInBits(ctx)

	// Simple field (count)
	lengthInBits += m.Count.GetLengthInBits(ctx)

	// Simple field (updateTime)
	lengthInBits += m.UpdateTime.GetLengthInBits(ctx)

	// Simple field (countChangeTime)
	lengthInBits += m.CountChangeTime.GetLengthInBits(ctx)

	// Simple field (countBeforeChange)
	lengthInBits += m.CountBeforeChange.GetLengthInBits(ctx)

	// Simple field (cOVIncrement)
	lengthInBits += m.COVIncrement.GetLengthInBits(ctx)

	// Simple field (cOVPeriod)
	lengthInBits += m.COVPeriod.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (highLimit)
	lengthInBits += m.HighLimit.GetLengthInBits(ctx)

	// Simple field (lowLimit)
	lengthInBits += m.LowLimit.GetLengthInBits(ctx)

	// Simple field (deadband)
	lengthInBits += m.Deadband.GetLengthInBits(ctx)

	// Simple field (limitEnable)
	lengthInBits += m.LimitEnable.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_PulseConverter) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func PulseConverterParse(ctx context.Context, theBytes []byte) (PulseConverter, error) {
	return PulseConverterParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func PulseConverterParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (PulseConverter, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (PulseConverter, error) {
		return PulseConverterParseWithBuffer(ctx, readBuffer)
	}
}

func PulseConverterParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (PulseConverter, error) {
	v, err := (&_PulseConverter{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_PulseConverter) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__pulseConverter PulseConverter, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("PulseConverter"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for PulseConverter")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	inputReference, err := ReadSimpleField[OptionalProperty](ctx, "inputReference", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'inputReference' field"))
	}
	m.InputReference = inputReference

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	units, err := ReadSimpleField[ReadableProperty](ctx, "units", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'units' field"))
	}
	m.Units = units

	scaleFactor, err := ReadSimpleField[ReadableProperty](ctx, "scaleFactor", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'scaleFactor' field"))
	}
	m.ScaleFactor = scaleFactor

	adjustValue, err := ReadSimpleField[WritableProperty](ctx, "adjustValue", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'adjustValue' field"))
	}
	m.AdjustValue = adjustValue

	count, err := ReadSimpleField[ReadableProperty](ctx, "count", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'count' field"))
	}
	m.Count = count

	updateTime, err := ReadSimpleField[ReadableProperty](ctx, "updateTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'updateTime' field"))
	}
	m.UpdateTime = updateTime

	countChangeTime, err := ReadSimpleField[ReadableProperty](ctx, "countChangeTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'countChangeTime' field"))
	}
	m.CountChangeTime = countChangeTime

	countBeforeChange, err := ReadSimpleField[ReadableProperty](ctx, "countBeforeChange", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'countBeforeChange' field"))
	}
	m.CountBeforeChange = countBeforeChange

	cOVIncrement, err := ReadSimpleField[OptionalProperty](ctx, "cOVIncrement", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVIncrement' field"))
	}
	m.COVIncrement = cOVIncrement

	cOVPeriod, err := ReadSimpleField[OptionalProperty](ctx, "cOVPeriod", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVPeriod' field"))
	}
	m.COVPeriod = cOVPeriod

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	highLimit, err := ReadSimpleField[OptionalProperty](ctx, "highLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'highLimit' field"))
	}
	m.HighLimit = highLimit

	lowLimit, err := ReadSimpleField[OptionalProperty](ctx, "lowLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lowLimit' field"))
	}
	m.LowLimit = lowLimit

	deadband, err := ReadSimpleField[OptionalProperty](ctx, "deadband", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deadband' field"))
	}
	m.Deadband = deadband

	limitEnable, err := ReadSimpleField[OptionalProperty](ctx, "limitEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLimitEnable")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'limitEnable' field"))
	}
	m.LimitEnable = limitEnable

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("PulseConverter"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for PulseConverter")
	}

	return m, nil
}

func (m *_PulseConverter) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_PulseConverter) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("PulseConverter"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for PulseConverter")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "inputReference", m.GetInputReference(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'inputReference' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "units", m.GetUnits(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'units' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "scaleFactor", m.GetScaleFactor(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'scaleFactor' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "adjustValue", m.GetAdjustValue(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'adjustValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "count", m.GetCount(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'count' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "updateTime", m.GetUpdateTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'updateTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "countChangeTime", m.GetCountChangeTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'countChangeTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "countBeforeChange", m.GetCountBeforeChange(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'countBeforeChange' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVIncrement", m.GetCOVIncrement(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVIncrement' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVPeriod", m.GetCOVPeriod(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVPeriod' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "highLimit", m.GetHighLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'highLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lowLimit", m.GetLowLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lowLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deadband", m.GetDeadband(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deadband' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "limitEnable", m.GetLimitEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'limitEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("PulseConverter"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for PulseConverter")
	}
	return nil
}

func (m *_PulseConverter) IsPulseConverter() {}

func (m *_PulseConverter) DeepCopy() any {
	return m.deepCopy()
}

func (m *_PulseConverter) deepCopy() *_PulseConverter {
	if m == nil {
		return nil
	}
	_PulseConverterCopy := &_PulseConverter{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.InputReference.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.Units.DeepCopy().(ReadableProperty),
		m.ScaleFactor.DeepCopy().(ReadableProperty),
		m.AdjustValue.DeepCopy().(WritableProperty),
		m.Count.DeepCopy().(ReadableProperty),
		m.UpdateTime.DeepCopy().(ReadableProperty),
		m.CountChangeTime.DeepCopy().(ReadableProperty),
		m.CountBeforeChange.DeepCopy().(ReadableProperty),
		m.COVIncrement.DeepCopy().(OptionalProperty),
		m.COVPeriod.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.HighLimit.DeepCopy().(OptionalProperty),
		m.LowLimit.DeepCopy().(OptionalProperty),
		m.Deadband.DeepCopy().(OptionalProperty),
		m.LimitEnable.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _PulseConverterCopy
}

func (m *_PulseConverter) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
