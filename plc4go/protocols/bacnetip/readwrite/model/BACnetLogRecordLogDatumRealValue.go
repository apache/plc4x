/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLogRecordLogDatumRealValue is the corresponding interface of BACnetLogRecordLogDatumRealValue
type BACnetLogRecordLogDatumRealValue interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	BACnetLogRecordLogDatum
	// GetRealValue returns RealValue (property field)
	GetRealValue() BACnetContextTagReal
	// IsBACnetLogRecordLogDatumRealValue is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetLogRecordLogDatumRealValue()
	// CreateBuilder creates a BACnetLogRecordLogDatumRealValueBuilder
	CreateBACnetLogRecordLogDatumRealValueBuilder() BACnetLogRecordLogDatumRealValueBuilder
}

// _BACnetLogRecordLogDatumRealValue is the data-structure of this message
type _BACnetLogRecordLogDatumRealValue struct {
	BACnetLogRecordLogDatumContract
	RealValue BACnetContextTagReal
}

var _ BACnetLogRecordLogDatumRealValue = (*_BACnetLogRecordLogDatumRealValue)(nil)
var _ BACnetLogRecordLogDatumRequirements = (*_BACnetLogRecordLogDatumRealValue)(nil)

// NewBACnetLogRecordLogDatumRealValue factory function for _BACnetLogRecordLogDatumRealValue
func NewBACnetLogRecordLogDatumRealValue(openingTag BACnetOpeningTag, peekedTagHeader BACnetTagHeader, closingTag BACnetClosingTag, realValue BACnetContextTagReal, tagNumber uint8) *_BACnetLogRecordLogDatumRealValue {
	if realValue == nil {
		panic("realValue of type BACnetContextTagReal for BACnetLogRecordLogDatumRealValue must not be nil")
	}
	_result := &_BACnetLogRecordLogDatumRealValue{
		BACnetLogRecordLogDatumContract: NewBACnetLogRecordLogDatum(openingTag, peekedTagHeader, closingTag, tagNumber),
		RealValue:                       realValue,
	}
	_result.BACnetLogRecordLogDatumContract.(*_BACnetLogRecordLogDatum)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// BACnetLogRecordLogDatumRealValueBuilder is a builder for BACnetLogRecordLogDatumRealValue
type BACnetLogRecordLogDatumRealValueBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(realValue BACnetContextTagReal) BACnetLogRecordLogDatumRealValueBuilder
	// WithRealValue adds RealValue (property field)
	WithRealValue(BACnetContextTagReal) BACnetLogRecordLogDatumRealValueBuilder
	// WithRealValueBuilder adds RealValue (property field) which is build by the builder
	WithRealValueBuilder(func(BACnetContextTagRealBuilder) BACnetContextTagRealBuilder) BACnetLogRecordLogDatumRealValueBuilder
	// Build builds the BACnetLogRecordLogDatumRealValue or returns an error if something is wrong
	Build() (BACnetLogRecordLogDatumRealValue, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() BACnetLogRecordLogDatumRealValue
}

// NewBACnetLogRecordLogDatumRealValueBuilder() creates a BACnetLogRecordLogDatumRealValueBuilder
func NewBACnetLogRecordLogDatumRealValueBuilder() BACnetLogRecordLogDatumRealValueBuilder {
	return &_BACnetLogRecordLogDatumRealValueBuilder{_BACnetLogRecordLogDatumRealValue: new(_BACnetLogRecordLogDatumRealValue)}
}

type _BACnetLogRecordLogDatumRealValueBuilder struct {
	*_BACnetLogRecordLogDatumRealValue

	err *utils.MultiError
}

var _ (BACnetLogRecordLogDatumRealValueBuilder) = (*_BACnetLogRecordLogDatumRealValueBuilder)(nil)

func (m *_BACnetLogRecordLogDatumRealValueBuilder) WithMandatoryFields(realValue BACnetContextTagReal) BACnetLogRecordLogDatumRealValueBuilder {
	return m.WithRealValue(realValue)
}

func (m *_BACnetLogRecordLogDatumRealValueBuilder) WithRealValue(realValue BACnetContextTagReal) BACnetLogRecordLogDatumRealValueBuilder {
	m.RealValue = realValue
	return m
}

func (m *_BACnetLogRecordLogDatumRealValueBuilder) WithRealValueBuilder(builderSupplier func(BACnetContextTagRealBuilder) BACnetContextTagRealBuilder) BACnetLogRecordLogDatumRealValueBuilder {
	builder := builderSupplier(m.RealValue.CreateBACnetContextTagRealBuilder())
	var err error
	m.RealValue, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "BACnetContextTagRealBuilder failed"))
	}
	return m
}

func (m *_BACnetLogRecordLogDatumRealValueBuilder) Build() (BACnetLogRecordLogDatumRealValue, error) {
	if m.RealValue == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'realValue' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._BACnetLogRecordLogDatumRealValue.deepCopy(), nil
}

func (m *_BACnetLogRecordLogDatumRealValueBuilder) MustBuild() BACnetLogRecordLogDatumRealValue {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_BACnetLogRecordLogDatumRealValueBuilder) DeepCopy() any {
	return m.CreateBACnetLogRecordLogDatumRealValueBuilder()
}

// CreateBACnetLogRecordLogDatumRealValueBuilder creates a BACnetLogRecordLogDatumRealValueBuilder
func (m *_BACnetLogRecordLogDatumRealValue) CreateBACnetLogRecordLogDatumRealValueBuilder() BACnetLogRecordLogDatumRealValueBuilder {
	if m == nil {
		return NewBACnetLogRecordLogDatumRealValueBuilder()
	}
	return &_BACnetLogRecordLogDatumRealValueBuilder{_BACnetLogRecordLogDatumRealValue: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_BACnetLogRecordLogDatumRealValue) GetParent() BACnetLogRecordLogDatumContract {
	return m.BACnetLogRecordLogDatumContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BACnetLogRecordLogDatumRealValue) GetRealValue() BACnetContextTagReal {
	return m.RealValue
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastBACnetLogRecordLogDatumRealValue(structType any) BACnetLogRecordLogDatumRealValue {
	if casted, ok := structType.(BACnetLogRecordLogDatumRealValue); ok {
		return casted
	}
	if casted, ok := structType.(*BACnetLogRecordLogDatumRealValue); ok {
		return *casted
	}
	return nil
}

func (m *_BACnetLogRecordLogDatumRealValue) GetTypeName() string {
	return "BACnetLogRecordLogDatumRealValue"
}

func (m *_BACnetLogRecordLogDatumRealValue) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.BACnetLogRecordLogDatumContract.(*_BACnetLogRecordLogDatum).getLengthInBits(ctx))

	// Simple field (realValue)
	lengthInBits += m.RealValue.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_BACnetLogRecordLogDatumRealValue) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_BACnetLogRecordLogDatumRealValue) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_BACnetLogRecordLogDatum, tagNumber uint8) (__bACnetLogRecordLogDatumRealValue BACnetLogRecordLogDatumRealValue, err error) {
	m.BACnetLogRecordLogDatumContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetLogRecordLogDatumRealValue"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetLogRecordLogDatumRealValue")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	realValue, err := ReadSimpleField[BACnetContextTagReal](ctx, "realValue", ReadComplex[BACnetContextTagReal](BACnetContextTagParseWithBufferProducer[BACnetContextTagReal]((uint8)(uint8(2)), (BACnetDataType)(BACnetDataType_REAL)), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'realValue' field"))
	}
	m.RealValue = realValue

	if closeErr := readBuffer.CloseContext("BACnetLogRecordLogDatumRealValue"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetLogRecordLogDatumRealValue")
	}

	return m, nil
}

func (m *_BACnetLogRecordLogDatumRealValue) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_BACnetLogRecordLogDatumRealValue) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetLogRecordLogDatumRealValue"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetLogRecordLogDatumRealValue")
		}

		if err := WriteSimpleField[BACnetContextTagReal](ctx, "realValue", m.GetRealValue(), WriteComplex[BACnetContextTagReal](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'realValue' field")
		}

		if popErr := writeBuffer.PopContext("BACnetLogRecordLogDatumRealValue"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetLogRecordLogDatumRealValue")
		}
		return nil
	}
	return m.BACnetLogRecordLogDatumContract.(*_BACnetLogRecordLogDatum).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_BACnetLogRecordLogDatumRealValue) IsBACnetLogRecordLogDatumRealValue() {}

func (m *_BACnetLogRecordLogDatumRealValue) DeepCopy() any {
	return m.deepCopy()
}

func (m *_BACnetLogRecordLogDatumRealValue) deepCopy() *_BACnetLogRecordLogDatumRealValue {
	if m == nil {
		return nil
	}
	_BACnetLogRecordLogDatumRealValueCopy := &_BACnetLogRecordLogDatumRealValue{
		m.BACnetLogRecordLogDatumContract.(*_BACnetLogRecordLogDatum).deepCopy(),
		m.RealValue.DeepCopy().(BACnetContextTagReal),
	}
	m.BACnetLogRecordLogDatumContract.(*_BACnetLogRecordLogDatum)._SubType = m
	return _BACnetLogRecordLogDatumRealValueCopy
}

func (m *_BACnetLogRecordLogDatumRealValue) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
