/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// PositiveIntegerValue is the corresponding interface of PositiveIntegerValue
type PositiveIntegerValue interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() OptionalProperty
	// GetUnits returns Units (property field)
	GetUnits() ReadableProperty
	// GetPriorityArray returns PriorityArray (property field)
	GetPriorityArray() OptionalProperty
	// GetRelinquishDefault returns RelinquishDefault (property field)
	GetRelinquishDefault() OptionalProperty
	// GetCOVIncrement returns COVIncrement (property field)
	GetCOVIncrement() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetHighLimit returns HighLimit (property field)
	GetHighLimit() OptionalProperty
	// GetLowLimit returns LowLimit (property field)
	GetLowLimit() OptionalProperty
	// GetDeadband returns Deadband (property field)
	GetDeadband() OptionalProperty
	// GetLimitEnable returns LimitEnable (property field)
	GetLimitEnable() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetMinPresValue returns MinPresValue (property field)
	GetMinPresValue() OptionalProperty
	// GetMaxPresValue returns MaxPresValue (property field)
	GetMaxPresValue() OptionalProperty
	// GetResolution returns Resolution (property field)
	GetResolution() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetFaultHighLimit returns FaultHighLimit (property field)
	GetFaultHighLimit() OptionalProperty
	// GetFaultLowLimit returns FaultLowLimit (property field)
	GetFaultLowLimit() OptionalProperty
	// GetCurrentCommandPriority returns CurrentCommandPriority (property field)
	GetCurrentCommandPriority() OptionalProperty
	// GetValueSource returns ValueSource (property field)
	GetValueSource() OptionalProperty
	// GetValueSourceArray returns ValueSourceArray (property field)
	GetValueSourceArray() OptionalProperty
	// GetLastCommandTime returns LastCommandTime (property field)
	GetLastCommandTime() OptionalProperty
	// GetCommandTimeArray returns CommandTimeArray (property field)
	GetCommandTimeArray() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsPositiveIntegerValue is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsPositiveIntegerValue()
	// CreateBuilder creates a PositiveIntegerValueBuilder
	CreatePositiveIntegerValueBuilder() PositiveIntegerValueBuilder
}

// _PositiveIntegerValue is the data-structure of this message
type _PositiveIntegerValue struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	PresentValue                 ReadableProperty
	StatusFlags                  ReadableProperty
	EventState                   OptionalProperty
	Reliability                  OptionalProperty
	OutOfService                 OptionalProperty
	Units                        ReadableProperty
	PriorityArray                OptionalProperty
	RelinquishDefault            OptionalProperty
	COVIncrement                 OptionalProperty
	TimeDelay                    OptionalProperty
	NotificationClass            OptionalProperty
	HighLimit                    OptionalProperty
	LowLimit                     OptionalProperty
	Deadband                     OptionalProperty
	LimitEnable                  OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	MinPresValue                 OptionalProperty
	MaxPresValue                 OptionalProperty
	Resolution                   OptionalProperty
	PropertyList                 ReadableProperty
	FaultHighLimit               OptionalProperty
	FaultLowLimit                OptionalProperty
	CurrentCommandPriority       OptionalProperty
	ValueSource                  OptionalProperty
	ValueSourceArray             OptionalProperty
	LastCommandTime              OptionalProperty
	CommandTimeArray             OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ PositiveIntegerValue = (*_PositiveIntegerValue)(nil)

// NewPositiveIntegerValue factory function for _PositiveIntegerValue
func NewPositiveIntegerValue(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState OptionalProperty, reliability OptionalProperty, outOfService OptionalProperty, units ReadableProperty, priorityArray OptionalProperty, relinquishDefault OptionalProperty, cOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, deadband OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, minPresValue OptionalProperty, maxPresValue OptionalProperty, resolution OptionalProperty, propertyList ReadableProperty, faultHighLimit OptionalProperty, faultLowLimit OptionalProperty, currentCommandPriority OptionalProperty, valueSource OptionalProperty, valueSourceArray OptionalProperty, lastCommandTime OptionalProperty, commandTimeArray OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_PositiveIntegerValue {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if units == nil {
		panic("units of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if priorityArray == nil {
		panic("priorityArray of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if relinquishDefault == nil {
		panic("relinquishDefault of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if cOVIncrement == nil {
		panic("cOVIncrement of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if highLimit == nil {
		panic("highLimit of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if lowLimit == nil {
		panic("lowLimit of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if deadband == nil {
		panic("deadband of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if limitEnable == nil {
		panic("limitEnable of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if minPresValue == nil {
		panic("minPresValue of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if maxPresValue == nil {
		panic("maxPresValue of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if resolution == nil {
		panic("resolution of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for PositiveIntegerValue must not be nil")
	}
	if faultHighLimit == nil {
		panic("faultHighLimit of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if faultLowLimit == nil {
		panic("faultLowLimit of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if currentCommandPriority == nil {
		panic("currentCommandPriority of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if valueSource == nil {
		panic("valueSource of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if valueSourceArray == nil {
		panic("valueSourceArray of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if lastCommandTime == nil {
		panic("lastCommandTime of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if commandTimeArray == nil {
		panic("commandTimeArray of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for PositiveIntegerValue must not be nil")
	}
	return &_PositiveIntegerValue{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, PresentValue: presentValue, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, Units: units, PriorityArray: priorityArray, RelinquishDefault: relinquishDefault, COVIncrement: cOVIncrement, TimeDelay: timeDelay, NotificationClass: notificationClass, HighLimit: highLimit, LowLimit: lowLimit, Deadband: deadband, LimitEnable: limitEnable, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, MinPresValue: minPresValue, MaxPresValue: maxPresValue, Resolution: resolution, PropertyList: propertyList, FaultHighLimit: faultHighLimit, FaultLowLimit: faultLowLimit, CurrentCommandPriority: currentCommandPriority, ValueSource: valueSource, ValueSourceArray: valueSourceArray, LastCommandTime: lastCommandTime, CommandTimeArray: commandTimeArray, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// PositiveIntegerValueBuilder is a builder for PositiveIntegerValue
type PositiveIntegerValueBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState OptionalProperty, reliability OptionalProperty, outOfService OptionalProperty, units ReadableProperty, priorityArray OptionalProperty, relinquishDefault OptionalProperty, cOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, deadband OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, minPresValue OptionalProperty, maxPresValue OptionalProperty, resolution OptionalProperty, propertyList ReadableProperty, faultHighLimit OptionalProperty, faultLowLimit OptionalProperty, currentCommandPriority OptionalProperty, valueSource OptionalProperty, valueSourceArray OptionalProperty, lastCommandTime OptionalProperty, commandTimeArray OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) PositiveIntegerValueBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) PositiveIntegerValueBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) PositiveIntegerValueBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) PositiveIntegerValueBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) PositiveIntegerValueBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) PositiveIntegerValueBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) PositiveIntegerValueBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) PositiveIntegerValueBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(OptionalProperty) PositiveIntegerValueBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithUnits adds Units (property field)
	WithUnits(ReadableProperty) PositiveIntegerValueBuilder
	// WithUnitsBuilder adds Units (property field) which is build by the builder
	WithUnitsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithPriorityArray adds PriorityArray (property field)
	WithPriorityArray(OptionalProperty) PositiveIntegerValueBuilder
	// WithPriorityArrayBuilder adds PriorityArray (property field) which is build by the builder
	WithPriorityArrayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithRelinquishDefault adds RelinquishDefault (property field)
	WithRelinquishDefault(OptionalProperty) PositiveIntegerValueBuilder
	// WithRelinquishDefaultBuilder adds RelinquishDefault (property field) which is build by the builder
	WithRelinquishDefaultBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithCOVIncrement adds COVIncrement (property field)
	WithCOVIncrement(OptionalProperty) PositiveIntegerValueBuilder
	// WithCOVIncrementBuilder adds COVIncrement (property field) which is build by the builder
	WithCOVIncrementBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) PositiveIntegerValueBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) PositiveIntegerValueBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithHighLimit adds HighLimit (property field)
	WithHighLimit(OptionalProperty) PositiveIntegerValueBuilder
	// WithHighLimitBuilder adds HighLimit (property field) which is build by the builder
	WithHighLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithLowLimit adds LowLimit (property field)
	WithLowLimit(OptionalProperty) PositiveIntegerValueBuilder
	// WithLowLimitBuilder adds LowLimit (property field) which is build by the builder
	WithLowLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithDeadband adds Deadband (property field)
	WithDeadband(OptionalProperty) PositiveIntegerValueBuilder
	// WithDeadbandBuilder adds Deadband (property field) which is build by the builder
	WithDeadbandBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithLimitEnable adds LimitEnable (property field)
	WithLimitEnable(OptionalProperty) PositiveIntegerValueBuilder
	// WithLimitEnableBuilder adds LimitEnable (property field) which is build by the builder
	WithLimitEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) PositiveIntegerValueBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) PositiveIntegerValueBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) PositiveIntegerValueBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) PositiveIntegerValueBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) PositiveIntegerValueBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithMinPresValue adds MinPresValue (property field)
	WithMinPresValue(OptionalProperty) PositiveIntegerValueBuilder
	// WithMinPresValueBuilder adds MinPresValue (property field) which is build by the builder
	WithMinPresValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithMaxPresValue adds MaxPresValue (property field)
	WithMaxPresValue(OptionalProperty) PositiveIntegerValueBuilder
	// WithMaxPresValueBuilder adds MaxPresValue (property field) which is build by the builder
	WithMaxPresValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithResolution adds Resolution (property field)
	WithResolution(OptionalProperty) PositiveIntegerValueBuilder
	// WithResolutionBuilder adds Resolution (property field) which is build by the builder
	WithResolutionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) PositiveIntegerValueBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder
	// WithFaultHighLimit adds FaultHighLimit (property field)
	WithFaultHighLimit(OptionalProperty) PositiveIntegerValueBuilder
	// WithFaultHighLimitBuilder adds FaultHighLimit (property field) which is build by the builder
	WithFaultHighLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithFaultLowLimit adds FaultLowLimit (property field)
	WithFaultLowLimit(OptionalProperty) PositiveIntegerValueBuilder
	// WithFaultLowLimitBuilder adds FaultLowLimit (property field) which is build by the builder
	WithFaultLowLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithCurrentCommandPriority adds CurrentCommandPriority (property field)
	WithCurrentCommandPriority(OptionalProperty) PositiveIntegerValueBuilder
	// WithCurrentCommandPriorityBuilder adds CurrentCommandPriority (property field) which is build by the builder
	WithCurrentCommandPriorityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithValueSource adds ValueSource (property field)
	WithValueSource(OptionalProperty) PositiveIntegerValueBuilder
	// WithValueSourceBuilder adds ValueSource (property field) which is build by the builder
	WithValueSourceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithValueSourceArray adds ValueSourceArray (property field)
	WithValueSourceArray(OptionalProperty) PositiveIntegerValueBuilder
	// WithValueSourceArrayBuilder adds ValueSourceArray (property field) which is build by the builder
	WithValueSourceArrayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithLastCommandTime adds LastCommandTime (property field)
	WithLastCommandTime(OptionalProperty) PositiveIntegerValueBuilder
	// WithLastCommandTimeBuilder adds LastCommandTime (property field) which is build by the builder
	WithLastCommandTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithCommandTimeArray adds CommandTimeArray (property field)
	WithCommandTimeArray(OptionalProperty) PositiveIntegerValueBuilder
	// WithCommandTimeArrayBuilder adds CommandTimeArray (property field) which is build by the builder
	WithCommandTimeArrayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) PositiveIntegerValueBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) PositiveIntegerValueBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) PositiveIntegerValueBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder
	// Build builds the PositiveIntegerValue or returns an error if something is wrong
	Build() (PositiveIntegerValue, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() PositiveIntegerValue
}

// NewPositiveIntegerValueBuilder() creates a PositiveIntegerValueBuilder
func NewPositiveIntegerValueBuilder() PositiveIntegerValueBuilder {
	return &_PositiveIntegerValueBuilder{_PositiveIntegerValue: new(_PositiveIntegerValue)}
}

type _PositiveIntegerValueBuilder struct {
	*_PositiveIntegerValue

	err *utils.MultiError
}

var _ (PositiveIntegerValueBuilder) = (*_PositiveIntegerValueBuilder)(nil)

func (b *_PositiveIntegerValueBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState OptionalProperty, reliability OptionalProperty, outOfService OptionalProperty, units ReadableProperty, priorityArray OptionalProperty, relinquishDefault OptionalProperty, cOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, deadband OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, minPresValue OptionalProperty, maxPresValue OptionalProperty, resolution OptionalProperty, propertyList ReadableProperty, faultHighLimit OptionalProperty, faultLowLimit OptionalProperty, currentCommandPriority OptionalProperty, valueSource OptionalProperty, valueSourceArray OptionalProperty, lastCommandTime OptionalProperty, commandTimeArray OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) PositiveIntegerValueBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithPresentValue(presentValue).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithUnits(units).WithPriorityArray(priorityArray).WithRelinquishDefault(relinquishDefault).WithCOVIncrement(cOVIncrement).WithTimeDelay(timeDelay).WithNotificationClass(notificationClass).WithHighLimit(highLimit).WithLowLimit(lowLimit).WithDeadband(deadband).WithLimitEnable(limitEnable).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithMinPresValue(minPresValue).WithMaxPresValue(maxPresValue).WithResolution(resolution).WithPropertyList(propertyList).WithFaultHighLimit(faultHighLimit).WithFaultLowLimit(faultLowLimit).WithCurrentCommandPriority(currentCommandPriority).WithValueSource(valueSource).WithValueSourceArray(valueSourceArray).WithLastCommandTime(lastCommandTime).WithCommandTimeArray(commandTimeArray).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_PositiveIntegerValueBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) PositiveIntegerValueBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_PositiveIntegerValueBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithObjectName(objectName ReadableProperty) PositiveIntegerValueBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_PositiveIntegerValueBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithObjectType(objectType ReadableProperty) PositiveIntegerValueBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_PositiveIntegerValueBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithDescription(description OptionalProperty) PositiveIntegerValueBuilder {
	b.Description = description
	return b
}

func (b *_PositiveIntegerValueBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithPresentValue(presentValue ReadableProperty) PositiveIntegerValueBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_PositiveIntegerValueBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithStatusFlags(statusFlags ReadableProperty) PositiveIntegerValueBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_PositiveIntegerValueBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventState(eventState OptionalProperty) PositiveIntegerValueBuilder {
	b.EventState = eventState
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithReliability(reliability OptionalProperty) PositiveIntegerValueBuilder {
	b.Reliability = reliability
	return b
}

func (b *_PositiveIntegerValueBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithOutOfService(outOfService OptionalProperty) PositiveIntegerValueBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_PositiveIntegerValueBuilder) WithOutOfServiceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.OutOfService.CreateOptionalPropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithUnits(units ReadableProperty) PositiveIntegerValueBuilder {
	b.Units = units
	return b
}

func (b *_PositiveIntegerValueBuilder) WithUnitsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.Units.CreateReadablePropertyBuilder())
	var err error
	b.Units, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithPriorityArray(priorityArray OptionalProperty) PositiveIntegerValueBuilder {
	b.PriorityArray = priorityArray
	return b
}

func (b *_PositiveIntegerValueBuilder) WithPriorityArrayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.PriorityArray.CreateOptionalPropertyBuilder())
	var err error
	b.PriorityArray, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithRelinquishDefault(relinquishDefault OptionalProperty) PositiveIntegerValueBuilder {
	b.RelinquishDefault = relinquishDefault
	return b
}

func (b *_PositiveIntegerValueBuilder) WithRelinquishDefaultBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.RelinquishDefault.CreateOptionalPropertyBuilder())
	var err error
	b.RelinquishDefault, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithCOVIncrement(cOVIncrement OptionalProperty) PositiveIntegerValueBuilder {
	b.COVIncrement = cOVIncrement
	return b
}

func (b *_PositiveIntegerValueBuilder) WithCOVIncrementBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.COVIncrement.CreateOptionalPropertyBuilder())
	var err error
	b.COVIncrement, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithTimeDelay(timeDelay OptionalProperty) PositiveIntegerValueBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_PositiveIntegerValueBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithNotificationClass(notificationClass OptionalProperty) PositiveIntegerValueBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_PositiveIntegerValueBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithHighLimit(highLimit OptionalProperty) PositiveIntegerValueBuilder {
	b.HighLimit = highLimit
	return b
}

func (b *_PositiveIntegerValueBuilder) WithHighLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.HighLimit.CreateOptionalPropertyBuilder())
	var err error
	b.HighLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithLowLimit(lowLimit OptionalProperty) PositiveIntegerValueBuilder {
	b.LowLimit = lowLimit
	return b
}

func (b *_PositiveIntegerValueBuilder) WithLowLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.LowLimit.CreateOptionalPropertyBuilder())
	var err error
	b.LowLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithDeadband(deadband OptionalProperty) PositiveIntegerValueBuilder {
	b.Deadband = deadband
	return b
}

func (b *_PositiveIntegerValueBuilder) WithDeadbandBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.Deadband.CreateOptionalPropertyBuilder())
	var err error
	b.Deadband, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithLimitEnable(limitEnable OptionalProperty) PositiveIntegerValueBuilder {
	b.LimitEnable = limitEnable
	return b
}

func (b *_PositiveIntegerValueBuilder) WithLimitEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.LimitEnable.CreateOptionalPropertyBuilder())
	var err error
	b.LimitEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventEnable(eventEnable OptionalProperty) PositiveIntegerValueBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) PositiveIntegerValueBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_PositiveIntegerValueBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithNotifyType(notifyType OptionalProperty) PositiveIntegerValueBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_PositiveIntegerValueBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) PositiveIntegerValueBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) PositiveIntegerValueBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) PositiveIntegerValueBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) PositiveIntegerValueBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) PositiveIntegerValueBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) PositiveIntegerValueBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_PositiveIntegerValueBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) PositiveIntegerValueBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_PositiveIntegerValueBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) PositiveIntegerValueBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_PositiveIntegerValueBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithMinPresValue(minPresValue OptionalProperty) PositiveIntegerValueBuilder {
	b.MinPresValue = minPresValue
	return b
}

func (b *_PositiveIntegerValueBuilder) WithMinPresValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.MinPresValue.CreateOptionalPropertyBuilder())
	var err error
	b.MinPresValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithMaxPresValue(maxPresValue OptionalProperty) PositiveIntegerValueBuilder {
	b.MaxPresValue = maxPresValue
	return b
}

func (b *_PositiveIntegerValueBuilder) WithMaxPresValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.MaxPresValue.CreateOptionalPropertyBuilder())
	var err error
	b.MaxPresValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithResolution(resolution OptionalProperty) PositiveIntegerValueBuilder {
	b.Resolution = resolution
	return b
}

func (b *_PositiveIntegerValueBuilder) WithResolutionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.Resolution.CreateOptionalPropertyBuilder())
	var err error
	b.Resolution, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithPropertyList(propertyList ReadableProperty) PositiveIntegerValueBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_PositiveIntegerValueBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithFaultHighLimit(faultHighLimit OptionalProperty) PositiveIntegerValueBuilder {
	b.FaultHighLimit = faultHighLimit
	return b
}

func (b *_PositiveIntegerValueBuilder) WithFaultHighLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.FaultHighLimit.CreateOptionalPropertyBuilder())
	var err error
	b.FaultHighLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithFaultLowLimit(faultLowLimit OptionalProperty) PositiveIntegerValueBuilder {
	b.FaultLowLimit = faultLowLimit
	return b
}

func (b *_PositiveIntegerValueBuilder) WithFaultLowLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.FaultLowLimit.CreateOptionalPropertyBuilder())
	var err error
	b.FaultLowLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithCurrentCommandPriority(currentCommandPriority OptionalProperty) PositiveIntegerValueBuilder {
	b.CurrentCommandPriority = currentCommandPriority
	return b
}

func (b *_PositiveIntegerValueBuilder) WithCurrentCommandPriorityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.CurrentCommandPriority.CreateOptionalPropertyBuilder())
	var err error
	b.CurrentCommandPriority, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithValueSource(valueSource OptionalProperty) PositiveIntegerValueBuilder {
	b.ValueSource = valueSource
	return b
}

func (b *_PositiveIntegerValueBuilder) WithValueSourceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ValueSource.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSource, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithValueSourceArray(valueSourceArray OptionalProperty) PositiveIntegerValueBuilder {
	b.ValueSourceArray = valueSourceArray
	return b
}

func (b *_PositiveIntegerValueBuilder) WithValueSourceArrayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ValueSourceArray.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSourceArray, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithLastCommandTime(lastCommandTime OptionalProperty) PositiveIntegerValueBuilder {
	b.LastCommandTime = lastCommandTime
	return b
}

func (b *_PositiveIntegerValueBuilder) WithLastCommandTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.LastCommandTime.CreateOptionalPropertyBuilder())
	var err error
	b.LastCommandTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithCommandTimeArray(commandTimeArray OptionalProperty) PositiveIntegerValueBuilder {
	b.CommandTimeArray = commandTimeArray
	return b
}

func (b *_PositiveIntegerValueBuilder) WithCommandTimeArrayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.CommandTimeArray.CreateOptionalPropertyBuilder())
	var err error
	b.CommandTimeArray, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithTags(tags OptionalProperty) PositiveIntegerValueBuilder {
	b.Tags = tags
	return b
}

func (b *_PositiveIntegerValueBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithProfileLocation(profileLocation OptionalProperty) PositiveIntegerValueBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_PositiveIntegerValueBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) WithProfileName(profileName OptionalProperty) PositiveIntegerValueBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_PositiveIntegerValueBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) PositiveIntegerValueBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_PositiveIntegerValueBuilder) Build() (PositiveIntegerValue, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.Units == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'units' not set"))
	}
	if b.PriorityArray == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'priorityArray' not set"))
	}
	if b.RelinquishDefault == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'relinquishDefault' not set"))
	}
	if b.COVIncrement == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVIncrement' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.HighLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'highLimit' not set"))
	}
	if b.LowLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lowLimit' not set"))
	}
	if b.Deadband == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deadband' not set"))
	}
	if b.LimitEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'limitEnable' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.MinPresValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'minPresValue' not set"))
	}
	if b.MaxPresValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxPresValue' not set"))
	}
	if b.Resolution == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'resolution' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.FaultHighLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultHighLimit' not set"))
	}
	if b.FaultLowLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultLowLimit' not set"))
	}
	if b.CurrentCommandPriority == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'currentCommandPriority' not set"))
	}
	if b.ValueSource == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSource' not set"))
	}
	if b.ValueSourceArray == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSourceArray' not set"))
	}
	if b.LastCommandTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastCommandTime' not set"))
	}
	if b.CommandTimeArray == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'commandTimeArray' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._PositiveIntegerValue.deepCopy(), nil
}

func (b *_PositiveIntegerValueBuilder) MustBuild() PositiveIntegerValue {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_PositiveIntegerValueBuilder) DeepCopy() any {
	_copy := b.CreatePositiveIntegerValueBuilder().(*_PositiveIntegerValueBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreatePositiveIntegerValueBuilder creates a PositiveIntegerValueBuilder
func (b *_PositiveIntegerValue) CreatePositiveIntegerValueBuilder() PositiveIntegerValueBuilder {
	if b == nil {
		return NewPositiveIntegerValueBuilder()
	}
	return &_PositiveIntegerValueBuilder{_PositiveIntegerValue: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_PositiveIntegerValue) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_PositiveIntegerValue) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_PositiveIntegerValue) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_PositiveIntegerValue) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_PositiveIntegerValue) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_PositiveIntegerValue) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_PositiveIntegerValue) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_PositiveIntegerValue) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_PositiveIntegerValue) GetOutOfService() OptionalProperty {
	return m.OutOfService
}

func (m *_PositiveIntegerValue) GetUnits() ReadableProperty {
	return m.Units
}

func (m *_PositiveIntegerValue) GetPriorityArray() OptionalProperty {
	return m.PriorityArray
}

func (m *_PositiveIntegerValue) GetRelinquishDefault() OptionalProperty {
	return m.RelinquishDefault
}

func (m *_PositiveIntegerValue) GetCOVIncrement() OptionalProperty {
	return m.COVIncrement
}

func (m *_PositiveIntegerValue) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_PositiveIntegerValue) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_PositiveIntegerValue) GetHighLimit() OptionalProperty {
	return m.HighLimit
}

func (m *_PositiveIntegerValue) GetLowLimit() OptionalProperty {
	return m.LowLimit
}

func (m *_PositiveIntegerValue) GetDeadband() OptionalProperty {
	return m.Deadband
}

func (m *_PositiveIntegerValue) GetLimitEnable() OptionalProperty {
	return m.LimitEnable
}

func (m *_PositiveIntegerValue) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_PositiveIntegerValue) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_PositiveIntegerValue) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_PositiveIntegerValue) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_PositiveIntegerValue) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_PositiveIntegerValue) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_PositiveIntegerValue) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_PositiveIntegerValue) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_PositiveIntegerValue) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_PositiveIntegerValue) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_PositiveIntegerValue) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_PositiveIntegerValue) GetMinPresValue() OptionalProperty {
	return m.MinPresValue
}

func (m *_PositiveIntegerValue) GetMaxPresValue() OptionalProperty {
	return m.MaxPresValue
}

func (m *_PositiveIntegerValue) GetResolution() OptionalProperty {
	return m.Resolution
}

func (m *_PositiveIntegerValue) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_PositiveIntegerValue) GetFaultHighLimit() OptionalProperty {
	return m.FaultHighLimit
}

func (m *_PositiveIntegerValue) GetFaultLowLimit() OptionalProperty {
	return m.FaultLowLimit
}

func (m *_PositiveIntegerValue) GetCurrentCommandPriority() OptionalProperty {
	return m.CurrentCommandPriority
}

func (m *_PositiveIntegerValue) GetValueSource() OptionalProperty {
	return m.ValueSource
}

func (m *_PositiveIntegerValue) GetValueSourceArray() OptionalProperty {
	return m.ValueSourceArray
}

func (m *_PositiveIntegerValue) GetLastCommandTime() OptionalProperty {
	return m.LastCommandTime
}

func (m *_PositiveIntegerValue) GetCommandTimeArray() OptionalProperty {
	return m.CommandTimeArray
}

func (m *_PositiveIntegerValue) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_PositiveIntegerValue) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_PositiveIntegerValue) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastPositiveIntegerValue(structType any) PositiveIntegerValue {
	if casted, ok := structType.(PositiveIntegerValue); ok {
		return casted
	}
	if casted, ok := structType.(*PositiveIntegerValue); ok {
		return *casted
	}
	return nil
}

func (m *_PositiveIntegerValue) GetTypeName() string {
	return "PositiveIntegerValue"
}

func (m *_PositiveIntegerValue) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (units)
	lengthInBits += m.Units.GetLengthInBits(ctx)

	// Simple field (priorityArray)
	lengthInBits += m.PriorityArray.GetLengthInBits(ctx)

	// Simple field (relinquishDefault)
	lengthInBits += m.RelinquishDefault.GetLengthInBits(ctx)

	// Simple field (cOVIncrement)
	lengthInBits += m.COVIncrement.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (highLimit)
	lengthInBits += m.HighLimit.GetLengthInBits(ctx)

	// Simple field (lowLimit)
	lengthInBits += m.LowLimit.GetLengthInBits(ctx)

	// Simple field (deadband)
	lengthInBits += m.Deadband.GetLengthInBits(ctx)

	// Simple field (limitEnable)
	lengthInBits += m.LimitEnable.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (minPresValue)
	lengthInBits += m.MinPresValue.GetLengthInBits(ctx)

	// Simple field (maxPresValue)
	lengthInBits += m.MaxPresValue.GetLengthInBits(ctx)

	// Simple field (resolution)
	lengthInBits += m.Resolution.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (faultHighLimit)
	lengthInBits += m.FaultHighLimit.GetLengthInBits(ctx)

	// Simple field (faultLowLimit)
	lengthInBits += m.FaultLowLimit.GetLengthInBits(ctx)

	// Simple field (currentCommandPriority)
	lengthInBits += m.CurrentCommandPriority.GetLengthInBits(ctx)

	// Simple field (valueSource)
	lengthInBits += m.ValueSource.GetLengthInBits(ctx)

	// Simple field (valueSourceArray)
	lengthInBits += m.ValueSourceArray.GetLengthInBits(ctx)

	// Simple field (lastCommandTime)
	lengthInBits += m.LastCommandTime.GetLengthInBits(ctx)

	// Simple field (commandTimeArray)
	lengthInBits += m.CommandTimeArray.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_PositiveIntegerValue) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func PositiveIntegerValueParse(ctx context.Context, theBytes []byte) (PositiveIntegerValue, error) {
	return PositiveIntegerValueParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func PositiveIntegerValueParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (PositiveIntegerValue, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (PositiveIntegerValue, error) {
		return PositiveIntegerValueParseWithBuffer(ctx, readBuffer)
	}
}

func PositiveIntegerValueParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (PositiveIntegerValue, error) {
	v, err := (&_PositiveIntegerValue{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_PositiveIntegerValue) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__positiveIntegerValue PositiveIntegerValue, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("PositiveIntegerValue"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for PositiveIntegerValue")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[OptionalProperty](ctx, "outOfService", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	units, err := ReadSimpleField[ReadableProperty](ctx, "units", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'units' field"))
	}
	m.Units = units

	priorityArray, err := ReadSimpleField[OptionalProperty](ctx, "priorityArray", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetPriorityArray")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'priorityArray' field"))
	}
	m.PriorityArray = priorityArray

	relinquishDefault, err := ReadSimpleField[OptionalProperty](ctx, "relinquishDefault", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'relinquishDefault' field"))
	}
	m.RelinquishDefault = relinquishDefault

	cOVIncrement, err := ReadSimpleField[OptionalProperty](ctx, "cOVIncrement", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVIncrement' field"))
	}
	m.COVIncrement = cOVIncrement

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	highLimit, err := ReadSimpleField[OptionalProperty](ctx, "highLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'highLimit' field"))
	}
	m.HighLimit = highLimit

	lowLimit, err := ReadSimpleField[OptionalProperty](ctx, "lowLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lowLimit' field"))
	}
	m.LowLimit = lowLimit

	deadband, err := ReadSimpleField[OptionalProperty](ctx, "deadband", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deadband' field"))
	}
	m.Deadband = deadband

	limitEnable, err := ReadSimpleField[OptionalProperty](ctx, "limitEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLimitEnable")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'limitEnable' field"))
	}
	m.LimitEnable = limitEnable

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	minPresValue, err := ReadSimpleField[OptionalProperty](ctx, "minPresValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'minPresValue' field"))
	}
	m.MinPresValue = minPresValue

	maxPresValue, err := ReadSimpleField[OptionalProperty](ctx, "maxPresValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxPresValue' field"))
	}
	m.MaxPresValue = maxPresValue

	resolution, err := ReadSimpleField[OptionalProperty](ctx, "resolution", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'resolution' field"))
	}
	m.Resolution = resolution

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	faultHighLimit, err := ReadSimpleField[OptionalProperty](ctx, "faultHighLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultHighLimit' field"))
	}
	m.FaultHighLimit = faultHighLimit

	faultLowLimit, err := ReadSimpleField[OptionalProperty](ctx, "faultLowLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultLowLimit' field"))
	}
	m.FaultLowLimit = faultLowLimit

	currentCommandPriority, err := ReadSimpleField[OptionalProperty](ctx, "currentCommandPriority", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetOptionalUnsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'currentCommandPriority' field"))
	}
	m.CurrentCommandPriority = currentCommandPriority

	valueSource, err := ReadSimpleField[OptionalProperty](ctx, "valueSource", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSource' field"))
	}
	m.ValueSource = valueSource

	valueSourceArray, err := ReadSimpleField[OptionalProperty](ctx, "valueSourceArray", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[16] of BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSourceArray' field"))
	}
	m.ValueSourceArray = valueSourceArray

	lastCommandTime, err := ReadSimpleField[OptionalProperty](ctx, "lastCommandTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastCommandTime' field"))
	}
	m.LastCommandTime = lastCommandTime

	commandTimeArray, err := ReadSimpleField[OptionalProperty](ctx, "commandTimeArray", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[16] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'commandTimeArray' field"))
	}
	m.CommandTimeArray = commandTimeArray

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("PositiveIntegerValue"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for PositiveIntegerValue")
	}

	return m, nil
}

func (m *_PositiveIntegerValue) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_PositiveIntegerValue) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("PositiveIntegerValue"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for PositiveIntegerValue")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "units", m.GetUnits(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'units' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "priorityArray", m.GetPriorityArray(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'priorityArray' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "relinquishDefault", m.GetRelinquishDefault(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'relinquishDefault' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVIncrement", m.GetCOVIncrement(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVIncrement' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "highLimit", m.GetHighLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'highLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lowLimit", m.GetLowLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lowLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deadband", m.GetDeadband(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deadband' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "limitEnable", m.GetLimitEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'limitEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "minPresValue", m.GetMinPresValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'minPresValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxPresValue", m.GetMaxPresValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxPresValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "resolution", m.GetResolution(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'resolution' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultHighLimit", m.GetFaultHighLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultHighLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultLowLimit", m.GetFaultLowLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultLowLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "currentCommandPriority", m.GetCurrentCommandPriority(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'currentCommandPriority' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSource", m.GetValueSource(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSource' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSourceArray", m.GetValueSourceArray(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSourceArray' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastCommandTime", m.GetLastCommandTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastCommandTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "commandTimeArray", m.GetCommandTimeArray(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'commandTimeArray' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("PositiveIntegerValue"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for PositiveIntegerValue")
	}
	return nil
}

func (m *_PositiveIntegerValue) IsPositiveIntegerValue() {}

func (m *_PositiveIntegerValue) DeepCopy() any {
	return m.deepCopy()
}

func (m *_PositiveIntegerValue) deepCopy() *_PositiveIntegerValue {
	if m == nil {
		return nil
	}
	_PositiveIntegerValueCopy := &_PositiveIntegerValue{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(OptionalProperty),
		m.Units.DeepCopy().(ReadableProperty),
		m.PriorityArray.DeepCopy().(OptionalProperty),
		m.RelinquishDefault.DeepCopy().(OptionalProperty),
		m.COVIncrement.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.HighLimit.DeepCopy().(OptionalProperty),
		m.LowLimit.DeepCopy().(OptionalProperty),
		m.Deadband.DeepCopy().(OptionalProperty),
		m.LimitEnable.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.MinPresValue.DeepCopy().(OptionalProperty),
		m.MaxPresValue.DeepCopy().(OptionalProperty),
		m.Resolution.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.FaultHighLimit.DeepCopy().(OptionalProperty),
		m.FaultLowLimit.DeepCopy().(OptionalProperty),
		m.CurrentCommandPriority.DeepCopy().(OptionalProperty),
		m.ValueSource.DeepCopy().(OptionalProperty),
		m.ValueSourceArray.DeepCopy().(OptionalProperty),
		m.LastCommandTime.DeepCopy().(OptionalProperty),
		m.CommandTimeArray.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _PositiveIntegerValueCopy
}

func (m *_PositiveIntegerValue) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
