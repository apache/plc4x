/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AccessZone is the corresponding interface of AccessZone
type AccessZone interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetGlobalIdentifier returns GlobalIdentifier (property field)
	GetGlobalIdentifier() WritableProperty
	// GetOccupancyState returns OccupancyState (property field)
	GetOccupancyState() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetOccupancyCount returns OccupancyCount (property field)
	GetOccupancyCount() OptionalProperty
	// GetOccupancyCountEnable returns OccupancyCountEnable (property field)
	GetOccupancyCountEnable() OptionalProperty
	// GetAdjustValue returns AdjustValue (property field)
	GetAdjustValue() OptionalProperty
	// GetOccupancyUpperLimit returns OccupancyUpperLimit (property field)
	GetOccupancyUpperLimit() OptionalProperty
	// GetOccupancyLowerLimit returns OccupancyLowerLimit (property field)
	GetOccupancyLowerLimit() OptionalProperty
	// GetCredentialsInZone returns CredentialsInZone (property field)
	GetCredentialsInZone() OptionalProperty
	// GetLastCredentialAdded returns LastCredentialAdded (property field)
	GetLastCredentialAdded() OptionalProperty
	// GetLastCredentialAddedTime returns LastCredentialAddedTime (property field)
	GetLastCredentialAddedTime() OptionalProperty
	// GetLastCredentialRemoved returns LastCredentialRemoved (property field)
	GetLastCredentialRemoved() OptionalProperty
	// GetLastCredentialRemovedTime returns LastCredentialRemovedTime (property field)
	GetLastCredentialRemovedTime() OptionalProperty
	// GetPassbackMode returns PassbackMode (property field)
	GetPassbackMode() OptionalProperty
	// GetPassbackTimeout returns PassbackTimeout (property field)
	GetPassbackTimeout() OptionalProperty
	// GetEntryPoints returns EntryPoints (property field)
	GetEntryPoints() ReadableProperty
	// GetExitPoints returns ExitPoints (property field)
	GetExitPoints() ReadableProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetAlarmValues returns AlarmValues (property field)
	GetAlarmValues() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAccessZone is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAccessZone()
	// CreateBuilder creates a AccessZoneBuilder
	CreateAccessZoneBuilder() AccessZoneBuilder
}

// _AccessZone is the data-structure of this message
type _AccessZone struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	GlobalIdentifier             WritableProperty
	OccupancyState               ReadableProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  ReadableProperty
	OutOfService                 ReadableProperty
	OccupancyCount               OptionalProperty
	OccupancyCountEnable         OptionalProperty
	AdjustValue                  OptionalProperty
	OccupancyUpperLimit          OptionalProperty
	OccupancyLowerLimit          OptionalProperty
	CredentialsInZone            OptionalProperty
	LastCredentialAdded          OptionalProperty
	LastCredentialAddedTime      OptionalProperty
	LastCredentialRemoved        OptionalProperty
	LastCredentialRemovedTime    OptionalProperty
	PassbackMode                 OptionalProperty
	PassbackTimeout              OptionalProperty
	EntryPoints                  ReadableProperty
	ExitPoints                   ReadableProperty
	TimeDelay                    OptionalProperty
	NotificationClass            OptionalProperty
	AlarmValues                  OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ AccessZone = (*_AccessZone)(nil)

// NewAccessZone factory function for _AccessZone
func NewAccessZone(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, occupancyState ReadableProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, occupancyCount OptionalProperty, occupancyCountEnable OptionalProperty, adjustValue OptionalProperty, occupancyUpperLimit OptionalProperty, occupancyLowerLimit OptionalProperty, credentialsInZone OptionalProperty, lastCredentialAdded OptionalProperty, lastCredentialAddedTime OptionalProperty, lastCredentialRemoved OptionalProperty, lastCredentialRemovedTime OptionalProperty, passbackMode OptionalProperty, passbackTimeout OptionalProperty, entryPoints ReadableProperty, exitPoints ReadableProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, alarmValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_AccessZone {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for AccessZone must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for AccessZone must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for AccessZone must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for AccessZone must not be nil")
	}
	if globalIdentifier == nil {
		panic("globalIdentifier of type WritableProperty for AccessZone must not be nil")
	}
	if occupancyState == nil {
		panic("occupancyState of type ReadableProperty for AccessZone must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for AccessZone must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for AccessZone must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for AccessZone must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for AccessZone must not be nil")
	}
	if occupancyCount == nil {
		panic("occupancyCount of type OptionalProperty for AccessZone must not be nil")
	}
	if occupancyCountEnable == nil {
		panic("occupancyCountEnable of type OptionalProperty for AccessZone must not be nil")
	}
	if adjustValue == nil {
		panic("adjustValue of type OptionalProperty for AccessZone must not be nil")
	}
	if occupancyUpperLimit == nil {
		panic("occupancyUpperLimit of type OptionalProperty for AccessZone must not be nil")
	}
	if occupancyLowerLimit == nil {
		panic("occupancyLowerLimit of type OptionalProperty for AccessZone must not be nil")
	}
	if credentialsInZone == nil {
		panic("credentialsInZone of type OptionalProperty for AccessZone must not be nil")
	}
	if lastCredentialAdded == nil {
		panic("lastCredentialAdded of type OptionalProperty for AccessZone must not be nil")
	}
	if lastCredentialAddedTime == nil {
		panic("lastCredentialAddedTime of type OptionalProperty for AccessZone must not be nil")
	}
	if lastCredentialRemoved == nil {
		panic("lastCredentialRemoved of type OptionalProperty for AccessZone must not be nil")
	}
	if lastCredentialRemovedTime == nil {
		panic("lastCredentialRemovedTime of type OptionalProperty for AccessZone must not be nil")
	}
	if passbackMode == nil {
		panic("passbackMode of type OptionalProperty for AccessZone must not be nil")
	}
	if passbackTimeout == nil {
		panic("passbackTimeout of type OptionalProperty for AccessZone must not be nil")
	}
	if entryPoints == nil {
		panic("entryPoints of type ReadableProperty for AccessZone must not be nil")
	}
	if exitPoints == nil {
		panic("exitPoints of type ReadableProperty for AccessZone must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for AccessZone must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for AccessZone must not be nil")
	}
	if alarmValues == nil {
		panic("alarmValues of type OptionalProperty for AccessZone must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for AccessZone must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for AccessZone must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for AccessZone must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for AccessZone must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for AccessZone must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for AccessZone must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for AccessZone must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for AccessZone must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for AccessZone must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for AccessZone must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for AccessZone must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for AccessZone must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for AccessZone must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for AccessZone must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for AccessZone must not be nil")
	}
	return &_AccessZone{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, GlobalIdentifier: globalIdentifier, OccupancyState: occupancyState, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, OccupancyCount: occupancyCount, OccupancyCountEnable: occupancyCountEnable, AdjustValue: adjustValue, OccupancyUpperLimit: occupancyUpperLimit, OccupancyLowerLimit: occupancyLowerLimit, CredentialsInZone: credentialsInZone, LastCredentialAdded: lastCredentialAdded, LastCredentialAddedTime: lastCredentialAddedTime, LastCredentialRemoved: lastCredentialRemoved, LastCredentialRemovedTime: lastCredentialRemovedTime, PassbackMode: passbackMode, PassbackTimeout: passbackTimeout, EntryPoints: entryPoints, ExitPoints: exitPoints, TimeDelay: timeDelay, NotificationClass: notificationClass, AlarmValues: alarmValues, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AccessZoneBuilder is a builder for AccessZone
type AccessZoneBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, occupancyState ReadableProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, occupancyCount OptionalProperty, occupancyCountEnable OptionalProperty, adjustValue OptionalProperty, occupancyUpperLimit OptionalProperty, occupancyLowerLimit OptionalProperty, credentialsInZone OptionalProperty, lastCredentialAdded OptionalProperty, lastCredentialAddedTime OptionalProperty, lastCredentialRemoved OptionalProperty, lastCredentialRemovedTime OptionalProperty, passbackMode OptionalProperty, passbackTimeout OptionalProperty, entryPoints ReadableProperty, exitPoints ReadableProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, alarmValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessZoneBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AccessZoneBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AccessZoneBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AccessZoneBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AccessZoneBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithGlobalIdentifier adds GlobalIdentifier (property field)
	WithGlobalIdentifier(WritableProperty) AccessZoneBuilder
	// WithGlobalIdentifierBuilder adds GlobalIdentifier (property field) which is build by the builder
	WithGlobalIdentifierBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AccessZoneBuilder
	// WithOccupancyState adds OccupancyState (property field)
	WithOccupancyState(ReadableProperty) AccessZoneBuilder
	// WithOccupancyStateBuilder adds OccupancyState (property field) which is build by the builder
	WithOccupancyStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) AccessZoneBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) AccessZoneBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) AccessZoneBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) AccessZoneBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithOccupancyCount adds OccupancyCount (property field)
	WithOccupancyCount(OptionalProperty) AccessZoneBuilder
	// WithOccupancyCountBuilder adds OccupancyCount (property field) which is build by the builder
	WithOccupancyCountBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithOccupancyCountEnable adds OccupancyCountEnable (property field)
	WithOccupancyCountEnable(OptionalProperty) AccessZoneBuilder
	// WithOccupancyCountEnableBuilder adds OccupancyCountEnable (property field) which is build by the builder
	WithOccupancyCountEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithAdjustValue adds AdjustValue (property field)
	WithAdjustValue(OptionalProperty) AccessZoneBuilder
	// WithAdjustValueBuilder adds AdjustValue (property field) which is build by the builder
	WithAdjustValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithOccupancyUpperLimit adds OccupancyUpperLimit (property field)
	WithOccupancyUpperLimit(OptionalProperty) AccessZoneBuilder
	// WithOccupancyUpperLimitBuilder adds OccupancyUpperLimit (property field) which is build by the builder
	WithOccupancyUpperLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithOccupancyLowerLimit adds OccupancyLowerLimit (property field)
	WithOccupancyLowerLimit(OptionalProperty) AccessZoneBuilder
	// WithOccupancyLowerLimitBuilder adds OccupancyLowerLimit (property field) which is build by the builder
	WithOccupancyLowerLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithCredentialsInZone adds CredentialsInZone (property field)
	WithCredentialsInZone(OptionalProperty) AccessZoneBuilder
	// WithCredentialsInZoneBuilder adds CredentialsInZone (property field) which is build by the builder
	WithCredentialsInZoneBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithLastCredentialAdded adds LastCredentialAdded (property field)
	WithLastCredentialAdded(OptionalProperty) AccessZoneBuilder
	// WithLastCredentialAddedBuilder adds LastCredentialAdded (property field) which is build by the builder
	WithLastCredentialAddedBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithLastCredentialAddedTime adds LastCredentialAddedTime (property field)
	WithLastCredentialAddedTime(OptionalProperty) AccessZoneBuilder
	// WithLastCredentialAddedTimeBuilder adds LastCredentialAddedTime (property field) which is build by the builder
	WithLastCredentialAddedTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithLastCredentialRemoved adds LastCredentialRemoved (property field)
	WithLastCredentialRemoved(OptionalProperty) AccessZoneBuilder
	// WithLastCredentialRemovedBuilder adds LastCredentialRemoved (property field) which is build by the builder
	WithLastCredentialRemovedBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithLastCredentialRemovedTime adds LastCredentialRemovedTime (property field)
	WithLastCredentialRemovedTime(OptionalProperty) AccessZoneBuilder
	// WithLastCredentialRemovedTimeBuilder adds LastCredentialRemovedTime (property field) which is build by the builder
	WithLastCredentialRemovedTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithPassbackMode adds PassbackMode (property field)
	WithPassbackMode(OptionalProperty) AccessZoneBuilder
	// WithPassbackModeBuilder adds PassbackMode (property field) which is build by the builder
	WithPassbackModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithPassbackTimeout adds PassbackTimeout (property field)
	WithPassbackTimeout(OptionalProperty) AccessZoneBuilder
	// WithPassbackTimeoutBuilder adds PassbackTimeout (property field) which is build by the builder
	WithPassbackTimeoutBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEntryPoints adds EntryPoints (property field)
	WithEntryPoints(ReadableProperty) AccessZoneBuilder
	// WithEntryPointsBuilder adds EntryPoints (property field) which is build by the builder
	WithEntryPointsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithExitPoints adds ExitPoints (property field)
	WithExitPoints(ReadableProperty) AccessZoneBuilder
	// WithExitPointsBuilder adds ExitPoints (property field) which is build by the builder
	WithExitPointsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) AccessZoneBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) AccessZoneBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithAlarmValues adds AlarmValues (property field)
	WithAlarmValues(OptionalProperty) AccessZoneBuilder
	// WithAlarmValuesBuilder adds AlarmValues (property field) which is build by the builder
	WithAlarmValuesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) AccessZoneBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) AccessZoneBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) AccessZoneBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) AccessZoneBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) AccessZoneBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) AccessZoneBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) AccessZoneBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) AccessZoneBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) AccessZoneBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) AccessZoneBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) AccessZoneBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AccessZoneBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AccessZoneBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AccessZoneBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AccessZoneBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder
	// Build builds the AccessZone or returns an error if something is wrong
	Build() (AccessZone, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() AccessZone
}

// NewAccessZoneBuilder() creates a AccessZoneBuilder
func NewAccessZoneBuilder() AccessZoneBuilder {
	return &_AccessZoneBuilder{_AccessZone: new(_AccessZone)}
}

type _AccessZoneBuilder struct {
	*_AccessZone

	err *utils.MultiError
}

var _ (AccessZoneBuilder) = (*_AccessZoneBuilder)(nil)

func (b *_AccessZoneBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, occupancyState ReadableProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, occupancyCount OptionalProperty, occupancyCountEnable OptionalProperty, adjustValue OptionalProperty, occupancyUpperLimit OptionalProperty, occupancyLowerLimit OptionalProperty, credentialsInZone OptionalProperty, lastCredentialAdded OptionalProperty, lastCredentialAddedTime OptionalProperty, lastCredentialRemoved OptionalProperty, lastCredentialRemovedTime OptionalProperty, passbackMode OptionalProperty, passbackTimeout OptionalProperty, entryPoints ReadableProperty, exitPoints ReadableProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, alarmValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessZoneBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithGlobalIdentifier(globalIdentifier).WithOccupancyState(occupancyState).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithOccupancyCount(occupancyCount).WithOccupancyCountEnable(occupancyCountEnable).WithAdjustValue(adjustValue).WithOccupancyUpperLimit(occupancyUpperLimit).WithOccupancyLowerLimit(occupancyLowerLimit).WithCredentialsInZone(credentialsInZone).WithLastCredentialAdded(lastCredentialAdded).WithLastCredentialAddedTime(lastCredentialAddedTime).WithLastCredentialRemoved(lastCredentialRemoved).WithLastCredentialRemovedTime(lastCredentialRemovedTime).WithPassbackMode(passbackMode).WithPassbackTimeout(passbackTimeout).WithEntryPoints(entryPoints).WithExitPoints(exitPoints).WithTimeDelay(timeDelay).WithNotificationClass(notificationClass).WithAlarmValues(alarmValues).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AccessZoneBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AccessZoneBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AccessZoneBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithObjectName(objectName ReadableProperty) AccessZoneBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AccessZoneBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithObjectType(objectType ReadableProperty) AccessZoneBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AccessZoneBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithDescription(description OptionalProperty) AccessZoneBuilder {
	b.Description = description
	return b
}

func (b *_AccessZoneBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithGlobalIdentifier(globalIdentifier WritableProperty) AccessZoneBuilder {
	b.GlobalIdentifier = globalIdentifier
	return b
}

func (b *_AccessZoneBuilder) WithGlobalIdentifierBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.GlobalIdentifier.CreateWritablePropertyBuilder())
	var err error
	b.GlobalIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyState(occupancyState ReadableProperty) AccessZoneBuilder {
	b.OccupancyState = occupancyState
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.OccupancyState.CreateReadablePropertyBuilder())
	var err error
	b.OccupancyState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithStatusFlags(statusFlags ReadableProperty) AccessZoneBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_AccessZoneBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventState(eventState ReadableProperty) AccessZoneBuilder {
	b.EventState = eventState
	return b
}

func (b *_AccessZoneBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithReliability(reliability ReadableProperty) AccessZoneBuilder {
	b.Reliability = reliability
	return b
}

func (b *_AccessZoneBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithOutOfService(outOfService ReadableProperty) AccessZoneBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_AccessZoneBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyCount(occupancyCount OptionalProperty) AccessZoneBuilder {
	b.OccupancyCount = occupancyCount
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyCountBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.OccupancyCount.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyCount, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyCountEnable(occupancyCountEnable OptionalProperty) AccessZoneBuilder {
	b.OccupancyCountEnable = occupancyCountEnable
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyCountEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.OccupancyCountEnable.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyCountEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithAdjustValue(adjustValue OptionalProperty) AccessZoneBuilder {
	b.AdjustValue = adjustValue
	return b
}

func (b *_AccessZoneBuilder) WithAdjustValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.AdjustValue.CreateOptionalPropertyBuilder())
	var err error
	b.AdjustValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyUpperLimit(occupancyUpperLimit OptionalProperty) AccessZoneBuilder {
	b.OccupancyUpperLimit = occupancyUpperLimit
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyUpperLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.OccupancyUpperLimit.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyUpperLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyLowerLimit(occupancyLowerLimit OptionalProperty) AccessZoneBuilder {
	b.OccupancyLowerLimit = occupancyLowerLimit
	return b
}

func (b *_AccessZoneBuilder) WithOccupancyLowerLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.OccupancyLowerLimit.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyLowerLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithCredentialsInZone(credentialsInZone OptionalProperty) AccessZoneBuilder {
	b.CredentialsInZone = credentialsInZone
	return b
}

func (b *_AccessZoneBuilder) WithCredentialsInZoneBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.CredentialsInZone.CreateOptionalPropertyBuilder())
	var err error
	b.CredentialsInZone, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialAdded(lastCredentialAdded OptionalProperty) AccessZoneBuilder {
	b.LastCredentialAdded = lastCredentialAdded
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialAddedBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.LastCredentialAdded.CreateOptionalPropertyBuilder())
	var err error
	b.LastCredentialAdded, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialAddedTime(lastCredentialAddedTime OptionalProperty) AccessZoneBuilder {
	b.LastCredentialAddedTime = lastCredentialAddedTime
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialAddedTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.LastCredentialAddedTime.CreateOptionalPropertyBuilder())
	var err error
	b.LastCredentialAddedTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialRemoved(lastCredentialRemoved OptionalProperty) AccessZoneBuilder {
	b.LastCredentialRemoved = lastCredentialRemoved
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialRemovedBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.LastCredentialRemoved.CreateOptionalPropertyBuilder())
	var err error
	b.LastCredentialRemoved, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialRemovedTime(lastCredentialRemovedTime OptionalProperty) AccessZoneBuilder {
	b.LastCredentialRemovedTime = lastCredentialRemovedTime
	return b
}

func (b *_AccessZoneBuilder) WithLastCredentialRemovedTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.LastCredentialRemovedTime.CreateOptionalPropertyBuilder())
	var err error
	b.LastCredentialRemovedTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithPassbackMode(passbackMode OptionalProperty) AccessZoneBuilder {
	b.PassbackMode = passbackMode
	return b
}

func (b *_AccessZoneBuilder) WithPassbackModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.PassbackMode.CreateOptionalPropertyBuilder())
	var err error
	b.PassbackMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithPassbackTimeout(passbackTimeout OptionalProperty) AccessZoneBuilder {
	b.PassbackTimeout = passbackTimeout
	return b
}

func (b *_AccessZoneBuilder) WithPassbackTimeoutBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.PassbackTimeout.CreateOptionalPropertyBuilder())
	var err error
	b.PassbackTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEntryPoints(entryPoints ReadableProperty) AccessZoneBuilder {
	b.EntryPoints = entryPoints
	return b
}

func (b *_AccessZoneBuilder) WithEntryPointsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EntryPoints.CreateReadablePropertyBuilder())
	var err error
	b.EntryPoints, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithExitPoints(exitPoints ReadableProperty) AccessZoneBuilder {
	b.ExitPoints = exitPoints
	return b
}

func (b *_AccessZoneBuilder) WithExitPointsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ExitPoints.CreateReadablePropertyBuilder())
	var err error
	b.ExitPoints, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithTimeDelay(timeDelay OptionalProperty) AccessZoneBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_AccessZoneBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithNotificationClass(notificationClass OptionalProperty) AccessZoneBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_AccessZoneBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithAlarmValues(alarmValues OptionalProperty) AccessZoneBuilder {
	b.AlarmValues = alarmValues
	return b
}

func (b *_AccessZoneBuilder) WithAlarmValuesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.AlarmValues.CreateOptionalPropertyBuilder())
	var err error
	b.AlarmValues, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventEnable(eventEnable OptionalProperty) AccessZoneBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_AccessZoneBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) AccessZoneBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_AccessZoneBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithNotifyType(notifyType OptionalProperty) AccessZoneBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_AccessZoneBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) AccessZoneBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_AccessZoneBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) AccessZoneBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_AccessZoneBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) AccessZoneBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_AccessZoneBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) AccessZoneBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_AccessZoneBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) AccessZoneBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_AccessZoneBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) AccessZoneBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_AccessZoneBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) AccessZoneBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_AccessZoneBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) AccessZoneBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_AccessZoneBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithPropertyList(propertyList ReadableProperty) AccessZoneBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AccessZoneBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithTags(tags OptionalProperty) AccessZoneBuilder {
	b.Tags = tags
	return b
}

func (b *_AccessZoneBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithProfileLocation(profileLocation OptionalProperty) AccessZoneBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AccessZoneBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) WithProfileName(profileName OptionalProperty) AccessZoneBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AccessZoneBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessZoneBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessZoneBuilder) Build() (AccessZone, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.GlobalIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'globalIdentifier' not set"))
	}
	if b.OccupancyState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyState' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.OccupancyCount == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyCount' not set"))
	}
	if b.OccupancyCountEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyCountEnable' not set"))
	}
	if b.AdjustValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'adjustValue' not set"))
	}
	if b.OccupancyUpperLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyUpperLimit' not set"))
	}
	if b.OccupancyLowerLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyLowerLimit' not set"))
	}
	if b.CredentialsInZone == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'credentialsInZone' not set"))
	}
	if b.LastCredentialAdded == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastCredentialAdded' not set"))
	}
	if b.LastCredentialAddedTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastCredentialAddedTime' not set"))
	}
	if b.LastCredentialRemoved == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastCredentialRemoved' not set"))
	}
	if b.LastCredentialRemovedTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastCredentialRemovedTime' not set"))
	}
	if b.PassbackMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'passbackMode' not set"))
	}
	if b.PassbackTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'passbackTimeout' not set"))
	}
	if b.EntryPoints == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'entryPoints' not set"))
	}
	if b.ExitPoints == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'exitPoints' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.AlarmValues == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'alarmValues' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._AccessZone.deepCopy(), nil
}

func (b *_AccessZoneBuilder) MustBuild() AccessZone {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AccessZoneBuilder) DeepCopy() any {
	_copy := b.CreateAccessZoneBuilder().(*_AccessZoneBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAccessZoneBuilder creates a AccessZoneBuilder
func (b *_AccessZone) CreateAccessZoneBuilder() AccessZoneBuilder {
	if b == nil {
		return NewAccessZoneBuilder()
	}
	return &_AccessZoneBuilder{_AccessZone: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AccessZone) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_AccessZone) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_AccessZone) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_AccessZone) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_AccessZone) GetGlobalIdentifier() WritableProperty {
	return m.GlobalIdentifier
}

func (m *_AccessZone) GetOccupancyState() ReadableProperty {
	return m.OccupancyState
}

func (m *_AccessZone) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_AccessZone) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_AccessZone) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_AccessZone) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_AccessZone) GetOccupancyCount() OptionalProperty {
	return m.OccupancyCount
}

func (m *_AccessZone) GetOccupancyCountEnable() OptionalProperty {
	return m.OccupancyCountEnable
}

func (m *_AccessZone) GetAdjustValue() OptionalProperty {
	return m.AdjustValue
}

func (m *_AccessZone) GetOccupancyUpperLimit() OptionalProperty {
	return m.OccupancyUpperLimit
}

func (m *_AccessZone) GetOccupancyLowerLimit() OptionalProperty {
	return m.OccupancyLowerLimit
}

func (m *_AccessZone) GetCredentialsInZone() OptionalProperty {
	return m.CredentialsInZone
}

func (m *_AccessZone) GetLastCredentialAdded() OptionalProperty {
	return m.LastCredentialAdded
}

func (m *_AccessZone) GetLastCredentialAddedTime() OptionalProperty {
	return m.LastCredentialAddedTime
}

func (m *_AccessZone) GetLastCredentialRemoved() OptionalProperty {
	return m.LastCredentialRemoved
}

func (m *_AccessZone) GetLastCredentialRemovedTime() OptionalProperty {
	return m.LastCredentialRemovedTime
}

func (m *_AccessZone) GetPassbackMode() OptionalProperty {
	return m.PassbackMode
}

func (m *_AccessZone) GetPassbackTimeout() OptionalProperty {
	return m.PassbackTimeout
}

func (m *_AccessZone) GetEntryPoints() ReadableProperty {
	return m.EntryPoints
}

func (m *_AccessZone) GetExitPoints() ReadableProperty {
	return m.ExitPoints
}

func (m *_AccessZone) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_AccessZone) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_AccessZone) GetAlarmValues() OptionalProperty {
	return m.AlarmValues
}

func (m *_AccessZone) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_AccessZone) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_AccessZone) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_AccessZone) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_AccessZone) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_AccessZone) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_AccessZone) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_AccessZone) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_AccessZone) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_AccessZone) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_AccessZone) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_AccessZone) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_AccessZone) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_AccessZone) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_AccessZone) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAccessZone(structType any) AccessZone {
	if casted, ok := structType.(AccessZone); ok {
		return casted
	}
	if casted, ok := structType.(*AccessZone); ok {
		return *casted
	}
	return nil
}

func (m *_AccessZone) GetTypeName() string {
	return "AccessZone"
}

func (m *_AccessZone) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (globalIdentifier)
	lengthInBits += m.GlobalIdentifier.GetLengthInBits(ctx)

	// Simple field (occupancyState)
	lengthInBits += m.OccupancyState.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (occupancyCount)
	lengthInBits += m.OccupancyCount.GetLengthInBits(ctx)

	// Simple field (occupancyCountEnable)
	lengthInBits += m.OccupancyCountEnable.GetLengthInBits(ctx)

	// Simple field (adjustValue)
	lengthInBits += m.AdjustValue.GetLengthInBits(ctx)

	// Simple field (occupancyUpperLimit)
	lengthInBits += m.OccupancyUpperLimit.GetLengthInBits(ctx)

	// Simple field (occupancyLowerLimit)
	lengthInBits += m.OccupancyLowerLimit.GetLengthInBits(ctx)

	// Simple field (credentialsInZone)
	lengthInBits += m.CredentialsInZone.GetLengthInBits(ctx)

	// Simple field (lastCredentialAdded)
	lengthInBits += m.LastCredentialAdded.GetLengthInBits(ctx)

	// Simple field (lastCredentialAddedTime)
	lengthInBits += m.LastCredentialAddedTime.GetLengthInBits(ctx)

	// Simple field (lastCredentialRemoved)
	lengthInBits += m.LastCredentialRemoved.GetLengthInBits(ctx)

	// Simple field (lastCredentialRemovedTime)
	lengthInBits += m.LastCredentialRemovedTime.GetLengthInBits(ctx)

	// Simple field (passbackMode)
	lengthInBits += m.PassbackMode.GetLengthInBits(ctx)

	// Simple field (passbackTimeout)
	lengthInBits += m.PassbackTimeout.GetLengthInBits(ctx)

	// Simple field (entryPoints)
	lengthInBits += m.EntryPoints.GetLengthInBits(ctx)

	// Simple field (exitPoints)
	lengthInBits += m.ExitPoints.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (alarmValues)
	lengthInBits += m.AlarmValues.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AccessZone) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AccessZoneParse(ctx context.Context, theBytes []byte) (AccessZone, error) {
	return AccessZoneParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AccessZoneParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessZone, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessZone, error) {
		return AccessZoneParseWithBuffer(ctx, readBuffer)
	}
}

func AccessZoneParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (AccessZone, error) {
	v, err := (&_AccessZone{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_AccessZone) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__accessZone AccessZone, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AccessZone"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AccessZone")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	globalIdentifier, err := ReadSimpleField[WritableProperty](ctx, "globalIdentifier", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'globalIdentifier' field"))
	}
	m.GlobalIdentifier = globalIdentifier

	occupancyState, err := ReadSimpleField[ReadableProperty](ctx, "occupancyState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAccessZoneOccupancyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyState' field"))
	}
	m.OccupancyState = occupancyState

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	occupancyCount, err := ReadSimpleField[OptionalProperty](ctx, "occupancyCount", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyCount' field"))
	}
	m.OccupancyCount = occupancyCount

	occupancyCountEnable, err := ReadSimpleField[OptionalProperty](ctx, "occupancyCountEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyCountEnable' field"))
	}
	m.OccupancyCountEnable = occupancyCountEnable

	adjustValue, err := ReadSimpleField[OptionalProperty](ctx, "adjustValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("INTEGER")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'adjustValue' field"))
	}
	m.AdjustValue = adjustValue

	occupancyUpperLimit, err := ReadSimpleField[OptionalProperty](ctx, "occupancyUpperLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyUpperLimit' field"))
	}
	m.OccupancyUpperLimit = occupancyUpperLimit

	occupancyLowerLimit, err := ReadSimpleField[OptionalProperty](ctx, "occupancyLowerLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyLowerLimit' field"))
	}
	m.OccupancyLowerLimit = occupancyLowerLimit

	credentialsInZone, err := ReadSimpleField[OptionalProperty](ctx, "credentialsInZone", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'credentialsInZone' field"))
	}
	m.CredentialsInZone = credentialsInZone

	lastCredentialAdded, err := ReadSimpleField[OptionalProperty](ctx, "lastCredentialAdded", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastCredentialAdded' field"))
	}
	m.LastCredentialAdded = lastCredentialAdded

	lastCredentialAddedTime, err := ReadSimpleField[OptionalProperty](ctx, "lastCredentialAddedTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastCredentialAddedTime' field"))
	}
	m.LastCredentialAddedTime = lastCredentialAddedTime

	lastCredentialRemoved, err := ReadSimpleField[OptionalProperty](ctx, "lastCredentialRemoved", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastCredentialRemoved' field"))
	}
	m.LastCredentialRemoved = lastCredentialRemoved

	lastCredentialRemovedTime, err := ReadSimpleField[OptionalProperty](ctx, "lastCredentialRemovedTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastCredentialRemovedTime' field"))
	}
	m.LastCredentialRemovedTime = lastCredentialRemovedTime

	passbackMode, err := ReadSimpleField[OptionalProperty](ctx, "passbackMode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetAccessPassbackMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'passbackMode' field"))
	}
	m.PassbackMode = passbackMode

	passbackTimeout, err := ReadSimpleField[OptionalProperty](ctx, "passbackTimeout", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'passbackTimeout' field"))
	}
	m.PassbackTimeout = passbackTimeout

	entryPoints, err := ReadSimpleField[ReadableProperty](ctx, "entryPoints", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'entryPoints' field"))
	}
	m.EntryPoints = entryPoints

	exitPoints, err := ReadSimpleField[ReadableProperty](ctx, "exitPoints", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'exitPoints' field"))
	}
	m.ExitPoints = exitPoints

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	alarmValues, err := ReadSimpleField[OptionalProperty](ctx, "alarmValues", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAccessZoneOccupancyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'alarmValues' field"))
	}
	m.AlarmValues = alarmValues

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("AccessZone"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AccessZone")
	}

	return m, nil
}

func (m *_AccessZone) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AccessZone) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("AccessZone"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AccessZone")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "globalIdentifier", m.GetGlobalIdentifier(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'globalIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "occupancyState", m.GetOccupancyState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyCount", m.GetOccupancyCount(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyCount' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyCountEnable", m.GetOccupancyCountEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyCountEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "adjustValue", m.GetAdjustValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'adjustValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyUpperLimit", m.GetOccupancyUpperLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyUpperLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyLowerLimit", m.GetOccupancyLowerLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyLowerLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "credentialsInZone", m.GetCredentialsInZone(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'credentialsInZone' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastCredentialAdded", m.GetLastCredentialAdded(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastCredentialAdded' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastCredentialAddedTime", m.GetLastCredentialAddedTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastCredentialAddedTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastCredentialRemoved", m.GetLastCredentialRemoved(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastCredentialRemoved' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastCredentialRemovedTime", m.GetLastCredentialRemovedTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastCredentialRemovedTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "passbackMode", m.GetPassbackMode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'passbackMode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "passbackTimeout", m.GetPassbackTimeout(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'passbackTimeout' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "entryPoints", m.GetEntryPoints(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'entryPoints' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "exitPoints", m.GetExitPoints(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'exitPoints' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "alarmValues", m.GetAlarmValues(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'alarmValues' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("AccessZone"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AccessZone")
	}
	return nil
}

func (m *_AccessZone) IsAccessZone() {}

func (m *_AccessZone) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AccessZone) deepCopy() *_AccessZone {
	if m == nil {
		return nil
	}
	_AccessZoneCopy := &_AccessZone{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.GlobalIdentifier.DeepCopy().(WritableProperty),
		m.OccupancyState.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.OccupancyCount.DeepCopy().(OptionalProperty),
		m.OccupancyCountEnable.DeepCopy().(OptionalProperty),
		m.AdjustValue.DeepCopy().(OptionalProperty),
		m.OccupancyUpperLimit.DeepCopy().(OptionalProperty),
		m.OccupancyLowerLimit.DeepCopy().(OptionalProperty),
		m.CredentialsInZone.DeepCopy().(OptionalProperty),
		m.LastCredentialAdded.DeepCopy().(OptionalProperty),
		m.LastCredentialAddedTime.DeepCopy().(OptionalProperty),
		m.LastCredentialRemoved.DeepCopy().(OptionalProperty),
		m.LastCredentialRemovedTime.DeepCopy().(OptionalProperty),
		m.PassbackMode.DeepCopy().(OptionalProperty),
		m.PassbackTimeout.DeepCopy().(OptionalProperty),
		m.EntryPoints.DeepCopy().(ReadableProperty),
		m.ExitPoints.DeepCopy().(ReadableProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.AlarmValues.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AccessZoneCopy
}

func (m *_AccessZone) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
