/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Channel is the corresponding interface of Channel
type Channel interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() WritableProperty
	// GetLastPriority returns LastPriority (property field)
	GetLastPriority() ReadableProperty
	// GetWriteStatus returns WriteStatus (property field)
	GetWriteStatus() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetListOfObjectPropertyReferences returns ListOfObjectPropertyReferences (property field)
	GetListOfObjectPropertyReferences() WritableProperty
	// GetExecutionDelay returns ExecutionDelay (property field)
	GetExecutionDelay() OptionalProperty
	// GetAllowGroupDelayInhibit returns AllowGroupDelayInhibit (property field)
	GetAllowGroupDelayInhibit() OptionalProperty
	// GetChannelNumber returns ChannelNumber (property field)
	GetChannelNumber() WritableProperty
	// GetControlGroups returns ControlGroups (property field)
	GetControlGroups() WritableProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetValueSource returns ValueSource (property field)
	GetValueSource() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsChannel is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsChannel()
	// CreateBuilder creates a ChannelBuilder
	CreateChannelBuilder() ChannelBuilder
}

// _Channel is the data-structure of this message
type _Channel struct {
	ObjectIdentifier               ReadableProperty
	ObjectName                     ReadableProperty
	ObjectType                     ReadableProperty
	Description                    OptionalProperty
	PresentValue                   WritableProperty
	LastPriority                   ReadableProperty
	WriteStatus                    ReadableProperty
	StatusFlags                    ReadableProperty
	Reliability                    OptionalProperty
	OutOfService                   ReadableProperty
	ListOfObjectPropertyReferences WritableProperty
	ExecutionDelay                 OptionalProperty
	AllowGroupDelayInhibit         OptionalProperty
	ChannelNumber                  WritableProperty
	ControlGroups                  WritableProperty
	EventDetectionEnable           OptionalProperty
	NotificationClass              OptionalProperty
	EventEnable                    OptionalProperty
	EventState                     OptionalProperty
	AckedTransitions               OptionalProperty
	NotifyType                     OptionalProperty
	EventTimeStamps                OptionalProperty
	EventMessageTexts              OptionalProperty
	EventMessageTextsConfig        OptionalProperty
	ReliabilityEvaluationInhibit   OptionalProperty
	PropertyList                   ReadableProperty
	ValueSource                    OptionalProperty
	Tags                           OptionalProperty
	ProfileLocation                OptionalProperty
	ProfileName                    OptionalProperty
}

var _ Channel = (*_Channel)(nil)

// NewChannel factory function for _Channel
func NewChannel(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue WritableProperty, lastPriority ReadableProperty, writeStatus ReadableProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, listOfObjectPropertyReferences WritableProperty, executionDelay OptionalProperty, allowGroupDelayInhibit OptionalProperty, channelNumber WritableProperty, controlGroups WritableProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Channel {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Channel must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Channel must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Channel must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Channel must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type WritableProperty for Channel must not be nil")
	}
	if lastPriority == nil {
		panic("lastPriority of type ReadableProperty for Channel must not be nil")
	}
	if writeStatus == nil {
		panic("writeStatus of type ReadableProperty for Channel must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Channel must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Channel must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for Channel must not be nil")
	}
	if listOfObjectPropertyReferences == nil {
		panic("listOfObjectPropertyReferences of type WritableProperty for Channel must not be nil")
	}
	if executionDelay == nil {
		panic("executionDelay of type OptionalProperty for Channel must not be nil")
	}
	if allowGroupDelayInhibit == nil {
		panic("allowGroupDelayInhibit of type OptionalProperty for Channel must not be nil")
	}
	if channelNumber == nil {
		panic("channelNumber of type WritableProperty for Channel must not be nil")
	}
	if controlGroups == nil {
		panic("controlGroups of type WritableProperty for Channel must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Channel must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Channel must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Channel must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for Channel must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Channel must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Channel must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Channel must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Channel must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Channel must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Channel must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Channel must not be nil")
	}
	if valueSource == nil {
		panic("valueSource of type OptionalProperty for Channel must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Channel must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Channel must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Channel must not be nil")
	}
	return &_Channel{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, PresentValue: presentValue, LastPriority: lastPriority, WriteStatus: writeStatus, StatusFlags: statusFlags, Reliability: reliability, OutOfService: outOfService, ListOfObjectPropertyReferences: listOfObjectPropertyReferences, ExecutionDelay: executionDelay, AllowGroupDelayInhibit: allowGroupDelayInhibit, ChannelNumber: channelNumber, ControlGroups: controlGroups, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, EventState: eventState, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, ValueSource: valueSource, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// ChannelBuilder is a builder for Channel
type ChannelBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue WritableProperty, lastPriority ReadableProperty, writeStatus ReadableProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, listOfObjectPropertyReferences WritableProperty, executionDelay OptionalProperty, allowGroupDelayInhibit OptionalProperty, channelNumber WritableProperty, controlGroups WritableProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) ChannelBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) ChannelBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) ChannelBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) ChannelBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) ChannelBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(WritableProperty) ChannelBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder
	// WithLastPriority adds LastPriority (property field)
	WithLastPriority(ReadableProperty) ChannelBuilder
	// WithLastPriorityBuilder adds LastPriority (property field) which is build by the builder
	WithLastPriorityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithWriteStatus adds WriteStatus (property field)
	WithWriteStatus(ReadableProperty) ChannelBuilder
	// WithWriteStatusBuilder adds WriteStatus (property field) which is build by the builder
	WithWriteStatusBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) ChannelBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) ChannelBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) ChannelBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithListOfObjectPropertyReferences adds ListOfObjectPropertyReferences (property field)
	WithListOfObjectPropertyReferences(WritableProperty) ChannelBuilder
	// WithListOfObjectPropertyReferencesBuilder adds ListOfObjectPropertyReferences (property field) which is build by the builder
	WithListOfObjectPropertyReferencesBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder
	// WithExecutionDelay adds ExecutionDelay (property field)
	WithExecutionDelay(OptionalProperty) ChannelBuilder
	// WithExecutionDelayBuilder adds ExecutionDelay (property field) which is build by the builder
	WithExecutionDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithAllowGroupDelayInhibit adds AllowGroupDelayInhibit (property field)
	WithAllowGroupDelayInhibit(OptionalProperty) ChannelBuilder
	// WithAllowGroupDelayInhibitBuilder adds AllowGroupDelayInhibit (property field) which is build by the builder
	WithAllowGroupDelayInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithChannelNumber adds ChannelNumber (property field)
	WithChannelNumber(WritableProperty) ChannelBuilder
	// WithChannelNumberBuilder adds ChannelNumber (property field) which is build by the builder
	WithChannelNumberBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder
	// WithControlGroups adds ControlGroups (property field)
	WithControlGroups(WritableProperty) ChannelBuilder
	// WithControlGroupsBuilder adds ControlGroups (property field) which is build by the builder
	WithControlGroupsBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) ChannelBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) ChannelBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) ChannelBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) ChannelBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) ChannelBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) ChannelBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) ChannelBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) ChannelBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) ChannelBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) ChannelBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) ChannelBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder
	// WithValueSource adds ValueSource (property field)
	WithValueSource(OptionalProperty) ChannelBuilder
	// WithValueSourceBuilder adds ValueSource (property field) which is build by the builder
	WithValueSourceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) ChannelBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) ChannelBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) ChannelBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder
	// Build builds the Channel or returns an error if something is wrong
	Build() (Channel, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Channel
}

// NewChannelBuilder() creates a ChannelBuilder
func NewChannelBuilder() ChannelBuilder {
	return &_ChannelBuilder{_Channel: new(_Channel)}
}

type _ChannelBuilder struct {
	*_Channel

	err *utils.MultiError
}

var _ (ChannelBuilder) = (*_ChannelBuilder)(nil)

func (b *_ChannelBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue WritableProperty, lastPriority ReadableProperty, writeStatus ReadableProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, listOfObjectPropertyReferences WritableProperty, executionDelay OptionalProperty, allowGroupDelayInhibit OptionalProperty, channelNumber WritableProperty, controlGroups WritableProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) ChannelBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithPresentValue(presentValue).WithLastPriority(lastPriority).WithWriteStatus(writeStatus).WithStatusFlags(statusFlags).WithReliability(reliability).WithOutOfService(outOfService).WithListOfObjectPropertyReferences(listOfObjectPropertyReferences).WithExecutionDelay(executionDelay).WithAllowGroupDelayInhibit(allowGroupDelayInhibit).WithChannelNumber(channelNumber).WithControlGroups(controlGroups).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithEventState(eventState).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithValueSource(valueSource).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_ChannelBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) ChannelBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_ChannelBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithObjectName(objectName ReadableProperty) ChannelBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_ChannelBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithObjectType(objectType ReadableProperty) ChannelBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_ChannelBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithDescription(description OptionalProperty) ChannelBuilder {
	b.Description = description
	return b
}

func (b *_ChannelBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithPresentValue(presentValue WritableProperty) ChannelBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_ChannelBuilder) WithPresentValueBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.PresentValue.CreateWritablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithLastPriority(lastPriority ReadableProperty) ChannelBuilder {
	b.LastPriority = lastPriority
	return b
}

func (b *_ChannelBuilder) WithLastPriorityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.LastPriority.CreateReadablePropertyBuilder())
	var err error
	b.LastPriority, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithWriteStatus(writeStatus ReadableProperty) ChannelBuilder {
	b.WriteStatus = writeStatus
	return b
}

func (b *_ChannelBuilder) WithWriteStatusBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.WriteStatus.CreateReadablePropertyBuilder())
	var err error
	b.WriteStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithStatusFlags(statusFlags ReadableProperty) ChannelBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_ChannelBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithReliability(reliability OptionalProperty) ChannelBuilder {
	b.Reliability = reliability
	return b
}

func (b *_ChannelBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithOutOfService(outOfService ReadableProperty) ChannelBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_ChannelBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithListOfObjectPropertyReferences(listOfObjectPropertyReferences WritableProperty) ChannelBuilder {
	b.ListOfObjectPropertyReferences = listOfObjectPropertyReferences
	return b
}

func (b *_ChannelBuilder) WithListOfObjectPropertyReferencesBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ListOfObjectPropertyReferences.CreateWritablePropertyBuilder())
	var err error
	b.ListOfObjectPropertyReferences, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithExecutionDelay(executionDelay OptionalProperty) ChannelBuilder {
	b.ExecutionDelay = executionDelay
	return b
}

func (b *_ChannelBuilder) WithExecutionDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ExecutionDelay.CreateOptionalPropertyBuilder())
	var err error
	b.ExecutionDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithAllowGroupDelayInhibit(allowGroupDelayInhibit OptionalProperty) ChannelBuilder {
	b.AllowGroupDelayInhibit = allowGroupDelayInhibit
	return b
}

func (b *_ChannelBuilder) WithAllowGroupDelayInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.AllowGroupDelayInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.AllowGroupDelayInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithChannelNumber(channelNumber WritableProperty) ChannelBuilder {
	b.ChannelNumber = channelNumber
	return b
}

func (b *_ChannelBuilder) WithChannelNumberBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ChannelNumber.CreateWritablePropertyBuilder())
	var err error
	b.ChannelNumber, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithControlGroups(controlGroups WritableProperty) ChannelBuilder {
	b.ControlGroups = controlGroups
	return b
}

func (b *_ChannelBuilder) WithControlGroupsBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ControlGroups.CreateWritablePropertyBuilder())
	var err error
	b.ControlGroups, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) ChannelBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_ChannelBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithNotificationClass(notificationClass OptionalProperty) ChannelBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_ChannelBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithEventEnable(eventEnable OptionalProperty) ChannelBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_ChannelBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithEventState(eventState OptionalProperty) ChannelBuilder {
	b.EventState = eventState
	return b
}

func (b *_ChannelBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) ChannelBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_ChannelBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithNotifyType(notifyType OptionalProperty) ChannelBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_ChannelBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) ChannelBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_ChannelBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) ChannelBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_ChannelBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) ChannelBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_ChannelBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) ChannelBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_ChannelBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithPropertyList(propertyList ReadableProperty) ChannelBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_ChannelBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithValueSource(valueSource OptionalProperty) ChannelBuilder {
	b.ValueSource = valueSource
	return b
}

func (b *_ChannelBuilder) WithValueSourceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ValueSource.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSource, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithTags(tags OptionalProperty) ChannelBuilder {
	b.Tags = tags
	return b
}

func (b *_ChannelBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithProfileLocation(profileLocation OptionalProperty) ChannelBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_ChannelBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) WithProfileName(profileName OptionalProperty) ChannelBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_ChannelBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) ChannelBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_ChannelBuilder) Build() (Channel, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.LastPriority == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastPriority' not set"))
	}
	if b.WriteStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'writeStatus' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.ListOfObjectPropertyReferences == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'listOfObjectPropertyReferences' not set"))
	}
	if b.ExecutionDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'executionDelay' not set"))
	}
	if b.AllowGroupDelayInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'allowGroupDelayInhibit' not set"))
	}
	if b.ChannelNumber == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'channelNumber' not set"))
	}
	if b.ControlGroups == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'controlGroups' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.ValueSource == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSource' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Channel.deepCopy(), nil
}

func (b *_ChannelBuilder) MustBuild() Channel {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_ChannelBuilder) DeepCopy() any {
	_copy := b.CreateChannelBuilder().(*_ChannelBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateChannelBuilder creates a ChannelBuilder
func (b *_Channel) CreateChannelBuilder() ChannelBuilder {
	if b == nil {
		return NewChannelBuilder()
	}
	return &_ChannelBuilder{_Channel: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Channel) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Channel) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Channel) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Channel) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Channel) GetPresentValue() WritableProperty {
	return m.PresentValue
}

func (m *_Channel) GetLastPriority() ReadableProperty {
	return m.LastPriority
}

func (m *_Channel) GetWriteStatus() ReadableProperty {
	return m.WriteStatus
}

func (m *_Channel) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Channel) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Channel) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_Channel) GetListOfObjectPropertyReferences() WritableProperty {
	return m.ListOfObjectPropertyReferences
}

func (m *_Channel) GetExecutionDelay() OptionalProperty {
	return m.ExecutionDelay
}

func (m *_Channel) GetAllowGroupDelayInhibit() OptionalProperty {
	return m.AllowGroupDelayInhibit
}

func (m *_Channel) GetChannelNumber() WritableProperty {
	return m.ChannelNumber
}

func (m *_Channel) GetControlGroups() WritableProperty {
	return m.ControlGroups
}

func (m *_Channel) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Channel) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Channel) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Channel) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_Channel) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Channel) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Channel) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Channel) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Channel) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Channel) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Channel) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Channel) GetValueSource() OptionalProperty {
	return m.ValueSource
}

func (m *_Channel) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Channel) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Channel) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastChannel(structType any) Channel {
	if casted, ok := structType.(Channel); ok {
		return casted
	}
	if casted, ok := structType.(*Channel); ok {
		return *casted
	}
	return nil
}

func (m *_Channel) GetTypeName() string {
	return "Channel"
}

func (m *_Channel) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (lastPriority)
	lengthInBits += m.LastPriority.GetLengthInBits(ctx)

	// Simple field (writeStatus)
	lengthInBits += m.WriteStatus.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (listOfObjectPropertyReferences)
	lengthInBits += m.ListOfObjectPropertyReferences.GetLengthInBits(ctx)

	// Simple field (executionDelay)
	lengthInBits += m.ExecutionDelay.GetLengthInBits(ctx)

	// Simple field (allowGroupDelayInhibit)
	lengthInBits += m.AllowGroupDelayInhibit.GetLengthInBits(ctx)

	// Simple field (channelNumber)
	lengthInBits += m.ChannelNumber.GetLengthInBits(ctx)

	// Simple field (controlGroups)
	lengthInBits += m.ControlGroups.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (valueSource)
	lengthInBits += m.ValueSource.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Channel) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func ChannelParse(ctx context.Context, theBytes []byte) (Channel, error) {
	return ChannelParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func ChannelParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Channel, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Channel, error) {
		return ChannelParseWithBuffer(ctx, readBuffer)
	}
}

func ChannelParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Channel, error) {
	v, err := (&_Channel{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Channel) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__channel Channel, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Channel"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Channel")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	presentValue, err := ReadSimpleField[WritableProperty](ctx, "presentValue", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetChannelValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	lastPriority, err := ReadSimpleField[ReadableProperty](ctx, "lastPriority", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastPriority' field"))
	}
	m.LastPriority = lastPriority

	writeStatus, err := ReadSimpleField[ReadableProperty](ctx, "writeStatus", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetWriteStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'writeStatus' field"))
	}
	m.WriteStatus = writeStatus

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	listOfObjectPropertyReferences, err := ReadSimpleField[WritableProperty](ctx, "listOfObjectPropertyReferences", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetDeviceObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'listOfObjectPropertyReferences' field"))
	}
	m.ListOfObjectPropertyReferences = listOfObjectPropertyReferences

	executionDelay, err := ReadSimpleField[OptionalProperty](ctx, "executionDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'executionDelay' field"))
	}
	m.ExecutionDelay = executionDelay

	allowGroupDelayInhibit, err := ReadSimpleField[OptionalProperty](ctx, "allowGroupDelayInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'allowGroupDelayInhibit' field"))
	}
	m.AllowGroupDelayInhibit = allowGroupDelayInhibit

	channelNumber, err := ReadSimpleField[WritableProperty](ctx, "channelNumber", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'channelNumber' field"))
	}
	m.ChannelNumber = channelNumber

	controlGroups, err := ReadSimpleField[WritableProperty](ctx, "controlGroups", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'controlGroups' field"))
	}
	m.ControlGroups = controlGroups

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	valueSource, err := ReadSimpleField[OptionalProperty](ctx, "valueSource", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSource' field"))
	}
	m.ValueSource = valueSource

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Channel"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Channel")
	}

	return m, nil
}

func (m *_Channel) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Channel) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Channel"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Channel")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "lastPriority", m.GetLastPriority(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastPriority' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "writeStatus", m.GetWriteStatus(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'writeStatus' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "listOfObjectPropertyReferences", m.GetListOfObjectPropertyReferences(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'listOfObjectPropertyReferences' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "executionDelay", m.GetExecutionDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'executionDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "allowGroupDelayInhibit", m.GetAllowGroupDelayInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'allowGroupDelayInhibit' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "channelNumber", m.GetChannelNumber(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'channelNumber' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "controlGroups", m.GetControlGroups(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'controlGroups' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSource", m.GetValueSource(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSource' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Channel"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Channel")
	}
	return nil
}

func (m *_Channel) IsChannel() {}

func (m *_Channel) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Channel) deepCopy() *_Channel {
	if m == nil {
		return nil
	}
	_ChannelCopy := &_Channel{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(WritableProperty),
		m.LastPriority.DeepCopy().(ReadableProperty),
		m.WriteStatus.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.ListOfObjectPropertyReferences.DeepCopy().(WritableProperty),
		m.ExecutionDelay.DeepCopy().(OptionalProperty),
		m.AllowGroupDelayInhibit.DeepCopy().(OptionalProperty),
		m.ChannelNumber.DeepCopy().(WritableProperty),
		m.ControlGroups.DeepCopy().(WritableProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.ValueSource.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _ChannelCopy
}

func (m *_Channel) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
