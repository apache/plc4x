/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AccessUser is the corresponding interface of AccessUser
type AccessUser interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetGlobalIdentifier returns GlobalIdentifier (property field)
	GetGlobalIdentifier() WritableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetUserType returns UserType (property field)
	GetUserType() ReadableProperty
	// GetUserName returns UserName (property field)
	GetUserName() OptionalProperty
	// GetUserExternalIdentifier returns UserExternalIdentifier (property field)
	GetUserExternalIdentifier() OptionalProperty
	// GetUserInformationReference returns UserInformationReference (property field)
	GetUserInformationReference() OptionalProperty
	// GetMembers returns Members (property field)
	GetMembers() OptionalProperty
	// GetMemberOf returns MemberOf (property field)
	GetMemberOf() OptionalProperty
	// GetCredentials returns Credentials (property field)
	GetCredentials() ReadableProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAccessUser is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAccessUser()
	// CreateBuilder creates a AccessUserBuilder
	CreateAccessUserBuilder() AccessUserBuilder
}

// _AccessUser is the data-structure of this message
type _AccessUser struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	GlobalIdentifier             WritableProperty
	StatusFlags                  ReadableProperty
	Reliability                  ReadableProperty
	UserType                     ReadableProperty
	UserName                     OptionalProperty
	UserExternalIdentifier       OptionalProperty
	UserInformationReference     OptionalProperty
	Members                      OptionalProperty
	MemberOf                     OptionalProperty
	Credentials                  ReadableProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ AccessUser = (*_AccessUser)(nil)

// NewAccessUser factory function for _AccessUser
func NewAccessUser(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, userType ReadableProperty, userName OptionalProperty, userExternalIdentifier OptionalProperty, userInformationReference OptionalProperty, members OptionalProperty, memberOf OptionalProperty, credentials ReadableProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_AccessUser {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for AccessUser must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for AccessUser must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for AccessUser must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for AccessUser must not be nil")
	}
	if globalIdentifier == nil {
		panic("globalIdentifier of type WritableProperty for AccessUser must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for AccessUser must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for AccessUser must not be nil")
	}
	if userType == nil {
		panic("userType of type ReadableProperty for AccessUser must not be nil")
	}
	if userName == nil {
		panic("userName of type OptionalProperty for AccessUser must not be nil")
	}
	if userExternalIdentifier == nil {
		panic("userExternalIdentifier of type OptionalProperty for AccessUser must not be nil")
	}
	if userInformationReference == nil {
		panic("userInformationReference of type OptionalProperty for AccessUser must not be nil")
	}
	if members == nil {
		panic("members of type OptionalProperty for AccessUser must not be nil")
	}
	if memberOf == nil {
		panic("memberOf of type OptionalProperty for AccessUser must not be nil")
	}
	if credentials == nil {
		panic("credentials of type ReadableProperty for AccessUser must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for AccessUser must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for AccessUser must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for AccessUser must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for AccessUser must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for AccessUser must not be nil")
	}
	return &_AccessUser{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, GlobalIdentifier: globalIdentifier, StatusFlags: statusFlags, Reliability: reliability, UserType: userType, UserName: userName, UserExternalIdentifier: userExternalIdentifier, UserInformationReference: userInformationReference, Members: members, MemberOf: memberOf, Credentials: credentials, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AccessUserBuilder is a builder for AccessUser
type AccessUserBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, userType ReadableProperty, userName OptionalProperty, userExternalIdentifier OptionalProperty, userInformationReference OptionalProperty, members OptionalProperty, memberOf OptionalProperty, credentials ReadableProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessUserBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AccessUserBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AccessUserBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AccessUserBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AccessUserBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithGlobalIdentifier adds GlobalIdentifier (property field)
	WithGlobalIdentifier(WritableProperty) AccessUserBuilder
	// WithGlobalIdentifierBuilder adds GlobalIdentifier (property field) which is build by the builder
	WithGlobalIdentifierBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AccessUserBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) AccessUserBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) AccessUserBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithUserType adds UserType (property field)
	WithUserType(ReadableProperty) AccessUserBuilder
	// WithUserTypeBuilder adds UserType (property field) which is build by the builder
	WithUserTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithUserName adds UserName (property field)
	WithUserName(OptionalProperty) AccessUserBuilder
	// WithUserNameBuilder adds UserName (property field) which is build by the builder
	WithUserNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithUserExternalIdentifier adds UserExternalIdentifier (property field)
	WithUserExternalIdentifier(OptionalProperty) AccessUserBuilder
	// WithUserExternalIdentifierBuilder adds UserExternalIdentifier (property field) which is build by the builder
	WithUserExternalIdentifierBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithUserInformationReference adds UserInformationReference (property field)
	WithUserInformationReference(OptionalProperty) AccessUserBuilder
	// WithUserInformationReferenceBuilder adds UserInformationReference (property field) which is build by the builder
	WithUserInformationReferenceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithMembers adds Members (property field)
	WithMembers(OptionalProperty) AccessUserBuilder
	// WithMembersBuilder adds Members (property field) which is build by the builder
	WithMembersBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithMemberOf adds MemberOf (property field)
	WithMemberOf(OptionalProperty) AccessUserBuilder
	// WithMemberOfBuilder adds MemberOf (property field) which is build by the builder
	WithMemberOfBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithCredentials adds Credentials (property field)
	WithCredentials(ReadableProperty) AccessUserBuilder
	// WithCredentialsBuilder adds Credentials (property field) which is build by the builder
	WithCredentialsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) AccessUserBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AccessUserBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AccessUserBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AccessUserBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AccessUserBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder
	// Build builds the AccessUser or returns an error if something is wrong
	Build() (AccessUser, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() AccessUser
}

// NewAccessUserBuilder() creates a AccessUserBuilder
func NewAccessUserBuilder() AccessUserBuilder {
	return &_AccessUserBuilder{_AccessUser: new(_AccessUser)}
}

type _AccessUserBuilder struct {
	*_AccessUser

	err *utils.MultiError
}

var _ (AccessUserBuilder) = (*_AccessUserBuilder)(nil)

func (b *_AccessUserBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, userType ReadableProperty, userName OptionalProperty, userExternalIdentifier OptionalProperty, userInformationReference OptionalProperty, members OptionalProperty, memberOf OptionalProperty, credentials ReadableProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessUserBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithGlobalIdentifier(globalIdentifier).WithStatusFlags(statusFlags).WithReliability(reliability).WithUserType(userType).WithUserName(userName).WithUserExternalIdentifier(userExternalIdentifier).WithUserInformationReference(userInformationReference).WithMembers(members).WithMemberOf(memberOf).WithCredentials(credentials).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AccessUserBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AccessUserBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AccessUserBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithObjectName(objectName ReadableProperty) AccessUserBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AccessUserBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithObjectType(objectType ReadableProperty) AccessUserBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AccessUserBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithDescription(description OptionalProperty) AccessUserBuilder {
	b.Description = description
	return b
}

func (b *_AccessUserBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithGlobalIdentifier(globalIdentifier WritableProperty) AccessUserBuilder {
	b.GlobalIdentifier = globalIdentifier
	return b
}

func (b *_AccessUserBuilder) WithGlobalIdentifierBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.GlobalIdentifier.CreateWritablePropertyBuilder())
	var err error
	b.GlobalIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithStatusFlags(statusFlags ReadableProperty) AccessUserBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_AccessUserBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithReliability(reliability ReadableProperty) AccessUserBuilder {
	b.Reliability = reliability
	return b
}

func (b *_AccessUserBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithUserType(userType ReadableProperty) AccessUserBuilder {
	b.UserType = userType
	return b
}

func (b *_AccessUserBuilder) WithUserTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.UserType.CreateReadablePropertyBuilder())
	var err error
	b.UserType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithUserName(userName OptionalProperty) AccessUserBuilder {
	b.UserName = userName
	return b
}

func (b *_AccessUserBuilder) WithUserNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.UserName.CreateOptionalPropertyBuilder())
	var err error
	b.UserName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithUserExternalIdentifier(userExternalIdentifier OptionalProperty) AccessUserBuilder {
	b.UserExternalIdentifier = userExternalIdentifier
	return b
}

func (b *_AccessUserBuilder) WithUserExternalIdentifierBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.UserExternalIdentifier.CreateOptionalPropertyBuilder())
	var err error
	b.UserExternalIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithUserInformationReference(userInformationReference OptionalProperty) AccessUserBuilder {
	b.UserInformationReference = userInformationReference
	return b
}

func (b *_AccessUserBuilder) WithUserInformationReferenceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.UserInformationReference.CreateOptionalPropertyBuilder())
	var err error
	b.UserInformationReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithMembers(members OptionalProperty) AccessUserBuilder {
	b.Members = members
	return b
}

func (b *_AccessUserBuilder) WithMembersBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.Members.CreateOptionalPropertyBuilder())
	var err error
	b.Members, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithMemberOf(memberOf OptionalProperty) AccessUserBuilder {
	b.MemberOf = memberOf
	return b
}

func (b *_AccessUserBuilder) WithMemberOfBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.MemberOf.CreateOptionalPropertyBuilder())
	var err error
	b.MemberOf, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithCredentials(credentials ReadableProperty) AccessUserBuilder {
	b.Credentials = credentials
	return b
}

func (b *_AccessUserBuilder) WithCredentialsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.Credentials.CreateReadablePropertyBuilder())
	var err error
	b.Credentials, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) AccessUserBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_AccessUserBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithPropertyList(propertyList ReadableProperty) AccessUserBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AccessUserBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithTags(tags OptionalProperty) AccessUserBuilder {
	b.Tags = tags
	return b
}

func (b *_AccessUserBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithProfileLocation(profileLocation OptionalProperty) AccessUserBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AccessUserBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) WithProfileName(profileName OptionalProperty) AccessUserBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AccessUserBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessUserBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessUserBuilder) Build() (AccessUser, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.GlobalIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'globalIdentifier' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.UserType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'userType' not set"))
	}
	if b.UserName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'userName' not set"))
	}
	if b.UserExternalIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'userExternalIdentifier' not set"))
	}
	if b.UserInformationReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'userInformationReference' not set"))
	}
	if b.Members == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'members' not set"))
	}
	if b.MemberOf == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'memberOf' not set"))
	}
	if b.Credentials == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'credentials' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._AccessUser.deepCopy(), nil
}

func (b *_AccessUserBuilder) MustBuild() AccessUser {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AccessUserBuilder) DeepCopy() any {
	_copy := b.CreateAccessUserBuilder().(*_AccessUserBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAccessUserBuilder creates a AccessUserBuilder
func (b *_AccessUser) CreateAccessUserBuilder() AccessUserBuilder {
	if b == nil {
		return NewAccessUserBuilder()
	}
	return &_AccessUserBuilder{_AccessUser: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AccessUser) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_AccessUser) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_AccessUser) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_AccessUser) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_AccessUser) GetGlobalIdentifier() WritableProperty {
	return m.GlobalIdentifier
}

func (m *_AccessUser) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_AccessUser) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_AccessUser) GetUserType() ReadableProperty {
	return m.UserType
}

func (m *_AccessUser) GetUserName() OptionalProperty {
	return m.UserName
}

func (m *_AccessUser) GetUserExternalIdentifier() OptionalProperty {
	return m.UserExternalIdentifier
}

func (m *_AccessUser) GetUserInformationReference() OptionalProperty {
	return m.UserInformationReference
}

func (m *_AccessUser) GetMembers() OptionalProperty {
	return m.Members
}

func (m *_AccessUser) GetMemberOf() OptionalProperty {
	return m.MemberOf
}

func (m *_AccessUser) GetCredentials() ReadableProperty {
	return m.Credentials
}

func (m *_AccessUser) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_AccessUser) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_AccessUser) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_AccessUser) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_AccessUser) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAccessUser(structType any) AccessUser {
	if casted, ok := structType.(AccessUser); ok {
		return casted
	}
	if casted, ok := structType.(*AccessUser); ok {
		return *casted
	}
	return nil
}

func (m *_AccessUser) GetTypeName() string {
	return "AccessUser"
}

func (m *_AccessUser) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (globalIdentifier)
	lengthInBits += m.GlobalIdentifier.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (userType)
	lengthInBits += m.UserType.GetLengthInBits(ctx)

	// Simple field (userName)
	lengthInBits += m.UserName.GetLengthInBits(ctx)

	// Simple field (userExternalIdentifier)
	lengthInBits += m.UserExternalIdentifier.GetLengthInBits(ctx)

	// Simple field (userInformationReference)
	lengthInBits += m.UserInformationReference.GetLengthInBits(ctx)

	// Simple field (members)
	lengthInBits += m.Members.GetLengthInBits(ctx)

	// Simple field (memberOf)
	lengthInBits += m.MemberOf.GetLengthInBits(ctx)

	// Simple field (credentials)
	lengthInBits += m.Credentials.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AccessUser) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AccessUserParse(ctx context.Context, theBytes []byte) (AccessUser, error) {
	return AccessUserParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AccessUserParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessUser, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessUser, error) {
		return AccessUserParseWithBuffer(ctx, readBuffer)
	}
}

func AccessUserParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (AccessUser, error) {
	v, err := (&_AccessUser{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_AccessUser) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__accessUser AccessUser, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AccessUser"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AccessUser")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	globalIdentifier, err := ReadSimpleField[WritableProperty](ctx, "globalIdentifier", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'globalIdentifier' field"))
	}
	m.GlobalIdentifier = globalIdentifier

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	userType, err := ReadSimpleField[ReadableProperty](ctx, "userType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAccessUserType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'userType' field"))
	}
	m.UserType = userType

	userName, err := ReadSimpleField[OptionalProperty](ctx, "userName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'userName' field"))
	}
	m.UserName = userName

	userExternalIdentifier, err := ReadSimpleField[OptionalProperty](ctx, "userExternalIdentifier", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'userExternalIdentifier' field"))
	}
	m.UserExternalIdentifier = userExternalIdentifier

	userInformationReference, err := ReadSimpleField[OptionalProperty](ctx, "userInformationReference", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'userInformationReference' field"))
	}
	m.UserInformationReference = userInformationReference

	members, err := ReadSimpleField[OptionalProperty](ctx, "members", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'members' field"))
	}
	m.Members = members

	memberOf, err := ReadSimpleField[OptionalProperty](ctx, "memberOf", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'memberOf' field"))
	}
	m.MemberOf = memberOf

	credentials, err := ReadSimpleField[ReadableProperty](ctx, "credentials", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'credentials' field"))
	}
	m.Credentials = credentials

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("AccessUser"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AccessUser")
	}

	return m, nil
}

func (m *_AccessUser) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AccessUser) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("AccessUser"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AccessUser")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "globalIdentifier", m.GetGlobalIdentifier(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'globalIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "userType", m.GetUserType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'userType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "userName", m.GetUserName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'userName' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "userExternalIdentifier", m.GetUserExternalIdentifier(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'userExternalIdentifier' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "userInformationReference", m.GetUserInformationReference(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'userInformationReference' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "members", m.GetMembers(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'members' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "memberOf", m.GetMemberOf(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'memberOf' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "credentials", m.GetCredentials(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'credentials' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("AccessUser"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AccessUser")
	}
	return nil
}

func (m *_AccessUser) IsAccessUser() {}

func (m *_AccessUser) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AccessUser) deepCopy() *_AccessUser {
	if m == nil {
		return nil
	}
	_AccessUserCopy := &_AccessUser{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.GlobalIdentifier.DeepCopy().(WritableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.UserType.DeepCopy().(ReadableProperty),
		m.UserName.DeepCopy().(OptionalProperty),
		m.UserExternalIdentifier.DeepCopy().(OptionalProperty),
		m.UserInformationReference.DeepCopy().(OptionalProperty),
		m.Members.DeepCopy().(OptionalProperty),
		m.MemberOf.DeepCopy().(OptionalProperty),
		m.Credentials.DeepCopy().(ReadableProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AccessUserCopy
}

func (m *_AccessUser) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
