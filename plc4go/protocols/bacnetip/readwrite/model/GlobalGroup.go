/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// GlobalGroup is the corresponding interface of GlobalGroup
type GlobalGroup interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetGroupMembers returns GroupMembers (property field)
	GetGroupMembers() ReadableProperty
	// GetGroupMemberNames returns GroupMemberNames (property field)
	GetGroupMemberNames() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetMemberStatusFlags returns MemberStatusFlags (property field)
	GetMemberStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutofService returns OutofService (property field)
	GetOutofService() ReadableProperty
	// GetUpdateInterval returns UpdateInterval (property field)
	GetUpdateInterval() OptionalProperty
	// GetRequestedUpdateInterval returns RequestedUpdateInterval (property field)
	GetRequestedUpdateInterval() OptionalProperty
	// GetCOVResubscriptionInterval returns COVResubscriptionInterval (property field)
	GetCOVResubscriptionInterval() OptionalProperty
	// GetClientCOVIncrement returns ClientCOVIncrement (property field)
	GetClientCOVIncrement() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetCOVUPeriod returns COVUPeriod (property field)
	GetCOVUPeriod() OptionalProperty
	// GetCOVURecipients returns COVURecipients (property field)
	GetCOVURecipients() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsGlobalGroup is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsGlobalGroup()
	// CreateBuilder creates a GlobalGroupBuilder
	CreateGlobalGroupBuilder() GlobalGroupBuilder
}

// _GlobalGroup is the data-structure of this message
type _GlobalGroup struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	GroupMembers                 ReadableProperty
	GroupMemberNames             OptionalProperty
	PresentValue                 ReadableProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	MemberStatusFlags            ReadableProperty
	Reliability                  OptionalProperty
	OutofService                 ReadableProperty
	UpdateInterval               OptionalProperty
	RequestedUpdateInterval      OptionalProperty
	COVResubscriptionInterval    OptionalProperty
	ClientCOVIncrement           OptionalProperty
	TimeDelay                    OptionalProperty
	NotificationClass            OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	COVUPeriod                   OptionalProperty
	COVURecipients               OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ GlobalGroup = (*_GlobalGroup)(nil)

// NewGlobalGroup factory function for _GlobalGroup
func NewGlobalGroup(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, groupMembers ReadableProperty, groupMemberNames OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState ReadableProperty, memberStatusFlags ReadableProperty, reliability OptionalProperty, outofService ReadableProperty, updateInterval OptionalProperty, requestedUpdateInterval OptionalProperty, cOVResubscriptionInterval OptionalProperty, clientCOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, cOVUPeriod OptionalProperty, cOVURecipients OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_GlobalGroup {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for GlobalGroup must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for GlobalGroup must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for GlobalGroup must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for GlobalGroup must not be nil")
	}
	if groupMembers == nil {
		panic("groupMembers of type ReadableProperty for GlobalGroup must not be nil")
	}
	if groupMemberNames == nil {
		panic("groupMemberNames of type OptionalProperty for GlobalGroup must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for GlobalGroup must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for GlobalGroup must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for GlobalGroup must not be nil")
	}
	if memberStatusFlags == nil {
		panic("memberStatusFlags of type ReadableProperty for GlobalGroup must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for GlobalGroup must not be nil")
	}
	if outofService == nil {
		panic("outofService of type ReadableProperty for GlobalGroup must not be nil")
	}
	if updateInterval == nil {
		panic("updateInterval of type OptionalProperty for GlobalGroup must not be nil")
	}
	if requestedUpdateInterval == nil {
		panic("requestedUpdateInterval of type OptionalProperty for GlobalGroup must not be nil")
	}
	if cOVResubscriptionInterval == nil {
		panic("cOVResubscriptionInterval of type OptionalProperty for GlobalGroup must not be nil")
	}
	if clientCOVIncrement == nil {
		panic("clientCOVIncrement of type OptionalProperty for GlobalGroup must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for GlobalGroup must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for GlobalGroup must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for GlobalGroup must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for GlobalGroup must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for GlobalGroup must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for GlobalGroup must not be nil")
	}
	if cOVUPeriod == nil {
		panic("cOVUPeriod of type OptionalProperty for GlobalGroup must not be nil")
	}
	if cOVURecipients == nil {
		panic("cOVURecipients of type OptionalProperty for GlobalGroup must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for GlobalGroup must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for GlobalGroup must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for GlobalGroup must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for GlobalGroup must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for GlobalGroup must not be nil")
	}
	return &_GlobalGroup{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, GroupMembers: groupMembers, GroupMemberNames: groupMemberNames, PresentValue: presentValue, StatusFlags: statusFlags, EventState: eventState, MemberStatusFlags: memberStatusFlags, Reliability: reliability, OutofService: outofService, UpdateInterval: updateInterval, RequestedUpdateInterval: requestedUpdateInterval, COVResubscriptionInterval: cOVResubscriptionInterval, ClientCOVIncrement: clientCOVIncrement, TimeDelay: timeDelay, NotificationClass: notificationClass, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, COVUPeriod: cOVUPeriod, COVURecipients: cOVURecipients, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// GlobalGroupBuilder is a builder for GlobalGroup
type GlobalGroupBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, groupMembers ReadableProperty, groupMemberNames OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState ReadableProperty, memberStatusFlags ReadableProperty, reliability OptionalProperty, outofService ReadableProperty, updateInterval OptionalProperty, requestedUpdateInterval OptionalProperty, cOVResubscriptionInterval OptionalProperty, clientCOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, cOVUPeriod OptionalProperty, cOVURecipients OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) GlobalGroupBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) GlobalGroupBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) GlobalGroupBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) GlobalGroupBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) GlobalGroupBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithGroupMembers adds GroupMembers (property field)
	WithGroupMembers(ReadableProperty) GlobalGroupBuilder
	// WithGroupMembersBuilder adds GroupMembers (property field) which is build by the builder
	WithGroupMembersBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithGroupMemberNames adds GroupMemberNames (property field)
	WithGroupMemberNames(OptionalProperty) GlobalGroupBuilder
	// WithGroupMemberNamesBuilder adds GroupMemberNames (property field) which is build by the builder
	WithGroupMemberNamesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) GlobalGroupBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) GlobalGroupBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) GlobalGroupBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithMemberStatusFlags adds MemberStatusFlags (property field)
	WithMemberStatusFlags(ReadableProperty) GlobalGroupBuilder
	// WithMemberStatusFlagsBuilder adds MemberStatusFlags (property field) which is build by the builder
	WithMemberStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) GlobalGroupBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithOutofService adds OutofService (property field)
	WithOutofService(ReadableProperty) GlobalGroupBuilder
	// WithOutofServiceBuilder adds OutofService (property field) which is build by the builder
	WithOutofServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithUpdateInterval adds UpdateInterval (property field)
	WithUpdateInterval(OptionalProperty) GlobalGroupBuilder
	// WithUpdateIntervalBuilder adds UpdateInterval (property field) which is build by the builder
	WithUpdateIntervalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithRequestedUpdateInterval adds RequestedUpdateInterval (property field)
	WithRequestedUpdateInterval(OptionalProperty) GlobalGroupBuilder
	// WithRequestedUpdateIntervalBuilder adds RequestedUpdateInterval (property field) which is build by the builder
	WithRequestedUpdateIntervalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithCOVResubscriptionInterval adds COVResubscriptionInterval (property field)
	WithCOVResubscriptionInterval(OptionalProperty) GlobalGroupBuilder
	// WithCOVResubscriptionIntervalBuilder adds COVResubscriptionInterval (property field) which is build by the builder
	WithCOVResubscriptionIntervalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithClientCOVIncrement adds ClientCOVIncrement (property field)
	WithClientCOVIncrement(OptionalProperty) GlobalGroupBuilder
	// WithClientCOVIncrementBuilder adds ClientCOVIncrement (property field) which is build by the builder
	WithClientCOVIncrementBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) GlobalGroupBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) GlobalGroupBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) GlobalGroupBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) GlobalGroupBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) GlobalGroupBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) GlobalGroupBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) GlobalGroupBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) GlobalGroupBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) GlobalGroupBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) GlobalGroupBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) GlobalGroupBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) GlobalGroupBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithCOVUPeriod adds COVUPeriod (property field)
	WithCOVUPeriod(OptionalProperty) GlobalGroupBuilder
	// WithCOVUPeriodBuilder adds COVUPeriod (property field) which is build by the builder
	WithCOVUPeriodBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithCOVURecipients adds COVURecipients (property field)
	WithCOVURecipients(OptionalProperty) GlobalGroupBuilder
	// WithCOVURecipientsBuilder adds COVURecipients (property field) which is build by the builder
	WithCOVURecipientsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) GlobalGroupBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) GlobalGroupBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) GlobalGroupBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) GlobalGroupBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) GlobalGroupBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder
	// Build builds the GlobalGroup or returns an error if something is wrong
	Build() (GlobalGroup, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() GlobalGroup
}

// NewGlobalGroupBuilder() creates a GlobalGroupBuilder
func NewGlobalGroupBuilder() GlobalGroupBuilder {
	return &_GlobalGroupBuilder{_GlobalGroup: new(_GlobalGroup)}
}

type _GlobalGroupBuilder struct {
	*_GlobalGroup

	err *utils.MultiError
}

var _ (GlobalGroupBuilder) = (*_GlobalGroupBuilder)(nil)

func (b *_GlobalGroupBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, groupMembers ReadableProperty, groupMemberNames OptionalProperty, presentValue ReadableProperty, statusFlags ReadableProperty, eventState ReadableProperty, memberStatusFlags ReadableProperty, reliability OptionalProperty, outofService ReadableProperty, updateInterval OptionalProperty, requestedUpdateInterval OptionalProperty, cOVResubscriptionInterval OptionalProperty, clientCOVIncrement OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, cOVUPeriod OptionalProperty, cOVURecipients OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) GlobalGroupBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithGroupMembers(groupMembers).WithGroupMemberNames(groupMemberNames).WithPresentValue(presentValue).WithStatusFlags(statusFlags).WithEventState(eventState).WithMemberStatusFlags(memberStatusFlags).WithReliability(reliability).WithOutofService(outofService).WithUpdateInterval(updateInterval).WithRequestedUpdateInterval(requestedUpdateInterval).WithCOVResubscriptionInterval(cOVResubscriptionInterval).WithClientCOVIncrement(clientCOVIncrement).WithTimeDelay(timeDelay).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithCOVUPeriod(cOVUPeriod).WithCOVURecipients(cOVURecipients).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_GlobalGroupBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) GlobalGroupBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_GlobalGroupBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithObjectName(objectName ReadableProperty) GlobalGroupBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_GlobalGroupBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithObjectType(objectType ReadableProperty) GlobalGroupBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_GlobalGroupBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithDescription(description OptionalProperty) GlobalGroupBuilder {
	b.Description = description
	return b
}

func (b *_GlobalGroupBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithGroupMembers(groupMembers ReadableProperty) GlobalGroupBuilder {
	b.GroupMembers = groupMembers
	return b
}

func (b *_GlobalGroupBuilder) WithGroupMembersBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.GroupMembers.CreateReadablePropertyBuilder())
	var err error
	b.GroupMembers, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithGroupMemberNames(groupMemberNames OptionalProperty) GlobalGroupBuilder {
	b.GroupMemberNames = groupMemberNames
	return b
}

func (b *_GlobalGroupBuilder) WithGroupMemberNamesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.GroupMemberNames.CreateOptionalPropertyBuilder())
	var err error
	b.GroupMemberNames, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithPresentValue(presentValue ReadableProperty) GlobalGroupBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_GlobalGroupBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithStatusFlags(statusFlags ReadableProperty) GlobalGroupBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_GlobalGroupBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventState(eventState ReadableProperty) GlobalGroupBuilder {
	b.EventState = eventState
	return b
}

func (b *_GlobalGroupBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithMemberStatusFlags(memberStatusFlags ReadableProperty) GlobalGroupBuilder {
	b.MemberStatusFlags = memberStatusFlags
	return b
}

func (b *_GlobalGroupBuilder) WithMemberStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.MemberStatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.MemberStatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithReliability(reliability OptionalProperty) GlobalGroupBuilder {
	b.Reliability = reliability
	return b
}

func (b *_GlobalGroupBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithOutofService(outofService ReadableProperty) GlobalGroupBuilder {
	b.OutofService = outofService
	return b
}

func (b *_GlobalGroupBuilder) WithOutofServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.OutofService.CreateReadablePropertyBuilder())
	var err error
	b.OutofService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithUpdateInterval(updateInterval OptionalProperty) GlobalGroupBuilder {
	b.UpdateInterval = updateInterval
	return b
}

func (b *_GlobalGroupBuilder) WithUpdateIntervalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.UpdateInterval.CreateOptionalPropertyBuilder())
	var err error
	b.UpdateInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithRequestedUpdateInterval(requestedUpdateInterval OptionalProperty) GlobalGroupBuilder {
	b.RequestedUpdateInterval = requestedUpdateInterval
	return b
}

func (b *_GlobalGroupBuilder) WithRequestedUpdateIntervalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.RequestedUpdateInterval.CreateOptionalPropertyBuilder())
	var err error
	b.RequestedUpdateInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithCOVResubscriptionInterval(cOVResubscriptionInterval OptionalProperty) GlobalGroupBuilder {
	b.COVResubscriptionInterval = cOVResubscriptionInterval
	return b
}

func (b *_GlobalGroupBuilder) WithCOVResubscriptionIntervalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.COVResubscriptionInterval.CreateOptionalPropertyBuilder())
	var err error
	b.COVResubscriptionInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithClientCOVIncrement(clientCOVIncrement OptionalProperty) GlobalGroupBuilder {
	b.ClientCOVIncrement = clientCOVIncrement
	return b
}

func (b *_GlobalGroupBuilder) WithClientCOVIncrementBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ClientCOVIncrement.CreateOptionalPropertyBuilder())
	var err error
	b.ClientCOVIncrement, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithTimeDelay(timeDelay OptionalProperty) GlobalGroupBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_GlobalGroupBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithNotificationClass(notificationClass OptionalProperty) GlobalGroupBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_GlobalGroupBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventEnable(eventEnable OptionalProperty) GlobalGroupBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_GlobalGroupBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) GlobalGroupBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_GlobalGroupBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithNotifyType(notifyType OptionalProperty) GlobalGroupBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_GlobalGroupBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) GlobalGroupBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_GlobalGroupBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) GlobalGroupBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_GlobalGroupBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) GlobalGroupBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_GlobalGroupBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) GlobalGroupBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_GlobalGroupBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) GlobalGroupBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_GlobalGroupBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) GlobalGroupBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_GlobalGroupBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) GlobalGroupBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_GlobalGroupBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithCOVUPeriod(cOVUPeriod OptionalProperty) GlobalGroupBuilder {
	b.COVUPeriod = cOVUPeriod
	return b
}

func (b *_GlobalGroupBuilder) WithCOVUPeriodBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.COVUPeriod.CreateOptionalPropertyBuilder())
	var err error
	b.COVUPeriod, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithCOVURecipients(cOVURecipients OptionalProperty) GlobalGroupBuilder {
	b.COVURecipients = cOVURecipients
	return b
}

func (b *_GlobalGroupBuilder) WithCOVURecipientsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.COVURecipients.CreateOptionalPropertyBuilder())
	var err error
	b.COVURecipients, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) GlobalGroupBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_GlobalGroupBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithPropertyList(propertyList ReadableProperty) GlobalGroupBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_GlobalGroupBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithTags(tags OptionalProperty) GlobalGroupBuilder {
	b.Tags = tags
	return b
}

func (b *_GlobalGroupBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithProfileLocation(profileLocation OptionalProperty) GlobalGroupBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_GlobalGroupBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) WithProfileName(profileName OptionalProperty) GlobalGroupBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_GlobalGroupBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) GlobalGroupBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_GlobalGroupBuilder) Build() (GlobalGroup, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.GroupMembers == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupMembers' not set"))
	}
	if b.GroupMemberNames == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupMemberNames' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.MemberStatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'memberStatusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutofService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outofService' not set"))
	}
	if b.UpdateInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'updateInterval' not set"))
	}
	if b.RequestedUpdateInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'requestedUpdateInterval' not set"))
	}
	if b.COVResubscriptionInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVResubscriptionInterval' not set"))
	}
	if b.ClientCOVIncrement == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'clientCOVIncrement' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.COVUPeriod == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVUPeriod' not set"))
	}
	if b.COVURecipients == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVURecipients' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._GlobalGroup.deepCopy(), nil
}

func (b *_GlobalGroupBuilder) MustBuild() GlobalGroup {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_GlobalGroupBuilder) DeepCopy() any {
	_copy := b.CreateGlobalGroupBuilder().(*_GlobalGroupBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateGlobalGroupBuilder creates a GlobalGroupBuilder
func (b *_GlobalGroup) CreateGlobalGroupBuilder() GlobalGroupBuilder {
	if b == nil {
		return NewGlobalGroupBuilder()
	}
	return &_GlobalGroupBuilder{_GlobalGroup: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_GlobalGroup) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_GlobalGroup) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_GlobalGroup) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_GlobalGroup) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_GlobalGroup) GetGroupMembers() ReadableProperty {
	return m.GroupMembers
}

func (m *_GlobalGroup) GetGroupMemberNames() OptionalProperty {
	return m.GroupMemberNames
}

func (m *_GlobalGroup) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_GlobalGroup) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_GlobalGroup) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_GlobalGroup) GetMemberStatusFlags() ReadableProperty {
	return m.MemberStatusFlags
}

func (m *_GlobalGroup) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_GlobalGroup) GetOutofService() ReadableProperty {
	return m.OutofService
}

func (m *_GlobalGroup) GetUpdateInterval() OptionalProperty {
	return m.UpdateInterval
}

func (m *_GlobalGroup) GetRequestedUpdateInterval() OptionalProperty {
	return m.RequestedUpdateInterval
}

func (m *_GlobalGroup) GetCOVResubscriptionInterval() OptionalProperty {
	return m.COVResubscriptionInterval
}

func (m *_GlobalGroup) GetClientCOVIncrement() OptionalProperty {
	return m.ClientCOVIncrement
}

func (m *_GlobalGroup) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_GlobalGroup) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_GlobalGroup) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_GlobalGroup) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_GlobalGroup) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_GlobalGroup) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_GlobalGroup) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_GlobalGroup) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_GlobalGroup) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_GlobalGroup) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_GlobalGroup) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_GlobalGroup) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_GlobalGroup) GetCOVUPeriod() OptionalProperty {
	return m.COVUPeriod
}

func (m *_GlobalGroup) GetCOVURecipients() OptionalProperty {
	return m.COVURecipients
}

func (m *_GlobalGroup) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_GlobalGroup) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_GlobalGroup) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_GlobalGroup) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_GlobalGroup) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastGlobalGroup(structType any) GlobalGroup {
	if casted, ok := structType.(GlobalGroup); ok {
		return casted
	}
	if casted, ok := structType.(*GlobalGroup); ok {
		return *casted
	}
	return nil
}

func (m *_GlobalGroup) GetTypeName() string {
	return "GlobalGroup"
}

func (m *_GlobalGroup) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (groupMembers)
	lengthInBits += m.GroupMembers.GetLengthInBits(ctx)

	// Simple field (groupMemberNames)
	lengthInBits += m.GroupMemberNames.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (memberStatusFlags)
	lengthInBits += m.MemberStatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outofService)
	lengthInBits += m.OutofService.GetLengthInBits(ctx)

	// Simple field (updateInterval)
	lengthInBits += m.UpdateInterval.GetLengthInBits(ctx)

	// Simple field (requestedUpdateInterval)
	lengthInBits += m.RequestedUpdateInterval.GetLengthInBits(ctx)

	// Simple field (cOVResubscriptionInterval)
	lengthInBits += m.COVResubscriptionInterval.GetLengthInBits(ctx)

	// Simple field (clientCOVIncrement)
	lengthInBits += m.ClientCOVIncrement.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (cOVUPeriod)
	lengthInBits += m.COVUPeriod.GetLengthInBits(ctx)

	// Simple field (cOVURecipients)
	lengthInBits += m.COVURecipients.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_GlobalGroup) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func GlobalGroupParse(ctx context.Context, theBytes []byte) (GlobalGroup, error) {
	return GlobalGroupParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func GlobalGroupParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (GlobalGroup, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (GlobalGroup, error) {
		return GlobalGroupParseWithBuffer(ctx, readBuffer)
	}
}

func GlobalGroupParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (GlobalGroup, error) {
	v, err := (&_GlobalGroup{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_GlobalGroup) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__globalGroup GlobalGroup, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("GlobalGroup"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for GlobalGroup")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	groupMembers, err := ReadSimpleField[ReadableProperty](ctx, "groupMembers", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetDeviceObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupMembers' field"))
	}
	m.GroupMembers = groupMembers

	groupMemberNames, err := ReadSimpleField[OptionalProperty](ctx, "groupMemberNames", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupMemberNames' field"))
	}
	m.GroupMemberNames = groupMemberNames

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyAccessResult")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	memberStatusFlags, err := ReadSimpleField[ReadableProperty](ctx, "memberStatusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'memberStatusFlags' field"))
	}
	m.MemberStatusFlags = memberStatusFlags

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outofService, err := ReadSimpleField[ReadableProperty](ctx, "outofService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outofService' field"))
	}
	m.OutofService = outofService

	updateInterval, err := ReadSimpleField[OptionalProperty](ctx, "updateInterval", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'updateInterval' field"))
	}
	m.UpdateInterval = updateInterval

	requestedUpdateInterval, err := ReadSimpleField[OptionalProperty](ctx, "requestedUpdateInterval", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'requestedUpdateInterval' field"))
	}
	m.RequestedUpdateInterval = requestedUpdateInterval

	cOVResubscriptionInterval, err := ReadSimpleField[OptionalProperty](ctx, "cOVResubscriptionInterval", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVResubscriptionInterval' field"))
	}
	m.COVResubscriptionInterval = cOVResubscriptionInterval

	clientCOVIncrement, err := ReadSimpleField[OptionalProperty](ctx, "clientCOVIncrement", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetClientCOV")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'clientCOVIncrement' field"))
	}
	m.ClientCOVIncrement = clientCOVIncrement

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	cOVUPeriod, err := ReadSimpleField[OptionalProperty](ctx, "cOVUPeriod", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVUPeriod' field"))
	}
	m.COVUPeriod = cOVUPeriod

	cOVURecipients, err := ReadSimpleField[OptionalProperty](ctx, "cOVURecipients", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetRecipient")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVURecipients' field"))
	}
	m.COVURecipients = cOVURecipients

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("GlobalGroup"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for GlobalGroup")
	}

	return m, nil
}

func (m *_GlobalGroup) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_GlobalGroup) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("GlobalGroup"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for GlobalGroup")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "groupMembers", m.GetGroupMembers(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupMembers' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "groupMemberNames", m.GetGroupMemberNames(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupMemberNames' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "memberStatusFlags", m.GetMemberStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'memberStatusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outofService", m.GetOutofService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outofService' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "updateInterval", m.GetUpdateInterval(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'updateInterval' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "requestedUpdateInterval", m.GetRequestedUpdateInterval(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'requestedUpdateInterval' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVResubscriptionInterval", m.GetCOVResubscriptionInterval(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVResubscriptionInterval' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "clientCOVIncrement", m.GetClientCOVIncrement(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'clientCOVIncrement' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVUPeriod", m.GetCOVUPeriod(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVUPeriod' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVURecipients", m.GetCOVURecipients(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVURecipients' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("GlobalGroup"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for GlobalGroup")
	}
	return nil
}

func (m *_GlobalGroup) IsGlobalGroup() {}

func (m *_GlobalGroup) DeepCopy() any {
	return m.deepCopy()
}

func (m *_GlobalGroup) deepCopy() *_GlobalGroup {
	if m == nil {
		return nil
	}
	_GlobalGroupCopy := &_GlobalGroup{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.GroupMembers.DeepCopy().(ReadableProperty),
		m.GroupMemberNames.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.MemberStatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutofService.DeepCopy().(ReadableProperty),
		m.UpdateInterval.DeepCopy().(OptionalProperty),
		m.RequestedUpdateInterval.DeepCopy().(OptionalProperty),
		m.COVResubscriptionInterval.DeepCopy().(OptionalProperty),
		m.ClientCOVIncrement.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.COVUPeriod.DeepCopy().(OptionalProperty),
		m.COVURecipients.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _GlobalGroupCopy
}

func (m *_GlobalGroup) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
