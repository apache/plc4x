/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// LifeSafetyPoint is the corresponding interface of LifeSafetyPoint
type LifeSafetyPoint interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetTrackingValue returns TrackingValue (property field)
	GetTrackingValue() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetDeviceType returns DeviceType (property field)
	GetDeviceType() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetMode returns Mode (property field)
	GetMode() WritableProperty
	// GetAcceptedModes returns AcceptedModes (property field)
	GetAcceptedModes() ReadableProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetLifeSafetyAlarmValues returns LifeSafetyAlarmValues (property field)
	GetLifeSafetyAlarmValues() OptionalProperty
	// GetAlarmValues returns AlarmValues (property field)
	GetAlarmValues() OptionalProperty
	// GetFaultValues returns FaultValues (property field)
	GetFaultValues() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetSilenced returns Silenced (property field)
	GetSilenced() ReadableProperty
	// GetOperationExpected returns OperationExpected (property field)
	GetOperationExpected() ReadableProperty
	// GetMaintenanceRequired returns MaintenanceRequired (property field)
	GetMaintenanceRequired() OptionalProperty
	// GetSetting returns Setting (property field)
	GetSetting() OptionalProperty
	// GetDirectReading returns DirectReading (property field)
	GetDirectReading() OptionalProperty
	// GetUnits returns Units (property field)
	GetUnits() OptionalProperty
	// GetMemberOf returns MemberOf (property field)
	GetMemberOf() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetValueSource returns ValueSource (property field)
	GetValueSource() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsLifeSafetyPoint is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsLifeSafetyPoint()
	// CreateBuilder creates a LifeSafetyPointBuilder
	CreateLifeSafetyPointBuilder() LifeSafetyPointBuilder
}

// _LifeSafetyPoint is the data-structure of this message
type _LifeSafetyPoint struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	PresentValue                 ReadableProperty
	TrackingValue                ReadableProperty
	Description                  OptionalProperty
	DeviceType                   OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  ReadableProperty
	OutOfService                 ReadableProperty
	Mode                         WritableProperty
	AcceptedModes                ReadableProperty
	TimeDelay                    OptionalProperty
	NotificationClass            OptionalProperty
	LifeSafetyAlarmValues        OptionalProperty
	AlarmValues                  OptionalProperty
	FaultValues                  OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	Silenced                     ReadableProperty
	OperationExpected            ReadableProperty
	MaintenanceRequired          OptionalProperty
	Setting                      OptionalProperty
	DirectReading                OptionalProperty
	Units                        OptionalProperty
	MemberOf                     OptionalProperty
	PropertyList                 ReadableProperty
	ValueSource                  OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ LifeSafetyPoint = (*_LifeSafetyPoint)(nil)

// NewLifeSafetyPoint factory function for _LifeSafetyPoint
func NewLifeSafetyPoint(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, trackingValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, mode WritableProperty, acceptedModes ReadableProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, lifeSafetyAlarmValues OptionalProperty, alarmValues OptionalProperty, faultValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, silenced ReadableProperty, operationExpected ReadableProperty, maintenanceRequired OptionalProperty, setting OptionalProperty, directReading OptionalProperty, units OptionalProperty, memberOf OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_LifeSafetyPoint {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if trackingValue == nil {
		panic("trackingValue of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if deviceType == nil {
		panic("deviceType of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if mode == nil {
		panic("mode of type WritableProperty for LifeSafetyPoint must not be nil")
	}
	if acceptedModes == nil {
		panic("acceptedModes of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if lifeSafetyAlarmValues == nil {
		panic("lifeSafetyAlarmValues of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if alarmValues == nil {
		panic("alarmValues of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if faultValues == nil {
		panic("faultValues of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if silenced == nil {
		panic("silenced of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if operationExpected == nil {
		panic("operationExpected of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if maintenanceRequired == nil {
		panic("maintenanceRequired of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if setting == nil {
		panic("setting of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if directReading == nil {
		panic("directReading of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if units == nil {
		panic("units of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if memberOf == nil {
		panic("memberOf of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for LifeSafetyPoint must not be nil")
	}
	if valueSource == nil {
		panic("valueSource of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for LifeSafetyPoint must not be nil")
	}
	return &_LifeSafetyPoint{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, PresentValue: presentValue, TrackingValue: trackingValue, Description: description, DeviceType: deviceType, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, Mode: mode, AcceptedModes: acceptedModes, TimeDelay: timeDelay, NotificationClass: notificationClass, LifeSafetyAlarmValues: lifeSafetyAlarmValues, AlarmValues: alarmValues, FaultValues: faultValues, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, Silenced: silenced, OperationExpected: operationExpected, MaintenanceRequired: maintenanceRequired, Setting: setting, DirectReading: directReading, Units: units, MemberOf: memberOf, PropertyList: propertyList, ValueSource: valueSource, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// LifeSafetyPointBuilder is a builder for LifeSafetyPoint
type LifeSafetyPointBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, trackingValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, mode WritableProperty, acceptedModes ReadableProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, lifeSafetyAlarmValues OptionalProperty, alarmValues OptionalProperty, faultValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, silenced ReadableProperty, operationExpected ReadableProperty, maintenanceRequired OptionalProperty, setting OptionalProperty, directReading OptionalProperty, units OptionalProperty, memberOf OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LifeSafetyPointBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) LifeSafetyPointBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) LifeSafetyPointBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) LifeSafetyPointBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) LifeSafetyPointBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithTrackingValue adds TrackingValue (property field)
	WithTrackingValue(ReadableProperty) LifeSafetyPointBuilder
	// WithTrackingValueBuilder adds TrackingValue (property field) which is build by the builder
	WithTrackingValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) LifeSafetyPointBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithDeviceType adds DeviceType (property field)
	WithDeviceType(OptionalProperty) LifeSafetyPointBuilder
	// WithDeviceTypeBuilder adds DeviceType (property field) which is build by the builder
	WithDeviceTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) LifeSafetyPointBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) LifeSafetyPointBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) LifeSafetyPointBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) LifeSafetyPointBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithMode adds Mode (property field)
	WithMode(WritableProperty) LifeSafetyPointBuilder
	// WithModeBuilder adds Mode (property field) which is build by the builder
	WithModeBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LifeSafetyPointBuilder
	// WithAcceptedModes adds AcceptedModes (property field)
	WithAcceptedModes(ReadableProperty) LifeSafetyPointBuilder
	// WithAcceptedModesBuilder adds AcceptedModes (property field) which is build by the builder
	WithAcceptedModesBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) LifeSafetyPointBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) LifeSafetyPointBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithLifeSafetyAlarmValues adds LifeSafetyAlarmValues (property field)
	WithLifeSafetyAlarmValues(OptionalProperty) LifeSafetyPointBuilder
	// WithLifeSafetyAlarmValuesBuilder adds LifeSafetyAlarmValues (property field) which is build by the builder
	WithLifeSafetyAlarmValuesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithAlarmValues adds AlarmValues (property field)
	WithAlarmValues(OptionalProperty) LifeSafetyPointBuilder
	// WithAlarmValuesBuilder adds AlarmValues (property field) which is build by the builder
	WithAlarmValuesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithFaultValues adds FaultValues (property field)
	WithFaultValues(OptionalProperty) LifeSafetyPointBuilder
	// WithFaultValuesBuilder adds FaultValues (property field) which is build by the builder
	WithFaultValuesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) LifeSafetyPointBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) LifeSafetyPointBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) LifeSafetyPointBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) LifeSafetyPointBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) LifeSafetyPointBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) LifeSafetyPointBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) LifeSafetyPointBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) LifeSafetyPointBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) LifeSafetyPointBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) LifeSafetyPointBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) LifeSafetyPointBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithSilenced adds Silenced (property field)
	WithSilenced(ReadableProperty) LifeSafetyPointBuilder
	// WithSilencedBuilder adds Silenced (property field) which is build by the builder
	WithSilencedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithOperationExpected adds OperationExpected (property field)
	WithOperationExpected(ReadableProperty) LifeSafetyPointBuilder
	// WithOperationExpectedBuilder adds OperationExpected (property field) which is build by the builder
	WithOperationExpectedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithMaintenanceRequired adds MaintenanceRequired (property field)
	WithMaintenanceRequired(OptionalProperty) LifeSafetyPointBuilder
	// WithMaintenanceRequiredBuilder adds MaintenanceRequired (property field) which is build by the builder
	WithMaintenanceRequiredBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithSetting adds Setting (property field)
	WithSetting(OptionalProperty) LifeSafetyPointBuilder
	// WithSettingBuilder adds Setting (property field) which is build by the builder
	WithSettingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithDirectReading adds DirectReading (property field)
	WithDirectReading(OptionalProperty) LifeSafetyPointBuilder
	// WithDirectReadingBuilder adds DirectReading (property field) which is build by the builder
	WithDirectReadingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithUnits adds Units (property field)
	WithUnits(OptionalProperty) LifeSafetyPointBuilder
	// WithUnitsBuilder adds Units (property field) which is build by the builder
	WithUnitsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithMemberOf adds MemberOf (property field)
	WithMemberOf(OptionalProperty) LifeSafetyPointBuilder
	// WithMemberOfBuilder adds MemberOf (property field) which is build by the builder
	WithMemberOfBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) LifeSafetyPointBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder
	// WithValueSource adds ValueSource (property field)
	WithValueSource(OptionalProperty) LifeSafetyPointBuilder
	// WithValueSourceBuilder adds ValueSource (property field) which is build by the builder
	WithValueSourceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) LifeSafetyPointBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) LifeSafetyPointBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) LifeSafetyPointBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder
	// Build builds the LifeSafetyPoint or returns an error if something is wrong
	Build() (LifeSafetyPoint, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() LifeSafetyPoint
}

// NewLifeSafetyPointBuilder() creates a LifeSafetyPointBuilder
func NewLifeSafetyPointBuilder() LifeSafetyPointBuilder {
	return &_LifeSafetyPointBuilder{_LifeSafetyPoint: new(_LifeSafetyPoint)}
}

type _LifeSafetyPointBuilder struct {
	*_LifeSafetyPoint

	err *utils.MultiError
}

var _ (LifeSafetyPointBuilder) = (*_LifeSafetyPointBuilder)(nil)

func (b *_LifeSafetyPointBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, trackingValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, mode WritableProperty, acceptedModes ReadableProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, lifeSafetyAlarmValues OptionalProperty, alarmValues OptionalProperty, faultValues OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, silenced ReadableProperty, operationExpected ReadableProperty, maintenanceRequired OptionalProperty, setting OptionalProperty, directReading OptionalProperty, units OptionalProperty, memberOf OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LifeSafetyPointBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithPresentValue(presentValue).WithTrackingValue(trackingValue).WithDescription(description).WithDeviceType(deviceType).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithMode(mode).WithAcceptedModes(acceptedModes).WithTimeDelay(timeDelay).WithNotificationClass(notificationClass).WithLifeSafetyAlarmValues(lifeSafetyAlarmValues).WithAlarmValues(alarmValues).WithFaultValues(faultValues).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithSilenced(silenced).WithOperationExpected(operationExpected).WithMaintenanceRequired(maintenanceRequired).WithSetting(setting).WithDirectReading(directReading).WithUnits(units).WithMemberOf(memberOf).WithPropertyList(propertyList).WithValueSource(valueSource).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_LifeSafetyPointBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) LifeSafetyPointBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_LifeSafetyPointBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithObjectName(objectName ReadableProperty) LifeSafetyPointBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_LifeSafetyPointBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithObjectType(objectType ReadableProperty) LifeSafetyPointBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_LifeSafetyPointBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithPresentValue(presentValue ReadableProperty) LifeSafetyPointBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_LifeSafetyPointBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithTrackingValue(trackingValue ReadableProperty) LifeSafetyPointBuilder {
	b.TrackingValue = trackingValue
	return b
}

func (b *_LifeSafetyPointBuilder) WithTrackingValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.TrackingValue.CreateReadablePropertyBuilder())
	var err error
	b.TrackingValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithDescription(description OptionalProperty) LifeSafetyPointBuilder {
	b.Description = description
	return b
}

func (b *_LifeSafetyPointBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithDeviceType(deviceType OptionalProperty) LifeSafetyPointBuilder {
	b.DeviceType = deviceType
	return b
}

func (b *_LifeSafetyPointBuilder) WithDeviceTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.DeviceType.CreateOptionalPropertyBuilder())
	var err error
	b.DeviceType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithStatusFlags(statusFlags ReadableProperty) LifeSafetyPointBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_LifeSafetyPointBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventState(eventState ReadableProperty) LifeSafetyPointBuilder {
	b.EventState = eventState
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithReliability(reliability ReadableProperty) LifeSafetyPointBuilder {
	b.Reliability = reliability
	return b
}

func (b *_LifeSafetyPointBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithOutOfService(outOfService ReadableProperty) LifeSafetyPointBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_LifeSafetyPointBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithMode(mode WritableProperty) LifeSafetyPointBuilder {
	b.Mode = mode
	return b
}

func (b *_LifeSafetyPointBuilder) WithModeBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Mode.CreateWritablePropertyBuilder())
	var err error
	b.Mode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithAcceptedModes(acceptedModes ReadableProperty) LifeSafetyPointBuilder {
	b.AcceptedModes = acceptedModes
	return b
}

func (b *_LifeSafetyPointBuilder) WithAcceptedModesBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.AcceptedModes.CreateReadablePropertyBuilder())
	var err error
	b.AcceptedModes, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithTimeDelay(timeDelay OptionalProperty) LifeSafetyPointBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_LifeSafetyPointBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithNotificationClass(notificationClass OptionalProperty) LifeSafetyPointBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_LifeSafetyPointBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithLifeSafetyAlarmValues(lifeSafetyAlarmValues OptionalProperty) LifeSafetyPointBuilder {
	b.LifeSafetyAlarmValues = lifeSafetyAlarmValues
	return b
}

func (b *_LifeSafetyPointBuilder) WithLifeSafetyAlarmValuesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.LifeSafetyAlarmValues.CreateOptionalPropertyBuilder())
	var err error
	b.LifeSafetyAlarmValues, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithAlarmValues(alarmValues OptionalProperty) LifeSafetyPointBuilder {
	b.AlarmValues = alarmValues
	return b
}

func (b *_LifeSafetyPointBuilder) WithAlarmValuesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.AlarmValues.CreateOptionalPropertyBuilder())
	var err error
	b.AlarmValues, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithFaultValues(faultValues OptionalProperty) LifeSafetyPointBuilder {
	b.FaultValues = faultValues
	return b
}

func (b *_LifeSafetyPointBuilder) WithFaultValuesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.FaultValues.CreateOptionalPropertyBuilder())
	var err error
	b.FaultValues, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventEnable(eventEnable OptionalProperty) LifeSafetyPointBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) LifeSafetyPointBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_LifeSafetyPointBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithNotifyType(notifyType OptionalProperty) LifeSafetyPointBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_LifeSafetyPointBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) LifeSafetyPointBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) LifeSafetyPointBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) LifeSafetyPointBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) LifeSafetyPointBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) LifeSafetyPointBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) LifeSafetyPointBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_LifeSafetyPointBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) LifeSafetyPointBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_LifeSafetyPointBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) LifeSafetyPointBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_LifeSafetyPointBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithSilenced(silenced ReadableProperty) LifeSafetyPointBuilder {
	b.Silenced = silenced
	return b
}

func (b *_LifeSafetyPointBuilder) WithSilencedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Silenced.CreateReadablePropertyBuilder())
	var err error
	b.Silenced, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithOperationExpected(operationExpected ReadableProperty) LifeSafetyPointBuilder {
	b.OperationExpected = operationExpected
	return b
}

func (b *_LifeSafetyPointBuilder) WithOperationExpectedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.OperationExpected.CreateReadablePropertyBuilder())
	var err error
	b.OperationExpected, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithMaintenanceRequired(maintenanceRequired OptionalProperty) LifeSafetyPointBuilder {
	b.MaintenanceRequired = maintenanceRequired
	return b
}

func (b *_LifeSafetyPointBuilder) WithMaintenanceRequiredBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.MaintenanceRequired.CreateOptionalPropertyBuilder())
	var err error
	b.MaintenanceRequired, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithSetting(setting OptionalProperty) LifeSafetyPointBuilder {
	b.Setting = setting
	return b
}

func (b *_LifeSafetyPointBuilder) WithSettingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Setting.CreateOptionalPropertyBuilder())
	var err error
	b.Setting, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithDirectReading(directReading OptionalProperty) LifeSafetyPointBuilder {
	b.DirectReading = directReading
	return b
}

func (b *_LifeSafetyPointBuilder) WithDirectReadingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.DirectReading.CreateOptionalPropertyBuilder())
	var err error
	b.DirectReading, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithUnits(units OptionalProperty) LifeSafetyPointBuilder {
	b.Units = units
	return b
}

func (b *_LifeSafetyPointBuilder) WithUnitsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Units.CreateOptionalPropertyBuilder())
	var err error
	b.Units, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithMemberOf(memberOf OptionalProperty) LifeSafetyPointBuilder {
	b.MemberOf = memberOf
	return b
}

func (b *_LifeSafetyPointBuilder) WithMemberOfBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.MemberOf.CreateOptionalPropertyBuilder())
	var err error
	b.MemberOf, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithPropertyList(propertyList ReadableProperty) LifeSafetyPointBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_LifeSafetyPointBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithValueSource(valueSource OptionalProperty) LifeSafetyPointBuilder {
	b.ValueSource = valueSource
	return b
}

func (b *_LifeSafetyPointBuilder) WithValueSourceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ValueSource.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSource, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithTags(tags OptionalProperty) LifeSafetyPointBuilder {
	b.Tags = tags
	return b
}

func (b *_LifeSafetyPointBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithProfileLocation(profileLocation OptionalProperty) LifeSafetyPointBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_LifeSafetyPointBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) WithProfileName(profileName OptionalProperty) LifeSafetyPointBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_LifeSafetyPointBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LifeSafetyPointBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LifeSafetyPointBuilder) Build() (LifeSafetyPoint, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.TrackingValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'trackingValue' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.DeviceType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deviceType' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.Mode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'mode' not set"))
	}
	if b.AcceptedModes == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'acceptedModes' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.LifeSafetyAlarmValues == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lifeSafetyAlarmValues' not set"))
	}
	if b.AlarmValues == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'alarmValues' not set"))
	}
	if b.FaultValues == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultValues' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.Silenced == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'silenced' not set"))
	}
	if b.OperationExpected == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'operationExpected' not set"))
	}
	if b.MaintenanceRequired == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maintenanceRequired' not set"))
	}
	if b.Setting == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'setting' not set"))
	}
	if b.DirectReading == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'directReading' not set"))
	}
	if b.Units == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'units' not set"))
	}
	if b.MemberOf == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'memberOf' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.ValueSource == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSource' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._LifeSafetyPoint.deepCopy(), nil
}

func (b *_LifeSafetyPointBuilder) MustBuild() LifeSafetyPoint {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_LifeSafetyPointBuilder) DeepCopy() any {
	_copy := b.CreateLifeSafetyPointBuilder().(*_LifeSafetyPointBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateLifeSafetyPointBuilder creates a LifeSafetyPointBuilder
func (b *_LifeSafetyPoint) CreateLifeSafetyPointBuilder() LifeSafetyPointBuilder {
	if b == nil {
		return NewLifeSafetyPointBuilder()
	}
	return &_LifeSafetyPointBuilder{_LifeSafetyPoint: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_LifeSafetyPoint) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_LifeSafetyPoint) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_LifeSafetyPoint) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_LifeSafetyPoint) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_LifeSafetyPoint) GetTrackingValue() ReadableProperty {
	return m.TrackingValue
}

func (m *_LifeSafetyPoint) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_LifeSafetyPoint) GetDeviceType() OptionalProperty {
	return m.DeviceType
}

func (m *_LifeSafetyPoint) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_LifeSafetyPoint) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_LifeSafetyPoint) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_LifeSafetyPoint) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_LifeSafetyPoint) GetMode() WritableProperty {
	return m.Mode
}

func (m *_LifeSafetyPoint) GetAcceptedModes() ReadableProperty {
	return m.AcceptedModes
}

func (m *_LifeSafetyPoint) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_LifeSafetyPoint) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_LifeSafetyPoint) GetLifeSafetyAlarmValues() OptionalProperty {
	return m.LifeSafetyAlarmValues
}

func (m *_LifeSafetyPoint) GetAlarmValues() OptionalProperty {
	return m.AlarmValues
}

func (m *_LifeSafetyPoint) GetFaultValues() OptionalProperty {
	return m.FaultValues
}

func (m *_LifeSafetyPoint) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_LifeSafetyPoint) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_LifeSafetyPoint) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_LifeSafetyPoint) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_LifeSafetyPoint) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_LifeSafetyPoint) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_LifeSafetyPoint) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_LifeSafetyPoint) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_LifeSafetyPoint) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_LifeSafetyPoint) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_LifeSafetyPoint) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_LifeSafetyPoint) GetSilenced() ReadableProperty {
	return m.Silenced
}

func (m *_LifeSafetyPoint) GetOperationExpected() ReadableProperty {
	return m.OperationExpected
}

func (m *_LifeSafetyPoint) GetMaintenanceRequired() OptionalProperty {
	return m.MaintenanceRequired
}

func (m *_LifeSafetyPoint) GetSetting() OptionalProperty {
	return m.Setting
}

func (m *_LifeSafetyPoint) GetDirectReading() OptionalProperty {
	return m.DirectReading
}

func (m *_LifeSafetyPoint) GetUnits() OptionalProperty {
	return m.Units
}

func (m *_LifeSafetyPoint) GetMemberOf() OptionalProperty {
	return m.MemberOf
}

func (m *_LifeSafetyPoint) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_LifeSafetyPoint) GetValueSource() OptionalProperty {
	return m.ValueSource
}

func (m *_LifeSafetyPoint) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_LifeSafetyPoint) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_LifeSafetyPoint) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastLifeSafetyPoint(structType any) LifeSafetyPoint {
	if casted, ok := structType.(LifeSafetyPoint); ok {
		return casted
	}
	if casted, ok := structType.(*LifeSafetyPoint); ok {
		return *casted
	}
	return nil
}

func (m *_LifeSafetyPoint) GetTypeName() string {
	return "LifeSafetyPoint"
}

func (m *_LifeSafetyPoint) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (trackingValue)
	lengthInBits += m.TrackingValue.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (deviceType)
	lengthInBits += m.DeviceType.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (mode)
	lengthInBits += m.Mode.GetLengthInBits(ctx)

	// Simple field (acceptedModes)
	lengthInBits += m.AcceptedModes.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (lifeSafetyAlarmValues)
	lengthInBits += m.LifeSafetyAlarmValues.GetLengthInBits(ctx)

	// Simple field (alarmValues)
	lengthInBits += m.AlarmValues.GetLengthInBits(ctx)

	// Simple field (faultValues)
	lengthInBits += m.FaultValues.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (silenced)
	lengthInBits += m.Silenced.GetLengthInBits(ctx)

	// Simple field (operationExpected)
	lengthInBits += m.OperationExpected.GetLengthInBits(ctx)

	// Simple field (maintenanceRequired)
	lengthInBits += m.MaintenanceRequired.GetLengthInBits(ctx)

	// Simple field (setting)
	lengthInBits += m.Setting.GetLengthInBits(ctx)

	// Simple field (directReading)
	lengthInBits += m.DirectReading.GetLengthInBits(ctx)

	// Simple field (units)
	lengthInBits += m.Units.GetLengthInBits(ctx)

	// Simple field (memberOf)
	lengthInBits += m.MemberOf.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (valueSource)
	lengthInBits += m.ValueSource.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_LifeSafetyPoint) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func LifeSafetyPointParse(ctx context.Context, theBytes []byte) (LifeSafetyPoint, error) {
	return LifeSafetyPointParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func LifeSafetyPointParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (LifeSafetyPoint, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (LifeSafetyPoint, error) {
		return LifeSafetyPointParseWithBuffer(ctx, readBuffer)
	}
}

func LifeSafetyPointParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (LifeSafetyPoint, error) {
	v, err := (&_LifeSafetyPoint{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_LifeSafetyPoint) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__lifeSafetyPoint LifeSafetyPoint, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("LifeSafetyPoint"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for LifeSafetyPoint")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLifeSafetyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	trackingValue, err := ReadSimpleField[ReadableProperty](ctx, "trackingValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLifeSafetyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'trackingValue' field"))
	}
	m.TrackingValue = trackingValue

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	deviceType, err := ReadSimpleField[OptionalProperty](ctx, "deviceType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deviceType' field"))
	}
	m.DeviceType = deviceType

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	mode, err := ReadSimpleField[WritableProperty](ctx, "mode", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetLifeSafetyMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'mode' field"))
	}
	m.Mode = mode

	acceptedModes, err := ReadSimpleField[ReadableProperty](ctx, "acceptedModes", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetLifeSafetyMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'acceptedModes' field"))
	}
	m.AcceptedModes = acceptedModes

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	lifeSafetyAlarmValues, err := ReadSimpleField[OptionalProperty](ctx, "lifeSafetyAlarmValues", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetLifeSafetyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lifeSafetyAlarmValues' field"))
	}
	m.LifeSafetyAlarmValues = lifeSafetyAlarmValues

	alarmValues, err := ReadSimpleField[OptionalProperty](ctx, "alarmValues", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetLifeSafetyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'alarmValues' field"))
	}
	m.AlarmValues = alarmValues

	faultValues, err := ReadSimpleField[OptionalProperty](ctx, "faultValues", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetLifeSafetyState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultValues' field"))
	}
	m.FaultValues = faultValues

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	silenced, err := ReadSimpleField[ReadableProperty](ctx, "silenced", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetSilencedState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'silenced' field"))
	}
	m.Silenced = silenced

	operationExpected, err := ReadSimpleField[ReadableProperty](ctx, "operationExpected", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLifeSafetyOperation")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'operationExpected' field"))
	}
	m.OperationExpected = operationExpected

	maintenanceRequired, err := ReadSimpleField[OptionalProperty](ctx, "maintenanceRequired", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetMaintenance")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maintenanceRequired' field"))
	}
	m.MaintenanceRequired = maintenanceRequired

	setting, err := ReadSimpleField[OptionalProperty](ctx, "setting", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'setting' field"))
	}
	m.Setting = setting

	directReading, err := ReadSimpleField[OptionalProperty](ctx, "directReading", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'directReading' field"))
	}
	m.DirectReading = directReading

	units, err := ReadSimpleField[OptionalProperty](ctx, "units", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'units' field"))
	}
	m.Units = units

	memberOf, err := ReadSimpleField[OptionalProperty](ctx, "memberOf", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'memberOf' field"))
	}
	m.MemberOf = memberOf

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	valueSource, err := ReadSimpleField[OptionalProperty](ctx, "valueSource", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSource' field"))
	}
	m.ValueSource = valueSource

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("LifeSafetyPoint"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for LifeSafetyPoint")
	}

	return m, nil
}

func (m *_LifeSafetyPoint) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_LifeSafetyPoint) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("LifeSafetyPoint"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for LifeSafetyPoint")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "trackingValue", m.GetTrackingValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'trackingValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deviceType", m.GetDeviceType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deviceType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "mode", m.GetMode(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'mode' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "acceptedModes", m.GetAcceptedModes(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'acceptedModes' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lifeSafetyAlarmValues", m.GetLifeSafetyAlarmValues(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lifeSafetyAlarmValues' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "alarmValues", m.GetAlarmValues(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'alarmValues' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultValues", m.GetFaultValues(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultValues' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "silenced", m.GetSilenced(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'silenced' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "operationExpected", m.GetOperationExpected(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'operationExpected' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maintenanceRequired", m.GetMaintenanceRequired(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maintenanceRequired' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "setting", m.GetSetting(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'setting' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "directReading", m.GetDirectReading(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'directReading' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "units", m.GetUnits(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'units' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "memberOf", m.GetMemberOf(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'memberOf' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSource", m.GetValueSource(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSource' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("LifeSafetyPoint"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for LifeSafetyPoint")
	}
	return nil
}

func (m *_LifeSafetyPoint) IsLifeSafetyPoint() {}

func (m *_LifeSafetyPoint) DeepCopy() any {
	return m.deepCopy()
}

func (m *_LifeSafetyPoint) deepCopy() *_LifeSafetyPoint {
	if m == nil {
		return nil
	}
	_LifeSafetyPointCopy := &_LifeSafetyPoint{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.TrackingValue.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.DeviceType.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.Mode.DeepCopy().(WritableProperty),
		m.AcceptedModes.DeepCopy().(ReadableProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.LifeSafetyAlarmValues.DeepCopy().(OptionalProperty),
		m.AlarmValues.DeepCopy().(OptionalProperty),
		m.FaultValues.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.Silenced.DeepCopy().(ReadableProperty),
		m.OperationExpected.DeepCopy().(ReadableProperty),
		m.MaintenanceRequired.DeepCopy().(OptionalProperty),
		m.Setting.DeepCopy().(OptionalProperty),
		m.DirectReading.DeepCopy().(OptionalProperty),
		m.Units.DeepCopy().(OptionalProperty),
		m.MemberOf.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.ValueSource.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _LifeSafetyPointCopy
}

func (m *_LifeSafetyPoint) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
