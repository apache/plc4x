/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// NetworkSecurity is the corresponding interface of NetworkSecurity
type NetworkSecurity interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetBaseDeviceSecurityPolicy returns BaseDeviceSecurityPolicy (property field)
	GetBaseDeviceSecurityPolicy() WritableProperty
	// GetNetworkAccessSecurityPolicies returns NetworkAccessSecurityPolicies (property field)
	GetNetworkAccessSecurityPolicies() WritableProperty
	// GetSecurityTimeWindow returns SecurityTimeWindow (property field)
	GetSecurityTimeWindow() WritableProperty
	// GetPacketReorderTime returns PacketReorderTime (property field)
	GetPacketReorderTime() WritableProperty
	// GetDistributionKeyRevision returns DistributionKeyRevision (property field)
	GetDistributionKeyRevision() ReadableProperty
	// GetKeySets returns KeySets (property field)
	GetKeySets() ReadableProperty
	// GetLastKeyServer returns LastKeyServer (property field)
	GetLastKeyServer() WritableProperty
	// GetSecurityPDUTimeout returns SecurityPDUTimeout (property field)
	GetSecurityPDUTimeout() WritableProperty
	// GetUpdateKeySetTimeout returns UpdateKeySetTimeout (property field)
	GetUpdateKeySetTimeout() ReadableProperty
	// GetSupportedSecurityAlgorithms returns SupportedSecurityAlgorithms (property field)
	GetSupportedSecurityAlgorithms() ReadableProperty
	// GetDoNotHide returns DoNotHide (property field)
	GetDoNotHide() WritableProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsNetworkSecurity is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsNetworkSecurity()
	// CreateBuilder creates a NetworkSecurityBuilder
	CreateNetworkSecurityBuilder() NetworkSecurityBuilder
}

// _NetworkSecurity is the data-structure of this message
type _NetworkSecurity struct {
	ObjectIdentifier              ReadableProperty
	ObjectName                    ReadableProperty
	ObjectType                    ReadableProperty
	Description                   OptionalProperty
	BaseDeviceSecurityPolicy      WritableProperty
	NetworkAccessSecurityPolicies WritableProperty
	SecurityTimeWindow            WritableProperty
	PacketReorderTime             WritableProperty
	DistributionKeyRevision       ReadableProperty
	KeySets                       ReadableProperty
	LastKeyServer                 WritableProperty
	SecurityPDUTimeout            WritableProperty
	UpdateKeySetTimeout           ReadableProperty
	SupportedSecurityAlgorithms   ReadableProperty
	DoNotHide                     WritableProperty
	PropertyList                  ReadableProperty
	Tags                          OptionalProperty
	ProfileLocation               OptionalProperty
	ProfileName                   OptionalProperty
}

var _ NetworkSecurity = (*_NetworkSecurity)(nil)

// NewNetworkSecurity factory function for _NetworkSecurity
func NewNetworkSecurity(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, baseDeviceSecurityPolicy WritableProperty, networkAccessSecurityPolicies WritableProperty, securityTimeWindow WritableProperty, packetReorderTime WritableProperty, distributionKeyRevision ReadableProperty, keySets ReadableProperty, lastKeyServer WritableProperty, securityPDUTimeout WritableProperty, updateKeySetTimeout ReadableProperty, supportedSecurityAlgorithms ReadableProperty, doNotHide WritableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_NetworkSecurity {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for NetworkSecurity must not be nil")
	}
	if baseDeviceSecurityPolicy == nil {
		panic("baseDeviceSecurityPolicy of type WritableProperty for NetworkSecurity must not be nil")
	}
	if networkAccessSecurityPolicies == nil {
		panic("networkAccessSecurityPolicies of type WritableProperty for NetworkSecurity must not be nil")
	}
	if securityTimeWindow == nil {
		panic("securityTimeWindow of type WritableProperty for NetworkSecurity must not be nil")
	}
	if packetReorderTime == nil {
		panic("packetReorderTime of type WritableProperty for NetworkSecurity must not be nil")
	}
	if distributionKeyRevision == nil {
		panic("distributionKeyRevision of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if keySets == nil {
		panic("keySets of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if lastKeyServer == nil {
		panic("lastKeyServer of type WritableProperty for NetworkSecurity must not be nil")
	}
	if securityPDUTimeout == nil {
		panic("securityPDUTimeout of type WritableProperty for NetworkSecurity must not be nil")
	}
	if updateKeySetTimeout == nil {
		panic("updateKeySetTimeout of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if supportedSecurityAlgorithms == nil {
		panic("supportedSecurityAlgorithms of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if doNotHide == nil {
		panic("doNotHide of type WritableProperty for NetworkSecurity must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for NetworkSecurity must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for NetworkSecurity must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for NetworkSecurity must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for NetworkSecurity must not be nil")
	}
	return &_NetworkSecurity{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, BaseDeviceSecurityPolicy: baseDeviceSecurityPolicy, NetworkAccessSecurityPolicies: networkAccessSecurityPolicies, SecurityTimeWindow: securityTimeWindow, PacketReorderTime: packetReorderTime, DistributionKeyRevision: distributionKeyRevision, KeySets: keySets, LastKeyServer: lastKeyServer, SecurityPDUTimeout: securityPDUTimeout, UpdateKeySetTimeout: updateKeySetTimeout, SupportedSecurityAlgorithms: supportedSecurityAlgorithms, DoNotHide: doNotHide, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// NetworkSecurityBuilder is a builder for NetworkSecurity
type NetworkSecurityBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, baseDeviceSecurityPolicy WritableProperty, networkAccessSecurityPolicies WritableProperty, securityTimeWindow WritableProperty, packetReorderTime WritableProperty, distributionKeyRevision ReadableProperty, keySets ReadableProperty, lastKeyServer WritableProperty, securityPDUTimeout WritableProperty, updateKeySetTimeout ReadableProperty, supportedSecurityAlgorithms ReadableProperty, doNotHide WritableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NetworkSecurityBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) NetworkSecurityBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) NetworkSecurityBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) NetworkSecurityBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) NetworkSecurityBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder
	// WithBaseDeviceSecurityPolicy adds BaseDeviceSecurityPolicy (property field)
	WithBaseDeviceSecurityPolicy(WritableProperty) NetworkSecurityBuilder
	// WithBaseDeviceSecurityPolicyBuilder adds BaseDeviceSecurityPolicy (property field) which is build by the builder
	WithBaseDeviceSecurityPolicyBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithNetworkAccessSecurityPolicies adds NetworkAccessSecurityPolicies (property field)
	WithNetworkAccessSecurityPolicies(WritableProperty) NetworkSecurityBuilder
	// WithNetworkAccessSecurityPoliciesBuilder adds NetworkAccessSecurityPolicies (property field) which is build by the builder
	WithNetworkAccessSecurityPoliciesBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithSecurityTimeWindow adds SecurityTimeWindow (property field)
	WithSecurityTimeWindow(WritableProperty) NetworkSecurityBuilder
	// WithSecurityTimeWindowBuilder adds SecurityTimeWindow (property field) which is build by the builder
	WithSecurityTimeWindowBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithPacketReorderTime adds PacketReorderTime (property field)
	WithPacketReorderTime(WritableProperty) NetworkSecurityBuilder
	// WithPacketReorderTimeBuilder adds PacketReorderTime (property field) which is build by the builder
	WithPacketReorderTimeBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithDistributionKeyRevision adds DistributionKeyRevision (property field)
	WithDistributionKeyRevision(ReadableProperty) NetworkSecurityBuilder
	// WithDistributionKeyRevisionBuilder adds DistributionKeyRevision (property field) which is build by the builder
	WithDistributionKeyRevisionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithKeySets adds KeySets (property field)
	WithKeySets(ReadableProperty) NetworkSecurityBuilder
	// WithKeySetsBuilder adds KeySets (property field) which is build by the builder
	WithKeySetsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithLastKeyServer adds LastKeyServer (property field)
	WithLastKeyServer(WritableProperty) NetworkSecurityBuilder
	// WithLastKeyServerBuilder adds LastKeyServer (property field) which is build by the builder
	WithLastKeyServerBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithSecurityPDUTimeout adds SecurityPDUTimeout (property field)
	WithSecurityPDUTimeout(WritableProperty) NetworkSecurityBuilder
	// WithSecurityPDUTimeoutBuilder adds SecurityPDUTimeout (property field) which is build by the builder
	WithSecurityPDUTimeoutBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithUpdateKeySetTimeout adds UpdateKeySetTimeout (property field)
	WithUpdateKeySetTimeout(ReadableProperty) NetworkSecurityBuilder
	// WithUpdateKeySetTimeoutBuilder adds UpdateKeySetTimeout (property field) which is build by the builder
	WithUpdateKeySetTimeoutBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithSupportedSecurityAlgorithms adds SupportedSecurityAlgorithms (property field)
	WithSupportedSecurityAlgorithms(ReadableProperty) NetworkSecurityBuilder
	// WithSupportedSecurityAlgorithmsBuilder adds SupportedSecurityAlgorithms (property field) which is build by the builder
	WithSupportedSecurityAlgorithmsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithDoNotHide adds DoNotHide (property field)
	WithDoNotHide(WritableProperty) NetworkSecurityBuilder
	// WithDoNotHideBuilder adds DoNotHide (property field) which is build by the builder
	WithDoNotHideBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) NetworkSecurityBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) NetworkSecurityBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) NetworkSecurityBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) NetworkSecurityBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder
	// Build builds the NetworkSecurity or returns an error if something is wrong
	Build() (NetworkSecurity, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() NetworkSecurity
}

// NewNetworkSecurityBuilder() creates a NetworkSecurityBuilder
func NewNetworkSecurityBuilder() NetworkSecurityBuilder {
	return &_NetworkSecurityBuilder{_NetworkSecurity: new(_NetworkSecurity)}
}

type _NetworkSecurityBuilder struct {
	*_NetworkSecurity

	err *utils.MultiError
}

var _ (NetworkSecurityBuilder) = (*_NetworkSecurityBuilder)(nil)

func (b *_NetworkSecurityBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, baseDeviceSecurityPolicy WritableProperty, networkAccessSecurityPolicies WritableProperty, securityTimeWindow WritableProperty, packetReorderTime WritableProperty, distributionKeyRevision ReadableProperty, keySets ReadableProperty, lastKeyServer WritableProperty, securityPDUTimeout WritableProperty, updateKeySetTimeout ReadableProperty, supportedSecurityAlgorithms ReadableProperty, doNotHide WritableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NetworkSecurityBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithBaseDeviceSecurityPolicy(baseDeviceSecurityPolicy).WithNetworkAccessSecurityPolicies(networkAccessSecurityPolicies).WithSecurityTimeWindow(securityTimeWindow).WithPacketReorderTime(packetReorderTime).WithDistributionKeyRevision(distributionKeyRevision).WithKeySets(keySets).WithLastKeyServer(lastKeyServer).WithSecurityPDUTimeout(securityPDUTimeout).WithUpdateKeySetTimeout(updateKeySetTimeout).WithSupportedSecurityAlgorithms(supportedSecurityAlgorithms).WithDoNotHide(doNotHide).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_NetworkSecurityBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) NetworkSecurityBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_NetworkSecurityBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithObjectName(objectName ReadableProperty) NetworkSecurityBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_NetworkSecurityBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithObjectType(objectType ReadableProperty) NetworkSecurityBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_NetworkSecurityBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithDescription(description OptionalProperty) NetworkSecurityBuilder {
	b.Description = description
	return b
}

func (b *_NetworkSecurityBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithBaseDeviceSecurityPolicy(baseDeviceSecurityPolicy WritableProperty) NetworkSecurityBuilder {
	b.BaseDeviceSecurityPolicy = baseDeviceSecurityPolicy
	return b
}

func (b *_NetworkSecurityBuilder) WithBaseDeviceSecurityPolicyBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.BaseDeviceSecurityPolicy.CreateWritablePropertyBuilder())
	var err error
	b.BaseDeviceSecurityPolicy, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithNetworkAccessSecurityPolicies(networkAccessSecurityPolicies WritableProperty) NetworkSecurityBuilder {
	b.NetworkAccessSecurityPolicies = networkAccessSecurityPolicies
	return b
}

func (b *_NetworkSecurityBuilder) WithNetworkAccessSecurityPoliciesBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.NetworkAccessSecurityPolicies.CreateWritablePropertyBuilder())
	var err error
	b.NetworkAccessSecurityPolicies, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithSecurityTimeWindow(securityTimeWindow WritableProperty) NetworkSecurityBuilder {
	b.SecurityTimeWindow = securityTimeWindow
	return b
}

func (b *_NetworkSecurityBuilder) WithSecurityTimeWindowBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.SecurityTimeWindow.CreateWritablePropertyBuilder())
	var err error
	b.SecurityTimeWindow, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithPacketReorderTime(packetReorderTime WritableProperty) NetworkSecurityBuilder {
	b.PacketReorderTime = packetReorderTime
	return b
}

func (b *_NetworkSecurityBuilder) WithPacketReorderTimeBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.PacketReorderTime.CreateWritablePropertyBuilder())
	var err error
	b.PacketReorderTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithDistributionKeyRevision(distributionKeyRevision ReadableProperty) NetworkSecurityBuilder {
	b.DistributionKeyRevision = distributionKeyRevision
	return b
}

func (b *_NetworkSecurityBuilder) WithDistributionKeyRevisionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.DistributionKeyRevision.CreateReadablePropertyBuilder())
	var err error
	b.DistributionKeyRevision, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithKeySets(keySets ReadableProperty) NetworkSecurityBuilder {
	b.KeySets = keySets
	return b
}

func (b *_NetworkSecurityBuilder) WithKeySetsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.KeySets.CreateReadablePropertyBuilder())
	var err error
	b.KeySets, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithLastKeyServer(lastKeyServer WritableProperty) NetworkSecurityBuilder {
	b.LastKeyServer = lastKeyServer
	return b
}

func (b *_NetworkSecurityBuilder) WithLastKeyServerBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.LastKeyServer.CreateWritablePropertyBuilder())
	var err error
	b.LastKeyServer, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithSecurityPDUTimeout(securityPDUTimeout WritableProperty) NetworkSecurityBuilder {
	b.SecurityPDUTimeout = securityPDUTimeout
	return b
}

func (b *_NetworkSecurityBuilder) WithSecurityPDUTimeoutBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.SecurityPDUTimeout.CreateWritablePropertyBuilder())
	var err error
	b.SecurityPDUTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithUpdateKeySetTimeout(updateKeySetTimeout ReadableProperty) NetworkSecurityBuilder {
	b.UpdateKeySetTimeout = updateKeySetTimeout
	return b
}

func (b *_NetworkSecurityBuilder) WithUpdateKeySetTimeoutBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.UpdateKeySetTimeout.CreateReadablePropertyBuilder())
	var err error
	b.UpdateKeySetTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithSupportedSecurityAlgorithms(supportedSecurityAlgorithms ReadableProperty) NetworkSecurityBuilder {
	b.SupportedSecurityAlgorithms = supportedSecurityAlgorithms
	return b
}

func (b *_NetworkSecurityBuilder) WithSupportedSecurityAlgorithmsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.SupportedSecurityAlgorithms.CreateReadablePropertyBuilder())
	var err error
	b.SupportedSecurityAlgorithms, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithDoNotHide(doNotHide WritableProperty) NetworkSecurityBuilder {
	b.DoNotHide = doNotHide
	return b
}

func (b *_NetworkSecurityBuilder) WithDoNotHideBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.DoNotHide.CreateWritablePropertyBuilder())
	var err error
	b.DoNotHide, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithPropertyList(propertyList ReadableProperty) NetworkSecurityBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_NetworkSecurityBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithTags(tags OptionalProperty) NetworkSecurityBuilder {
	b.Tags = tags
	return b
}

func (b *_NetworkSecurityBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithProfileLocation(profileLocation OptionalProperty) NetworkSecurityBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_NetworkSecurityBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) WithProfileName(profileName OptionalProperty) NetworkSecurityBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_NetworkSecurityBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkSecurityBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkSecurityBuilder) Build() (NetworkSecurity, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.BaseDeviceSecurityPolicy == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'baseDeviceSecurityPolicy' not set"))
	}
	if b.NetworkAccessSecurityPolicies == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'networkAccessSecurityPolicies' not set"))
	}
	if b.SecurityTimeWindow == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'securityTimeWindow' not set"))
	}
	if b.PacketReorderTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'packetReorderTime' not set"))
	}
	if b.DistributionKeyRevision == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'distributionKeyRevision' not set"))
	}
	if b.KeySets == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'keySets' not set"))
	}
	if b.LastKeyServer == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastKeyServer' not set"))
	}
	if b.SecurityPDUTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'securityPDUTimeout' not set"))
	}
	if b.UpdateKeySetTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'updateKeySetTimeout' not set"))
	}
	if b.SupportedSecurityAlgorithms == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'supportedSecurityAlgorithms' not set"))
	}
	if b.DoNotHide == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'doNotHide' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._NetworkSecurity.deepCopy(), nil
}

func (b *_NetworkSecurityBuilder) MustBuild() NetworkSecurity {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_NetworkSecurityBuilder) DeepCopy() any {
	_copy := b.CreateNetworkSecurityBuilder().(*_NetworkSecurityBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateNetworkSecurityBuilder creates a NetworkSecurityBuilder
func (b *_NetworkSecurity) CreateNetworkSecurityBuilder() NetworkSecurityBuilder {
	if b == nil {
		return NewNetworkSecurityBuilder()
	}
	return &_NetworkSecurityBuilder{_NetworkSecurity: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_NetworkSecurity) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_NetworkSecurity) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_NetworkSecurity) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_NetworkSecurity) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_NetworkSecurity) GetBaseDeviceSecurityPolicy() WritableProperty {
	return m.BaseDeviceSecurityPolicy
}

func (m *_NetworkSecurity) GetNetworkAccessSecurityPolicies() WritableProperty {
	return m.NetworkAccessSecurityPolicies
}

func (m *_NetworkSecurity) GetSecurityTimeWindow() WritableProperty {
	return m.SecurityTimeWindow
}

func (m *_NetworkSecurity) GetPacketReorderTime() WritableProperty {
	return m.PacketReorderTime
}

func (m *_NetworkSecurity) GetDistributionKeyRevision() ReadableProperty {
	return m.DistributionKeyRevision
}

func (m *_NetworkSecurity) GetKeySets() ReadableProperty {
	return m.KeySets
}

func (m *_NetworkSecurity) GetLastKeyServer() WritableProperty {
	return m.LastKeyServer
}

func (m *_NetworkSecurity) GetSecurityPDUTimeout() WritableProperty {
	return m.SecurityPDUTimeout
}

func (m *_NetworkSecurity) GetUpdateKeySetTimeout() ReadableProperty {
	return m.UpdateKeySetTimeout
}

func (m *_NetworkSecurity) GetSupportedSecurityAlgorithms() ReadableProperty {
	return m.SupportedSecurityAlgorithms
}

func (m *_NetworkSecurity) GetDoNotHide() WritableProperty {
	return m.DoNotHide
}

func (m *_NetworkSecurity) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_NetworkSecurity) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_NetworkSecurity) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_NetworkSecurity) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastNetworkSecurity(structType any) NetworkSecurity {
	if casted, ok := structType.(NetworkSecurity); ok {
		return casted
	}
	if casted, ok := structType.(*NetworkSecurity); ok {
		return *casted
	}
	return nil
}

func (m *_NetworkSecurity) GetTypeName() string {
	return "NetworkSecurity"
}

func (m *_NetworkSecurity) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (baseDeviceSecurityPolicy)
	lengthInBits += m.BaseDeviceSecurityPolicy.GetLengthInBits(ctx)

	// Simple field (networkAccessSecurityPolicies)
	lengthInBits += m.NetworkAccessSecurityPolicies.GetLengthInBits(ctx)

	// Simple field (securityTimeWindow)
	lengthInBits += m.SecurityTimeWindow.GetLengthInBits(ctx)

	// Simple field (packetReorderTime)
	lengthInBits += m.PacketReorderTime.GetLengthInBits(ctx)

	// Simple field (distributionKeyRevision)
	lengthInBits += m.DistributionKeyRevision.GetLengthInBits(ctx)

	// Simple field (keySets)
	lengthInBits += m.KeySets.GetLengthInBits(ctx)

	// Simple field (lastKeyServer)
	lengthInBits += m.LastKeyServer.GetLengthInBits(ctx)

	// Simple field (securityPDUTimeout)
	lengthInBits += m.SecurityPDUTimeout.GetLengthInBits(ctx)

	// Simple field (updateKeySetTimeout)
	lengthInBits += m.UpdateKeySetTimeout.GetLengthInBits(ctx)

	// Simple field (supportedSecurityAlgorithms)
	lengthInBits += m.SupportedSecurityAlgorithms.GetLengthInBits(ctx)

	// Simple field (doNotHide)
	lengthInBits += m.DoNotHide.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_NetworkSecurity) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func NetworkSecurityParse(ctx context.Context, theBytes []byte) (NetworkSecurity, error) {
	return NetworkSecurityParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func NetworkSecurityParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (NetworkSecurity, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (NetworkSecurity, error) {
		return NetworkSecurityParseWithBuffer(ctx, readBuffer)
	}
}

func NetworkSecurityParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (NetworkSecurity, error) {
	v, err := (&_NetworkSecurity{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_NetworkSecurity) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__networkSecurity NetworkSecurity, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("NetworkSecurity"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for NetworkSecurity")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	baseDeviceSecurityPolicy, err := ReadSimpleField[WritableProperty](ctx, "baseDeviceSecurityPolicy", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetSecurityLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'baseDeviceSecurityPolicy' field"))
	}
	m.BaseDeviceSecurityPolicy = baseDeviceSecurityPolicy

	networkAccessSecurityPolicies, err := ReadSimpleField[WritableProperty](ctx, "networkAccessSecurityPolicies", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNetworkSecurityPolicy")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'networkAccessSecurityPolicies' field"))
	}
	m.NetworkAccessSecurityPolicies = networkAccessSecurityPolicies

	securityTimeWindow, err := ReadSimpleField[WritableProperty](ctx, "securityTimeWindow", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'securityTimeWindow' field"))
	}
	m.SecurityTimeWindow = securityTimeWindow

	packetReorderTime, err := ReadSimpleField[WritableProperty](ctx, "packetReorderTime", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'packetReorderTime' field"))
	}
	m.PacketReorderTime = packetReorderTime

	distributionKeyRevision, err := ReadSimpleField[ReadableProperty](ctx, "distributionKeyRevision", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'distributionKeyRevision' field"))
	}
	m.DistributionKeyRevision = distributionKeyRevision

	keySets, err := ReadSimpleField[ReadableProperty](ctx, "keySets", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[2] of BACnetSecurityKeySet")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'keySets' field"))
	}
	m.KeySets = keySets

	lastKeyServer, err := ReadSimpleField[WritableProperty](ctx, "lastKeyServer", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetAddressBinding")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastKeyServer' field"))
	}
	m.LastKeyServer = lastKeyServer

	securityPDUTimeout, err := ReadSimpleField[WritableProperty](ctx, "securityPDUTimeout", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'securityPDUTimeout' field"))
	}
	m.SecurityPDUTimeout = securityPDUTimeout

	updateKeySetTimeout, err := ReadSimpleField[ReadableProperty](ctx, "updateKeySetTimeout", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'updateKeySetTimeout' field"))
	}
	m.UpdateKeySetTimeout = updateKeySetTimeout

	supportedSecurityAlgorithms, err := ReadSimpleField[ReadableProperty](ctx, "supportedSecurityAlgorithms", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'supportedSecurityAlgorithms' field"))
	}
	m.SupportedSecurityAlgorithms = supportedSecurityAlgorithms

	doNotHide, err := ReadSimpleField[WritableProperty](ctx, "doNotHide", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'doNotHide' field"))
	}
	m.DoNotHide = doNotHide

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("NetworkSecurity"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for NetworkSecurity")
	}

	return m, nil
}

func (m *_NetworkSecurity) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_NetworkSecurity) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("NetworkSecurity"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for NetworkSecurity")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "baseDeviceSecurityPolicy", m.GetBaseDeviceSecurityPolicy(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'baseDeviceSecurityPolicy' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "networkAccessSecurityPolicies", m.GetNetworkAccessSecurityPolicies(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'networkAccessSecurityPolicies' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "securityTimeWindow", m.GetSecurityTimeWindow(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'securityTimeWindow' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "packetReorderTime", m.GetPacketReorderTime(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'packetReorderTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "distributionKeyRevision", m.GetDistributionKeyRevision(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'distributionKeyRevision' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "keySets", m.GetKeySets(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'keySets' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "lastKeyServer", m.GetLastKeyServer(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastKeyServer' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "securityPDUTimeout", m.GetSecurityPDUTimeout(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'securityPDUTimeout' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "updateKeySetTimeout", m.GetUpdateKeySetTimeout(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'updateKeySetTimeout' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "supportedSecurityAlgorithms", m.GetSupportedSecurityAlgorithms(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'supportedSecurityAlgorithms' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "doNotHide", m.GetDoNotHide(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'doNotHide' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("NetworkSecurity"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for NetworkSecurity")
	}
	return nil
}

func (m *_NetworkSecurity) IsNetworkSecurity() {}

func (m *_NetworkSecurity) DeepCopy() any {
	return m.deepCopy()
}

func (m *_NetworkSecurity) deepCopy() *_NetworkSecurity {
	if m == nil {
		return nil
	}
	_NetworkSecurityCopy := &_NetworkSecurity{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.BaseDeviceSecurityPolicy.DeepCopy().(WritableProperty),
		m.NetworkAccessSecurityPolicies.DeepCopy().(WritableProperty),
		m.SecurityTimeWindow.DeepCopy().(WritableProperty),
		m.PacketReorderTime.DeepCopy().(WritableProperty),
		m.DistributionKeyRevision.DeepCopy().(ReadableProperty),
		m.KeySets.DeepCopy().(ReadableProperty),
		m.LastKeyServer.DeepCopy().(WritableProperty),
		m.SecurityPDUTimeout.DeepCopy().(WritableProperty),
		m.UpdateKeySetTimeout.DeepCopy().(ReadableProperty),
		m.SupportedSecurityAlgorithms.DeepCopy().(ReadableProperty),
		m.DoNotHide.DeepCopy().(WritableProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _NetworkSecurityCopy
}

func (m *_NetworkSecurity) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
