/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// LightingOutput is the corresponding interface of LightingOutput
type LightingOutput interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() WritableProperty
	// GetTrackingValue returns TrackingValue (property field)
	GetTrackingValue() ReadableProperty
	// GetLightingCommand returns LightingCommand (property field)
	GetLightingCommand() WritableProperty
	// GetInProgress returns InProgress (property field)
	GetInProgress() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetBlinkWarnEnable returns BlinkWarnEnable (property field)
	GetBlinkWarnEnable() ReadableProperty
	// GetEgressTime returns EgressTime (property field)
	GetEgressTime() ReadableProperty
	// GetEgressActive returns EgressActive (property field)
	GetEgressActive() ReadableProperty
	// GetDefaultFadeTime returns DefaultFadeTime (property field)
	GetDefaultFadeTime() ReadableProperty
	// GetDefaultRampRate returns DefaultRampRate (property field)
	GetDefaultRampRate() ReadableProperty
	// GetDefaultStepIncrement returns DefaultStepIncrement (property field)
	GetDefaultStepIncrement() ReadableProperty
	// GetTransition returns Transition (property field)
	GetTransition() OptionalProperty
	// GetFeedbackValue returns FeedbackValue (property field)
	GetFeedbackValue() OptionalProperty
	// GetPriorityArray returns PriorityArray (property field)
	GetPriorityArray() ReadableProperty
	// GetRelinquishDefault returns RelinquishDefault (property field)
	GetRelinquishDefault() ReadableProperty
	// GetPower returns Power (property field)
	GetPower() OptionalProperty
	// GetInstantaneousPower returns InstantaneousPower (property field)
	GetInstantaneousPower() OptionalProperty
	// GetMinActualValue returns MinActualValue (property field)
	GetMinActualValue() OptionalProperty
	// GetMaxActualValue returns MaxActualValue (property field)
	GetMaxActualValue() OptionalProperty
	// GetLightingCommandDefaultPriority returns LightingCommandDefaultPriority (property field)
	GetLightingCommandDefaultPriority() ReadableProperty
	// GetCOVIncrement returns COVIncrement (property field)
	GetCOVIncrement() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetCurrentCommandPriority returns CurrentCommandPriority (property field)
	GetCurrentCommandPriority() ReadableProperty
	// GetValueSource returns ValueSource (property field)
	GetValueSource() OptionalProperty
	// GetValueSourceArray returns ValueSourceArray (property field)
	GetValueSourceArray() OptionalProperty
	// GetLastCommandTime returns LastCommandTime (property field)
	GetLastCommandTime() OptionalProperty
	// GetCommandTimeArray returns CommandTimeArray (property field)
	GetCommandTimeArray() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsLightingOutput is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsLightingOutput()
	// CreateBuilder creates a LightingOutputBuilder
	CreateLightingOutputBuilder() LightingOutputBuilder
}

// _LightingOutput is the data-structure of this message
type _LightingOutput struct {
	ObjectIdentifier               ReadableProperty
	ObjectName                     ReadableProperty
	ObjectType                     ReadableProperty
	PresentValue                   WritableProperty
	TrackingValue                  ReadableProperty
	LightingCommand                WritableProperty
	InProgress                     ReadableProperty
	Description                    OptionalProperty
	StatusFlags                    ReadableProperty
	Reliability                    OptionalProperty
	OutOfService                   ReadableProperty
	BlinkWarnEnable                ReadableProperty
	EgressTime                     ReadableProperty
	EgressActive                   ReadableProperty
	DefaultFadeTime                ReadableProperty
	DefaultRampRate                ReadableProperty
	DefaultStepIncrement           ReadableProperty
	Transition                     OptionalProperty
	FeedbackValue                  OptionalProperty
	PriorityArray                  ReadableProperty
	RelinquishDefault              ReadableProperty
	Power                          OptionalProperty
	InstantaneousPower             OptionalProperty
	MinActualValue                 OptionalProperty
	MaxActualValue                 OptionalProperty
	LightingCommandDefaultPriority ReadableProperty
	COVIncrement                   OptionalProperty
	ReliabilityEvaluationInhibit   OptionalProperty
	PropertyList                   ReadableProperty
	CurrentCommandPriority         ReadableProperty
	ValueSource                    OptionalProperty
	ValueSourceArray               OptionalProperty
	LastCommandTime                OptionalProperty
	CommandTimeArray               OptionalProperty
	Tags                           OptionalProperty
	ProfileLocation                OptionalProperty
	ProfileName                    OptionalProperty
}

var _ LightingOutput = (*_LightingOutput)(nil)

// NewLightingOutput factory function for _LightingOutput
func NewLightingOutput(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue WritableProperty, trackingValue ReadableProperty, lightingCommand WritableProperty, inProgress ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, blinkWarnEnable ReadableProperty, egressTime ReadableProperty, egressActive ReadableProperty, defaultFadeTime ReadableProperty, defaultRampRate ReadableProperty, defaultStepIncrement ReadableProperty, transition OptionalProperty, feedbackValue OptionalProperty, priorityArray ReadableProperty, relinquishDefault ReadableProperty, power OptionalProperty, instantaneousPower OptionalProperty, minActualValue OptionalProperty, maxActualValue OptionalProperty, lightingCommandDefaultPriority ReadableProperty, cOVIncrement OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, currentCommandPriority ReadableProperty, valueSource OptionalProperty, valueSourceArray OptionalProperty, lastCommandTime OptionalProperty, commandTimeArray OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_LightingOutput {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for LightingOutput must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for LightingOutput must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for LightingOutput must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type WritableProperty for LightingOutput must not be nil")
	}
	if trackingValue == nil {
		panic("trackingValue of type ReadableProperty for LightingOutput must not be nil")
	}
	if lightingCommand == nil {
		panic("lightingCommand of type WritableProperty for LightingOutput must not be nil")
	}
	if inProgress == nil {
		panic("inProgress of type ReadableProperty for LightingOutput must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for LightingOutput must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for LightingOutput must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for LightingOutput must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for LightingOutput must not be nil")
	}
	if blinkWarnEnable == nil {
		panic("blinkWarnEnable of type ReadableProperty for LightingOutput must not be nil")
	}
	if egressTime == nil {
		panic("egressTime of type ReadableProperty for LightingOutput must not be nil")
	}
	if egressActive == nil {
		panic("egressActive of type ReadableProperty for LightingOutput must not be nil")
	}
	if defaultFadeTime == nil {
		panic("defaultFadeTime of type ReadableProperty for LightingOutput must not be nil")
	}
	if defaultRampRate == nil {
		panic("defaultRampRate of type ReadableProperty for LightingOutput must not be nil")
	}
	if defaultStepIncrement == nil {
		panic("defaultStepIncrement of type ReadableProperty for LightingOutput must not be nil")
	}
	if transition == nil {
		panic("transition of type OptionalProperty for LightingOutput must not be nil")
	}
	if feedbackValue == nil {
		panic("feedbackValue of type OptionalProperty for LightingOutput must not be nil")
	}
	if priorityArray == nil {
		panic("priorityArray of type ReadableProperty for LightingOutput must not be nil")
	}
	if relinquishDefault == nil {
		panic("relinquishDefault of type ReadableProperty for LightingOutput must not be nil")
	}
	if power == nil {
		panic("power of type OptionalProperty for LightingOutput must not be nil")
	}
	if instantaneousPower == nil {
		panic("instantaneousPower of type OptionalProperty for LightingOutput must not be nil")
	}
	if minActualValue == nil {
		panic("minActualValue of type OptionalProperty for LightingOutput must not be nil")
	}
	if maxActualValue == nil {
		panic("maxActualValue of type OptionalProperty for LightingOutput must not be nil")
	}
	if lightingCommandDefaultPriority == nil {
		panic("lightingCommandDefaultPriority of type ReadableProperty for LightingOutput must not be nil")
	}
	if cOVIncrement == nil {
		panic("cOVIncrement of type OptionalProperty for LightingOutput must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for LightingOutput must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for LightingOutput must not be nil")
	}
	if currentCommandPriority == nil {
		panic("currentCommandPriority of type ReadableProperty for LightingOutput must not be nil")
	}
	if valueSource == nil {
		panic("valueSource of type OptionalProperty for LightingOutput must not be nil")
	}
	if valueSourceArray == nil {
		panic("valueSourceArray of type OptionalProperty for LightingOutput must not be nil")
	}
	if lastCommandTime == nil {
		panic("lastCommandTime of type OptionalProperty for LightingOutput must not be nil")
	}
	if commandTimeArray == nil {
		panic("commandTimeArray of type OptionalProperty for LightingOutput must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for LightingOutput must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for LightingOutput must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for LightingOutput must not be nil")
	}
	return &_LightingOutput{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, PresentValue: presentValue, TrackingValue: trackingValue, LightingCommand: lightingCommand, InProgress: inProgress, Description: description, StatusFlags: statusFlags, Reliability: reliability, OutOfService: outOfService, BlinkWarnEnable: blinkWarnEnable, EgressTime: egressTime, EgressActive: egressActive, DefaultFadeTime: defaultFadeTime, DefaultRampRate: defaultRampRate, DefaultStepIncrement: defaultStepIncrement, Transition: transition, FeedbackValue: feedbackValue, PriorityArray: priorityArray, RelinquishDefault: relinquishDefault, Power: power, InstantaneousPower: instantaneousPower, MinActualValue: minActualValue, MaxActualValue: maxActualValue, LightingCommandDefaultPriority: lightingCommandDefaultPriority, COVIncrement: cOVIncrement, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, CurrentCommandPriority: currentCommandPriority, ValueSource: valueSource, ValueSourceArray: valueSourceArray, LastCommandTime: lastCommandTime, CommandTimeArray: commandTimeArray, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// LightingOutputBuilder is a builder for LightingOutput
type LightingOutputBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue WritableProperty, trackingValue ReadableProperty, lightingCommand WritableProperty, inProgress ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, blinkWarnEnable ReadableProperty, egressTime ReadableProperty, egressActive ReadableProperty, defaultFadeTime ReadableProperty, defaultRampRate ReadableProperty, defaultStepIncrement ReadableProperty, transition OptionalProperty, feedbackValue OptionalProperty, priorityArray ReadableProperty, relinquishDefault ReadableProperty, power OptionalProperty, instantaneousPower OptionalProperty, minActualValue OptionalProperty, maxActualValue OptionalProperty, lightingCommandDefaultPriority ReadableProperty, cOVIncrement OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, currentCommandPriority ReadableProperty, valueSource OptionalProperty, valueSourceArray OptionalProperty, lastCommandTime OptionalProperty, commandTimeArray OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LightingOutputBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) LightingOutputBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) LightingOutputBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) LightingOutputBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(WritableProperty) LightingOutputBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LightingOutputBuilder
	// WithTrackingValue adds TrackingValue (property field)
	WithTrackingValue(ReadableProperty) LightingOutputBuilder
	// WithTrackingValueBuilder adds TrackingValue (property field) which is build by the builder
	WithTrackingValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithLightingCommand adds LightingCommand (property field)
	WithLightingCommand(WritableProperty) LightingOutputBuilder
	// WithLightingCommandBuilder adds LightingCommand (property field) which is build by the builder
	WithLightingCommandBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LightingOutputBuilder
	// WithInProgress adds InProgress (property field)
	WithInProgress(ReadableProperty) LightingOutputBuilder
	// WithInProgressBuilder adds InProgress (property field) which is build by the builder
	WithInProgressBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) LightingOutputBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) LightingOutputBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) LightingOutputBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) LightingOutputBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithBlinkWarnEnable adds BlinkWarnEnable (property field)
	WithBlinkWarnEnable(ReadableProperty) LightingOutputBuilder
	// WithBlinkWarnEnableBuilder adds BlinkWarnEnable (property field) which is build by the builder
	WithBlinkWarnEnableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithEgressTime adds EgressTime (property field)
	WithEgressTime(ReadableProperty) LightingOutputBuilder
	// WithEgressTimeBuilder adds EgressTime (property field) which is build by the builder
	WithEgressTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithEgressActive adds EgressActive (property field)
	WithEgressActive(ReadableProperty) LightingOutputBuilder
	// WithEgressActiveBuilder adds EgressActive (property field) which is build by the builder
	WithEgressActiveBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithDefaultFadeTime adds DefaultFadeTime (property field)
	WithDefaultFadeTime(ReadableProperty) LightingOutputBuilder
	// WithDefaultFadeTimeBuilder adds DefaultFadeTime (property field) which is build by the builder
	WithDefaultFadeTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithDefaultRampRate adds DefaultRampRate (property field)
	WithDefaultRampRate(ReadableProperty) LightingOutputBuilder
	// WithDefaultRampRateBuilder adds DefaultRampRate (property field) which is build by the builder
	WithDefaultRampRateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithDefaultStepIncrement adds DefaultStepIncrement (property field)
	WithDefaultStepIncrement(ReadableProperty) LightingOutputBuilder
	// WithDefaultStepIncrementBuilder adds DefaultStepIncrement (property field) which is build by the builder
	WithDefaultStepIncrementBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithTransition adds Transition (property field)
	WithTransition(OptionalProperty) LightingOutputBuilder
	// WithTransitionBuilder adds Transition (property field) which is build by the builder
	WithTransitionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithFeedbackValue adds FeedbackValue (property field)
	WithFeedbackValue(OptionalProperty) LightingOutputBuilder
	// WithFeedbackValueBuilder adds FeedbackValue (property field) which is build by the builder
	WithFeedbackValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithPriorityArray adds PriorityArray (property field)
	WithPriorityArray(ReadableProperty) LightingOutputBuilder
	// WithPriorityArrayBuilder adds PriorityArray (property field) which is build by the builder
	WithPriorityArrayBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithRelinquishDefault adds RelinquishDefault (property field)
	WithRelinquishDefault(ReadableProperty) LightingOutputBuilder
	// WithRelinquishDefaultBuilder adds RelinquishDefault (property field) which is build by the builder
	WithRelinquishDefaultBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithPower adds Power (property field)
	WithPower(OptionalProperty) LightingOutputBuilder
	// WithPowerBuilder adds Power (property field) which is build by the builder
	WithPowerBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithInstantaneousPower adds InstantaneousPower (property field)
	WithInstantaneousPower(OptionalProperty) LightingOutputBuilder
	// WithInstantaneousPowerBuilder adds InstantaneousPower (property field) which is build by the builder
	WithInstantaneousPowerBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithMinActualValue adds MinActualValue (property field)
	WithMinActualValue(OptionalProperty) LightingOutputBuilder
	// WithMinActualValueBuilder adds MinActualValue (property field) which is build by the builder
	WithMinActualValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithMaxActualValue adds MaxActualValue (property field)
	WithMaxActualValue(OptionalProperty) LightingOutputBuilder
	// WithMaxActualValueBuilder adds MaxActualValue (property field) which is build by the builder
	WithMaxActualValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithLightingCommandDefaultPriority adds LightingCommandDefaultPriority (property field)
	WithLightingCommandDefaultPriority(ReadableProperty) LightingOutputBuilder
	// WithLightingCommandDefaultPriorityBuilder adds LightingCommandDefaultPriority (property field) which is build by the builder
	WithLightingCommandDefaultPriorityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithCOVIncrement adds COVIncrement (property field)
	WithCOVIncrement(OptionalProperty) LightingOutputBuilder
	// WithCOVIncrementBuilder adds COVIncrement (property field) which is build by the builder
	WithCOVIncrementBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) LightingOutputBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) LightingOutputBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithCurrentCommandPriority adds CurrentCommandPriority (property field)
	WithCurrentCommandPriority(ReadableProperty) LightingOutputBuilder
	// WithCurrentCommandPriorityBuilder adds CurrentCommandPriority (property field) which is build by the builder
	WithCurrentCommandPriorityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder
	// WithValueSource adds ValueSource (property field)
	WithValueSource(OptionalProperty) LightingOutputBuilder
	// WithValueSourceBuilder adds ValueSource (property field) which is build by the builder
	WithValueSourceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithValueSourceArray adds ValueSourceArray (property field)
	WithValueSourceArray(OptionalProperty) LightingOutputBuilder
	// WithValueSourceArrayBuilder adds ValueSourceArray (property field) which is build by the builder
	WithValueSourceArrayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithLastCommandTime adds LastCommandTime (property field)
	WithLastCommandTime(OptionalProperty) LightingOutputBuilder
	// WithLastCommandTimeBuilder adds LastCommandTime (property field) which is build by the builder
	WithLastCommandTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithCommandTimeArray adds CommandTimeArray (property field)
	WithCommandTimeArray(OptionalProperty) LightingOutputBuilder
	// WithCommandTimeArrayBuilder adds CommandTimeArray (property field) which is build by the builder
	WithCommandTimeArrayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) LightingOutputBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) LightingOutputBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) LightingOutputBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder
	// Build builds the LightingOutput or returns an error if something is wrong
	Build() (LightingOutput, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() LightingOutput
}

// NewLightingOutputBuilder() creates a LightingOutputBuilder
func NewLightingOutputBuilder() LightingOutputBuilder {
	return &_LightingOutputBuilder{_LightingOutput: new(_LightingOutput)}
}

type _LightingOutputBuilder struct {
	*_LightingOutput

	err *utils.MultiError
}

var _ (LightingOutputBuilder) = (*_LightingOutputBuilder)(nil)

func (b *_LightingOutputBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue WritableProperty, trackingValue ReadableProperty, lightingCommand WritableProperty, inProgress ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, blinkWarnEnable ReadableProperty, egressTime ReadableProperty, egressActive ReadableProperty, defaultFadeTime ReadableProperty, defaultRampRate ReadableProperty, defaultStepIncrement ReadableProperty, transition OptionalProperty, feedbackValue OptionalProperty, priorityArray ReadableProperty, relinquishDefault ReadableProperty, power OptionalProperty, instantaneousPower OptionalProperty, minActualValue OptionalProperty, maxActualValue OptionalProperty, lightingCommandDefaultPriority ReadableProperty, cOVIncrement OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, currentCommandPriority ReadableProperty, valueSource OptionalProperty, valueSourceArray OptionalProperty, lastCommandTime OptionalProperty, commandTimeArray OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LightingOutputBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithPresentValue(presentValue).WithTrackingValue(trackingValue).WithLightingCommand(lightingCommand).WithInProgress(inProgress).WithDescription(description).WithStatusFlags(statusFlags).WithReliability(reliability).WithOutOfService(outOfService).WithBlinkWarnEnable(blinkWarnEnable).WithEgressTime(egressTime).WithEgressActive(egressActive).WithDefaultFadeTime(defaultFadeTime).WithDefaultRampRate(defaultRampRate).WithDefaultStepIncrement(defaultStepIncrement).WithTransition(transition).WithFeedbackValue(feedbackValue).WithPriorityArray(priorityArray).WithRelinquishDefault(relinquishDefault).WithPower(power).WithInstantaneousPower(instantaneousPower).WithMinActualValue(minActualValue).WithMaxActualValue(maxActualValue).WithLightingCommandDefaultPriority(lightingCommandDefaultPriority).WithCOVIncrement(cOVIncrement).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithCurrentCommandPriority(currentCommandPriority).WithValueSource(valueSource).WithValueSourceArray(valueSourceArray).WithLastCommandTime(lastCommandTime).WithCommandTimeArray(commandTimeArray).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_LightingOutputBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) LightingOutputBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_LightingOutputBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithObjectName(objectName ReadableProperty) LightingOutputBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_LightingOutputBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithObjectType(objectType ReadableProperty) LightingOutputBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_LightingOutputBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithPresentValue(presentValue WritableProperty) LightingOutputBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_LightingOutputBuilder) WithPresentValueBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.PresentValue.CreateWritablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithTrackingValue(trackingValue ReadableProperty) LightingOutputBuilder {
	b.TrackingValue = trackingValue
	return b
}

func (b *_LightingOutputBuilder) WithTrackingValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.TrackingValue.CreateReadablePropertyBuilder())
	var err error
	b.TrackingValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithLightingCommand(lightingCommand WritableProperty) LightingOutputBuilder {
	b.LightingCommand = lightingCommand
	return b
}

func (b *_LightingOutputBuilder) WithLightingCommandBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.LightingCommand.CreateWritablePropertyBuilder())
	var err error
	b.LightingCommand, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithInProgress(inProgress ReadableProperty) LightingOutputBuilder {
	b.InProgress = inProgress
	return b
}

func (b *_LightingOutputBuilder) WithInProgressBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.InProgress.CreateReadablePropertyBuilder())
	var err error
	b.InProgress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithDescription(description OptionalProperty) LightingOutputBuilder {
	b.Description = description
	return b
}

func (b *_LightingOutputBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithStatusFlags(statusFlags ReadableProperty) LightingOutputBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_LightingOutputBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithReliability(reliability OptionalProperty) LightingOutputBuilder {
	b.Reliability = reliability
	return b
}

func (b *_LightingOutputBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithOutOfService(outOfService ReadableProperty) LightingOutputBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_LightingOutputBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithBlinkWarnEnable(blinkWarnEnable ReadableProperty) LightingOutputBuilder {
	b.BlinkWarnEnable = blinkWarnEnable
	return b
}

func (b *_LightingOutputBuilder) WithBlinkWarnEnableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.BlinkWarnEnable.CreateReadablePropertyBuilder())
	var err error
	b.BlinkWarnEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithEgressTime(egressTime ReadableProperty) LightingOutputBuilder {
	b.EgressTime = egressTime
	return b
}

func (b *_LightingOutputBuilder) WithEgressTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.EgressTime.CreateReadablePropertyBuilder())
	var err error
	b.EgressTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithEgressActive(egressActive ReadableProperty) LightingOutputBuilder {
	b.EgressActive = egressActive
	return b
}

func (b *_LightingOutputBuilder) WithEgressActiveBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.EgressActive.CreateReadablePropertyBuilder())
	var err error
	b.EgressActive, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithDefaultFadeTime(defaultFadeTime ReadableProperty) LightingOutputBuilder {
	b.DefaultFadeTime = defaultFadeTime
	return b
}

func (b *_LightingOutputBuilder) WithDefaultFadeTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.DefaultFadeTime.CreateReadablePropertyBuilder())
	var err error
	b.DefaultFadeTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithDefaultRampRate(defaultRampRate ReadableProperty) LightingOutputBuilder {
	b.DefaultRampRate = defaultRampRate
	return b
}

func (b *_LightingOutputBuilder) WithDefaultRampRateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.DefaultRampRate.CreateReadablePropertyBuilder())
	var err error
	b.DefaultRampRate, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithDefaultStepIncrement(defaultStepIncrement ReadableProperty) LightingOutputBuilder {
	b.DefaultStepIncrement = defaultStepIncrement
	return b
}

func (b *_LightingOutputBuilder) WithDefaultStepIncrementBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.DefaultStepIncrement.CreateReadablePropertyBuilder())
	var err error
	b.DefaultStepIncrement, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithTransition(transition OptionalProperty) LightingOutputBuilder {
	b.Transition = transition
	return b
}

func (b *_LightingOutputBuilder) WithTransitionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.Transition.CreateOptionalPropertyBuilder())
	var err error
	b.Transition, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithFeedbackValue(feedbackValue OptionalProperty) LightingOutputBuilder {
	b.FeedbackValue = feedbackValue
	return b
}

func (b *_LightingOutputBuilder) WithFeedbackValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.FeedbackValue.CreateOptionalPropertyBuilder())
	var err error
	b.FeedbackValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithPriorityArray(priorityArray ReadableProperty) LightingOutputBuilder {
	b.PriorityArray = priorityArray
	return b
}

func (b *_LightingOutputBuilder) WithPriorityArrayBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.PriorityArray.CreateReadablePropertyBuilder())
	var err error
	b.PriorityArray, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithRelinquishDefault(relinquishDefault ReadableProperty) LightingOutputBuilder {
	b.RelinquishDefault = relinquishDefault
	return b
}

func (b *_LightingOutputBuilder) WithRelinquishDefaultBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.RelinquishDefault.CreateReadablePropertyBuilder())
	var err error
	b.RelinquishDefault, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithPower(power OptionalProperty) LightingOutputBuilder {
	b.Power = power
	return b
}

func (b *_LightingOutputBuilder) WithPowerBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.Power.CreateOptionalPropertyBuilder())
	var err error
	b.Power, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithInstantaneousPower(instantaneousPower OptionalProperty) LightingOutputBuilder {
	b.InstantaneousPower = instantaneousPower
	return b
}

func (b *_LightingOutputBuilder) WithInstantaneousPowerBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.InstantaneousPower.CreateOptionalPropertyBuilder())
	var err error
	b.InstantaneousPower, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithMinActualValue(minActualValue OptionalProperty) LightingOutputBuilder {
	b.MinActualValue = minActualValue
	return b
}

func (b *_LightingOutputBuilder) WithMinActualValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.MinActualValue.CreateOptionalPropertyBuilder())
	var err error
	b.MinActualValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithMaxActualValue(maxActualValue OptionalProperty) LightingOutputBuilder {
	b.MaxActualValue = maxActualValue
	return b
}

func (b *_LightingOutputBuilder) WithMaxActualValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.MaxActualValue.CreateOptionalPropertyBuilder())
	var err error
	b.MaxActualValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithLightingCommandDefaultPriority(lightingCommandDefaultPriority ReadableProperty) LightingOutputBuilder {
	b.LightingCommandDefaultPriority = lightingCommandDefaultPriority
	return b
}

func (b *_LightingOutputBuilder) WithLightingCommandDefaultPriorityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.LightingCommandDefaultPriority.CreateReadablePropertyBuilder())
	var err error
	b.LightingCommandDefaultPriority, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithCOVIncrement(cOVIncrement OptionalProperty) LightingOutputBuilder {
	b.COVIncrement = cOVIncrement
	return b
}

func (b *_LightingOutputBuilder) WithCOVIncrementBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.COVIncrement.CreateOptionalPropertyBuilder())
	var err error
	b.COVIncrement, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) LightingOutputBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_LightingOutputBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithPropertyList(propertyList ReadableProperty) LightingOutputBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_LightingOutputBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithCurrentCommandPriority(currentCommandPriority ReadableProperty) LightingOutputBuilder {
	b.CurrentCommandPriority = currentCommandPriority
	return b
}

func (b *_LightingOutputBuilder) WithCurrentCommandPriorityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.CurrentCommandPriority.CreateReadablePropertyBuilder())
	var err error
	b.CurrentCommandPriority, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithValueSource(valueSource OptionalProperty) LightingOutputBuilder {
	b.ValueSource = valueSource
	return b
}

func (b *_LightingOutputBuilder) WithValueSourceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ValueSource.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSource, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithValueSourceArray(valueSourceArray OptionalProperty) LightingOutputBuilder {
	b.ValueSourceArray = valueSourceArray
	return b
}

func (b *_LightingOutputBuilder) WithValueSourceArrayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ValueSourceArray.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSourceArray, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithLastCommandTime(lastCommandTime OptionalProperty) LightingOutputBuilder {
	b.LastCommandTime = lastCommandTime
	return b
}

func (b *_LightingOutputBuilder) WithLastCommandTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.LastCommandTime.CreateOptionalPropertyBuilder())
	var err error
	b.LastCommandTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithCommandTimeArray(commandTimeArray OptionalProperty) LightingOutputBuilder {
	b.CommandTimeArray = commandTimeArray
	return b
}

func (b *_LightingOutputBuilder) WithCommandTimeArrayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.CommandTimeArray.CreateOptionalPropertyBuilder())
	var err error
	b.CommandTimeArray, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithTags(tags OptionalProperty) LightingOutputBuilder {
	b.Tags = tags
	return b
}

func (b *_LightingOutputBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithProfileLocation(profileLocation OptionalProperty) LightingOutputBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_LightingOutputBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) WithProfileName(profileName OptionalProperty) LightingOutputBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_LightingOutputBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LightingOutputBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LightingOutputBuilder) Build() (LightingOutput, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.TrackingValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'trackingValue' not set"))
	}
	if b.LightingCommand == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lightingCommand' not set"))
	}
	if b.InProgress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'inProgress' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.BlinkWarnEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'blinkWarnEnable' not set"))
	}
	if b.EgressTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'egressTime' not set"))
	}
	if b.EgressActive == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'egressActive' not set"))
	}
	if b.DefaultFadeTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'defaultFadeTime' not set"))
	}
	if b.DefaultRampRate == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'defaultRampRate' not set"))
	}
	if b.DefaultStepIncrement == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'defaultStepIncrement' not set"))
	}
	if b.Transition == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'transition' not set"))
	}
	if b.FeedbackValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'feedbackValue' not set"))
	}
	if b.PriorityArray == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'priorityArray' not set"))
	}
	if b.RelinquishDefault == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'relinquishDefault' not set"))
	}
	if b.Power == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'power' not set"))
	}
	if b.InstantaneousPower == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'instantaneousPower' not set"))
	}
	if b.MinActualValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'minActualValue' not set"))
	}
	if b.MaxActualValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxActualValue' not set"))
	}
	if b.LightingCommandDefaultPriority == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lightingCommandDefaultPriority' not set"))
	}
	if b.COVIncrement == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'cOVIncrement' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.CurrentCommandPriority == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'currentCommandPriority' not set"))
	}
	if b.ValueSource == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSource' not set"))
	}
	if b.ValueSourceArray == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSourceArray' not set"))
	}
	if b.LastCommandTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastCommandTime' not set"))
	}
	if b.CommandTimeArray == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'commandTimeArray' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._LightingOutput.deepCopy(), nil
}

func (b *_LightingOutputBuilder) MustBuild() LightingOutput {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_LightingOutputBuilder) DeepCopy() any {
	_copy := b.CreateLightingOutputBuilder().(*_LightingOutputBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateLightingOutputBuilder creates a LightingOutputBuilder
func (b *_LightingOutput) CreateLightingOutputBuilder() LightingOutputBuilder {
	if b == nil {
		return NewLightingOutputBuilder()
	}
	return &_LightingOutputBuilder{_LightingOutput: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_LightingOutput) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_LightingOutput) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_LightingOutput) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_LightingOutput) GetPresentValue() WritableProperty {
	return m.PresentValue
}

func (m *_LightingOutput) GetTrackingValue() ReadableProperty {
	return m.TrackingValue
}

func (m *_LightingOutput) GetLightingCommand() WritableProperty {
	return m.LightingCommand
}

func (m *_LightingOutput) GetInProgress() ReadableProperty {
	return m.InProgress
}

func (m *_LightingOutput) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_LightingOutput) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_LightingOutput) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_LightingOutput) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_LightingOutput) GetBlinkWarnEnable() ReadableProperty {
	return m.BlinkWarnEnable
}

func (m *_LightingOutput) GetEgressTime() ReadableProperty {
	return m.EgressTime
}

func (m *_LightingOutput) GetEgressActive() ReadableProperty {
	return m.EgressActive
}

func (m *_LightingOutput) GetDefaultFadeTime() ReadableProperty {
	return m.DefaultFadeTime
}

func (m *_LightingOutput) GetDefaultRampRate() ReadableProperty {
	return m.DefaultRampRate
}

func (m *_LightingOutput) GetDefaultStepIncrement() ReadableProperty {
	return m.DefaultStepIncrement
}

func (m *_LightingOutput) GetTransition() OptionalProperty {
	return m.Transition
}

func (m *_LightingOutput) GetFeedbackValue() OptionalProperty {
	return m.FeedbackValue
}

func (m *_LightingOutput) GetPriorityArray() ReadableProperty {
	return m.PriorityArray
}

func (m *_LightingOutput) GetRelinquishDefault() ReadableProperty {
	return m.RelinquishDefault
}

func (m *_LightingOutput) GetPower() OptionalProperty {
	return m.Power
}

func (m *_LightingOutput) GetInstantaneousPower() OptionalProperty {
	return m.InstantaneousPower
}

func (m *_LightingOutput) GetMinActualValue() OptionalProperty {
	return m.MinActualValue
}

func (m *_LightingOutput) GetMaxActualValue() OptionalProperty {
	return m.MaxActualValue
}

func (m *_LightingOutput) GetLightingCommandDefaultPriority() ReadableProperty {
	return m.LightingCommandDefaultPriority
}

func (m *_LightingOutput) GetCOVIncrement() OptionalProperty {
	return m.COVIncrement
}

func (m *_LightingOutput) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_LightingOutput) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_LightingOutput) GetCurrentCommandPriority() ReadableProperty {
	return m.CurrentCommandPriority
}

func (m *_LightingOutput) GetValueSource() OptionalProperty {
	return m.ValueSource
}

func (m *_LightingOutput) GetValueSourceArray() OptionalProperty {
	return m.ValueSourceArray
}

func (m *_LightingOutput) GetLastCommandTime() OptionalProperty {
	return m.LastCommandTime
}

func (m *_LightingOutput) GetCommandTimeArray() OptionalProperty {
	return m.CommandTimeArray
}

func (m *_LightingOutput) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_LightingOutput) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_LightingOutput) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastLightingOutput(structType any) LightingOutput {
	if casted, ok := structType.(LightingOutput); ok {
		return casted
	}
	if casted, ok := structType.(*LightingOutput); ok {
		return *casted
	}
	return nil
}

func (m *_LightingOutput) GetTypeName() string {
	return "LightingOutput"
}

func (m *_LightingOutput) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (trackingValue)
	lengthInBits += m.TrackingValue.GetLengthInBits(ctx)

	// Simple field (lightingCommand)
	lengthInBits += m.LightingCommand.GetLengthInBits(ctx)

	// Simple field (inProgress)
	lengthInBits += m.InProgress.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (blinkWarnEnable)
	lengthInBits += m.BlinkWarnEnable.GetLengthInBits(ctx)

	// Simple field (egressTime)
	lengthInBits += m.EgressTime.GetLengthInBits(ctx)

	// Simple field (egressActive)
	lengthInBits += m.EgressActive.GetLengthInBits(ctx)

	// Simple field (defaultFadeTime)
	lengthInBits += m.DefaultFadeTime.GetLengthInBits(ctx)

	// Simple field (defaultRampRate)
	lengthInBits += m.DefaultRampRate.GetLengthInBits(ctx)

	// Simple field (defaultStepIncrement)
	lengthInBits += m.DefaultStepIncrement.GetLengthInBits(ctx)

	// Simple field (transition)
	lengthInBits += m.Transition.GetLengthInBits(ctx)

	// Simple field (feedbackValue)
	lengthInBits += m.FeedbackValue.GetLengthInBits(ctx)

	// Simple field (priorityArray)
	lengthInBits += m.PriorityArray.GetLengthInBits(ctx)

	// Simple field (relinquishDefault)
	lengthInBits += m.RelinquishDefault.GetLengthInBits(ctx)

	// Simple field (power)
	lengthInBits += m.Power.GetLengthInBits(ctx)

	// Simple field (instantaneousPower)
	lengthInBits += m.InstantaneousPower.GetLengthInBits(ctx)

	// Simple field (minActualValue)
	lengthInBits += m.MinActualValue.GetLengthInBits(ctx)

	// Simple field (maxActualValue)
	lengthInBits += m.MaxActualValue.GetLengthInBits(ctx)

	// Simple field (lightingCommandDefaultPriority)
	lengthInBits += m.LightingCommandDefaultPriority.GetLengthInBits(ctx)

	// Simple field (cOVIncrement)
	lengthInBits += m.COVIncrement.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (currentCommandPriority)
	lengthInBits += m.CurrentCommandPriority.GetLengthInBits(ctx)

	// Simple field (valueSource)
	lengthInBits += m.ValueSource.GetLengthInBits(ctx)

	// Simple field (valueSourceArray)
	lengthInBits += m.ValueSourceArray.GetLengthInBits(ctx)

	// Simple field (lastCommandTime)
	lengthInBits += m.LastCommandTime.GetLengthInBits(ctx)

	// Simple field (commandTimeArray)
	lengthInBits += m.CommandTimeArray.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_LightingOutput) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func LightingOutputParse(ctx context.Context, theBytes []byte) (LightingOutput, error) {
	return LightingOutputParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func LightingOutputParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (LightingOutput, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (LightingOutput, error) {
		return LightingOutputParseWithBuffer(ctx, readBuffer)
	}
}

func LightingOutputParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (LightingOutput, error) {
	v, err := (&_LightingOutput{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_LightingOutput) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__lightingOutput LightingOutput, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("LightingOutput"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for LightingOutput")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	presentValue, err := ReadSimpleField[WritableProperty](ctx, "presentValue", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	trackingValue, err := ReadSimpleField[ReadableProperty](ctx, "trackingValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'trackingValue' field"))
	}
	m.TrackingValue = trackingValue

	lightingCommand, err := ReadSimpleField[WritableProperty](ctx, "lightingCommand", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetLightingCommand")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lightingCommand' field"))
	}
	m.LightingCommand = lightingCommand

	inProgress, err := ReadSimpleField[ReadableProperty](ctx, "inProgress", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLightingInProgress")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'inProgress' field"))
	}
	m.InProgress = inProgress

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	blinkWarnEnable, err := ReadSimpleField[ReadableProperty](ctx, "blinkWarnEnable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'blinkWarnEnable' field"))
	}
	m.BlinkWarnEnable = blinkWarnEnable

	egressTime, err := ReadSimpleField[ReadableProperty](ctx, "egressTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'egressTime' field"))
	}
	m.EgressTime = egressTime

	egressActive, err := ReadSimpleField[ReadableProperty](ctx, "egressActive", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'egressActive' field"))
	}
	m.EgressActive = egressActive

	defaultFadeTime, err := ReadSimpleField[ReadableProperty](ctx, "defaultFadeTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'defaultFadeTime' field"))
	}
	m.DefaultFadeTime = defaultFadeTime

	defaultRampRate, err := ReadSimpleField[ReadableProperty](ctx, "defaultRampRate", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'defaultRampRate' field"))
	}
	m.DefaultRampRate = defaultRampRate

	defaultStepIncrement, err := ReadSimpleField[ReadableProperty](ctx, "defaultStepIncrement", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'defaultStepIncrement' field"))
	}
	m.DefaultStepIncrement = defaultStepIncrement

	transition, err := ReadSimpleField[OptionalProperty](ctx, "transition", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLightingTransition")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'transition' field"))
	}
	m.Transition = transition

	feedbackValue, err := ReadSimpleField[OptionalProperty](ctx, "feedbackValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'feedbackValue' field"))
	}
	m.FeedbackValue = feedbackValue

	priorityArray, err := ReadSimpleField[ReadableProperty](ctx, "priorityArray", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetPriorityArray")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'priorityArray' field"))
	}
	m.PriorityArray = priorityArray

	relinquishDefault, err := ReadSimpleField[ReadableProperty](ctx, "relinquishDefault", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'relinquishDefault' field"))
	}
	m.RelinquishDefault = relinquishDefault

	power, err := ReadSimpleField[OptionalProperty](ctx, "power", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'power' field"))
	}
	m.Power = power

	instantaneousPower, err := ReadSimpleField[OptionalProperty](ctx, "instantaneousPower", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'instantaneousPower' field"))
	}
	m.InstantaneousPower = instantaneousPower

	minActualValue, err := ReadSimpleField[OptionalProperty](ctx, "minActualValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'minActualValue' field"))
	}
	m.MinActualValue = minActualValue

	maxActualValue, err := ReadSimpleField[OptionalProperty](ctx, "maxActualValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxActualValue' field"))
	}
	m.MaxActualValue = maxActualValue

	lightingCommandDefaultPriority, err := ReadSimpleField[ReadableProperty](ctx, "lightingCommandDefaultPriority", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lightingCommandDefaultPriority' field"))
	}
	m.LightingCommandDefaultPriority = lightingCommandDefaultPriority

	cOVIncrement, err := ReadSimpleField[OptionalProperty](ctx, "cOVIncrement", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'cOVIncrement' field"))
	}
	m.COVIncrement = cOVIncrement

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	currentCommandPriority, err := ReadSimpleField[ReadableProperty](ctx, "currentCommandPriority", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetOptionalUnsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'currentCommandPriority' field"))
	}
	m.CurrentCommandPriority = currentCommandPriority

	valueSource, err := ReadSimpleField[OptionalProperty](ctx, "valueSource", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSource' field"))
	}
	m.ValueSource = valueSource

	valueSourceArray, err := ReadSimpleField[OptionalProperty](ctx, "valueSourceArray", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[16] of BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSourceArray' field"))
	}
	m.ValueSourceArray = valueSourceArray

	lastCommandTime, err := ReadSimpleField[OptionalProperty](ctx, "lastCommandTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastCommandTime' field"))
	}
	m.LastCommandTime = lastCommandTime

	commandTimeArray, err := ReadSimpleField[OptionalProperty](ctx, "commandTimeArray", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[16] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'commandTimeArray' field"))
	}
	m.CommandTimeArray = commandTimeArray

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("LightingOutput"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for LightingOutput")
	}

	return m, nil
}

func (m *_LightingOutput) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_LightingOutput) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("LightingOutput"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for LightingOutput")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "trackingValue", m.GetTrackingValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'trackingValue' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "lightingCommand", m.GetLightingCommand(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lightingCommand' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "inProgress", m.GetInProgress(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'inProgress' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "blinkWarnEnable", m.GetBlinkWarnEnable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'blinkWarnEnable' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "egressTime", m.GetEgressTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'egressTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "egressActive", m.GetEgressActive(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'egressActive' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "defaultFadeTime", m.GetDefaultFadeTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'defaultFadeTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "defaultRampRate", m.GetDefaultRampRate(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'defaultRampRate' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "defaultStepIncrement", m.GetDefaultStepIncrement(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'defaultStepIncrement' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "transition", m.GetTransition(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'transition' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "feedbackValue", m.GetFeedbackValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'feedbackValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "priorityArray", m.GetPriorityArray(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'priorityArray' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "relinquishDefault", m.GetRelinquishDefault(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'relinquishDefault' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "power", m.GetPower(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'power' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "instantaneousPower", m.GetInstantaneousPower(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'instantaneousPower' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "minActualValue", m.GetMinActualValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'minActualValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxActualValue", m.GetMaxActualValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxActualValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "lightingCommandDefaultPriority", m.GetLightingCommandDefaultPriority(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lightingCommandDefaultPriority' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "cOVIncrement", m.GetCOVIncrement(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'cOVIncrement' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "currentCommandPriority", m.GetCurrentCommandPriority(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'currentCommandPriority' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSource", m.GetValueSource(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSource' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSourceArray", m.GetValueSourceArray(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSourceArray' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastCommandTime", m.GetLastCommandTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastCommandTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "commandTimeArray", m.GetCommandTimeArray(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'commandTimeArray' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("LightingOutput"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for LightingOutput")
	}
	return nil
}

func (m *_LightingOutput) IsLightingOutput() {}

func (m *_LightingOutput) DeepCopy() any {
	return m.deepCopy()
}

func (m *_LightingOutput) deepCopy() *_LightingOutput {
	if m == nil {
		return nil
	}
	_LightingOutputCopy := &_LightingOutput{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.PresentValue.DeepCopy().(WritableProperty),
		m.TrackingValue.DeepCopy().(ReadableProperty),
		m.LightingCommand.DeepCopy().(WritableProperty),
		m.InProgress.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.BlinkWarnEnable.DeepCopy().(ReadableProperty),
		m.EgressTime.DeepCopy().(ReadableProperty),
		m.EgressActive.DeepCopy().(ReadableProperty),
		m.DefaultFadeTime.DeepCopy().(ReadableProperty),
		m.DefaultRampRate.DeepCopy().(ReadableProperty),
		m.DefaultStepIncrement.DeepCopy().(ReadableProperty),
		m.Transition.DeepCopy().(OptionalProperty),
		m.FeedbackValue.DeepCopy().(OptionalProperty),
		m.PriorityArray.DeepCopy().(ReadableProperty),
		m.RelinquishDefault.DeepCopy().(ReadableProperty),
		m.Power.DeepCopy().(OptionalProperty),
		m.InstantaneousPower.DeepCopy().(OptionalProperty),
		m.MinActualValue.DeepCopy().(OptionalProperty),
		m.MaxActualValue.DeepCopy().(OptionalProperty),
		m.LightingCommandDefaultPriority.DeepCopy().(ReadableProperty),
		m.COVIncrement.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.CurrentCommandPriority.DeepCopy().(ReadableProperty),
		m.ValueSource.DeepCopy().(OptionalProperty),
		m.ValueSourceArray.DeepCopy().(OptionalProperty),
		m.LastCommandTime.DeepCopy().(OptionalProperty),
		m.CommandTimeArray.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _LightingOutputCopy
}

func (m *_LightingOutput) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
