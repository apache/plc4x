/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// NotificationForwarder is the corresponding interface of NotificationForwarder
type NotificationForwarder interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetRecipientList returns RecipientList (property field)
	GetRecipientList() ReadableProperty
	// GetSubscribedRecipients returns SubscribedRecipients (property field)
	GetSubscribedRecipients() WritableProperty
	// GetProcessIdentifierFilter returns ProcessIdentifierFilter (property field)
	GetProcessIdentifierFilter() ReadableProperty
	// GetPortFilter returns PortFilter (property field)
	GetPortFilter() OptionalProperty
	// GetLocalForwardingOnly returns LocalForwardingOnly (property field)
	GetLocalForwardingOnly() ReadableProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsNotificationForwarder is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsNotificationForwarder()
	// CreateBuilder creates a NotificationForwarderBuilder
	CreateNotificationForwarderBuilder() NotificationForwarderBuilder
}

// _NotificationForwarder is the data-structure of this message
type _NotificationForwarder struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	StatusFlags                  ReadableProperty
	Reliability                  ReadableProperty
	OutOfService                 ReadableProperty
	RecipientList                ReadableProperty
	SubscribedRecipients         WritableProperty
	ProcessIdentifierFilter      ReadableProperty
	PortFilter                   OptionalProperty
	LocalForwardingOnly          ReadableProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ NotificationForwarder = (*_NotificationForwarder)(nil)

// NewNotificationForwarder factory function for _NotificationForwarder
func NewNotificationForwarder(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, recipientList ReadableProperty, subscribedRecipients WritableProperty, processIdentifierFilter ReadableProperty, portFilter OptionalProperty, localForwardingOnly ReadableProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_NotificationForwarder {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for NotificationForwarder must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if recipientList == nil {
		panic("recipientList of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if subscribedRecipients == nil {
		panic("subscribedRecipients of type WritableProperty for NotificationForwarder must not be nil")
	}
	if processIdentifierFilter == nil {
		panic("processIdentifierFilter of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if portFilter == nil {
		panic("portFilter of type OptionalProperty for NotificationForwarder must not be nil")
	}
	if localForwardingOnly == nil {
		panic("localForwardingOnly of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for NotificationForwarder must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for NotificationForwarder must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for NotificationForwarder must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for NotificationForwarder must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for NotificationForwarder must not be nil")
	}
	return &_NotificationForwarder{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, StatusFlags: statusFlags, Reliability: reliability, OutOfService: outOfService, RecipientList: recipientList, SubscribedRecipients: subscribedRecipients, ProcessIdentifierFilter: processIdentifierFilter, PortFilter: portFilter, LocalForwardingOnly: localForwardingOnly, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// NotificationForwarderBuilder is a builder for NotificationForwarder
type NotificationForwarderBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, recipientList ReadableProperty, subscribedRecipients WritableProperty, processIdentifierFilter ReadableProperty, portFilter OptionalProperty, localForwardingOnly ReadableProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NotificationForwarderBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) NotificationForwarderBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) NotificationForwarderBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) NotificationForwarderBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) NotificationForwarderBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) NotificationForwarderBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) NotificationForwarderBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) NotificationForwarderBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithRecipientList adds RecipientList (property field)
	WithRecipientList(ReadableProperty) NotificationForwarderBuilder
	// WithRecipientListBuilder adds RecipientList (property field) which is build by the builder
	WithRecipientListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithSubscribedRecipients adds SubscribedRecipients (property field)
	WithSubscribedRecipients(WritableProperty) NotificationForwarderBuilder
	// WithSubscribedRecipientsBuilder adds SubscribedRecipients (property field) which is build by the builder
	WithSubscribedRecipientsBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) NotificationForwarderBuilder
	// WithProcessIdentifierFilter adds ProcessIdentifierFilter (property field)
	WithProcessIdentifierFilter(ReadableProperty) NotificationForwarderBuilder
	// WithProcessIdentifierFilterBuilder adds ProcessIdentifierFilter (property field) which is build by the builder
	WithProcessIdentifierFilterBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithPortFilter adds PortFilter (property field)
	WithPortFilter(OptionalProperty) NotificationForwarderBuilder
	// WithPortFilterBuilder adds PortFilter (property field) which is build by the builder
	WithPortFilterBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder
	// WithLocalForwardingOnly adds LocalForwardingOnly (property field)
	WithLocalForwardingOnly(ReadableProperty) NotificationForwarderBuilder
	// WithLocalForwardingOnlyBuilder adds LocalForwardingOnly (property field) which is build by the builder
	WithLocalForwardingOnlyBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) NotificationForwarderBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) NotificationForwarderBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) NotificationForwarderBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) NotificationForwarderBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) NotificationForwarderBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder
	// Build builds the NotificationForwarder or returns an error if something is wrong
	Build() (NotificationForwarder, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() NotificationForwarder
}

// NewNotificationForwarderBuilder() creates a NotificationForwarderBuilder
func NewNotificationForwarderBuilder() NotificationForwarderBuilder {
	return &_NotificationForwarderBuilder{_NotificationForwarder: new(_NotificationForwarder)}
}

type _NotificationForwarderBuilder struct {
	*_NotificationForwarder

	err *utils.MultiError
}

var _ (NotificationForwarderBuilder) = (*_NotificationForwarderBuilder)(nil)

func (b *_NotificationForwarderBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, recipientList ReadableProperty, subscribedRecipients WritableProperty, processIdentifierFilter ReadableProperty, portFilter OptionalProperty, localForwardingOnly ReadableProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NotificationForwarderBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithStatusFlags(statusFlags).WithReliability(reliability).WithOutOfService(outOfService).WithRecipientList(recipientList).WithSubscribedRecipients(subscribedRecipients).WithProcessIdentifierFilter(processIdentifierFilter).WithPortFilter(portFilter).WithLocalForwardingOnly(localForwardingOnly).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_NotificationForwarderBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) NotificationForwarderBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_NotificationForwarderBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithObjectName(objectName ReadableProperty) NotificationForwarderBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_NotificationForwarderBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithObjectType(objectType ReadableProperty) NotificationForwarderBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_NotificationForwarderBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithDescription(description OptionalProperty) NotificationForwarderBuilder {
	b.Description = description
	return b
}

func (b *_NotificationForwarderBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithStatusFlags(statusFlags ReadableProperty) NotificationForwarderBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_NotificationForwarderBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithReliability(reliability ReadableProperty) NotificationForwarderBuilder {
	b.Reliability = reliability
	return b
}

func (b *_NotificationForwarderBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithOutOfService(outOfService ReadableProperty) NotificationForwarderBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_NotificationForwarderBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithRecipientList(recipientList ReadableProperty) NotificationForwarderBuilder {
	b.RecipientList = recipientList
	return b
}

func (b *_NotificationForwarderBuilder) WithRecipientListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.RecipientList.CreateReadablePropertyBuilder())
	var err error
	b.RecipientList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithSubscribedRecipients(subscribedRecipients WritableProperty) NotificationForwarderBuilder {
	b.SubscribedRecipients = subscribedRecipients
	return b
}

func (b *_NotificationForwarderBuilder) WithSubscribedRecipientsBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.SubscribedRecipients.CreateWritablePropertyBuilder())
	var err error
	b.SubscribedRecipients, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithProcessIdentifierFilter(processIdentifierFilter ReadableProperty) NotificationForwarderBuilder {
	b.ProcessIdentifierFilter = processIdentifierFilter
	return b
}

func (b *_NotificationForwarderBuilder) WithProcessIdentifierFilterBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ProcessIdentifierFilter.CreateReadablePropertyBuilder())
	var err error
	b.ProcessIdentifierFilter, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithPortFilter(portFilter OptionalProperty) NotificationForwarderBuilder {
	b.PortFilter = portFilter
	return b
}

func (b *_NotificationForwarderBuilder) WithPortFilterBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.PortFilter.CreateOptionalPropertyBuilder())
	var err error
	b.PortFilter, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithLocalForwardingOnly(localForwardingOnly ReadableProperty) NotificationForwarderBuilder {
	b.LocalForwardingOnly = localForwardingOnly
	return b
}

func (b *_NotificationForwarderBuilder) WithLocalForwardingOnlyBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.LocalForwardingOnly.CreateReadablePropertyBuilder())
	var err error
	b.LocalForwardingOnly, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) NotificationForwarderBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_NotificationForwarderBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithPropertyList(propertyList ReadableProperty) NotificationForwarderBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_NotificationForwarderBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithTags(tags OptionalProperty) NotificationForwarderBuilder {
	b.Tags = tags
	return b
}

func (b *_NotificationForwarderBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithProfileLocation(profileLocation OptionalProperty) NotificationForwarderBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_NotificationForwarderBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) WithProfileName(profileName OptionalProperty) NotificationForwarderBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_NotificationForwarderBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationForwarderBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationForwarderBuilder) Build() (NotificationForwarder, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.RecipientList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'recipientList' not set"))
	}
	if b.SubscribedRecipients == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'subscribedRecipients' not set"))
	}
	if b.ProcessIdentifierFilter == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'processIdentifierFilter' not set"))
	}
	if b.PortFilter == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'portFilter' not set"))
	}
	if b.LocalForwardingOnly == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'localForwardingOnly' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._NotificationForwarder.deepCopy(), nil
}

func (b *_NotificationForwarderBuilder) MustBuild() NotificationForwarder {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_NotificationForwarderBuilder) DeepCopy() any {
	_copy := b.CreateNotificationForwarderBuilder().(*_NotificationForwarderBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateNotificationForwarderBuilder creates a NotificationForwarderBuilder
func (b *_NotificationForwarder) CreateNotificationForwarderBuilder() NotificationForwarderBuilder {
	if b == nil {
		return NewNotificationForwarderBuilder()
	}
	return &_NotificationForwarderBuilder{_NotificationForwarder: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_NotificationForwarder) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_NotificationForwarder) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_NotificationForwarder) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_NotificationForwarder) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_NotificationForwarder) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_NotificationForwarder) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_NotificationForwarder) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_NotificationForwarder) GetRecipientList() ReadableProperty {
	return m.RecipientList
}

func (m *_NotificationForwarder) GetSubscribedRecipients() WritableProperty {
	return m.SubscribedRecipients
}

func (m *_NotificationForwarder) GetProcessIdentifierFilter() ReadableProperty {
	return m.ProcessIdentifierFilter
}

func (m *_NotificationForwarder) GetPortFilter() OptionalProperty {
	return m.PortFilter
}

func (m *_NotificationForwarder) GetLocalForwardingOnly() ReadableProperty {
	return m.LocalForwardingOnly
}

func (m *_NotificationForwarder) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_NotificationForwarder) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_NotificationForwarder) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_NotificationForwarder) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_NotificationForwarder) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastNotificationForwarder(structType any) NotificationForwarder {
	if casted, ok := structType.(NotificationForwarder); ok {
		return casted
	}
	if casted, ok := structType.(*NotificationForwarder); ok {
		return *casted
	}
	return nil
}

func (m *_NotificationForwarder) GetTypeName() string {
	return "NotificationForwarder"
}

func (m *_NotificationForwarder) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (recipientList)
	lengthInBits += m.RecipientList.GetLengthInBits(ctx)

	// Simple field (subscribedRecipients)
	lengthInBits += m.SubscribedRecipients.GetLengthInBits(ctx)

	// Simple field (processIdentifierFilter)
	lengthInBits += m.ProcessIdentifierFilter.GetLengthInBits(ctx)

	// Simple field (portFilter)
	lengthInBits += m.PortFilter.GetLengthInBits(ctx)

	// Simple field (localForwardingOnly)
	lengthInBits += m.LocalForwardingOnly.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_NotificationForwarder) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func NotificationForwarderParse(ctx context.Context, theBytes []byte) (NotificationForwarder, error) {
	return NotificationForwarderParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func NotificationForwarderParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (NotificationForwarder, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (NotificationForwarder, error) {
		return NotificationForwarderParseWithBuffer(ctx, readBuffer)
	}
}

func NotificationForwarderParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (NotificationForwarder, error) {
	v, err := (&_NotificationForwarder{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_NotificationForwarder) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__notificationForwarder NotificationForwarder, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("NotificationForwarder"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for NotificationForwarder")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	recipientList, err := ReadSimpleField[ReadableProperty](ctx, "recipientList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDestination")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'recipientList' field"))
	}
	m.RecipientList = recipientList

	subscribedRecipients, err := ReadSimpleField[WritableProperty](ctx, "subscribedRecipients", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetEventNotificationSubscription")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subscribedRecipients' field"))
	}
	m.SubscribedRecipients = subscribedRecipients

	processIdentifierFilter, err := ReadSimpleField[ReadableProperty](ctx, "processIdentifierFilter", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetProcessIdSelection")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'processIdentifierFilter' field"))
	}
	m.ProcessIdentifierFilter = processIdentifierFilter

	portFilter, err := ReadSimpleField[OptionalProperty](ctx, "portFilter", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPortPermission")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'portFilter' field"))
	}
	m.PortFilter = portFilter

	localForwardingOnly, err := ReadSimpleField[ReadableProperty](ctx, "localForwardingOnly", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'localForwardingOnly' field"))
	}
	m.LocalForwardingOnly = localForwardingOnly

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("NotificationForwarder"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for NotificationForwarder")
	}

	return m, nil
}

func (m *_NotificationForwarder) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_NotificationForwarder) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("NotificationForwarder"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for NotificationForwarder")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "recipientList", m.GetRecipientList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'recipientList' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "subscribedRecipients", m.GetSubscribedRecipients(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'subscribedRecipients' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "processIdentifierFilter", m.GetProcessIdentifierFilter(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'processIdentifierFilter' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "portFilter", m.GetPortFilter(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'portFilter' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "localForwardingOnly", m.GetLocalForwardingOnly(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'localForwardingOnly' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("NotificationForwarder"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for NotificationForwarder")
	}
	return nil
}

func (m *_NotificationForwarder) IsNotificationForwarder() {}

func (m *_NotificationForwarder) DeepCopy() any {
	return m.deepCopy()
}

func (m *_NotificationForwarder) deepCopy() *_NotificationForwarder {
	if m == nil {
		return nil
	}
	_NotificationForwarderCopy := &_NotificationForwarder{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.RecipientList.DeepCopy().(ReadableProperty),
		m.SubscribedRecipients.DeepCopy().(WritableProperty),
		m.ProcessIdentifierFilter.DeepCopy().(ReadableProperty),
		m.PortFilter.DeepCopy().(OptionalProperty),
		m.LocalForwardingOnly.DeepCopy().(ReadableProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _NotificationForwarderCopy
}

func (m *_NotificationForwarder) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
