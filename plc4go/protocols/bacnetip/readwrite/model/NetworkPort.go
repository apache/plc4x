/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// NetworkPort is the corresponding interface of NetworkPort
type NetworkPort interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetNetworkType returns NetworkType (property field)
	GetNetworkType() ReadableProperty
	// GetProtocolLevel returns ProtocolLevel (property field)
	GetProtocolLevel() ReadableProperty
	// GetReferencePort returns ReferencePort (property field)
	GetReferencePort() OptionalProperty
	// GetNetworkNumber returns NetworkNumber (property field)
	GetNetworkNumber() ReadableProperty
	// GetNetworkNumberQuality returns NetworkNumberQuality (property field)
	GetNetworkNumberQuality() ReadableProperty
	// GetChangesPending returns ChangesPending (property field)
	GetChangesPending() ReadableProperty
	// GetCommand returns Command (property field)
	GetCommand() OptionalProperty
	// GetMACAddress returns MACAddress (property field)
	GetMACAddress() OptionalProperty
	// GetAPDULength returns APDULength (property field)
	GetAPDULength() ReadableProperty
	// GetLinkSpeed returns LinkSpeed (property field)
	GetLinkSpeed() ReadableProperty
	// GetLinkSpeeds returns LinkSpeeds (property field)
	GetLinkSpeeds() OptionalProperty
	// GetLinkSpeedAutonegotiate returns LinkSpeedAutonegotiate (property field)
	GetLinkSpeedAutonegotiate() OptionalProperty
	// GetNetworkInterfaceName returns NetworkInterfaceName (property field)
	GetNetworkInterfaceName() OptionalProperty
	// GetBACnetIPMode returns BACnetIPMode (property field)
	GetBACnetIPMode() OptionalProperty
	// GetIPAddress returns IPAddress (property field)
	GetIPAddress() OptionalProperty
	// GetBACnetIPUDPPort returns BACnetIPUDPPort (property field)
	GetBACnetIPUDPPort() OptionalProperty
	// GetIPSubnetMask returns IPSubnetMask (property field)
	GetIPSubnetMask() OptionalProperty
	// GetIPDefaultGateway returns IPDefaultGateway (property field)
	GetIPDefaultGateway() OptionalProperty
	// GetBACnetIPMulticastAddress returns BACnetIPMulticastAddress (property field)
	GetBACnetIPMulticastAddress() OptionalProperty
	// GetIPDNSServer returns IPDNSServer (property field)
	GetIPDNSServer() OptionalProperty
	// GetIPDHCPEnable returns IPDHCPEnable (property field)
	GetIPDHCPEnable() OptionalProperty
	// GetIPDHCPLeaseTime returns IPDHCPLeaseTime (property field)
	GetIPDHCPLeaseTime() OptionalProperty
	// GetIPDHCPLeaseTimeRemaining returns IPDHCPLeaseTimeRemaining (property field)
	GetIPDHCPLeaseTimeRemaining() OptionalProperty
	// GetIPDHCPServer returns IPDHCPServer (property field)
	GetIPDHCPServer() OptionalProperty
	// GetBACnetIPNATTraversal returns BACnetIPNATTraversal (property field)
	GetBACnetIPNATTraversal() OptionalProperty
	// GetBACnetIPGlobalAddress returns BACnetIPGlobalAddress (property field)
	GetBACnetIPGlobalAddress() OptionalProperty
	// GetBBMDBroadcastDistributionTable returns BBMDBroadcastDistributionTable (property field)
	GetBBMDBroadcastDistributionTable() OptionalProperty
	// GetBBMDAcceptFDRegistrations returns BBMDAcceptFDRegistrations (property field)
	GetBBMDAcceptFDRegistrations() OptionalProperty
	// GetBBMDForeignDeviceTable returns BBMDForeignDeviceTable (property field)
	GetBBMDForeignDeviceTable() OptionalProperty
	// GetFDBBMDAddress returns FDBBMDAddress (property field)
	GetFDBBMDAddress() OptionalProperty
	// GetFDSubscriptionLifetime returns FDSubscriptionLifetime (property field)
	GetFDSubscriptionLifetime() OptionalProperty
	// GetBACnetIPv6Mode returns BACnetIPv6Mode (property field)
	GetBACnetIPv6Mode() OptionalProperty
	// GetIPv6Address returns IPv6Address (property field)
	GetIPv6Address() OptionalProperty
	// GetIPv6PrefixLength returns IPv6PrefixLength (property field)
	GetIPv6PrefixLength() OptionalProperty
	// GetBACnetIPv6UDPPort returns BACnetIPv6UDPPort (property field)
	GetBACnetIPv6UDPPort() OptionalProperty
	// GetIPv6DefaultGateway returns IPv6DefaultGateway (property field)
	GetIPv6DefaultGateway() OptionalProperty
	// GetBACnetIPv6MulticastAddress returns BACnetIPv6MulticastAddress (property field)
	GetBACnetIPv6MulticastAddress() OptionalProperty
	// GetIPv6DNSServer returns IPv6DNSServer (property field)
	GetIPv6DNSServer() OptionalProperty
	// GetIPv6AutoAddressingEnable returns IPv6AutoAddressingEnable (property field)
	GetIPv6AutoAddressingEnable() OptionalProperty
	// GetIPv6DHCPLeaseTime returns IPv6DHCPLeaseTime (property field)
	GetIPv6DHCPLeaseTime() OptionalProperty
	// GetIPv6DHCPLeaseTimeRemaining returns IPv6DHCPLeaseTimeRemaining (property field)
	GetIPv6DHCPLeaseTimeRemaining() OptionalProperty
	// GetIPv6DHCPServer returns IPv6DHCPServer (property field)
	GetIPv6DHCPServer() OptionalProperty
	// GetIPv6ZoneIndex returns IPv6ZoneIndex (property field)
	GetIPv6ZoneIndex() OptionalProperty
	// GetMaxMaster returns MaxMaster (property field)
	GetMaxMaster() OptionalProperty
	// GetMaxInfoFrames returns MaxInfoFrames (property field)
	GetMaxInfoFrames() OptionalProperty
	// GetSlaveProxyEnable returns SlaveProxyEnable (property field)
	GetSlaveProxyEnable() OptionalProperty
	// GetManualSlaveAddressBinding returns ManualSlaveAddressBinding (property field)
	GetManualSlaveAddressBinding() OptionalProperty
	// GetAutoSlaveDiscovery returns AutoSlaveDiscovery (property field)
	GetAutoSlaveDiscovery() OptionalProperty
	// GetSlaveAddressBinding returns SlaveAddressBinding (property field)
	GetSlaveAddressBinding() OptionalProperty
	// GetVirtualMACAddressTable returns VirtualMACAddressTable (property field)
	GetVirtualMACAddressTable() OptionalProperty
	// GetRoutingTable returns RoutingTable (property field)
	GetRoutingTable() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsNetworkPort is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsNetworkPort()
	// CreateBuilder creates a NetworkPortBuilder
	CreateNetworkPortBuilder() NetworkPortBuilder
}

// _NetworkPort is the data-structure of this message
type _NetworkPort struct {
	ObjectIdentifier               ReadableProperty
	ObjectName                     ReadableProperty
	ObjectType                     ReadableProperty
	Description                    OptionalProperty
	StatusFlags                    ReadableProperty
	Reliability                    ReadableProperty
	OutOfService                   ReadableProperty
	NetworkType                    ReadableProperty
	ProtocolLevel                  ReadableProperty
	ReferencePort                  OptionalProperty
	NetworkNumber                  ReadableProperty
	NetworkNumberQuality           ReadableProperty
	ChangesPending                 ReadableProperty
	Command                        OptionalProperty
	MACAddress                     OptionalProperty
	APDULength                     ReadableProperty
	LinkSpeed                      ReadableProperty
	LinkSpeeds                     OptionalProperty
	LinkSpeedAutonegotiate         OptionalProperty
	NetworkInterfaceName           OptionalProperty
	BACnetIPMode                   OptionalProperty
	IPAddress                      OptionalProperty
	BACnetIPUDPPort                OptionalProperty
	IPSubnetMask                   OptionalProperty
	IPDefaultGateway               OptionalProperty
	BACnetIPMulticastAddress       OptionalProperty
	IPDNSServer                    OptionalProperty
	IPDHCPEnable                   OptionalProperty
	IPDHCPLeaseTime                OptionalProperty
	IPDHCPLeaseTimeRemaining       OptionalProperty
	IPDHCPServer                   OptionalProperty
	BACnetIPNATTraversal           OptionalProperty
	BACnetIPGlobalAddress          OptionalProperty
	BBMDBroadcastDistributionTable OptionalProperty
	BBMDAcceptFDRegistrations      OptionalProperty
	BBMDForeignDeviceTable         OptionalProperty
	FDBBMDAddress                  OptionalProperty
	FDSubscriptionLifetime         OptionalProperty
	BACnetIPv6Mode                 OptionalProperty
	IPv6Address                    OptionalProperty
	IPv6PrefixLength               OptionalProperty
	BACnetIPv6UDPPort              OptionalProperty
	IPv6DefaultGateway             OptionalProperty
	BACnetIPv6MulticastAddress     OptionalProperty
	IPv6DNSServer                  OptionalProperty
	IPv6AutoAddressingEnable       OptionalProperty
	IPv6DHCPLeaseTime              OptionalProperty
	IPv6DHCPLeaseTimeRemaining     OptionalProperty
	IPv6DHCPServer                 OptionalProperty
	IPv6ZoneIndex                  OptionalProperty
	MaxMaster                      OptionalProperty
	MaxInfoFrames                  OptionalProperty
	SlaveProxyEnable               OptionalProperty
	ManualSlaveAddressBinding      OptionalProperty
	AutoSlaveDiscovery             OptionalProperty
	SlaveAddressBinding            OptionalProperty
	VirtualMACAddressTable         OptionalProperty
	RoutingTable                   OptionalProperty
	EventDetectionEnable           OptionalProperty
	NotificationClass              OptionalProperty
	EventEnable                    OptionalProperty
	AckedTransitions               OptionalProperty
	NotifyType                     OptionalProperty
	EventTimeStamps                OptionalProperty
	EventMessageTexts              OptionalProperty
	EventMessageTextsConfig        OptionalProperty
	EventState                     OptionalProperty
	ReliabilityEvaluationInhibit   OptionalProperty
	PropertyList                   ReadableProperty
	Tags                           OptionalProperty
	ProfileLocation                OptionalProperty
	ProfileName                    OptionalProperty
}

var _ NetworkPort = (*_NetworkPort)(nil)

// NewNetworkPort factory function for _NetworkPort
func NewNetworkPort(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, networkType ReadableProperty, protocolLevel ReadableProperty, referencePort OptionalProperty, networkNumber ReadableProperty, networkNumberQuality ReadableProperty, changesPending ReadableProperty, command OptionalProperty, mACAddress OptionalProperty, aPDULength ReadableProperty, linkSpeed ReadableProperty, linkSpeeds OptionalProperty, linkSpeedAutonegotiate OptionalProperty, networkInterfaceName OptionalProperty, bACnetIPMode OptionalProperty, iPAddress OptionalProperty, bACnetIPUDPPort OptionalProperty, iPSubnetMask OptionalProperty, iPDefaultGateway OptionalProperty, bACnetIPMulticastAddress OptionalProperty, iPDNSServer OptionalProperty, iPDHCPEnable OptionalProperty, iPDHCPLeaseTime OptionalProperty, iPDHCPLeaseTimeRemaining OptionalProperty, iPDHCPServer OptionalProperty, bACnetIPNATTraversal OptionalProperty, bACnetIPGlobalAddress OptionalProperty, bBMDBroadcastDistributionTable OptionalProperty, bBMDAcceptFDRegistrations OptionalProperty, bBMDForeignDeviceTable OptionalProperty, fDBBMDAddress OptionalProperty, fDSubscriptionLifetime OptionalProperty, bACnetIPv6Mode OptionalProperty, iPv6Address OptionalProperty, iPv6PrefixLength OptionalProperty, bACnetIPv6UDPPort OptionalProperty, iPv6DefaultGateway OptionalProperty, bACnetIPv6MulticastAddress OptionalProperty, iPv6DNSServer OptionalProperty, iPv6AutoAddressingEnable OptionalProperty, iPv6DHCPLeaseTime OptionalProperty, iPv6DHCPLeaseTimeRemaining OptionalProperty, iPv6DHCPServer OptionalProperty, iPv6ZoneIndex OptionalProperty, maxMaster OptionalProperty, maxInfoFrames OptionalProperty, slaveProxyEnable OptionalProperty, manualSlaveAddressBinding OptionalProperty, autoSlaveDiscovery OptionalProperty, slaveAddressBinding OptionalProperty, virtualMACAddressTable OptionalProperty, routingTable OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventState OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_NetworkPort {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for NetworkPort must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for NetworkPort must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for NetworkPort must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for NetworkPort must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for NetworkPort must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for NetworkPort must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for NetworkPort must not be nil")
	}
	if networkType == nil {
		panic("networkType of type ReadableProperty for NetworkPort must not be nil")
	}
	if protocolLevel == nil {
		panic("protocolLevel of type ReadableProperty for NetworkPort must not be nil")
	}
	if referencePort == nil {
		panic("referencePort of type OptionalProperty for NetworkPort must not be nil")
	}
	if networkNumber == nil {
		panic("networkNumber of type ReadableProperty for NetworkPort must not be nil")
	}
	if networkNumberQuality == nil {
		panic("networkNumberQuality of type ReadableProperty for NetworkPort must not be nil")
	}
	if changesPending == nil {
		panic("changesPending of type ReadableProperty for NetworkPort must not be nil")
	}
	if command == nil {
		panic("command of type OptionalProperty for NetworkPort must not be nil")
	}
	if mACAddress == nil {
		panic("mACAddress of type OptionalProperty for NetworkPort must not be nil")
	}
	if aPDULength == nil {
		panic("aPDULength of type ReadableProperty for NetworkPort must not be nil")
	}
	if linkSpeed == nil {
		panic("linkSpeed of type ReadableProperty for NetworkPort must not be nil")
	}
	if linkSpeeds == nil {
		panic("linkSpeeds of type OptionalProperty for NetworkPort must not be nil")
	}
	if linkSpeedAutonegotiate == nil {
		panic("linkSpeedAutonegotiate of type OptionalProperty for NetworkPort must not be nil")
	}
	if networkInterfaceName == nil {
		panic("networkInterfaceName of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPMode == nil {
		panic("bACnetIPMode of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPAddress == nil {
		panic("iPAddress of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPUDPPort == nil {
		panic("bACnetIPUDPPort of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPSubnetMask == nil {
		panic("iPSubnetMask of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPDefaultGateway == nil {
		panic("iPDefaultGateway of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPMulticastAddress == nil {
		panic("bACnetIPMulticastAddress of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPDNSServer == nil {
		panic("iPDNSServer of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPDHCPEnable == nil {
		panic("iPDHCPEnable of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPDHCPLeaseTime == nil {
		panic("iPDHCPLeaseTime of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPDHCPLeaseTimeRemaining == nil {
		panic("iPDHCPLeaseTimeRemaining of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPDHCPServer == nil {
		panic("iPDHCPServer of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPNATTraversal == nil {
		panic("bACnetIPNATTraversal of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPGlobalAddress == nil {
		panic("bACnetIPGlobalAddress of type OptionalProperty for NetworkPort must not be nil")
	}
	if bBMDBroadcastDistributionTable == nil {
		panic("bBMDBroadcastDistributionTable of type OptionalProperty for NetworkPort must not be nil")
	}
	if bBMDAcceptFDRegistrations == nil {
		panic("bBMDAcceptFDRegistrations of type OptionalProperty for NetworkPort must not be nil")
	}
	if bBMDForeignDeviceTable == nil {
		panic("bBMDForeignDeviceTable of type OptionalProperty for NetworkPort must not be nil")
	}
	if fDBBMDAddress == nil {
		panic("fDBBMDAddress of type OptionalProperty for NetworkPort must not be nil")
	}
	if fDSubscriptionLifetime == nil {
		panic("fDSubscriptionLifetime of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPv6Mode == nil {
		panic("bACnetIPv6Mode of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6Address == nil {
		panic("iPv6Address of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6PrefixLength == nil {
		panic("iPv6PrefixLength of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPv6UDPPort == nil {
		panic("bACnetIPv6UDPPort of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6DefaultGateway == nil {
		panic("iPv6DefaultGateway of type OptionalProperty for NetworkPort must not be nil")
	}
	if bACnetIPv6MulticastAddress == nil {
		panic("bACnetIPv6MulticastAddress of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6DNSServer == nil {
		panic("iPv6DNSServer of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6AutoAddressingEnable == nil {
		panic("iPv6AutoAddressingEnable of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6DHCPLeaseTime == nil {
		panic("iPv6DHCPLeaseTime of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6DHCPLeaseTimeRemaining == nil {
		panic("iPv6DHCPLeaseTimeRemaining of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6DHCPServer == nil {
		panic("iPv6DHCPServer of type OptionalProperty for NetworkPort must not be nil")
	}
	if iPv6ZoneIndex == nil {
		panic("iPv6ZoneIndex of type OptionalProperty for NetworkPort must not be nil")
	}
	if maxMaster == nil {
		panic("maxMaster of type OptionalProperty for NetworkPort must not be nil")
	}
	if maxInfoFrames == nil {
		panic("maxInfoFrames of type OptionalProperty for NetworkPort must not be nil")
	}
	if slaveProxyEnable == nil {
		panic("slaveProxyEnable of type OptionalProperty for NetworkPort must not be nil")
	}
	if manualSlaveAddressBinding == nil {
		panic("manualSlaveAddressBinding of type OptionalProperty for NetworkPort must not be nil")
	}
	if autoSlaveDiscovery == nil {
		panic("autoSlaveDiscovery of type OptionalProperty for NetworkPort must not be nil")
	}
	if slaveAddressBinding == nil {
		panic("slaveAddressBinding of type OptionalProperty for NetworkPort must not be nil")
	}
	if virtualMACAddressTable == nil {
		panic("virtualMACAddressTable of type OptionalProperty for NetworkPort must not be nil")
	}
	if routingTable == nil {
		panic("routingTable of type OptionalProperty for NetworkPort must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for NetworkPort must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for NetworkPort must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for NetworkPort must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for NetworkPort must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for NetworkPort must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for NetworkPort must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for NetworkPort must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for NetworkPort must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for NetworkPort must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for NetworkPort must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for NetworkPort must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for NetworkPort must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for NetworkPort must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for NetworkPort must not be nil")
	}
	return &_NetworkPort{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, StatusFlags: statusFlags, Reliability: reliability, OutOfService: outOfService, NetworkType: networkType, ProtocolLevel: protocolLevel, ReferencePort: referencePort, NetworkNumber: networkNumber, NetworkNumberQuality: networkNumberQuality, ChangesPending: changesPending, Command: command, MACAddress: mACAddress, APDULength: aPDULength, LinkSpeed: linkSpeed, LinkSpeeds: linkSpeeds, LinkSpeedAutonegotiate: linkSpeedAutonegotiate, NetworkInterfaceName: networkInterfaceName, BACnetIPMode: bACnetIPMode, IPAddress: iPAddress, BACnetIPUDPPort: bACnetIPUDPPort, IPSubnetMask: iPSubnetMask, IPDefaultGateway: iPDefaultGateway, BACnetIPMulticastAddress: bACnetIPMulticastAddress, IPDNSServer: iPDNSServer, IPDHCPEnable: iPDHCPEnable, IPDHCPLeaseTime: iPDHCPLeaseTime, IPDHCPLeaseTimeRemaining: iPDHCPLeaseTimeRemaining, IPDHCPServer: iPDHCPServer, BACnetIPNATTraversal: bACnetIPNATTraversal, BACnetIPGlobalAddress: bACnetIPGlobalAddress, BBMDBroadcastDistributionTable: bBMDBroadcastDistributionTable, BBMDAcceptFDRegistrations: bBMDAcceptFDRegistrations, BBMDForeignDeviceTable: bBMDForeignDeviceTable, FDBBMDAddress: fDBBMDAddress, FDSubscriptionLifetime: fDSubscriptionLifetime, BACnetIPv6Mode: bACnetIPv6Mode, IPv6Address: iPv6Address, IPv6PrefixLength: iPv6PrefixLength, BACnetIPv6UDPPort: bACnetIPv6UDPPort, IPv6DefaultGateway: iPv6DefaultGateway, BACnetIPv6MulticastAddress: bACnetIPv6MulticastAddress, IPv6DNSServer: iPv6DNSServer, IPv6AutoAddressingEnable: iPv6AutoAddressingEnable, IPv6DHCPLeaseTime: iPv6DHCPLeaseTime, IPv6DHCPLeaseTimeRemaining: iPv6DHCPLeaseTimeRemaining, IPv6DHCPServer: iPv6DHCPServer, IPv6ZoneIndex: iPv6ZoneIndex, MaxMaster: maxMaster, MaxInfoFrames: maxInfoFrames, SlaveProxyEnable: slaveProxyEnable, ManualSlaveAddressBinding: manualSlaveAddressBinding, AutoSlaveDiscovery: autoSlaveDiscovery, SlaveAddressBinding: slaveAddressBinding, VirtualMACAddressTable: virtualMACAddressTable, RoutingTable: routingTable, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventState: eventState, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// NetworkPortBuilder is a builder for NetworkPort
type NetworkPortBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, networkType ReadableProperty, protocolLevel ReadableProperty, referencePort OptionalProperty, networkNumber ReadableProperty, networkNumberQuality ReadableProperty, changesPending ReadableProperty, command OptionalProperty, mACAddress OptionalProperty, aPDULength ReadableProperty, linkSpeed ReadableProperty, linkSpeeds OptionalProperty, linkSpeedAutonegotiate OptionalProperty, networkInterfaceName OptionalProperty, bACnetIPMode OptionalProperty, iPAddress OptionalProperty, bACnetIPUDPPort OptionalProperty, iPSubnetMask OptionalProperty, iPDefaultGateway OptionalProperty, bACnetIPMulticastAddress OptionalProperty, iPDNSServer OptionalProperty, iPDHCPEnable OptionalProperty, iPDHCPLeaseTime OptionalProperty, iPDHCPLeaseTimeRemaining OptionalProperty, iPDHCPServer OptionalProperty, bACnetIPNATTraversal OptionalProperty, bACnetIPGlobalAddress OptionalProperty, bBMDBroadcastDistributionTable OptionalProperty, bBMDAcceptFDRegistrations OptionalProperty, bBMDForeignDeviceTable OptionalProperty, fDBBMDAddress OptionalProperty, fDSubscriptionLifetime OptionalProperty, bACnetIPv6Mode OptionalProperty, iPv6Address OptionalProperty, iPv6PrefixLength OptionalProperty, bACnetIPv6UDPPort OptionalProperty, iPv6DefaultGateway OptionalProperty, bACnetIPv6MulticastAddress OptionalProperty, iPv6DNSServer OptionalProperty, iPv6AutoAddressingEnable OptionalProperty, iPv6DHCPLeaseTime OptionalProperty, iPv6DHCPLeaseTimeRemaining OptionalProperty, iPv6DHCPServer OptionalProperty, iPv6ZoneIndex OptionalProperty, maxMaster OptionalProperty, maxInfoFrames OptionalProperty, slaveProxyEnable OptionalProperty, manualSlaveAddressBinding OptionalProperty, autoSlaveDiscovery OptionalProperty, slaveAddressBinding OptionalProperty, virtualMACAddressTable OptionalProperty, routingTable OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventState OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NetworkPortBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) NetworkPortBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) NetworkPortBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) NetworkPortBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) NetworkPortBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) NetworkPortBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) NetworkPortBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) NetworkPortBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithNetworkType adds NetworkType (property field)
	WithNetworkType(ReadableProperty) NetworkPortBuilder
	// WithNetworkTypeBuilder adds NetworkType (property field) which is build by the builder
	WithNetworkTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithProtocolLevel adds ProtocolLevel (property field)
	WithProtocolLevel(ReadableProperty) NetworkPortBuilder
	// WithProtocolLevelBuilder adds ProtocolLevel (property field) which is build by the builder
	WithProtocolLevelBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithReferencePort adds ReferencePort (property field)
	WithReferencePort(OptionalProperty) NetworkPortBuilder
	// WithReferencePortBuilder adds ReferencePort (property field) which is build by the builder
	WithReferencePortBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithNetworkNumber adds NetworkNumber (property field)
	WithNetworkNumber(ReadableProperty) NetworkPortBuilder
	// WithNetworkNumberBuilder adds NetworkNumber (property field) which is build by the builder
	WithNetworkNumberBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithNetworkNumberQuality adds NetworkNumberQuality (property field)
	WithNetworkNumberQuality(ReadableProperty) NetworkPortBuilder
	// WithNetworkNumberQualityBuilder adds NetworkNumberQuality (property field) which is build by the builder
	WithNetworkNumberQualityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithChangesPending adds ChangesPending (property field)
	WithChangesPending(ReadableProperty) NetworkPortBuilder
	// WithChangesPendingBuilder adds ChangesPending (property field) which is build by the builder
	WithChangesPendingBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithCommand adds Command (property field)
	WithCommand(OptionalProperty) NetworkPortBuilder
	// WithCommandBuilder adds Command (property field) which is build by the builder
	WithCommandBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithMACAddress adds MACAddress (property field)
	WithMACAddress(OptionalProperty) NetworkPortBuilder
	// WithMACAddressBuilder adds MACAddress (property field) which is build by the builder
	WithMACAddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithAPDULength adds APDULength (property field)
	WithAPDULength(ReadableProperty) NetworkPortBuilder
	// WithAPDULengthBuilder adds APDULength (property field) which is build by the builder
	WithAPDULengthBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithLinkSpeed adds LinkSpeed (property field)
	WithLinkSpeed(ReadableProperty) NetworkPortBuilder
	// WithLinkSpeedBuilder adds LinkSpeed (property field) which is build by the builder
	WithLinkSpeedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithLinkSpeeds adds LinkSpeeds (property field)
	WithLinkSpeeds(OptionalProperty) NetworkPortBuilder
	// WithLinkSpeedsBuilder adds LinkSpeeds (property field) which is build by the builder
	WithLinkSpeedsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithLinkSpeedAutonegotiate adds LinkSpeedAutonegotiate (property field)
	WithLinkSpeedAutonegotiate(OptionalProperty) NetworkPortBuilder
	// WithLinkSpeedAutonegotiateBuilder adds LinkSpeedAutonegotiate (property field) which is build by the builder
	WithLinkSpeedAutonegotiateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithNetworkInterfaceName adds NetworkInterfaceName (property field)
	WithNetworkInterfaceName(OptionalProperty) NetworkPortBuilder
	// WithNetworkInterfaceNameBuilder adds NetworkInterfaceName (property field) which is build by the builder
	WithNetworkInterfaceNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPMode adds BACnetIPMode (property field)
	WithBACnetIPMode(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPModeBuilder adds BACnetIPMode (property field) which is build by the builder
	WithBACnetIPModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPAddress adds IPAddress (property field)
	WithIPAddress(OptionalProperty) NetworkPortBuilder
	// WithIPAddressBuilder adds IPAddress (property field) which is build by the builder
	WithIPAddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPUDPPort adds BACnetIPUDPPort (property field)
	WithBACnetIPUDPPort(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPUDPPortBuilder adds BACnetIPUDPPort (property field) which is build by the builder
	WithBACnetIPUDPPortBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPSubnetMask adds IPSubnetMask (property field)
	WithIPSubnetMask(OptionalProperty) NetworkPortBuilder
	// WithIPSubnetMaskBuilder adds IPSubnetMask (property field) which is build by the builder
	WithIPSubnetMaskBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPDefaultGateway adds IPDefaultGateway (property field)
	WithIPDefaultGateway(OptionalProperty) NetworkPortBuilder
	// WithIPDefaultGatewayBuilder adds IPDefaultGateway (property field) which is build by the builder
	WithIPDefaultGatewayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPMulticastAddress adds BACnetIPMulticastAddress (property field)
	WithBACnetIPMulticastAddress(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPMulticastAddressBuilder adds BACnetIPMulticastAddress (property field) which is build by the builder
	WithBACnetIPMulticastAddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPDNSServer adds IPDNSServer (property field)
	WithIPDNSServer(OptionalProperty) NetworkPortBuilder
	// WithIPDNSServerBuilder adds IPDNSServer (property field) which is build by the builder
	WithIPDNSServerBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPDHCPEnable adds IPDHCPEnable (property field)
	WithIPDHCPEnable(OptionalProperty) NetworkPortBuilder
	// WithIPDHCPEnableBuilder adds IPDHCPEnable (property field) which is build by the builder
	WithIPDHCPEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPDHCPLeaseTime adds IPDHCPLeaseTime (property field)
	WithIPDHCPLeaseTime(OptionalProperty) NetworkPortBuilder
	// WithIPDHCPLeaseTimeBuilder adds IPDHCPLeaseTime (property field) which is build by the builder
	WithIPDHCPLeaseTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPDHCPLeaseTimeRemaining adds IPDHCPLeaseTimeRemaining (property field)
	WithIPDHCPLeaseTimeRemaining(OptionalProperty) NetworkPortBuilder
	// WithIPDHCPLeaseTimeRemainingBuilder adds IPDHCPLeaseTimeRemaining (property field) which is build by the builder
	WithIPDHCPLeaseTimeRemainingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPDHCPServer adds IPDHCPServer (property field)
	WithIPDHCPServer(OptionalProperty) NetworkPortBuilder
	// WithIPDHCPServerBuilder adds IPDHCPServer (property field) which is build by the builder
	WithIPDHCPServerBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPNATTraversal adds BACnetIPNATTraversal (property field)
	WithBACnetIPNATTraversal(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPNATTraversalBuilder adds BACnetIPNATTraversal (property field) which is build by the builder
	WithBACnetIPNATTraversalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPGlobalAddress adds BACnetIPGlobalAddress (property field)
	WithBACnetIPGlobalAddress(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPGlobalAddressBuilder adds BACnetIPGlobalAddress (property field) which is build by the builder
	WithBACnetIPGlobalAddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBBMDBroadcastDistributionTable adds BBMDBroadcastDistributionTable (property field)
	WithBBMDBroadcastDistributionTable(OptionalProperty) NetworkPortBuilder
	// WithBBMDBroadcastDistributionTableBuilder adds BBMDBroadcastDistributionTable (property field) which is build by the builder
	WithBBMDBroadcastDistributionTableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBBMDAcceptFDRegistrations adds BBMDAcceptFDRegistrations (property field)
	WithBBMDAcceptFDRegistrations(OptionalProperty) NetworkPortBuilder
	// WithBBMDAcceptFDRegistrationsBuilder adds BBMDAcceptFDRegistrations (property field) which is build by the builder
	WithBBMDAcceptFDRegistrationsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBBMDForeignDeviceTable adds BBMDForeignDeviceTable (property field)
	WithBBMDForeignDeviceTable(OptionalProperty) NetworkPortBuilder
	// WithBBMDForeignDeviceTableBuilder adds BBMDForeignDeviceTable (property field) which is build by the builder
	WithBBMDForeignDeviceTableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithFDBBMDAddress adds FDBBMDAddress (property field)
	WithFDBBMDAddress(OptionalProperty) NetworkPortBuilder
	// WithFDBBMDAddressBuilder adds FDBBMDAddress (property field) which is build by the builder
	WithFDBBMDAddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithFDSubscriptionLifetime adds FDSubscriptionLifetime (property field)
	WithFDSubscriptionLifetime(OptionalProperty) NetworkPortBuilder
	// WithFDSubscriptionLifetimeBuilder adds FDSubscriptionLifetime (property field) which is build by the builder
	WithFDSubscriptionLifetimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPv6Mode adds BACnetIPv6Mode (property field)
	WithBACnetIPv6Mode(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPv6ModeBuilder adds BACnetIPv6Mode (property field) which is build by the builder
	WithBACnetIPv6ModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6Address adds IPv6Address (property field)
	WithIPv6Address(OptionalProperty) NetworkPortBuilder
	// WithIPv6AddressBuilder adds IPv6Address (property field) which is build by the builder
	WithIPv6AddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6PrefixLength adds IPv6PrefixLength (property field)
	WithIPv6PrefixLength(OptionalProperty) NetworkPortBuilder
	// WithIPv6PrefixLengthBuilder adds IPv6PrefixLength (property field) which is build by the builder
	WithIPv6PrefixLengthBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPv6UDPPort adds BACnetIPv6UDPPort (property field)
	WithBACnetIPv6UDPPort(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPv6UDPPortBuilder adds BACnetIPv6UDPPort (property field) which is build by the builder
	WithBACnetIPv6UDPPortBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6DefaultGateway adds IPv6DefaultGateway (property field)
	WithIPv6DefaultGateway(OptionalProperty) NetworkPortBuilder
	// WithIPv6DefaultGatewayBuilder adds IPv6DefaultGateway (property field) which is build by the builder
	WithIPv6DefaultGatewayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithBACnetIPv6MulticastAddress adds BACnetIPv6MulticastAddress (property field)
	WithBACnetIPv6MulticastAddress(OptionalProperty) NetworkPortBuilder
	// WithBACnetIPv6MulticastAddressBuilder adds BACnetIPv6MulticastAddress (property field) which is build by the builder
	WithBACnetIPv6MulticastAddressBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6DNSServer adds IPv6DNSServer (property field)
	WithIPv6DNSServer(OptionalProperty) NetworkPortBuilder
	// WithIPv6DNSServerBuilder adds IPv6DNSServer (property field) which is build by the builder
	WithIPv6DNSServerBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6AutoAddressingEnable adds IPv6AutoAddressingEnable (property field)
	WithIPv6AutoAddressingEnable(OptionalProperty) NetworkPortBuilder
	// WithIPv6AutoAddressingEnableBuilder adds IPv6AutoAddressingEnable (property field) which is build by the builder
	WithIPv6AutoAddressingEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6DHCPLeaseTime adds IPv6DHCPLeaseTime (property field)
	WithIPv6DHCPLeaseTime(OptionalProperty) NetworkPortBuilder
	// WithIPv6DHCPLeaseTimeBuilder adds IPv6DHCPLeaseTime (property field) which is build by the builder
	WithIPv6DHCPLeaseTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6DHCPLeaseTimeRemaining adds IPv6DHCPLeaseTimeRemaining (property field)
	WithIPv6DHCPLeaseTimeRemaining(OptionalProperty) NetworkPortBuilder
	// WithIPv6DHCPLeaseTimeRemainingBuilder adds IPv6DHCPLeaseTimeRemaining (property field) which is build by the builder
	WithIPv6DHCPLeaseTimeRemainingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6DHCPServer adds IPv6DHCPServer (property field)
	WithIPv6DHCPServer(OptionalProperty) NetworkPortBuilder
	// WithIPv6DHCPServerBuilder adds IPv6DHCPServer (property field) which is build by the builder
	WithIPv6DHCPServerBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithIPv6ZoneIndex adds IPv6ZoneIndex (property field)
	WithIPv6ZoneIndex(OptionalProperty) NetworkPortBuilder
	// WithIPv6ZoneIndexBuilder adds IPv6ZoneIndex (property field) which is build by the builder
	WithIPv6ZoneIndexBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithMaxMaster adds MaxMaster (property field)
	WithMaxMaster(OptionalProperty) NetworkPortBuilder
	// WithMaxMasterBuilder adds MaxMaster (property field) which is build by the builder
	WithMaxMasterBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithMaxInfoFrames adds MaxInfoFrames (property field)
	WithMaxInfoFrames(OptionalProperty) NetworkPortBuilder
	// WithMaxInfoFramesBuilder adds MaxInfoFrames (property field) which is build by the builder
	WithMaxInfoFramesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithSlaveProxyEnable adds SlaveProxyEnable (property field)
	WithSlaveProxyEnable(OptionalProperty) NetworkPortBuilder
	// WithSlaveProxyEnableBuilder adds SlaveProxyEnable (property field) which is build by the builder
	WithSlaveProxyEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithManualSlaveAddressBinding adds ManualSlaveAddressBinding (property field)
	WithManualSlaveAddressBinding(OptionalProperty) NetworkPortBuilder
	// WithManualSlaveAddressBindingBuilder adds ManualSlaveAddressBinding (property field) which is build by the builder
	WithManualSlaveAddressBindingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithAutoSlaveDiscovery adds AutoSlaveDiscovery (property field)
	WithAutoSlaveDiscovery(OptionalProperty) NetworkPortBuilder
	// WithAutoSlaveDiscoveryBuilder adds AutoSlaveDiscovery (property field) which is build by the builder
	WithAutoSlaveDiscoveryBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithSlaveAddressBinding adds SlaveAddressBinding (property field)
	WithSlaveAddressBinding(OptionalProperty) NetworkPortBuilder
	// WithSlaveAddressBindingBuilder adds SlaveAddressBinding (property field) which is build by the builder
	WithSlaveAddressBindingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithVirtualMACAddressTable adds VirtualMACAddressTable (property field)
	WithVirtualMACAddressTable(OptionalProperty) NetworkPortBuilder
	// WithVirtualMACAddressTableBuilder adds VirtualMACAddressTable (property field) which is build by the builder
	WithVirtualMACAddressTableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithRoutingTable adds RoutingTable (property field)
	WithRoutingTable(OptionalProperty) NetworkPortBuilder
	// WithRoutingTableBuilder adds RoutingTable (property field) which is build by the builder
	WithRoutingTableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) NetworkPortBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) NetworkPortBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) NetworkPortBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) NetworkPortBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) NetworkPortBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) NetworkPortBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) NetworkPortBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) NetworkPortBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) NetworkPortBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) NetworkPortBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) NetworkPortBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) NetworkPortBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) NetworkPortBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) NetworkPortBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder
	// Build builds the NetworkPort or returns an error if something is wrong
	Build() (NetworkPort, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() NetworkPort
}

// NewNetworkPortBuilder() creates a NetworkPortBuilder
func NewNetworkPortBuilder() NetworkPortBuilder {
	return &_NetworkPortBuilder{_NetworkPort: new(_NetworkPort)}
}

type _NetworkPortBuilder struct {
	*_NetworkPort

	err *utils.MultiError
}

var _ (NetworkPortBuilder) = (*_NetworkPortBuilder)(nil)

func (b *_NetworkPortBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, networkType ReadableProperty, protocolLevel ReadableProperty, referencePort OptionalProperty, networkNumber ReadableProperty, networkNumberQuality ReadableProperty, changesPending ReadableProperty, command OptionalProperty, mACAddress OptionalProperty, aPDULength ReadableProperty, linkSpeed ReadableProperty, linkSpeeds OptionalProperty, linkSpeedAutonegotiate OptionalProperty, networkInterfaceName OptionalProperty, bACnetIPMode OptionalProperty, iPAddress OptionalProperty, bACnetIPUDPPort OptionalProperty, iPSubnetMask OptionalProperty, iPDefaultGateway OptionalProperty, bACnetIPMulticastAddress OptionalProperty, iPDNSServer OptionalProperty, iPDHCPEnable OptionalProperty, iPDHCPLeaseTime OptionalProperty, iPDHCPLeaseTimeRemaining OptionalProperty, iPDHCPServer OptionalProperty, bACnetIPNATTraversal OptionalProperty, bACnetIPGlobalAddress OptionalProperty, bBMDBroadcastDistributionTable OptionalProperty, bBMDAcceptFDRegistrations OptionalProperty, bBMDForeignDeviceTable OptionalProperty, fDBBMDAddress OptionalProperty, fDSubscriptionLifetime OptionalProperty, bACnetIPv6Mode OptionalProperty, iPv6Address OptionalProperty, iPv6PrefixLength OptionalProperty, bACnetIPv6UDPPort OptionalProperty, iPv6DefaultGateway OptionalProperty, bACnetIPv6MulticastAddress OptionalProperty, iPv6DNSServer OptionalProperty, iPv6AutoAddressingEnable OptionalProperty, iPv6DHCPLeaseTime OptionalProperty, iPv6DHCPLeaseTimeRemaining OptionalProperty, iPv6DHCPServer OptionalProperty, iPv6ZoneIndex OptionalProperty, maxMaster OptionalProperty, maxInfoFrames OptionalProperty, slaveProxyEnable OptionalProperty, manualSlaveAddressBinding OptionalProperty, autoSlaveDiscovery OptionalProperty, slaveAddressBinding OptionalProperty, virtualMACAddressTable OptionalProperty, routingTable OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventState OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NetworkPortBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithStatusFlags(statusFlags).WithReliability(reliability).WithOutOfService(outOfService).WithNetworkType(networkType).WithProtocolLevel(protocolLevel).WithReferencePort(referencePort).WithNetworkNumber(networkNumber).WithNetworkNumberQuality(networkNumberQuality).WithChangesPending(changesPending).WithCommand(command).WithMACAddress(mACAddress).WithAPDULength(aPDULength).WithLinkSpeed(linkSpeed).WithLinkSpeeds(linkSpeeds).WithLinkSpeedAutonegotiate(linkSpeedAutonegotiate).WithNetworkInterfaceName(networkInterfaceName).WithBACnetIPMode(bACnetIPMode).WithIPAddress(iPAddress).WithBACnetIPUDPPort(bACnetIPUDPPort).WithIPSubnetMask(iPSubnetMask).WithIPDefaultGateway(iPDefaultGateway).WithBACnetIPMulticastAddress(bACnetIPMulticastAddress).WithIPDNSServer(iPDNSServer).WithIPDHCPEnable(iPDHCPEnable).WithIPDHCPLeaseTime(iPDHCPLeaseTime).WithIPDHCPLeaseTimeRemaining(iPDHCPLeaseTimeRemaining).WithIPDHCPServer(iPDHCPServer).WithBACnetIPNATTraversal(bACnetIPNATTraversal).WithBACnetIPGlobalAddress(bACnetIPGlobalAddress).WithBBMDBroadcastDistributionTable(bBMDBroadcastDistributionTable).WithBBMDAcceptFDRegistrations(bBMDAcceptFDRegistrations).WithBBMDForeignDeviceTable(bBMDForeignDeviceTable).WithFDBBMDAddress(fDBBMDAddress).WithFDSubscriptionLifetime(fDSubscriptionLifetime).WithBACnetIPv6Mode(bACnetIPv6Mode).WithIPv6Address(iPv6Address).WithIPv6PrefixLength(iPv6PrefixLength).WithBACnetIPv6UDPPort(bACnetIPv6UDPPort).WithIPv6DefaultGateway(iPv6DefaultGateway).WithBACnetIPv6MulticastAddress(bACnetIPv6MulticastAddress).WithIPv6DNSServer(iPv6DNSServer).WithIPv6AutoAddressingEnable(iPv6AutoAddressingEnable).WithIPv6DHCPLeaseTime(iPv6DHCPLeaseTime).WithIPv6DHCPLeaseTimeRemaining(iPv6DHCPLeaseTimeRemaining).WithIPv6DHCPServer(iPv6DHCPServer).WithIPv6ZoneIndex(iPv6ZoneIndex).WithMaxMaster(maxMaster).WithMaxInfoFrames(maxInfoFrames).WithSlaveProxyEnable(slaveProxyEnable).WithManualSlaveAddressBinding(manualSlaveAddressBinding).WithAutoSlaveDiscovery(autoSlaveDiscovery).WithSlaveAddressBinding(slaveAddressBinding).WithVirtualMACAddressTable(virtualMACAddressTable).WithRoutingTable(routingTable).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventState(eventState).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_NetworkPortBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) NetworkPortBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_NetworkPortBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithObjectName(objectName ReadableProperty) NetworkPortBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_NetworkPortBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithObjectType(objectType ReadableProperty) NetworkPortBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_NetworkPortBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithDescription(description OptionalProperty) NetworkPortBuilder {
	b.Description = description
	return b
}

func (b *_NetworkPortBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithStatusFlags(statusFlags ReadableProperty) NetworkPortBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_NetworkPortBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithReliability(reliability ReadableProperty) NetworkPortBuilder {
	b.Reliability = reliability
	return b
}

func (b *_NetworkPortBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithOutOfService(outOfService ReadableProperty) NetworkPortBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_NetworkPortBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithNetworkType(networkType ReadableProperty) NetworkPortBuilder {
	b.NetworkType = networkType
	return b
}

func (b *_NetworkPortBuilder) WithNetworkTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.NetworkType.CreateReadablePropertyBuilder())
	var err error
	b.NetworkType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithProtocolLevel(protocolLevel ReadableProperty) NetworkPortBuilder {
	b.ProtocolLevel = protocolLevel
	return b
}

func (b *_NetworkPortBuilder) WithProtocolLevelBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ProtocolLevel.CreateReadablePropertyBuilder())
	var err error
	b.ProtocolLevel, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithReferencePort(referencePort OptionalProperty) NetworkPortBuilder {
	b.ReferencePort = referencePort
	return b
}

func (b *_NetworkPortBuilder) WithReferencePortBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ReferencePort.CreateOptionalPropertyBuilder())
	var err error
	b.ReferencePort, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithNetworkNumber(networkNumber ReadableProperty) NetworkPortBuilder {
	b.NetworkNumber = networkNumber
	return b
}

func (b *_NetworkPortBuilder) WithNetworkNumberBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.NetworkNumber.CreateReadablePropertyBuilder())
	var err error
	b.NetworkNumber, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithNetworkNumberQuality(networkNumberQuality ReadableProperty) NetworkPortBuilder {
	b.NetworkNumberQuality = networkNumberQuality
	return b
}

func (b *_NetworkPortBuilder) WithNetworkNumberQualityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.NetworkNumberQuality.CreateReadablePropertyBuilder())
	var err error
	b.NetworkNumberQuality, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithChangesPending(changesPending ReadableProperty) NetworkPortBuilder {
	b.ChangesPending = changesPending
	return b
}

func (b *_NetworkPortBuilder) WithChangesPendingBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ChangesPending.CreateReadablePropertyBuilder())
	var err error
	b.ChangesPending, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithCommand(command OptionalProperty) NetworkPortBuilder {
	b.Command = command
	return b
}

func (b *_NetworkPortBuilder) WithCommandBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.Command.CreateOptionalPropertyBuilder())
	var err error
	b.Command, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithMACAddress(mACAddress OptionalProperty) NetworkPortBuilder {
	b.MACAddress = mACAddress
	return b
}

func (b *_NetworkPortBuilder) WithMACAddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.MACAddress.CreateOptionalPropertyBuilder())
	var err error
	b.MACAddress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithAPDULength(aPDULength ReadableProperty) NetworkPortBuilder {
	b.APDULength = aPDULength
	return b
}

func (b *_NetworkPortBuilder) WithAPDULengthBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.APDULength.CreateReadablePropertyBuilder())
	var err error
	b.APDULength, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithLinkSpeed(linkSpeed ReadableProperty) NetworkPortBuilder {
	b.LinkSpeed = linkSpeed
	return b
}

func (b *_NetworkPortBuilder) WithLinkSpeedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.LinkSpeed.CreateReadablePropertyBuilder())
	var err error
	b.LinkSpeed, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithLinkSpeeds(linkSpeeds OptionalProperty) NetworkPortBuilder {
	b.LinkSpeeds = linkSpeeds
	return b
}

func (b *_NetworkPortBuilder) WithLinkSpeedsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.LinkSpeeds.CreateOptionalPropertyBuilder())
	var err error
	b.LinkSpeeds, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithLinkSpeedAutonegotiate(linkSpeedAutonegotiate OptionalProperty) NetworkPortBuilder {
	b.LinkSpeedAutonegotiate = linkSpeedAutonegotiate
	return b
}

func (b *_NetworkPortBuilder) WithLinkSpeedAutonegotiateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.LinkSpeedAutonegotiate.CreateOptionalPropertyBuilder())
	var err error
	b.LinkSpeedAutonegotiate, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithNetworkInterfaceName(networkInterfaceName OptionalProperty) NetworkPortBuilder {
	b.NetworkInterfaceName = networkInterfaceName
	return b
}

func (b *_NetworkPortBuilder) WithNetworkInterfaceNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.NetworkInterfaceName.CreateOptionalPropertyBuilder())
	var err error
	b.NetworkInterfaceName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPMode(bACnetIPMode OptionalProperty) NetworkPortBuilder {
	b.BACnetIPMode = bACnetIPMode
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPMode.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPAddress(iPAddress OptionalProperty) NetworkPortBuilder {
	b.IPAddress = iPAddress
	return b
}

func (b *_NetworkPortBuilder) WithIPAddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPAddress.CreateOptionalPropertyBuilder())
	var err error
	b.IPAddress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPUDPPort(bACnetIPUDPPort OptionalProperty) NetworkPortBuilder {
	b.BACnetIPUDPPort = bACnetIPUDPPort
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPUDPPortBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPUDPPort.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPUDPPort, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPSubnetMask(iPSubnetMask OptionalProperty) NetworkPortBuilder {
	b.IPSubnetMask = iPSubnetMask
	return b
}

func (b *_NetworkPortBuilder) WithIPSubnetMaskBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPSubnetMask.CreateOptionalPropertyBuilder())
	var err error
	b.IPSubnetMask, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPDefaultGateway(iPDefaultGateway OptionalProperty) NetworkPortBuilder {
	b.IPDefaultGateway = iPDefaultGateway
	return b
}

func (b *_NetworkPortBuilder) WithIPDefaultGatewayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPDefaultGateway.CreateOptionalPropertyBuilder())
	var err error
	b.IPDefaultGateway, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPMulticastAddress(bACnetIPMulticastAddress OptionalProperty) NetworkPortBuilder {
	b.BACnetIPMulticastAddress = bACnetIPMulticastAddress
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPMulticastAddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPMulticastAddress.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPMulticastAddress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPDNSServer(iPDNSServer OptionalProperty) NetworkPortBuilder {
	b.IPDNSServer = iPDNSServer
	return b
}

func (b *_NetworkPortBuilder) WithIPDNSServerBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPDNSServer.CreateOptionalPropertyBuilder())
	var err error
	b.IPDNSServer, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPEnable(iPDHCPEnable OptionalProperty) NetworkPortBuilder {
	b.IPDHCPEnable = iPDHCPEnable
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPDHCPEnable.CreateOptionalPropertyBuilder())
	var err error
	b.IPDHCPEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPLeaseTime(iPDHCPLeaseTime OptionalProperty) NetworkPortBuilder {
	b.IPDHCPLeaseTime = iPDHCPLeaseTime
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPLeaseTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPDHCPLeaseTime.CreateOptionalPropertyBuilder())
	var err error
	b.IPDHCPLeaseTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPLeaseTimeRemaining(iPDHCPLeaseTimeRemaining OptionalProperty) NetworkPortBuilder {
	b.IPDHCPLeaseTimeRemaining = iPDHCPLeaseTimeRemaining
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPLeaseTimeRemainingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPDHCPLeaseTimeRemaining.CreateOptionalPropertyBuilder())
	var err error
	b.IPDHCPLeaseTimeRemaining, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPServer(iPDHCPServer OptionalProperty) NetworkPortBuilder {
	b.IPDHCPServer = iPDHCPServer
	return b
}

func (b *_NetworkPortBuilder) WithIPDHCPServerBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPDHCPServer.CreateOptionalPropertyBuilder())
	var err error
	b.IPDHCPServer, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPNATTraversal(bACnetIPNATTraversal OptionalProperty) NetworkPortBuilder {
	b.BACnetIPNATTraversal = bACnetIPNATTraversal
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPNATTraversalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPNATTraversal.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPNATTraversal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPGlobalAddress(bACnetIPGlobalAddress OptionalProperty) NetworkPortBuilder {
	b.BACnetIPGlobalAddress = bACnetIPGlobalAddress
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPGlobalAddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPGlobalAddress.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPGlobalAddress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBBMDBroadcastDistributionTable(bBMDBroadcastDistributionTable OptionalProperty) NetworkPortBuilder {
	b.BBMDBroadcastDistributionTable = bBMDBroadcastDistributionTable
	return b
}

func (b *_NetworkPortBuilder) WithBBMDBroadcastDistributionTableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BBMDBroadcastDistributionTable.CreateOptionalPropertyBuilder())
	var err error
	b.BBMDBroadcastDistributionTable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBBMDAcceptFDRegistrations(bBMDAcceptFDRegistrations OptionalProperty) NetworkPortBuilder {
	b.BBMDAcceptFDRegistrations = bBMDAcceptFDRegistrations
	return b
}

func (b *_NetworkPortBuilder) WithBBMDAcceptFDRegistrationsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BBMDAcceptFDRegistrations.CreateOptionalPropertyBuilder())
	var err error
	b.BBMDAcceptFDRegistrations, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBBMDForeignDeviceTable(bBMDForeignDeviceTable OptionalProperty) NetworkPortBuilder {
	b.BBMDForeignDeviceTable = bBMDForeignDeviceTable
	return b
}

func (b *_NetworkPortBuilder) WithBBMDForeignDeviceTableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BBMDForeignDeviceTable.CreateOptionalPropertyBuilder())
	var err error
	b.BBMDForeignDeviceTable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithFDBBMDAddress(fDBBMDAddress OptionalProperty) NetworkPortBuilder {
	b.FDBBMDAddress = fDBBMDAddress
	return b
}

func (b *_NetworkPortBuilder) WithFDBBMDAddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.FDBBMDAddress.CreateOptionalPropertyBuilder())
	var err error
	b.FDBBMDAddress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithFDSubscriptionLifetime(fDSubscriptionLifetime OptionalProperty) NetworkPortBuilder {
	b.FDSubscriptionLifetime = fDSubscriptionLifetime
	return b
}

func (b *_NetworkPortBuilder) WithFDSubscriptionLifetimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.FDSubscriptionLifetime.CreateOptionalPropertyBuilder())
	var err error
	b.FDSubscriptionLifetime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPv6Mode(bACnetIPv6Mode OptionalProperty) NetworkPortBuilder {
	b.BACnetIPv6Mode = bACnetIPv6Mode
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPv6ModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPv6Mode.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPv6Mode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6Address(iPv6Address OptionalProperty) NetworkPortBuilder {
	b.IPv6Address = iPv6Address
	return b
}

func (b *_NetworkPortBuilder) WithIPv6AddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6Address.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6Address, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6PrefixLength(iPv6PrefixLength OptionalProperty) NetworkPortBuilder {
	b.IPv6PrefixLength = iPv6PrefixLength
	return b
}

func (b *_NetworkPortBuilder) WithIPv6PrefixLengthBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6PrefixLength.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6PrefixLength, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPv6UDPPort(bACnetIPv6UDPPort OptionalProperty) NetworkPortBuilder {
	b.BACnetIPv6UDPPort = bACnetIPv6UDPPort
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPv6UDPPortBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPv6UDPPort.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPv6UDPPort, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DefaultGateway(iPv6DefaultGateway OptionalProperty) NetworkPortBuilder {
	b.IPv6DefaultGateway = iPv6DefaultGateway
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DefaultGatewayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6DefaultGateway.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6DefaultGateway, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPv6MulticastAddress(bACnetIPv6MulticastAddress OptionalProperty) NetworkPortBuilder {
	b.BACnetIPv6MulticastAddress = bACnetIPv6MulticastAddress
	return b
}

func (b *_NetworkPortBuilder) WithBACnetIPv6MulticastAddressBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.BACnetIPv6MulticastAddress.CreateOptionalPropertyBuilder())
	var err error
	b.BACnetIPv6MulticastAddress, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DNSServer(iPv6DNSServer OptionalProperty) NetworkPortBuilder {
	b.IPv6DNSServer = iPv6DNSServer
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DNSServerBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6DNSServer.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6DNSServer, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6AutoAddressingEnable(iPv6AutoAddressingEnable OptionalProperty) NetworkPortBuilder {
	b.IPv6AutoAddressingEnable = iPv6AutoAddressingEnable
	return b
}

func (b *_NetworkPortBuilder) WithIPv6AutoAddressingEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6AutoAddressingEnable.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6AutoAddressingEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DHCPLeaseTime(iPv6DHCPLeaseTime OptionalProperty) NetworkPortBuilder {
	b.IPv6DHCPLeaseTime = iPv6DHCPLeaseTime
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DHCPLeaseTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6DHCPLeaseTime.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6DHCPLeaseTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DHCPLeaseTimeRemaining(iPv6DHCPLeaseTimeRemaining OptionalProperty) NetworkPortBuilder {
	b.IPv6DHCPLeaseTimeRemaining = iPv6DHCPLeaseTimeRemaining
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DHCPLeaseTimeRemainingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6DHCPLeaseTimeRemaining.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6DHCPLeaseTimeRemaining, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DHCPServer(iPv6DHCPServer OptionalProperty) NetworkPortBuilder {
	b.IPv6DHCPServer = iPv6DHCPServer
	return b
}

func (b *_NetworkPortBuilder) WithIPv6DHCPServerBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6DHCPServer.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6DHCPServer, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithIPv6ZoneIndex(iPv6ZoneIndex OptionalProperty) NetworkPortBuilder {
	b.IPv6ZoneIndex = iPv6ZoneIndex
	return b
}

func (b *_NetworkPortBuilder) WithIPv6ZoneIndexBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.IPv6ZoneIndex.CreateOptionalPropertyBuilder())
	var err error
	b.IPv6ZoneIndex, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithMaxMaster(maxMaster OptionalProperty) NetworkPortBuilder {
	b.MaxMaster = maxMaster
	return b
}

func (b *_NetworkPortBuilder) WithMaxMasterBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.MaxMaster.CreateOptionalPropertyBuilder())
	var err error
	b.MaxMaster, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithMaxInfoFrames(maxInfoFrames OptionalProperty) NetworkPortBuilder {
	b.MaxInfoFrames = maxInfoFrames
	return b
}

func (b *_NetworkPortBuilder) WithMaxInfoFramesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.MaxInfoFrames.CreateOptionalPropertyBuilder())
	var err error
	b.MaxInfoFrames, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithSlaveProxyEnable(slaveProxyEnable OptionalProperty) NetworkPortBuilder {
	b.SlaveProxyEnable = slaveProxyEnable
	return b
}

func (b *_NetworkPortBuilder) WithSlaveProxyEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.SlaveProxyEnable.CreateOptionalPropertyBuilder())
	var err error
	b.SlaveProxyEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithManualSlaveAddressBinding(manualSlaveAddressBinding OptionalProperty) NetworkPortBuilder {
	b.ManualSlaveAddressBinding = manualSlaveAddressBinding
	return b
}

func (b *_NetworkPortBuilder) WithManualSlaveAddressBindingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ManualSlaveAddressBinding.CreateOptionalPropertyBuilder())
	var err error
	b.ManualSlaveAddressBinding, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithAutoSlaveDiscovery(autoSlaveDiscovery OptionalProperty) NetworkPortBuilder {
	b.AutoSlaveDiscovery = autoSlaveDiscovery
	return b
}

func (b *_NetworkPortBuilder) WithAutoSlaveDiscoveryBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.AutoSlaveDiscovery.CreateOptionalPropertyBuilder())
	var err error
	b.AutoSlaveDiscovery, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithSlaveAddressBinding(slaveAddressBinding OptionalProperty) NetworkPortBuilder {
	b.SlaveAddressBinding = slaveAddressBinding
	return b
}

func (b *_NetworkPortBuilder) WithSlaveAddressBindingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.SlaveAddressBinding.CreateOptionalPropertyBuilder())
	var err error
	b.SlaveAddressBinding, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithVirtualMACAddressTable(virtualMACAddressTable OptionalProperty) NetworkPortBuilder {
	b.VirtualMACAddressTable = virtualMACAddressTable
	return b
}

func (b *_NetworkPortBuilder) WithVirtualMACAddressTableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.VirtualMACAddressTable.CreateOptionalPropertyBuilder())
	var err error
	b.VirtualMACAddressTable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithRoutingTable(routingTable OptionalProperty) NetworkPortBuilder {
	b.RoutingTable = routingTable
	return b
}

func (b *_NetworkPortBuilder) WithRoutingTableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.RoutingTable.CreateOptionalPropertyBuilder())
	var err error
	b.RoutingTable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) NetworkPortBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_NetworkPortBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithNotificationClass(notificationClass OptionalProperty) NetworkPortBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_NetworkPortBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithEventEnable(eventEnable OptionalProperty) NetworkPortBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_NetworkPortBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) NetworkPortBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_NetworkPortBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithNotifyType(notifyType OptionalProperty) NetworkPortBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_NetworkPortBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) NetworkPortBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_NetworkPortBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) NetworkPortBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_NetworkPortBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) NetworkPortBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_NetworkPortBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithEventState(eventState OptionalProperty) NetworkPortBuilder {
	b.EventState = eventState
	return b
}

func (b *_NetworkPortBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) NetworkPortBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_NetworkPortBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithPropertyList(propertyList ReadableProperty) NetworkPortBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_NetworkPortBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithTags(tags OptionalProperty) NetworkPortBuilder {
	b.Tags = tags
	return b
}

func (b *_NetworkPortBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithProfileLocation(profileLocation OptionalProperty) NetworkPortBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_NetworkPortBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) WithProfileName(profileName OptionalProperty) NetworkPortBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_NetworkPortBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NetworkPortBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NetworkPortBuilder) Build() (NetworkPort, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.NetworkType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'networkType' not set"))
	}
	if b.ProtocolLevel == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'protocolLevel' not set"))
	}
	if b.ReferencePort == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'referencePort' not set"))
	}
	if b.NetworkNumber == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'networkNumber' not set"))
	}
	if b.NetworkNumberQuality == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'networkNumberQuality' not set"))
	}
	if b.ChangesPending == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'changesPending' not set"))
	}
	if b.Command == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'command' not set"))
	}
	if b.MACAddress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'mACAddress' not set"))
	}
	if b.APDULength == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'aPDULength' not set"))
	}
	if b.LinkSpeed == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'linkSpeed' not set"))
	}
	if b.LinkSpeeds == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'linkSpeeds' not set"))
	}
	if b.LinkSpeedAutonegotiate == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'linkSpeedAutonegotiate' not set"))
	}
	if b.NetworkInterfaceName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'networkInterfaceName' not set"))
	}
	if b.BACnetIPMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPMode' not set"))
	}
	if b.IPAddress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPAddress' not set"))
	}
	if b.BACnetIPUDPPort == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPUDPPort' not set"))
	}
	if b.IPSubnetMask == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPSubnetMask' not set"))
	}
	if b.IPDefaultGateway == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPDefaultGateway' not set"))
	}
	if b.BACnetIPMulticastAddress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPMulticastAddress' not set"))
	}
	if b.IPDNSServer == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPDNSServer' not set"))
	}
	if b.IPDHCPEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPDHCPEnable' not set"))
	}
	if b.IPDHCPLeaseTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPDHCPLeaseTime' not set"))
	}
	if b.IPDHCPLeaseTimeRemaining == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPDHCPLeaseTimeRemaining' not set"))
	}
	if b.IPDHCPServer == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPDHCPServer' not set"))
	}
	if b.BACnetIPNATTraversal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPNATTraversal' not set"))
	}
	if b.BACnetIPGlobalAddress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPGlobalAddress' not set"))
	}
	if b.BBMDBroadcastDistributionTable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bBMDBroadcastDistributionTable' not set"))
	}
	if b.BBMDAcceptFDRegistrations == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bBMDAcceptFDRegistrations' not set"))
	}
	if b.BBMDForeignDeviceTable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bBMDForeignDeviceTable' not set"))
	}
	if b.FDBBMDAddress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'fDBBMDAddress' not set"))
	}
	if b.FDSubscriptionLifetime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'fDSubscriptionLifetime' not set"))
	}
	if b.BACnetIPv6Mode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPv6Mode' not set"))
	}
	if b.IPv6Address == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6Address' not set"))
	}
	if b.IPv6PrefixLength == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6PrefixLength' not set"))
	}
	if b.BACnetIPv6UDPPort == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPv6UDPPort' not set"))
	}
	if b.IPv6DefaultGateway == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6DefaultGateway' not set"))
	}
	if b.BACnetIPv6MulticastAddress == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'bACnetIPv6MulticastAddress' not set"))
	}
	if b.IPv6DNSServer == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6DNSServer' not set"))
	}
	if b.IPv6AutoAddressingEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6AutoAddressingEnable' not set"))
	}
	if b.IPv6DHCPLeaseTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6DHCPLeaseTime' not set"))
	}
	if b.IPv6DHCPLeaseTimeRemaining == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6DHCPLeaseTimeRemaining' not set"))
	}
	if b.IPv6DHCPServer == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6DHCPServer' not set"))
	}
	if b.IPv6ZoneIndex == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'iPv6ZoneIndex' not set"))
	}
	if b.MaxMaster == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxMaster' not set"))
	}
	if b.MaxInfoFrames == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxInfoFrames' not set"))
	}
	if b.SlaveProxyEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'slaveProxyEnable' not set"))
	}
	if b.ManualSlaveAddressBinding == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'manualSlaveAddressBinding' not set"))
	}
	if b.AutoSlaveDiscovery == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'autoSlaveDiscovery' not set"))
	}
	if b.SlaveAddressBinding == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'slaveAddressBinding' not set"))
	}
	if b.VirtualMACAddressTable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'virtualMACAddressTable' not set"))
	}
	if b.RoutingTable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'routingTable' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._NetworkPort.deepCopy(), nil
}

func (b *_NetworkPortBuilder) MustBuild() NetworkPort {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_NetworkPortBuilder) DeepCopy() any {
	_copy := b.CreateNetworkPortBuilder().(*_NetworkPortBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateNetworkPortBuilder creates a NetworkPortBuilder
func (b *_NetworkPort) CreateNetworkPortBuilder() NetworkPortBuilder {
	if b == nil {
		return NewNetworkPortBuilder()
	}
	return &_NetworkPortBuilder{_NetworkPort: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_NetworkPort) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_NetworkPort) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_NetworkPort) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_NetworkPort) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_NetworkPort) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_NetworkPort) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_NetworkPort) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_NetworkPort) GetNetworkType() ReadableProperty {
	return m.NetworkType
}

func (m *_NetworkPort) GetProtocolLevel() ReadableProperty {
	return m.ProtocolLevel
}

func (m *_NetworkPort) GetReferencePort() OptionalProperty {
	return m.ReferencePort
}

func (m *_NetworkPort) GetNetworkNumber() ReadableProperty {
	return m.NetworkNumber
}

func (m *_NetworkPort) GetNetworkNumberQuality() ReadableProperty {
	return m.NetworkNumberQuality
}

func (m *_NetworkPort) GetChangesPending() ReadableProperty {
	return m.ChangesPending
}

func (m *_NetworkPort) GetCommand() OptionalProperty {
	return m.Command
}

func (m *_NetworkPort) GetMACAddress() OptionalProperty {
	return m.MACAddress
}

func (m *_NetworkPort) GetAPDULength() ReadableProperty {
	return m.APDULength
}

func (m *_NetworkPort) GetLinkSpeed() ReadableProperty {
	return m.LinkSpeed
}

func (m *_NetworkPort) GetLinkSpeeds() OptionalProperty {
	return m.LinkSpeeds
}

func (m *_NetworkPort) GetLinkSpeedAutonegotiate() OptionalProperty {
	return m.LinkSpeedAutonegotiate
}

func (m *_NetworkPort) GetNetworkInterfaceName() OptionalProperty {
	return m.NetworkInterfaceName
}

func (m *_NetworkPort) GetBACnetIPMode() OptionalProperty {
	return m.BACnetIPMode
}

func (m *_NetworkPort) GetIPAddress() OptionalProperty {
	return m.IPAddress
}

func (m *_NetworkPort) GetBACnetIPUDPPort() OptionalProperty {
	return m.BACnetIPUDPPort
}

func (m *_NetworkPort) GetIPSubnetMask() OptionalProperty {
	return m.IPSubnetMask
}

func (m *_NetworkPort) GetIPDefaultGateway() OptionalProperty {
	return m.IPDefaultGateway
}

func (m *_NetworkPort) GetBACnetIPMulticastAddress() OptionalProperty {
	return m.BACnetIPMulticastAddress
}

func (m *_NetworkPort) GetIPDNSServer() OptionalProperty {
	return m.IPDNSServer
}

func (m *_NetworkPort) GetIPDHCPEnable() OptionalProperty {
	return m.IPDHCPEnable
}

func (m *_NetworkPort) GetIPDHCPLeaseTime() OptionalProperty {
	return m.IPDHCPLeaseTime
}

func (m *_NetworkPort) GetIPDHCPLeaseTimeRemaining() OptionalProperty {
	return m.IPDHCPLeaseTimeRemaining
}

func (m *_NetworkPort) GetIPDHCPServer() OptionalProperty {
	return m.IPDHCPServer
}

func (m *_NetworkPort) GetBACnetIPNATTraversal() OptionalProperty {
	return m.BACnetIPNATTraversal
}

func (m *_NetworkPort) GetBACnetIPGlobalAddress() OptionalProperty {
	return m.BACnetIPGlobalAddress
}

func (m *_NetworkPort) GetBBMDBroadcastDistributionTable() OptionalProperty {
	return m.BBMDBroadcastDistributionTable
}

func (m *_NetworkPort) GetBBMDAcceptFDRegistrations() OptionalProperty {
	return m.BBMDAcceptFDRegistrations
}

func (m *_NetworkPort) GetBBMDForeignDeviceTable() OptionalProperty {
	return m.BBMDForeignDeviceTable
}

func (m *_NetworkPort) GetFDBBMDAddress() OptionalProperty {
	return m.FDBBMDAddress
}

func (m *_NetworkPort) GetFDSubscriptionLifetime() OptionalProperty {
	return m.FDSubscriptionLifetime
}

func (m *_NetworkPort) GetBACnetIPv6Mode() OptionalProperty {
	return m.BACnetIPv6Mode
}

func (m *_NetworkPort) GetIPv6Address() OptionalProperty {
	return m.IPv6Address
}

func (m *_NetworkPort) GetIPv6PrefixLength() OptionalProperty {
	return m.IPv6PrefixLength
}

func (m *_NetworkPort) GetBACnetIPv6UDPPort() OptionalProperty {
	return m.BACnetIPv6UDPPort
}

func (m *_NetworkPort) GetIPv6DefaultGateway() OptionalProperty {
	return m.IPv6DefaultGateway
}

func (m *_NetworkPort) GetBACnetIPv6MulticastAddress() OptionalProperty {
	return m.BACnetIPv6MulticastAddress
}

func (m *_NetworkPort) GetIPv6DNSServer() OptionalProperty {
	return m.IPv6DNSServer
}

func (m *_NetworkPort) GetIPv6AutoAddressingEnable() OptionalProperty {
	return m.IPv6AutoAddressingEnable
}

func (m *_NetworkPort) GetIPv6DHCPLeaseTime() OptionalProperty {
	return m.IPv6DHCPLeaseTime
}

func (m *_NetworkPort) GetIPv6DHCPLeaseTimeRemaining() OptionalProperty {
	return m.IPv6DHCPLeaseTimeRemaining
}

func (m *_NetworkPort) GetIPv6DHCPServer() OptionalProperty {
	return m.IPv6DHCPServer
}

func (m *_NetworkPort) GetIPv6ZoneIndex() OptionalProperty {
	return m.IPv6ZoneIndex
}

func (m *_NetworkPort) GetMaxMaster() OptionalProperty {
	return m.MaxMaster
}

func (m *_NetworkPort) GetMaxInfoFrames() OptionalProperty {
	return m.MaxInfoFrames
}

func (m *_NetworkPort) GetSlaveProxyEnable() OptionalProperty {
	return m.SlaveProxyEnable
}

func (m *_NetworkPort) GetManualSlaveAddressBinding() OptionalProperty {
	return m.ManualSlaveAddressBinding
}

func (m *_NetworkPort) GetAutoSlaveDiscovery() OptionalProperty {
	return m.AutoSlaveDiscovery
}

func (m *_NetworkPort) GetSlaveAddressBinding() OptionalProperty {
	return m.SlaveAddressBinding
}

func (m *_NetworkPort) GetVirtualMACAddressTable() OptionalProperty {
	return m.VirtualMACAddressTable
}

func (m *_NetworkPort) GetRoutingTable() OptionalProperty {
	return m.RoutingTable
}

func (m *_NetworkPort) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_NetworkPort) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_NetworkPort) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_NetworkPort) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_NetworkPort) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_NetworkPort) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_NetworkPort) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_NetworkPort) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_NetworkPort) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_NetworkPort) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_NetworkPort) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_NetworkPort) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_NetworkPort) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_NetworkPort) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastNetworkPort(structType any) NetworkPort {
	if casted, ok := structType.(NetworkPort); ok {
		return casted
	}
	if casted, ok := structType.(*NetworkPort); ok {
		return *casted
	}
	return nil
}

func (m *_NetworkPort) GetTypeName() string {
	return "NetworkPort"
}

func (m *_NetworkPort) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (networkType)
	lengthInBits += m.NetworkType.GetLengthInBits(ctx)

	// Simple field (protocolLevel)
	lengthInBits += m.ProtocolLevel.GetLengthInBits(ctx)

	// Simple field (referencePort)
	lengthInBits += m.ReferencePort.GetLengthInBits(ctx)

	// Simple field (networkNumber)
	lengthInBits += m.NetworkNumber.GetLengthInBits(ctx)

	// Simple field (networkNumberQuality)
	lengthInBits += m.NetworkNumberQuality.GetLengthInBits(ctx)

	// Simple field (changesPending)
	lengthInBits += m.ChangesPending.GetLengthInBits(ctx)

	// Simple field (command)
	lengthInBits += m.Command.GetLengthInBits(ctx)

	// Simple field (mACAddress)
	lengthInBits += m.MACAddress.GetLengthInBits(ctx)

	// Simple field (aPDULength)
	lengthInBits += m.APDULength.GetLengthInBits(ctx)

	// Simple field (linkSpeed)
	lengthInBits += m.LinkSpeed.GetLengthInBits(ctx)

	// Simple field (linkSpeeds)
	lengthInBits += m.LinkSpeeds.GetLengthInBits(ctx)

	// Simple field (linkSpeedAutonegotiate)
	lengthInBits += m.LinkSpeedAutonegotiate.GetLengthInBits(ctx)

	// Simple field (networkInterfaceName)
	lengthInBits += m.NetworkInterfaceName.GetLengthInBits(ctx)

	// Simple field (bACnetIPMode)
	lengthInBits += m.BACnetIPMode.GetLengthInBits(ctx)

	// Simple field (iPAddress)
	lengthInBits += m.IPAddress.GetLengthInBits(ctx)

	// Simple field (bACnetIPUDPPort)
	lengthInBits += m.BACnetIPUDPPort.GetLengthInBits(ctx)

	// Simple field (iPSubnetMask)
	lengthInBits += m.IPSubnetMask.GetLengthInBits(ctx)

	// Simple field (iPDefaultGateway)
	lengthInBits += m.IPDefaultGateway.GetLengthInBits(ctx)

	// Simple field (bACnetIPMulticastAddress)
	lengthInBits += m.BACnetIPMulticastAddress.GetLengthInBits(ctx)

	// Simple field (iPDNSServer)
	lengthInBits += m.IPDNSServer.GetLengthInBits(ctx)

	// Simple field (iPDHCPEnable)
	lengthInBits += m.IPDHCPEnable.GetLengthInBits(ctx)

	// Simple field (iPDHCPLeaseTime)
	lengthInBits += m.IPDHCPLeaseTime.GetLengthInBits(ctx)

	// Simple field (iPDHCPLeaseTimeRemaining)
	lengthInBits += m.IPDHCPLeaseTimeRemaining.GetLengthInBits(ctx)

	// Simple field (iPDHCPServer)
	lengthInBits += m.IPDHCPServer.GetLengthInBits(ctx)

	// Simple field (bACnetIPNATTraversal)
	lengthInBits += m.BACnetIPNATTraversal.GetLengthInBits(ctx)

	// Simple field (bACnetIPGlobalAddress)
	lengthInBits += m.BACnetIPGlobalAddress.GetLengthInBits(ctx)

	// Simple field (bBMDBroadcastDistributionTable)
	lengthInBits += m.BBMDBroadcastDistributionTable.GetLengthInBits(ctx)

	// Simple field (bBMDAcceptFDRegistrations)
	lengthInBits += m.BBMDAcceptFDRegistrations.GetLengthInBits(ctx)

	// Simple field (bBMDForeignDeviceTable)
	lengthInBits += m.BBMDForeignDeviceTable.GetLengthInBits(ctx)

	// Simple field (fDBBMDAddress)
	lengthInBits += m.FDBBMDAddress.GetLengthInBits(ctx)

	// Simple field (fDSubscriptionLifetime)
	lengthInBits += m.FDSubscriptionLifetime.GetLengthInBits(ctx)

	// Simple field (bACnetIPv6Mode)
	lengthInBits += m.BACnetIPv6Mode.GetLengthInBits(ctx)

	// Simple field (iPv6Address)
	lengthInBits += m.IPv6Address.GetLengthInBits(ctx)

	// Simple field (iPv6PrefixLength)
	lengthInBits += m.IPv6PrefixLength.GetLengthInBits(ctx)

	// Simple field (bACnetIPv6UDPPort)
	lengthInBits += m.BACnetIPv6UDPPort.GetLengthInBits(ctx)

	// Simple field (iPv6DefaultGateway)
	lengthInBits += m.IPv6DefaultGateway.GetLengthInBits(ctx)

	// Simple field (bACnetIPv6MulticastAddress)
	lengthInBits += m.BACnetIPv6MulticastAddress.GetLengthInBits(ctx)

	// Simple field (iPv6DNSServer)
	lengthInBits += m.IPv6DNSServer.GetLengthInBits(ctx)

	// Simple field (iPv6AutoAddressingEnable)
	lengthInBits += m.IPv6AutoAddressingEnable.GetLengthInBits(ctx)

	// Simple field (iPv6DHCPLeaseTime)
	lengthInBits += m.IPv6DHCPLeaseTime.GetLengthInBits(ctx)

	// Simple field (iPv6DHCPLeaseTimeRemaining)
	lengthInBits += m.IPv6DHCPLeaseTimeRemaining.GetLengthInBits(ctx)

	// Simple field (iPv6DHCPServer)
	lengthInBits += m.IPv6DHCPServer.GetLengthInBits(ctx)

	// Simple field (iPv6ZoneIndex)
	lengthInBits += m.IPv6ZoneIndex.GetLengthInBits(ctx)

	// Simple field (maxMaster)
	lengthInBits += m.MaxMaster.GetLengthInBits(ctx)

	// Simple field (maxInfoFrames)
	lengthInBits += m.MaxInfoFrames.GetLengthInBits(ctx)

	// Simple field (slaveProxyEnable)
	lengthInBits += m.SlaveProxyEnable.GetLengthInBits(ctx)

	// Simple field (manualSlaveAddressBinding)
	lengthInBits += m.ManualSlaveAddressBinding.GetLengthInBits(ctx)

	// Simple field (autoSlaveDiscovery)
	lengthInBits += m.AutoSlaveDiscovery.GetLengthInBits(ctx)

	// Simple field (slaveAddressBinding)
	lengthInBits += m.SlaveAddressBinding.GetLengthInBits(ctx)

	// Simple field (virtualMACAddressTable)
	lengthInBits += m.VirtualMACAddressTable.GetLengthInBits(ctx)

	// Simple field (routingTable)
	lengthInBits += m.RoutingTable.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_NetworkPort) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func NetworkPortParse(ctx context.Context, theBytes []byte) (NetworkPort, error) {
	return NetworkPortParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func NetworkPortParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (NetworkPort, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (NetworkPort, error) {
		return NetworkPortParseWithBuffer(ctx, readBuffer)
	}
}

func NetworkPortParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (NetworkPort, error) {
	v, err := (&_NetworkPort{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_NetworkPort) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__networkPort NetworkPort, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("NetworkPort"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for NetworkPort")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	networkType, err := ReadSimpleField[ReadableProperty](ctx, "networkType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetNetworkType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'networkType' field"))
	}
	m.NetworkType = networkType

	protocolLevel, err := ReadSimpleField[ReadableProperty](ctx, "protocolLevel", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetProtocolLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'protocolLevel' field"))
	}
	m.ProtocolLevel = protocolLevel

	referencePort, err := ReadSimpleField[OptionalProperty](ctx, "referencePort", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'referencePort' field"))
	}
	m.ReferencePort = referencePort

	networkNumber, err := ReadSimpleField[ReadableProperty](ctx, "networkNumber", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'networkNumber' field"))
	}
	m.NetworkNumber = networkNumber

	networkNumberQuality, err := ReadSimpleField[ReadableProperty](ctx, "networkNumberQuality", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetNetworkNumberQuality")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'networkNumberQuality' field"))
	}
	m.NetworkNumberQuality = networkNumberQuality

	changesPending, err := ReadSimpleField[ReadableProperty](ctx, "changesPending", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'changesPending' field"))
	}
	m.ChangesPending = changesPending

	command, err := ReadSimpleField[OptionalProperty](ctx, "command", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNetworkPortCommand")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'command' field"))
	}
	m.Command = command

	mACAddress, err := ReadSimpleField[OptionalProperty](ctx, "mACAddress", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'mACAddress' field"))
	}
	m.MACAddress = mACAddress

	aPDULength, err := ReadSimpleField[ReadableProperty](ctx, "aPDULength", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'aPDULength' field"))
	}
	m.APDULength = aPDULength

	linkSpeed, err := ReadSimpleField[ReadableProperty](ctx, "linkSpeed", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'linkSpeed' field"))
	}
	m.LinkSpeed = linkSpeed

	linkSpeeds, err := ReadSimpleField[OptionalProperty](ctx, "linkSpeeds", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'linkSpeeds' field"))
	}
	m.LinkSpeeds = linkSpeeds

	linkSpeedAutonegotiate, err := ReadSimpleField[OptionalProperty](ctx, "linkSpeedAutonegotiate", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'linkSpeedAutonegotiate' field"))
	}
	m.LinkSpeedAutonegotiate = linkSpeedAutonegotiate

	networkInterfaceName, err := ReadSimpleField[OptionalProperty](ctx, "networkInterfaceName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'networkInterfaceName' field"))
	}
	m.NetworkInterfaceName = networkInterfaceName

	bACnetIPMode, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPMode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetIPMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPMode' field"))
	}
	m.BACnetIPMode = bACnetIPMode

	iPAddress, err := ReadSimpleField[OptionalProperty](ctx, "iPAddress", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPAddress' field"))
	}
	m.IPAddress = iPAddress

	bACnetIPUDPPort, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPUDPPort", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPUDPPort' field"))
	}
	m.BACnetIPUDPPort = bACnetIPUDPPort

	iPSubnetMask, err := ReadSimpleField[OptionalProperty](ctx, "iPSubnetMask", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPSubnetMask' field"))
	}
	m.IPSubnetMask = iPSubnetMask

	iPDefaultGateway, err := ReadSimpleField[OptionalProperty](ctx, "iPDefaultGateway", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPDefaultGateway' field"))
	}
	m.IPDefaultGateway = iPDefaultGateway

	bACnetIPMulticastAddress, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPMulticastAddress", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPMulticastAddress' field"))
	}
	m.BACnetIPMulticastAddress = bACnetIPMulticastAddress

	iPDNSServer, err := ReadSimpleField[OptionalProperty](ctx, "iPDNSServer", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPDNSServer' field"))
	}
	m.IPDNSServer = iPDNSServer

	iPDHCPEnable, err := ReadSimpleField[OptionalProperty](ctx, "iPDHCPEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPDHCPEnable' field"))
	}
	m.IPDHCPEnable = iPDHCPEnable

	iPDHCPLeaseTime, err := ReadSimpleField[OptionalProperty](ctx, "iPDHCPLeaseTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPDHCPLeaseTime' field"))
	}
	m.IPDHCPLeaseTime = iPDHCPLeaseTime

	iPDHCPLeaseTimeRemaining, err := ReadSimpleField[OptionalProperty](ctx, "iPDHCPLeaseTimeRemaining", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPDHCPLeaseTimeRemaining' field"))
	}
	m.IPDHCPLeaseTimeRemaining = iPDHCPLeaseTimeRemaining

	iPDHCPServer, err := ReadSimpleField[OptionalProperty](ctx, "iPDHCPServer", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPDHCPServer' field"))
	}
	m.IPDHCPServer = iPDHCPServer

	bACnetIPNATTraversal, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPNATTraversal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPNATTraversal' field"))
	}
	m.BACnetIPNATTraversal = bACnetIPNATTraversal

	bACnetIPGlobalAddress, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPGlobalAddress", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetHostNPort")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPGlobalAddress' field"))
	}
	m.BACnetIPGlobalAddress = bACnetIPGlobalAddress

	bBMDBroadcastDistributionTable, err := ReadSimpleField[OptionalProperty](ctx, "bBMDBroadcastDistributionTable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetBDTEntry")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bBMDBroadcastDistributionTable' field"))
	}
	m.BBMDBroadcastDistributionTable = bBMDBroadcastDistributionTable

	bBMDAcceptFDRegistrations, err := ReadSimpleField[OptionalProperty](ctx, "bBMDAcceptFDRegistrations", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bBMDAcceptFDRegistrations' field"))
	}
	m.BBMDAcceptFDRegistrations = bBMDAcceptFDRegistrations

	bBMDForeignDeviceTable, err := ReadSimpleField[OptionalProperty](ctx, "bBMDForeignDeviceTable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetFDTEntry")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bBMDForeignDeviceTable' field"))
	}
	m.BBMDForeignDeviceTable = bBMDForeignDeviceTable

	fDBBMDAddress, err := ReadSimpleField[OptionalProperty](ctx, "fDBBMDAddress", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetHostNPort")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'fDBBMDAddress' field"))
	}
	m.FDBBMDAddress = fDBBMDAddress

	fDSubscriptionLifetime, err := ReadSimpleField[OptionalProperty](ctx, "fDSubscriptionLifetime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'fDSubscriptionLifetime' field"))
	}
	m.FDSubscriptionLifetime = fDSubscriptionLifetime

	bACnetIPv6Mode, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPv6Mode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetIPMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPv6Mode' field"))
	}
	m.BACnetIPv6Mode = bACnetIPv6Mode

	iPv6Address, err := ReadSimpleField[OptionalProperty](ctx, "iPv6Address", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6Address' field"))
	}
	m.IPv6Address = iPv6Address

	iPv6PrefixLength, err := ReadSimpleField[OptionalProperty](ctx, "iPv6PrefixLength", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6PrefixLength' field"))
	}
	m.IPv6PrefixLength = iPv6PrefixLength

	bACnetIPv6UDPPort, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPv6UDPPort", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPv6UDPPort' field"))
	}
	m.BACnetIPv6UDPPort = bACnetIPv6UDPPort

	iPv6DefaultGateway, err := ReadSimpleField[OptionalProperty](ctx, "iPv6DefaultGateway", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6DefaultGateway' field"))
	}
	m.IPv6DefaultGateway = iPv6DefaultGateway

	bACnetIPv6MulticastAddress, err := ReadSimpleField[OptionalProperty](ctx, "bACnetIPv6MulticastAddress", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'bACnetIPv6MulticastAddress' field"))
	}
	m.BACnetIPv6MulticastAddress = bACnetIPv6MulticastAddress

	iPv6DNSServer, err := ReadSimpleField[OptionalProperty](ctx, "iPv6DNSServer", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6DNSServer' field"))
	}
	m.IPv6DNSServer = iPv6DNSServer

	iPv6AutoAddressingEnable, err := ReadSimpleField[OptionalProperty](ctx, "iPv6AutoAddressingEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6AutoAddressingEnable' field"))
	}
	m.IPv6AutoAddressingEnable = iPv6AutoAddressingEnable

	iPv6DHCPLeaseTime, err := ReadSimpleField[OptionalProperty](ctx, "iPv6DHCPLeaseTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6DHCPLeaseTime' field"))
	}
	m.IPv6DHCPLeaseTime = iPv6DHCPLeaseTime

	iPv6DHCPLeaseTimeRemaining, err := ReadSimpleField[OptionalProperty](ctx, "iPv6DHCPLeaseTimeRemaining", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6DHCPLeaseTimeRemaining' field"))
	}
	m.IPv6DHCPLeaseTimeRemaining = iPv6DHCPLeaseTimeRemaining

	iPv6DHCPServer, err := ReadSimpleField[OptionalProperty](ctx, "iPv6DHCPServer", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("OCTET STRING")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6DHCPServer' field"))
	}
	m.IPv6DHCPServer = iPv6DHCPServer

	iPv6ZoneIndex, err := ReadSimpleField[OptionalProperty](ctx, "iPv6ZoneIndex", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'iPv6ZoneIndex' field"))
	}
	m.IPv6ZoneIndex = iPv6ZoneIndex

	maxMaster, err := ReadSimpleField[OptionalProperty](ctx, "maxMaster", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned8(0..127)")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxMaster' field"))
	}
	m.MaxMaster = maxMaster

	maxInfoFrames, err := ReadSimpleField[OptionalProperty](ctx, "maxInfoFrames", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxInfoFrames' field"))
	}
	m.MaxInfoFrames = maxInfoFrames

	slaveProxyEnable, err := ReadSimpleField[OptionalProperty](ctx, "slaveProxyEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'slaveProxyEnable' field"))
	}
	m.SlaveProxyEnable = slaveProxyEnable

	manualSlaveAddressBinding, err := ReadSimpleField[OptionalProperty](ctx, "manualSlaveAddressBinding", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAddressBinding")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'manualSlaveAddressBinding' field"))
	}
	m.ManualSlaveAddressBinding = manualSlaveAddressBinding

	autoSlaveDiscovery, err := ReadSimpleField[OptionalProperty](ctx, "autoSlaveDiscovery", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'autoSlaveDiscovery' field"))
	}
	m.AutoSlaveDiscovery = autoSlaveDiscovery

	slaveAddressBinding, err := ReadSimpleField[OptionalProperty](ctx, "slaveAddressBinding", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAddressBinding")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'slaveAddressBinding' field"))
	}
	m.SlaveAddressBinding = slaveAddressBinding

	virtualMACAddressTable, err := ReadSimpleField[OptionalProperty](ctx, "virtualMACAddressTable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetVMACEntry")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'virtualMACAddressTable' field"))
	}
	m.VirtualMACAddressTable = virtualMACAddressTable

	routingTable, err := ReadSimpleField[OptionalProperty](ctx, "routingTable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetRouterEntry")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'routingTable' field"))
	}
	m.RoutingTable = routingTable

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("NetworkPort"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for NetworkPort")
	}

	return m, nil
}

func (m *_NetworkPort) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_NetworkPort) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("NetworkPort"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for NetworkPort")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "networkType", m.GetNetworkType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'networkType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "protocolLevel", m.GetProtocolLevel(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'protocolLevel' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "referencePort", m.GetReferencePort(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'referencePort' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "networkNumber", m.GetNetworkNumber(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'networkNumber' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "networkNumberQuality", m.GetNetworkNumberQuality(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'networkNumberQuality' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "changesPending", m.GetChangesPending(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'changesPending' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "command", m.GetCommand(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'command' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "mACAddress", m.GetMACAddress(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'mACAddress' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "aPDULength", m.GetAPDULength(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'aPDULength' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "linkSpeed", m.GetLinkSpeed(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'linkSpeed' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "linkSpeeds", m.GetLinkSpeeds(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'linkSpeeds' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "linkSpeedAutonegotiate", m.GetLinkSpeedAutonegotiate(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'linkSpeedAutonegotiate' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "networkInterfaceName", m.GetNetworkInterfaceName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'networkInterfaceName' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPMode", m.GetBACnetIPMode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPMode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPAddress", m.GetIPAddress(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPAddress' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPUDPPort", m.GetBACnetIPUDPPort(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPUDPPort' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPSubnetMask", m.GetIPSubnetMask(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPSubnetMask' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPDefaultGateway", m.GetIPDefaultGateway(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPDefaultGateway' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPMulticastAddress", m.GetBACnetIPMulticastAddress(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPMulticastAddress' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPDNSServer", m.GetIPDNSServer(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPDNSServer' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPDHCPEnable", m.GetIPDHCPEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPDHCPEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPDHCPLeaseTime", m.GetIPDHCPLeaseTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPDHCPLeaseTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPDHCPLeaseTimeRemaining", m.GetIPDHCPLeaseTimeRemaining(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPDHCPLeaseTimeRemaining' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPDHCPServer", m.GetIPDHCPServer(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPDHCPServer' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPNATTraversal", m.GetBACnetIPNATTraversal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPNATTraversal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPGlobalAddress", m.GetBACnetIPGlobalAddress(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPGlobalAddress' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bBMDBroadcastDistributionTable", m.GetBBMDBroadcastDistributionTable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bBMDBroadcastDistributionTable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bBMDAcceptFDRegistrations", m.GetBBMDAcceptFDRegistrations(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bBMDAcceptFDRegistrations' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bBMDForeignDeviceTable", m.GetBBMDForeignDeviceTable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bBMDForeignDeviceTable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "fDBBMDAddress", m.GetFDBBMDAddress(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'fDBBMDAddress' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "fDSubscriptionLifetime", m.GetFDSubscriptionLifetime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'fDSubscriptionLifetime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPv6Mode", m.GetBACnetIPv6Mode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPv6Mode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6Address", m.GetIPv6Address(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6Address' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6PrefixLength", m.GetIPv6PrefixLength(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6PrefixLength' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPv6UDPPort", m.GetBACnetIPv6UDPPort(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPv6UDPPort' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6DefaultGateway", m.GetIPv6DefaultGateway(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6DefaultGateway' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "bACnetIPv6MulticastAddress", m.GetBACnetIPv6MulticastAddress(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'bACnetIPv6MulticastAddress' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6DNSServer", m.GetIPv6DNSServer(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6DNSServer' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6AutoAddressingEnable", m.GetIPv6AutoAddressingEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6AutoAddressingEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6DHCPLeaseTime", m.GetIPv6DHCPLeaseTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6DHCPLeaseTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6DHCPLeaseTimeRemaining", m.GetIPv6DHCPLeaseTimeRemaining(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6DHCPLeaseTimeRemaining' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6DHCPServer", m.GetIPv6DHCPServer(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6DHCPServer' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "iPv6ZoneIndex", m.GetIPv6ZoneIndex(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'iPv6ZoneIndex' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxMaster", m.GetMaxMaster(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxMaster' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxInfoFrames", m.GetMaxInfoFrames(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxInfoFrames' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "slaveProxyEnable", m.GetSlaveProxyEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'slaveProxyEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "manualSlaveAddressBinding", m.GetManualSlaveAddressBinding(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'manualSlaveAddressBinding' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "autoSlaveDiscovery", m.GetAutoSlaveDiscovery(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'autoSlaveDiscovery' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "slaveAddressBinding", m.GetSlaveAddressBinding(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'slaveAddressBinding' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "virtualMACAddressTable", m.GetVirtualMACAddressTable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'virtualMACAddressTable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "routingTable", m.GetRoutingTable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'routingTable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("NetworkPort"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for NetworkPort")
	}
	return nil
}

func (m *_NetworkPort) IsNetworkPort() {}

func (m *_NetworkPort) DeepCopy() any {
	return m.deepCopy()
}

func (m *_NetworkPort) deepCopy() *_NetworkPort {
	if m == nil {
		return nil
	}
	_NetworkPortCopy := &_NetworkPort{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.NetworkType.DeepCopy().(ReadableProperty),
		m.ProtocolLevel.DeepCopy().(ReadableProperty),
		m.ReferencePort.DeepCopy().(OptionalProperty),
		m.NetworkNumber.DeepCopy().(ReadableProperty),
		m.NetworkNumberQuality.DeepCopy().(ReadableProperty),
		m.ChangesPending.DeepCopy().(ReadableProperty),
		m.Command.DeepCopy().(OptionalProperty),
		m.MACAddress.DeepCopy().(OptionalProperty),
		m.APDULength.DeepCopy().(ReadableProperty),
		m.LinkSpeed.DeepCopy().(ReadableProperty),
		m.LinkSpeeds.DeepCopy().(OptionalProperty),
		m.LinkSpeedAutonegotiate.DeepCopy().(OptionalProperty),
		m.NetworkInterfaceName.DeepCopy().(OptionalProperty),
		m.BACnetIPMode.DeepCopy().(OptionalProperty),
		m.IPAddress.DeepCopy().(OptionalProperty),
		m.BACnetIPUDPPort.DeepCopy().(OptionalProperty),
		m.IPSubnetMask.DeepCopy().(OptionalProperty),
		m.IPDefaultGateway.DeepCopy().(OptionalProperty),
		m.BACnetIPMulticastAddress.DeepCopy().(OptionalProperty),
		m.IPDNSServer.DeepCopy().(OptionalProperty),
		m.IPDHCPEnable.DeepCopy().(OptionalProperty),
		m.IPDHCPLeaseTime.DeepCopy().(OptionalProperty),
		m.IPDHCPLeaseTimeRemaining.DeepCopy().(OptionalProperty),
		m.IPDHCPServer.DeepCopy().(OptionalProperty),
		m.BACnetIPNATTraversal.DeepCopy().(OptionalProperty),
		m.BACnetIPGlobalAddress.DeepCopy().(OptionalProperty),
		m.BBMDBroadcastDistributionTable.DeepCopy().(OptionalProperty),
		m.BBMDAcceptFDRegistrations.DeepCopy().(OptionalProperty),
		m.BBMDForeignDeviceTable.DeepCopy().(OptionalProperty),
		m.FDBBMDAddress.DeepCopy().(OptionalProperty),
		m.FDSubscriptionLifetime.DeepCopy().(OptionalProperty),
		m.BACnetIPv6Mode.DeepCopy().(OptionalProperty),
		m.IPv6Address.DeepCopy().(OptionalProperty),
		m.IPv6PrefixLength.DeepCopy().(OptionalProperty),
		m.BACnetIPv6UDPPort.DeepCopy().(OptionalProperty),
		m.IPv6DefaultGateway.DeepCopy().(OptionalProperty),
		m.BACnetIPv6MulticastAddress.DeepCopy().(OptionalProperty),
		m.IPv6DNSServer.DeepCopy().(OptionalProperty),
		m.IPv6AutoAddressingEnable.DeepCopy().(OptionalProperty),
		m.IPv6DHCPLeaseTime.DeepCopy().(OptionalProperty),
		m.IPv6DHCPLeaseTimeRemaining.DeepCopy().(OptionalProperty),
		m.IPv6DHCPServer.DeepCopy().(OptionalProperty),
		m.IPv6ZoneIndex.DeepCopy().(OptionalProperty),
		m.MaxMaster.DeepCopy().(OptionalProperty),
		m.MaxInfoFrames.DeepCopy().(OptionalProperty),
		m.SlaveProxyEnable.DeepCopy().(OptionalProperty),
		m.ManualSlaveAddressBinding.DeepCopy().(OptionalProperty),
		m.AutoSlaveDiscovery.DeepCopy().(OptionalProperty),
		m.SlaveAddressBinding.DeepCopy().(OptionalProperty),
		m.VirtualMACAddressTable.DeepCopy().(OptionalProperty),
		m.RoutingTable.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _NetworkPortCopy
}

func (m *_NetworkPort) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
