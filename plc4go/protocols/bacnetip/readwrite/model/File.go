/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// File is the corresponding interface of File
type File interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetFileType returns FileType (property field)
	GetFileType() ReadableProperty
	// GetFileSize returns FileSize (property field)
	GetFileSize() ReadableProperty
	// GetModificationDate returns ModificationDate (property field)
	GetModificationDate() ReadableProperty
	// GetArchive returns Archive (property field)
	GetArchive() WritableProperty
	// GetReadOnly returns ReadOnly (property field)
	GetReadOnly() ReadableProperty
	// GetFileAccessMethod returns FileAccessMethod (property field)
	GetFileAccessMethod() ReadableProperty
	// GetRecordCount returns RecordCount (property field)
	GetRecordCount() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsFile is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsFile()
	// CreateBuilder creates a FileBuilder
	CreateFileBuilder() FileBuilder
}

// _File is the data-structure of this message
type _File struct {
	ObjectIdentifier ReadableProperty
	ObjectName       ReadableProperty
	ObjectType       ReadableProperty
	Description      OptionalProperty
	FileType         ReadableProperty
	FileSize         ReadableProperty
	ModificationDate ReadableProperty
	Archive          WritableProperty
	ReadOnly         ReadableProperty
	FileAccessMethod ReadableProperty
	RecordCount      OptionalProperty
	PropertyList     ReadableProperty
	Tags             OptionalProperty
	ProfileLocation  OptionalProperty
	ProfileName      OptionalProperty
}

var _ File = (*_File)(nil)

// NewFile factory function for _File
func NewFile(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, fileType ReadableProperty, fileSize ReadableProperty, modificationDate ReadableProperty, archive WritableProperty, readOnly ReadableProperty, fileAccessMethod ReadableProperty, recordCount OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_File {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for File must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for File must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for File must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for File must not be nil")
	}
	if fileType == nil {
		panic("fileType of type ReadableProperty for File must not be nil")
	}
	if fileSize == nil {
		panic("fileSize of type ReadableProperty for File must not be nil")
	}
	if modificationDate == nil {
		panic("modificationDate of type ReadableProperty for File must not be nil")
	}
	if archive == nil {
		panic("archive of type WritableProperty for File must not be nil")
	}
	if readOnly == nil {
		panic("readOnly of type ReadableProperty for File must not be nil")
	}
	if fileAccessMethod == nil {
		panic("fileAccessMethod of type ReadableProperty for File must not be nil")
	}
	if recordCount == nil {
		panic("recordCount of type OptionalProperty for File must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for File must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for File must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for File must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for File must not be nil")
	}
	return &_File{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, FileType: fileType, FileSize: fileSize, ModificationDate: modificationDate, Archive: archive, ReadOnly: readOnly, FileAccessMethod: fileAccessMethod, RecordCount: recordCount, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// FileBuilder is a builder for File
type FileBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, fileType ReadableProperty, fileSize ReadableProperty, modificationDate ReadableProperty, archive WritableProperty, readOnly ReadableProperty, fileAccessMethod ReadableProperty, recordCount OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) FileBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) FileBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) FileBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) FileBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) FileBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder
	// WithFileType adds FileType (property field)
	WithFileType(ReadableProperty) FileBuilder
	// WithFileTypeBuilder adds FileType (property field) which is build by the builder
	WithFileTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithFileSize adds FileSize (property field)
	WithFileSize(ReadableProperty) FileBuilder
	// WithFileSizeBuilder adds FileSize (property field) which is build by the builder
	WithFileSizeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithModificationDate adds ModificationDate (property field)
	WithModificationDate(ReadableProperty) FileBuilder
	// WithModificationDateBuilder adds ModificationDate (property field) which is build by the builder
	WithModificationDateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithArchive adds Archive (property field)
	WithArchive(WritableProperty) FileBuilder
	// WithArchiveBuilder adds Archive (property field) which is build by the builder
	WithArchiveBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) FileBuilder
	// WithReadOnly adds ReadOnly (property field)
	WithReadOnly(ReadableProperty) FileBuilder
	// WithReadOnlyBuilder adds ReadOnly (property field) which is build by the builder
	WithReadOnlyBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithFileAccessMethod adds FileAccessMethod (property field)
	WithFileAccessMethod(ReadableProperty) FileBuilder
	// WithFileAccessMethodBuilder adds FileAccessMethod (property field) which is build by the builder
	WithFileAccessMethodBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithRecordCount adds RecordCount (property field)
	WithRecordCount(OptionalProperty) FileBuilder
	// WithRecordCountBuilder adds RecordCount (property field) which is build by the builder
	WithRecordCountBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) FileBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) FileBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) FileBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) FileBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder
	// Build builds the File or returns an error if something is wrong
	Build() (File, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() File
}

// NewFileBuilder() creates a FileBuilder
func NewFileBuilder() FileBuilder {
	return &_FileBuilder{_File: new(_File)}
}

type _FileBuilder struct {
	*_File

	err *utils.MultiError
}

var _ (FileBuilder) = (*_FileBuilder)(nil)

func (b *_FileBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, fileType ReadableProperty, fileSize ReadableProperty, modificationDate ReadableProperty, archive WritableProperty, readOnly ReadableProperty, fileAccessMethod ReadableProperty, recordCount OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) FileBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithFileType(fileType).WithFileSize(fileSize).WithModificationDate(modificationDate).WithArchive(archive).WithReadOnly(readOnly).WithFileAccessMethod(fileAccessMethod).WithRecordCount(recordCount).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_FileBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) FileBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_FileBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithObjectName(objectName ReadableProperty) FileBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_FileBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithObjectType(objectType ReadableProperty) FileBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_FileBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithDescription(description OptionalProperty) FileBuilder {
	b.Description = description
	return b
}

func (b *_FileBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithFileType(fileType ReadableProperty) FileBuilder {
	b.FileType = fileType
	return b
}

func (b *_FileBuilder) WithFileTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.FileType.CreateReadablePropertyBuilder())
	var err error
	b.FileType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithFileSize(fileSize ReadableProperty) FileBuilder {
	b.FileSize = fileSize
	return b
}

func (b *_FileBuilder) WithFileSizeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.FileSize.CreateReadablePropertyBuilder())
	var err error
	b.FileSize, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithModificationDate(modificationDate ReadableProperty) FileBuilder {
	b.ModificationDate = modificationDate
	return b
}

func (b *_FileBuilder) WithModificationDateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ModificationDate.CreateReadablePropertyBuilder())
	var err error
	b.ModificationDate, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithArchive(archive WritableProperty) FileBuilder {
	b.Archive = archive
	return b
}

func (b *_FileBuilder) WithArchiveBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.Archive.CreateWritablePropertyBuilder())
	var err error
	b.Archive, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithReadOnly(readOnly ReadableProperty) FileBuilder {
	b.ReadOnly = readOnly
	return b
}

func (b *_FileBuilder) WithReadOnlyBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ReadOnly.CreateReadablePropertyBuilder())
	var err error
	b.ReadOnly, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithFileAccessMethod(fileAccessMethod ReadableProperty) FileBuilder {
	b.FileAccessMethod = fileAccessMethod
	return b
}

func (b *_FileBuilder) WithFileAccessMethodBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.FileAccessMethod.CreateReadablePropertyBuilder())
	var err error
	b.FileAccessMethod, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithRecordCount(recordCount OptionalProperty) FileBuilder {
	b.RecordCount = recordCount
	return b
}

func (b *_FileBuilder) WithRecordCountBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder {
	builder := builderSupplier(b.RecordCount.CreateOptionalPropertyBuilder())
	var err error
	b.RecordCount, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithPropertyList(propertyList ReadableProperty) FileBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_FileBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) FileBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithTags(tags OptionalProperty) FileBuilder {
	b.Tags = tags
	return b
}

func (b *_FileBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithProfileLocation(profileLocation OptionalProperty) FileBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_FileBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) WithProfileName(profileName OptionalProperty) FileBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_FileBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) FileBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_FileBuilder) Build() (File, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.FileType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'fileType' not set"))
	}
	if b.FileSize == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'fileSize' not set"))
	}
	if b.ModificationDate == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'modificationDate' not set"))
	}
	if b.Archive == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'archive' not set"))
	}
	if b.ReadOnly == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'readOnly' not set"))
	}
	if b.FileAccessMethod == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'fileAccessMethod' not set"))
	}
	if b.RecordCount == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'recordCount' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._File.deepCopy(), nil
}

func (b *_FileBuilder) MustBuild() File {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_FileBuilder) DeepCopy() any {
	_copy := b.CreateFileBuilder().(*_FileBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateFileBuilder creates a FileBuilder
func (b *_File) CreateFileBuilder() FileBuilder {
	if b == nil {
		return NewFileBuilder()
	}
	return &_FileBuilder{_File: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_File) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_File) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_File) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_File) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_File) GetFileType() ReadableProperty {
	return m.FileType
}

func (m *_File) GetFileSize() ReadableProperty {
	return m.FileSize
}

func (m *_File) GetModificationDate() ReadableProperty {
	return m.ModificationDate
}

func (m *_File) GetArchive() WritableProperty {
	return m.Archive
}

func (m *_File) GetReadOnly() ReadableProperty {
	return m.ReadOnly
}

func (m *_File) GetFileAccessMethod() ReadableProperty {
	return m.FileAccessMethod
}

func (m *_File) GetRecordCount() OptionalProperty {
	return m.RecordCount
}

func (m *_File) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_File) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_File) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_File) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastFile(structType any) File {
	if casted, ok := structType.(File); ok {
		return casted
	}
	if casted, ok := structType.(*File); ok {
		return *casted
	}
	return nil
}

func (m *_File) GetTypeName() string {
	return "File"
}

func (m *_File) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (fileType)
	lengthInBits += m.FileType.GetLengthInBits(ctx)

	// Simple field (fileSize)
	lengthInBits += m.FileSize.GetLengthInBits(ctx)

	// Simple field (modificationDate)
	lengthInBits += m.ModificationDate.GetLengthInBits(ctx)

	// Simple field (archive)
	lengthInBits += m.Archive.GetLengthInBits(ctx)

	// Simple field (readOnly)
	lengthInBits += m.ReadOnly.GetLengthInBits(ctx)

	// Simple field (fileAccessMethod)
	lengthInBits += m.FileAccessMethod.GetLengthInBits(ctx)

	// Simple field (recordCount)
	lengthInBits += m.RecordCount.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_File) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func FileParse(ctx context.Context, theBytes []byte) (File, error) {
	return FileParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func FileParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (File, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (File, error) {
		return FileParseWithBuffer(ctx, readBuffer)
	}
}

func FileParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (File, error) {
	v, err := (&_File{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_File) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__file File, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("File"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for File")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	fileType, err := ReadSimpleField[ReadableProperty](ctx, "fileType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'fileType' field"))
	}
	m.FileType = fileType

	fileSize, err := ReadSimpleField[ReadableProperty](ctx, "fileSize", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'fileSize' field"))
	}
	m.FileSize = fileSize

	modificationDate, err := ReadSimpleField[ReadableProperty](ctx, "modificationDate", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'modificationDate' field"))
	}
	m.ModificationDate = modificationDate

	archive, err := ReadSimpleField[WritableProperty](ctx, "archive", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'archive' field"))
	}
	m.Archive = archive

	readOnly, err := ReadSimpleField[ReadableProperty](ctx, "readOnly", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'readOnly' field"))
	}
	m.ReadOnly = readOnly

	fileAccessMethod, err := ReadSimpleField[ReadableProperty](ctx, "fileAccessMethod", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetFileAccessMethod")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'fileAccessMethod' field"))
	}
	m.FileAccessMethod = fileAccessMethod

	recordCount, err := ReadSimpleField[OptionalProperty](ctx, "recordCount", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'recordCount' field"))
	}
	m.RecordCount = recordCount

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("File"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for File")
	}

	return m, nil
}

func (m *_File) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_File) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("File"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for File")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "fileType", m.GetFileType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'fileType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "fileSize", m.GetFileSize(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'fileSize' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "modificationDate", m.GetModificationDate(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'modificationDate' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "archive", m.GetArchive(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'archive' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "readOnly", m.GetReadOnly(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'readOnly' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "fileAccessMethod", m.GetFileAccessMethod(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'fileAccessMethod' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "recordCount", m.GetRecordCount(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'recordCount' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("File"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for File")
	}
	return nil
}

func (m *_File) IsFile() {}

func (m *_File) DeepCopy() any {
	return m.deepCopy()
}

func (m *_File) deepCopy() *_File {
	if m == nil {
		return nil
	}
	_FileCopy := &_File{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.FileType.DeepCopy().(ReadableProperty),
		m.FileSize.DeepCopy().(ReadableProperty),
		m.ModificationDate.DeepCopy().(ReadableProperty),
		m.Archive.DeepCopy().(WritableProperty),
		m.ReadOnly.DeepCopy().(ReadableProperty),
		m.FileAccessMethod.DeepCopy().(ReadableProperty),
		m.RecordCount.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _FileCopy
}

func (m *_File) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
