/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// StructuredView is the corresponding interface of StructuredView
type StructuredView interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetNodeType returns NodeType (property field)
	GetNodeType() ReadableProperty
	// GetNodeSubtype returns NodeSubtype (property field)
	GetNodeSubtype() OptionalProperty
	// GetSubordinateList returns SubordinateList (property field)
	GetSubordinateList() ReadableProperty
	// GetSubordinateAnnotations returns SubordinateAnnotations (property field)
	GetSubordinateAnnotations() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetSubordinateTags returns SubordinateTags (property field)
	GetSubordinateTags() OptionalProperty
	// GetSubordinateNodeTypes returns SubordinateNodeTypes (property field)
	GetSubordinateNodeTypes() OptionalProperty
	// GetSubordinateRelationships returns SubordinateRelationships (property field)
	GetSubordinateRelationships() OptionalProperty
	// GetDefaultSubordinateRelationship returns DefaultSubordinateRelationship (property field)
	GetDefaultSubordinateRelationship() OptionalProperty
	// GetRepresents returns Represents (property field)
	GetRepresents() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsStructuredView is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsStructuredView()
	// CreateBuilder creates a StructuredViewBuilder
	CreateStructuredViewBuilder() StructuredViewBuilder
}

// _StructuredView is the data-structure of this message
type _StructuredView struct {
	ObjectIdentifier               ReadableProperty
	ObjectName                     ReadableProperty
	ObjectType                     ReadableProperty
	Description                    OptionalProperty
	NodeType                       ReadableProperty
	NodeSubtype                    OptionalProperty
	SubordinateList                ReadableProperty
	SubordinateAnnotations         OptionalProperty
	PropertyList                   ReadableProperty
	SubordinateTags                OptionalProperty
	SubordinateNodeTypes           OptionalProperty
	SubordinateRelationships       OptionalProperty
	DefaultSubordinateRelationship OptionalProperty
	Represents                     OptionalProperty
	Tags                           OptionalProperty
	ProfileLocation                OptionalProperty
	ProfileName                    OptionalProperty
}

var _ StructuredView = (*_StructuredView)(nil)

// NewStructuredView factory function for _StructuredView
func NewStructuredView(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, nodeType ReadableProperty, nodeSubtype OptionalProperty, subordinateList ReadableProperty, subordinateAnnotations OptionalProperty, propertyList ReadableProperty, subordinateTags OptionalProperty, subordinateNodeTypes OptionalProperty, subordinateRelationships OptionalProperty, defaultSubordinateRelationship OptionalProperty, represents OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_StructuredView {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for StructuredView must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for StructuredView must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for StructuredView must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for StructuredView must not be nil")
	}
	if nodeType == nil {
		panic("nodeType of type ReadableProperty for StructuredView must not be nil")
	}
	if nodeSubtype == nil {
		panic("nodeSubtype of type OptionalProperty for StructuredView must not be nil")
	}
	if subordinateList == nil {
		panic("subordinateList of type ReadableProperty for StructuredView must not be nil")
	}
	if subordinateAnnotations == nil {
		panic("subordinateAnnotations of type OptionalProperty for StructuredView must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for StructuredView must not be nil")
	}
	if subordinateTags == nil {
		panic("subordinateTags of type OptionalProperty for StructuredView must not be nil")
	}
	if subordinateNodeTypes == nil {
		panic("subordinateNodeTypes of type OptionalProperty for StructuredView must not be nil")
	}
	if subordinateRelationships == nil {
		panic("subordinateRelationships of type OptionalProperty for StructuredView must not be nil")
	}
	if defaultSubordinateRelationship == nil {
		panic("defaultSubordinateRelationship of type OptionalProperty for StructuredView must not be nil")
	}
	if represents == nil {
		panic("represents of type OptionalProperty for StructuredView must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for StructuredView must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for StructuredView must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for StructuredView must not be nil")
	}
	return &_StructuredView{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, NodeType: nodeType, NodeSubtype: nodeSubtype, SubordinateList: subordinateList, SubordinateAnnotations: subordinateAnnotations, PropertyList: propertyList, SubordinateTags: subordinateTags, SubordinateNodeTypes: subordinateNodeTypes, SubordinateRelationships: subordinateRelationships, DefaultSubordinateRelationship: defaultSubordinateRelationship, Represents: represents, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// StructuredViewBuilder is a builder for StructuredView
type StructuredViewBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, nodeType ReadableProperty, nodeSubtype OptionalProperty, subordinateList ReadableProperty, subordinateAnnotations OptionalProperty, propertyList ReadableProperty, subordinateTags OptionalProperty, subordinateNodeTypes OptionalProperty, subordinateRelationships OptionalProperty, defaultSubordinateRelationship OptionalProperty, represents OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) StructuredViewBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) StructuredViewBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) StructuredViewBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) StructuredViewBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) StructuredViewBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithNodeType adds NodeType (property field)
	WithNodeType(ReadableProperty) StructuredViewBuilder
	// WithNodeTypeBuilder adds NodeType (property field) which is build by the builder
	WithNodeTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder
	// WithNodeSubtype adds NodeSubtype (property field)
	WithNodeSubtype(OptionalProperty) StructuredViewBuilder
	// WithNodeSubtypeBuilder adds NodeSubtype (property field) which is build by the builder
	WithNodeSubtypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithSubordinateList adds SubordinateList (property field)
	WithSubordinateList(ReadableProperty) StructuredViewBuilder
	// WithSubordinateListBuilder adds SubordinateList (property field) which is build by the builder
	WithSubordinateListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder
	// WithSubordinateAnnotations adds SubordinateAnnotations (property field)
	WithSubordinateAnnotations(OptionalProperty) StructuredViewBuilder
	// WithSubordinateAnnotationsBuilder adds SubordinateAnnotations (property field) which is build by the builder
	WithSubordinateAnnotationsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) StructuredViewBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder
	// WithSubordinateTags adds SubordinateTags (property field)
	WithSubordinateTags(OptionalProperty) StructuredViewBuilder
	// WithSubordinateTagsBuilder adds SubordinateTags (property field) which is build by the builder
	WithSubordinateTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithSubordinateNodeTypes adds SubordinateNodeTypes (property field)
	WithSubordinateNodeTypes(OptionalProperty) StructuredViewBuilder
	// WithSubordinateNodeTypesBuilder adds SubordinateNodeTypes (property field) which is build by the builder
	WithSubordinateNodeTypesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithSubordinateRelationships adds SubordinateRelationships (property field)
	WithSubordinateRelationships(OptionalProperty) StructuredViewBuilder
	// WithSubordinateRelationshipsBuilder adds SubordinateRelationships (property field) which is build by the builder
	WithSubordinateRelationshipsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithDefaultSubordinateRelationship adds DefaultSubordinateRelationship (property field)
	WithDefaultSubordinateRelationship(OptionalProperty) StructuredViewBuilder
	// WithDefaultSubordinateRelationshipBuilder adds DefaultSubordinateRelationship (property field) which is build by the builder
	WithDefaultSubordinateRelationshipBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithRepresents adds Represents (property field)
	WithRepresents(OptionalProperty) StructuredViewBuilder
	// WithRepresentsBuilder adds Represents (property field) which is build by the builder
	WithRepresentsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) StructuredViewBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) StructuredViewBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) StructuredViewBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder
	// Build builds the StructuredView or returns an error if something is wrong
	Build() (StructuredView, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() StructuredView
}

// NewStructuredViewBuilder() creates a StructuredViewBuilder
func NewStructuredViewBuilder() StructuredViewBuilder {
	return &_StructuredViewBuilder{_StructuredView: new(_StructuredView)}
}

type _StructuredViewBuilder struct {
	*_StructuredView

	err *utils.MultiError
}

var _ (StructuredViewBuilder) = (*_StructuredViewBuilder)(nil)

func (b *_StructuredViewBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, nodeType ReadableProperty, nodeSubtype OptionalProperty, subordinateList ReadableProperty, subordinateAnnotations OptionalProperty, propertyList ReadableProperty, subordinateTags OptionalProperty, subordinateNodeTypes OptionalProperty, subordinateRelationships OptionalProperty, defaultSubordinateRelationship OptionalProperty, represents OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) StructuredViewBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithNodeType(nodeType).WithNodeSubtype(nodeSubtype).WithSubordinateList(subordinateList).WithSubordinateAnnotations(subordinateAnnotations).WithPropertyList(propertyList).WithSubordinateTags(subordinateTags).WithSubordinateNodeTypes(subordinateNodeTypes).WithSubordinateRelationships(subordinateRelationships).WithDefaultSubordinateRelationship(defaultSubordinateRelationship).WithRepresents(represents).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_StructuredViewBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) StructuredViewBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_StructuredViewBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithObjectName(objectName ReadableProperty) StructuredViewBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_StructuredViewBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithObjectType(objectType ReadableProperty) StructuredViewBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_StructuredViewBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithDescription(description OptionalProperty) StructuredViewBuilder {
	b.Description = description
	return b
}

func (b *_StructuredViewBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithNodeType(nodeType ReadableProperty) StructuredViewBuilder {
	b.NodeType = nodeType
	return b
}

func (b *_StructuredViewBuilder) WithNodeTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.NodeType.CreateReadablePropertyBuilder())
	var err error
	b.NodeType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithNodeSubtype(nodeSubtype OptionalProperty) StructuredViewBuilder {
	b.NodeSubtype = nodeSubtype
	return b
}

func (b *_StructuredViewBuilder) WithNodeSubtypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.NodeSubtype.CreateOptionalPropertyBuilder())
	var err error
	b.NodeSubtype, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateList(subordinateList ReadableProperty) StructuredViewBuilder {
	b.SubordinateList = subordinateList
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.SubordinateList.CreateReadablePropertyBuilder())
	var err error
	b.SubordinateList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateAnnotations(subordinateAnnotations OptionalProperty) StructuredViewBuilder {
	b.SubordinateAnnotations = subordinateAnnotations
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateAnnotationsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.SubordinateAnnotations.CreateOptionalPropertyBuilder())
	var err error
	b.SubordinateAnnotations, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithPropertyList(propertyList ReadableProperty) StructuredViewBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_StructuredViewBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateTags(subordinateTags OptionalProperty) StructuredViewBuilder {
	b.SubordinateTags = subordinateTags
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.SubordinateTags.CreateOptionalPropertyBuilder())
	var err error
	b.SubordinateTags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateNodeTypes(subordinateNodeTypes OptionalProperty) StructuredViewBuilder {
	b.SubordinateNodeTypes = subordinateNodeTypes
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateNodeTypesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.SubordinateNodeTypes.CreateOptionalPropertyBuilder())
	var err error
	b.SubordinateNodeTypes, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateRelationships(subordinateRelationships OptionalProperty) StructuredViewBuilder {
	b.SubordinateRelationships = subordinateRelationships
	return b
}

func (b *_StructuredViewBuilder) WithSubordinateRelationshipsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.SubordinateRelationships.CreateOptionalPropertyBuilder())
	var err error
	b.SubordinateRelationships, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithDefaultSubordinateRelationship(defaultSubordinateRelationship OptionalProperty) StructuredViewBuilder {
	b.DefaultSubordinateRelationship = defaultSubordinateRelationship
	return b
}

func (b *_StructuredViewBuilder) WithDefaultSubordinateRelationshipBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.DefaultSubordinateRelationship.CreateOptionalPropertyBuilder())
	var err error
	b.DefaultSubordinateRelationship, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithRepresents(represents OptionalProperty) StructuredViewBuilder {
	b.Represents = represents
	return b
}

func (b *_StructuredViewBuilder) WithRepresentsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.Represents.CreateOptionalPropertyBuilder())
	var err error
	b.Represents, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithTags(tags OptionalProperty) StructuredViewBuilder {
	b.Tags = tags
	return b
}

func (b *_StructuredViewBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithProfileLocation(profileLocation OptionalProperty) StructuredViewBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_StructuredViewBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) WithProfileName(profileName OptionalProperty) StructuredViewBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_StructuredViewBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) StructuredViewBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_StructuredViewBuilder) Build() (StructuredView, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.NodeType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'nodeType' not set"))
	}
	if b.NodeSubtype == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'nodeSubtype' not set"))
	}
	if b.SubordinateList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'subordinateList' not set"))
	}
	if b.SubordinateAnnotations == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'subordinateAnnotations' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.SubordinateTags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'subordinateTags' not set"))
	}
	if b.SubordinateNodeTypes == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'subordinateNodeTypes' not set"))
	}
	if b.SubordinateRelationships == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'subordinateRelationships' not set"))
	}
	if b.DefaultSubordinateRelationship == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'defaultSubordinateRelationship' not set"))
	}
	if b.Represents == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'represents' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._StructuredView.deepCopy(), nil
}

func (b *_StructuredViewBuilder) MustBuild() StructuredView {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_StructuredViewBuilder) DeepCopy() any {
	_copy := b.CreateStructuredViewBuilder().(*_StructuredViewBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateStructuredViewBuilder creates a StructuredViewBuilder
func (b *_StructuredView) CreateStructuredViewBuilder() StructuredViewBuilder {
	if b == nil {
		return NewStructuredViewBuilder()
	}
	return &_StructuredViewBuilder{_StructuredView: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_StructuredView) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_StructuredView) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_StructuredView) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_StructuredView) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_StructuredView) GetNodeType() ReadableProperty {
	return m.NodeType
}

func (m *_StructuredView) GetNodeSubtype() OptionalProperty {
	return m.NodeSubtype
}

func (m *_StructuredView) GetSubordinateList() ReadableProperty {
	return m.SubordinateList
}

func (m *_StructuredView) GetSubordinateAnnotations() OptionalProperty {
	return m.SubordinateAnnotations
}

func (m *_StructuredView) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_StructuredView) GetSubordinateTags() OptionalProperty {
	return m.SubordinateTags
}

func (m *_StructuredView) GetSubordinateNodeTypes() OptionalProperty {
	return m.SubordinateNodeTypes
}

func (m *_StructuredView) GetSubordinateRelationships() OptionalProperty {
	return m.SubordinateRelationships
}

func (m *_StructuredView) GetDefaultSubordinateRelationship() OptionalProperty {
	return m.DefaultSubordinateRelationship
}

func (m *_StructuredView) GetRepresents() OptionalProperty {
	return m.Represents
}

func (m *_StructuredView) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_StructuredView) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_StructuredView) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastStructuredView(structType any) StructuredView {
	if casted, ok := structType.(StructuredView); ok {
		return casted
	}
	if casted, ok := structType.(*StructuredView); ok {
		return *casted
	}
	return nil
}

func (m *_StructuredView) GetTypeName() string {
	return "StructuredView"
}

func (m *_StructuredView) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (nodeType)
	lengthInBits += m.NodeType.GetLengthInBits(ctx)

	// Simple field (nodeSubtype)
	lengthInBits += m.NodeSubtype.GetLengthInBits(ctx)

	// Simple field (subordinateList)
	lengthInBits += m.SubordinateList.GetLengthInBits(ctx)

	// Simple field (subordinateAnnotations)
	lengthInBits += m.SubordinateAnnotations.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (subordinateTags)
	lengthInBits += m.SubordinateTags.GetLengthInBits(ctx)

	// Simple field (subordinateNodeTypes)
	lengthInBits += m.SubordinateNodeTypes.GetLengthInBits(ctx)

	// Simple field (subordinateRelationships)
	lengthInBits += m.SubordinateRelationships.GetLengthInBits(ctx)

	// Simple field (defaultSubordinateRelationship)
	lengthInBits += m.DefaultSubordinateRelationship.GetLengthInBits(ctx)

	// Simple field (represents)
	lengthInBits += m.Represents.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_StructuredView) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func StructuredViewParse(ctx context.Context, theBytes []byte) (StructuredView, error) {
	return StructuredViewParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func StructuredViewParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (StructuredView, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (StructuredView, error) {
		return StructuredViewParseWithBuffer(ctx, readBuffer)
	}
}

func StructuredViewParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (StructuredView, error) {
	v, err := (&_StructuredView{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_StructuredView) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__structuredView StructuredView, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("StructuredView"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for StructuredView")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	nodeType, err := ReadSimpleField[ReadableProperty](ctx, "nodeType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetNodeType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'nodeType' field"))
	}
	m.NodeType = nodeType

	nodeSubtype, err := ReadSimpleField[OptionalProperty](ctx, "nodeSubtype", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'nodeSubtype' field"))
	}
	m.NodeSubtype = nodeSubtype

	subordinateList, err := ReadSimpleField[ReadableProperty](ctx, "subordinateList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subordinateList' field"))
	}
	m.SubordinateList = subordinateList

	subordinateAnnotations, err := ReadSimpleField[OptionalProperty](ctx, "subordinateAnnotations", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subordinateAnnotations' field"))
	}
	m.SubordinateAnnotations = subordinateAnnotations

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	subordinateTags, err := ReadSimpleField[OptionalProperty](ctx, "subordinateTags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValueCollection")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subordinateTags' field"))
	}
	m.SubordinateTags = subordinateTags

	subordinateNodeTypes, err := ReadSimpleField[OptionalProperty](ctx, "subordinateNodeTypes", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNodeType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subordinateNodeTypes' field"))
	}
	m.SubordinateNodeTypes = subordinateNodeTypes

	subordinateRelationships, err := ReadSimpleField[OptionalProperty](ctx, "subordinateRelationships", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetRelationship")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'subordinateRelationships' field"))
	}
	m.SubordinateRelationships = subordinateRelationships

	defaultSubordinateRelationship, err := ReadSimpleField[OptionalProperty](ctx, "defaultSubordinateRelationship", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetRelationship")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'defaultSubordinateRelationship' field"))
	}
	m.DefaultSubordinateRelationship = defaultSubordinateRelationship

	represents, err := ReadSimpleField[OptionalProperty](ctx, "represents", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'represents' field"))
	}
	m.Represents = represents

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("StructuredView"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for StructuredView")
	}

	return m, nil
}

func (m *_StructuredView) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_StructuredView) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("StructuredView"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for StructuredView")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "nodeType", m.GetNodeType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'nodeType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "nodeSubtype", m.GetNodeSubtype(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'nodeSubtype' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "subordinateList", m.GetSubordinateList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'subordinateList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "subordinateAnnotations", m.GetSubordinateAnnotations(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'subordinateAnnotations' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "subordinateTags", m.GetSubordinateTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'subordinateTags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "subordinateNodeTypes", m.GetSubordinateNodeTypes(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'subordinateNodeTypes' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "subordinateRelationships", m.GetSubordinateRelationships(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'subordinateRelationships' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "defaultSubordinateRelationship", m.GetDefaultSubordinateRelationship(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'defaultSubordinateRelationship' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "represents", m.GetRepresents(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'represents' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("StructuredView"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for StructuredView")
	}
	return nil
}

func (m *_StructuredView) IsStructuredView() {}

func (m *_StructuredView) DeepCopy() any {
	return m.deepCopy()
}

func (m *_StructuredView) deepCopy() *_StructuredView {
	if m == nil {
		return nil
	}
	_StructuredViewCopy := &_StructuredView{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.NodeType.DeepCopy().(ReadableProperty),
		m.NodeSubtype.DeepCopy().(OptionalProperty),
		m.SubordinateList.DeepCopy().(ReadableProperty),
		m.SubordinateAnnotations.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.SubordinateTags.DeepCopy().(OptionalProperty),
		m.SubordinateNodeTypes.DeepCopy().(OptionalProperty),
		m.SubordinateRelationships.DeepCopy().(OptionalProperty),
		m.DefaultSubordinateRelationship.DeepCopy().(OptionalProperty),
		m.Represents.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _StructuredViewCopy
}

func (m *_StructuredView) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
