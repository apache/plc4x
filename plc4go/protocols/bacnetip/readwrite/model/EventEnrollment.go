/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// EventEnrollment is the corresponding interface of EventEnrollment
type EventEnrollment interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetEventType returns EventType (property field)
	GetEventType() ReadableProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() ReadableProperty
	// GetEventParameters returns EventParameters (property field)
	GetEventParameters() ReadableProperty
	// GetObjectPropertyReference returns ObjectPropertyReference (property field)
	GetObjectPropertyReference() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() ReadableProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() ReadableProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() ReadableProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() ReadableProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() ReadableProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetFaultType returns FaultType (property field)
	GetFaultType() OptionalProperty
	// GetFaultParameters returns FaultParameters (property field)
	GetFaultParameters() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() ReadableProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsEventEnrollment is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsEventEnrollment()
	// CreateBuilder creates a EventEnrollmentBuilder
	CreateEventEnrollmentBuilder() EventEnrollmentBuilder
}

// _EventEnrollment is the data-structure of this message
type _EventEnrollment struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	EventType                    ReadableProperty
	NotifyType                   ReadableProperty
	EventParameters              ReadableProperty
	ObjectPropertyReference      ReadableProperty
	EventState                   ReadableProperty
	EventEnable                  ReadableProperty
	AckedTransitions             ReadableProperty
	NotificationClass            ReadableProperty
	EventTimeStamps              ReadableProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         ReadableProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              ReadableProperty
	StatusFlags                  ReadableProperty
	Reliability                  ReadableProperty
	FaultType                    OptionalProperty
	FaultParameters              OptionalProperty
	ReliabilityEvaluationInhibit ReadableProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ EventEnrollment = (*_EventEnrollment)(nil)

// NewEventEnrollment factory function for _EventEnrollment
func NewEventEnrollment(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, eventType ReadableProperty, notifyType ReadableProperty, eventParameters ReadableProperty, objectPropertyReference ReadableProperty, eventState ReadableProperty, eventEnable ReadableProperty, ackedTransitions ReadableProperty, notificationClass ReadableProperty, eventTimeStamps ReadableProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable ReadableProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal ReadableProperty, statusFlags ReadableProperty, reliability ReadableProperty, faultType OptionalProperty, faultParameters OptionalProperty, reliabilityEvaluationInhibit ReadableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_EventEnrollment {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for EventEnrollment must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for EventEnrollment must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for EventEnrollment must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for EventEnrollment must not be nil")
	}
	if eventType == nil {
		panic("eventType of type ReadableProperty for EventEnrollment must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type ReadableProperty for EventEnrollment must not be nil")
	}
	if eventParameters == nil {
		panic("eventParameters of type ReadableProperty for EventEnrollment must not be nil")
	}
	if objectPropertyReference == nil {
		panic("objectPropertyReference of type ReadableProperty for EventEnrollment must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for EventEnrollment must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type ReadableProperty for EventEnrollment must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type ReadableProperty for EventEnrollment must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type ReadableProperty for EventEnrollment must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type ReadableProperty for EventEnrollment must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for EventEnrollment must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for EventEnrollment must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type ReadableProperty for EventEnrollment must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for EventEnrollment must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for EventEnrollment must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type ReadableProperty for EventEnrollment must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for EventEnrollment must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for EventEnrollment must not be nil")
	}
	if faultType == nil {
		panic("faultType of type OptionalProperty for EventEnrollment must not be nil")
	}
	if faultParameters == nil {
		panic("faultParameters of type OptionalProperty for EventEnrollment must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type ReadableProperty for EventEnrollment must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for EventEnrollment must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for EventEnrollment must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for EventEnrollment must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for EventEnrollment must not be nil")
	}
	return &_EventEnrollment{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, EventType: eventType, NotifyType: notifyType, EventParameters: eventParameters, ObjectPropertyReference: objectPropertyReference, EventState: eventState, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotificationClass: notificationClass, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, StatusFlags: statusFlags, Reliability: reliability, FaultType: faultType, FaultParameters: faultParameters, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// EventEnrollmentBuilder is a builder for EventEnrollment
type EventEnrollmentBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, eventType ReadableProperty, notifyType ReadableProperty, eventParameters ReadableProperty, objectPropertyReference ReadableProperty, eventState ReadableProperty, eventEnable ReadableProperty, ackedTransitions ReadableProperty, notificationClass ReadableProperty, eventTimeStamps ReadableProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable ReadableProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal ReadableProperty, statusFlags ReadableProperty, reliability ReadableProperty, faultType OptionalProperty, faultParameters OptionalProperty, reliabilityEvaluationInhibit ReadableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) EventEnrollmentBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) EventEnrollmentBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) EventEnrollmentBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) EventEnrollmentBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) EventEnrollmentBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithEventType adds EventType (property field)
	WithEventType(ReadableProperty) EventEnrollmentBuilder
	// WithEventTypeBuilder adds EventType (property field) which is build by the builder
	WithEventTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(ReadableProperty) EventEnrollmentBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithEventParameters adds EventParameters (property field)
	WithEventParameters(ReadableProperty) EventEnrollmentBuilder
	// WithEventParametersBuilder adds EventParameters (property field) which is build by the builder
	WithEventParametersBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithObjectPropertyReference adds ObjectPropertyReference (property field)
	WithObjectPropertyReference(ReadableProperty) EventEnrollmentBuilder
	// WithObjectPropertyReferenceBuilder adds ObjectPropertyReference (property field) which is build by the builder
	WithObjectPropertyReferenceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) EventEnrollmentBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(ReadableProperty) EventEnrollmentBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(ReadableProperty) EventEnrollmentBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(ReadableProperty) EventEnrollmentBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(ReadableProperty) EventEnrollmentBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) EventEnrollmentBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) EventEnrollmentBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(ReadableProperty) EventEnrollmentBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) EventEnrollmentBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) EventEnrollmentBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(ReadableProperty) EventEnrollmentBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) EventEnrollmentBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) EventEnrollmentBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithFaultType adds FaultType (property field)
	WithFaultType(OptionalProperty) EventEnrollmentBuilder
	// WithFaultTypeBuilder adds FaultType (property field) which is build by the builder
	WithFaultTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithFaultParameters adds FaultParameters (property field)
	WithFaultParameters(OptionalProperty) EventEnrollmentBuilder
	// WithFaultParametersBuilder adds FaultParameters (property field) which is build by the builder
	WithFaultParametersBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(ReadableProperty) EventEnrollmentBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) EventEnrollmentBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) EventEnrollmentBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) EventEnrollmentBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) EventEnrollmentBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder
	// Build builds the EventEnrollment or returns an error if something is wrong
	Build() (EventEnrollment, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() EventEnrollment
}

// NewEventEnrollmentBuilder() creates a EventEnrollmentBuilder
func NewEventEnrollmentBuilder() EventEnrollmentBuilder {
	return &_EventEnrollmentBuilder{_EventEnrollment: new(_EventEnrollment)}
}

type _EventEnrollmentBuilder struct {
	*_EventEnrollment

	err *utils.MultiError
}

var _ (EventEnrollmentBuilder) = (*_EventEnrollmentBuilder)(nil)

func (b *_EventEnrollmentBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, eventType ReadableProperty, notifyType ReadableProperty, eventParameters ReadableProperty, objectPropertyReference ReadableProperty, eventState ReadableProperty, eventEnable ReadableProperty, ackedTransitions ReadableProperty, notificationClass ReadableProperty, eventTimeStamps ReadableProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable ReadableProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal ReadableProperty, statusFlags ReadableProperty, reliability ReadableProperty, faultType OptionalProperty, faultParameters OptionalProperty, reliabilityEvaluationInhibit ReadableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) EventEnrollmentBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithEventType(eventType).WithNotifyType(notifyType).WithEventParameters(eventParameters).WithObjectPropertyReference(objectPropertyReference).WithEventState(eventState).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotificationClass(notificationClass).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithStatusFlags(statusFlags).WithReliability(reliability).WithFaultType(faultType).WithFaultParameters(faultParameters).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_EventEnrollmentBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) EventEnrollmentBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectName(objectName ReadableProperty) EventEnrollmentBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectType(objectType ReadableProperty) EventEnrollmentBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithDescription(description OptionalProperty) EventEnrollmentBuilder {
	b.Description = description
	return b
}

func (b *_EventEnrollmentBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventType(eventType ReadableProperty) EventEnrollmentBuilder {
	b.EventType = eventType
	return b
}

func (b *_EventEnrollmentBuilder) WithEventTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventType.CreateReadablePropertyBuilder())
	var err error
	b.EventType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithNotifyType(notifyType ReadableProperty) EventEnrollmentBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_EventEnrollmentBuilder) WithNotifyTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.NotifyType.CreateReadablePropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventParameters(eventParameters ReadableProperty) EventEnrollmentBuilder {
	b.EventParameters = eventParameters
	return b
}

func (b *_EventEnrollmentBuilder) WithEventParametersBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventParameters.CreateReadablePropertyBuilder())
	var err error
	b.EventParameters, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectPropertyReference(objectPropertyReference ReadableProperty) EventEnrollmentBuilder {
	b.ObjectPropertyReference = objectPropertyReference
	return b
}

func (b *_EventEnrollmentBuilder) WithObjectPropertyReferenceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ObjectPropertyReference.CreateReadablePropertyBuilder())
	var err error
	b.ObjectPropertyReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventState(eventState ReadableProperty) EventEnrollmentBuilder {
	b.EventState = eventState
	return b
}

func (b *_EventEnrollmentBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventEnable(eventEnable ReadableProperty) EventEnrollmentBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_EventEnrollmentBuilder) WithEventEnableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventEnable.CreateReadablePropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithAckedTransitions(ackedTransitions ReadableProperty) EventEnrollmentBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_EventEnrollmentBuilder) WithAckedTransitionsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateReadablePropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithNotificationClass(notificationClass ReadableProperty) EventEnrollmentBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_EventEnrollmentBuilder) WithNotificationClassBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.NotificationClass.CreateReadablePropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventTimeStamps(eventTimeStamps ReadableProperty) EventEnrollmentBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_EventEnrollmentBuilder) WithEventTimeStampsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateReadablePropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) EventEnrollmentBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_EventEnrollmentBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) EventEnrollmentBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_EventEnrollmentBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventDetectionEnable(eventDetectionEnable ReadableProperty) EventEnrollmentBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_EventEnrollmentBuilder) WithEventDetectionEnableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateReadablePropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) EventEnrollmentBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_EventEnrollmentBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) EventEnrollmentBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_EventEnrollmentBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithTimeDelayNormal(timeDelayNormal ReadableProperty) EventEnrollmentBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_EventEnrollmentBuilder) WithTimeDelayNormalBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateReadablePropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithStatusFlags(statusFlags ReadableProperty) EventEnrollmentBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_EventEnrollmentBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithReliability(reliability ReadableProperty) EventEnrollmentBuilder {
	b.Reliability = reliability
	return b
}

func (b *_EventEnrollmentBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithFaultType(faultType OptionalProperty) EventEnrollmentBuilder {
	b.FaultType = faultType
	return b
}

func (b *_EventEnrollmentBuilder) WithFaultTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.FaultType.CreateOptionalPropertyBuilder())
	var err error
	b.FaultType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithFaultParameters(faultParameters OptionalProperty) EventEnrollmentBuilder {
	b.FaultParameters = faultParameters
	return b
}

func (b *_EventEnrollmentBuilder) WithFaultParametersBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.FaultParameters.CreateOptionalPropertyBuilder())
	var err error
	b.FaultParameters, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit ReadableProperty) EventEnrollmentBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_EventEnrollmentBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateReadablePropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithPropertyList(propertyList ReadableProperty) EventEnrollmentBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_EventEnrollmentBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithTags(tags OptionalProperty) EventEnrollmentBuilder {
	b.Tags = tags
	return b
}

func (b *_EventEnrollmentBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithProfileLocation(profileLocation OptionalProperty) EventEnrollmentBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_EventEnrollmentBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) WithProfileName(profileName OptionalProperty) EventEnrollmentBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_EventEnrollmentBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EventEnrollmentBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EventEnrollmentBuilder) Build() (EventEnrollment, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.EventType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventType' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventParameters == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventParameters' not set"))
	}
	if b.ObjectPropertyReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectPropertyReference' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.FaultType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultType' not set"))
	}
	if b.FaultParameters == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultParameters' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._EventEnrollment.deepCopy(), nil
}

func (b *_EventEnrollmentBuilder) MustBuild() EventEnrollment {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_EventEnrollmentBuilder) DeepCopy() any {
	_copy := b.CreateEventEnrollmentBuilder().(*_EventEnrollmentBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateEventEnrollmentBuilder creates a EventEnrollmentBuilder
func (b *_EventEnrollment) CreateEventEnrollmentBuilder() EventEnrollmentBuilder {
	if b == nil {
		return NewEventEnrollmentBuilder()
	}
	return &_EventEnrollmentBuilder{_EventEnrollment: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_EventEnrollment) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_EventEnrollment) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_EventEnrollment) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_EventEnrollment) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_EventEnrollment) GetEventType() ReadableProperty {
	return m.EventType
}

func (m *_EventEnrollment) GetNotifyType() ReadableProperty {
	return m.NotifyType
}

func (m *_EventEnrollment) GetEventParameters() ReadableProperty {
	return m.EventParameters
}

func (m *_EventEnrollment) GetObjectPropertyReference() ReadableProperty {
	return m.ObjectPropertyReference
}

func (m *_EventEnrollment) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_EventEnrollment) GetEventEnable() ReadableProperty {
	return m.EventEnable
}

func (m *_EventEnrollment) GetAckedTransitions() ReadableProperty {
	return m.AckedTransitions
}

func (m *_EventEnrollment) GetNotificationClass() ReadableProperty {
	return m.NotificationClass
}

func (m *_EventEnrollment) GetEventTimeStamps() ReadableProperty {
	return m.EventTimeStamps
}

func (m *_EventEnrollment) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_EventEnrollment) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_EventEnrollment) GetEventDetectionEnable() ReadableProperty {
	return m.EventDetectionEnable
}

func (m *_EventEnrollment) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_EventEnrollment) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_EventEnrollment) GetTimeDelayNormal() ReadableProperty {
	return m.TimeDelayNormal
}

func (m *_EventEnrollment) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_EventEnrollment) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_EventEnrollment) GetFaultType() OptionalProperty {
	return m.FaultType
}

func (m *_EventEnrollment) GetFaultParameters() OptionalProperty {
	return m.FaultParameters
}

func (m *_EventEnrollment) GetReliabilityEvaluationInhibit() ReadableProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_EventEnrollment) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_EventEnrollment) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_EventEnrollment) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_EventEnrollment) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastEventEnrollment(structType any) EventEnrollment {
	if casted, ok := structType.(EventEnrollment); ok {
		return casted
	}
	if casted, ok := structType.(*EventEnrollment); ok {
		return *casted
	}
	return nil
}

func (m *_EventEnrollment) GetTypeName() string {
	return "EventEnrollment"
}

func (m *_EventEnrollment) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (eventType)
	lengthInBits += m.EventType.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventParameters)
	lengthInBits += m.EventParameters.GetLengthInBits(ctx)

	// Simple field (objectPropertyReference)
	lengthInBits += m.ObjectPropertyReference.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (faultType)
	lengthInBits += m.FaultType.GetLengthInBits(ctx)

	// Simple field (faultParameters)
	lengthInBits += m.FaultParameters.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_EventEnrollment) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func EventEnrollmentParse(ctx context.Context, theBytes []byte) (EventEnrollment, error) {
	return EventEnrollmentParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func EventEnrollmentParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (EventEnrollment, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (EventEnrollment, error) {
		return EventEnrollmentParseWithBuffer(ctx, readBuffer)
	}
}

func EventEnrollmentParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (EventEnrollment, error) {
	v, err := (&_EventEnrollment{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_EventEnrollment) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__eventEnrollment EventEnrollment, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("EventEnrollment"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for EventEnrollment")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	eventType, err := ReadSimpleField[ReadableProperty](ctx, "eventType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventType' field"))
	}
	m.EventType = eventType

	notifyType, err := ReadSimpleField[ReadableProperty](ctx, "notifyType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventParameters, err := ReadSimpleField[ReadableProperty](ctx, "eventParameters", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventParameter")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventParameters' field"))
	}
	m.EventParameters = eventParameters

	objectPropertyReference, err := ReadSimpleField[ReadableProperty](ctx, "objectPropertyReference", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDeviceObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectPropertyReference' field"))
	}
	m.ObjectPropertyReference = objectPropertyReference

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	eventEnable, err := ReadSimpleField[ReadableProperty](ctx, "eventEnable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[ReadableProperty](ctx, "ackedTransitions", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notificationClass, err := ReadSimpleField[ReadableProperty](ctx, "notificationClass", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventTimeStamps, err := ReadSimpleField[ReadableProperty](ctx, "eventTimeStamps", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[ReadableProperty](ctx, "eventDetectionEnable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[ReadableProperty](ctx, "timeDelayNormal", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	faultType, err := ReadSimpleField[OptionalProperty](ctx, "faultType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetFaultType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultType' field"))
	}
	m.FaultType = faultType

	faultParameters, err := ReadSimpleField[OptionalProperty](ctx, "faultParameters", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetFaultParameter")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultParameters' field"))
	}
	m.FaultParameters = faultParameters

	reliabilityEvaluationInhibit, err := ReadSimpleField[ReadableProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("EventEnrollment"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for EventEnrollment")
	}

	return m, nil
}

func (m *_EventEnrollment) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_EventEnrollment) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("EventEnrollment"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for EventEnrollment")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventType", m.GetEventType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventParameters", m.GetEventParameters(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventParameters' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectPropertyReference", m.GetObjectPropertyReference(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectPropertyReference' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultType", m.GetFaultType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultParameters", m.GetFaultParameters(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultParameters' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("EventEnrollment"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for EventEnrollment")
	}
	return nil
}

func (m *_EventEnrollment) IsEventEnrollment() {}

func (m *_EventEnrollment) DeepCopy() any {
	return m.deepCopy()
}

func (m *_EventEnrollment) deepCopy() *_EventEnrollment {
	if m == nil {
		return nil
	}
	_EventEnrollmentCopy := &_EventEnrollment{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.EventType.DeepCopy().(ReadableProperty),
		m.NotifyType.DeepCopy().(ReadableProperty),
		m.EventParameters.DeepCopy().(ReadableProperty),
		m.ObjectPropertyReference.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.EventEnable.DeepCopy().(ReadableProperty),
		m.AckedTransitions.DeepCopy().(ReadableProperty),
		m.NotificationClass.DeepCopy().(ReadableProperty),
		m.EventTimeStamps.DeepCopy().(ReadableProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(ReadableProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.FaultType.DeepCopy().(OptionalProperty),
		m.FaultParameters.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(ReadableProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _EventEnrollmentCopy
}

func (m *_EventEnrollment) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
