/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Escalator is the corresponding interface of Escalator
type Escalator interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetElevatorGroup returns ElevatorGroup (property field)
	GetElevatorGroup() ReadableProperty
	// GetGroupID returns GroupID (property field)
	GetGroupID() ReadableProperty
	// GetInstallationID returns InstallationID (property field)
	GetInstallationID() ReadableProperty
	// GetPowerMode returns PowerMode (property field)
	GetPowerMode() OptionalProperty
	// GetOperationDirection returns OperationDirection (property field)
	GetOperationDirection() ReadableProperty
	// GetEscalatorMode returns EscalatorMode (property field)
	GetEscalatorMode() OptionalProperty
	// GetEnergyMeter returns EnergyMeter (property field)
	GetEnergyMeter() OptionalProperty
	// GetEnergyMeterRef returns EnergyMeterRef (property field)
	GetEnergyMeterRef() OptionalProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetFaultSignals returns FaultSignals (property field)
	GetFaultSignals() OptionalProperty
	// GetPassengerAlarm returns PassengerAlarm (property field)
	GetPassengerAlarm() ReadableProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsEscalator is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsEscalator()
	// CreateBuilder creates a EscalatorBuilder
	CreateEscalatorBuilder() EscalatorBuilder
}

// _Escalator is the data-structure of this message
type _Escalator struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	StatusFlags                  ReadableProperty
	ElevatorGroup                ReadableProperty
	GroupID                      ReadableProperty
	InstallationID               ReadableProperty
	PowerMode                    OptionalProperty
	OperationDirection           ReadableProperty
	EscalatorMode                OptionalProperty
	EnergyMeter                  OptionalProperty
	EnergyMeterRef               OptionalProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	FaultSignals                 OptionalProperty
	PassengerAlarm               ReadableProperty
	TimeDelay                    OptionalProperty
	TimeDelayNormal              OptionalProperty
	EventDetectionEnable         OptionalProperty
	NotificationClass            OptionalProperty
	EventEnable                  OptionalProperty
	EventState                   OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ Escalator = (*_Escalator)(nil)

// NewEscalator factory function for _Escalator
func NewEscalator(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, elevatorGroup ReadableProperty, groupID ReadableProperty, installationID ReadableProperty, powerMode OptionalProperty, operationDirection ReadableProperty, escalatorMode OptionalProperty, energyMeter OptionalProperty, energyMeterRef OptionalProperty, reliability OptionalProperty, outOfService ReadableProperty, faultSignals OptionalProperty, passengerAlarm ReadableProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibit OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Escalator {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Escalator must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Escalator must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Escalator must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Escalator must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Escalator must not be nil")
	}
	if elevatorGroup == nil {
		panic("elevatorGroup of type ReadableProperty for Escalator must not be nil")
	}
	if groupID == nil {
		panic("groupID of type ReadableProperty for Escalator must not be nil")
	}
	if installationID == nil {
		panic("installationID of type ReadableProperty for Escalator must not be nil")
	}
	if powerMode == nil {
		panic("powerMode of type OptionalProperty for Escalator must not be nil")
	}
	if operationDirection == nil {
		panic("operationDirection of type ReadableProperty for Escalator must not be nil")
	}
	if escalatorMode == nil {
		panic("escalatorMode of type OptionalProperty for Escalator must not be nil")
	}
	if energyMeter == nil {
		panic("energyMeter of type OptionalProperty for Escalator must not be nil")
	}
	if energyMeterRef == nil {
		panic("energyMeterRef of type OptionalProperty for Escalator must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Escalator must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for Escalator must not be nil")
	}
	if faultSignals == nil {
		panic("faultSignals of type OptionalProperty for Escalator must not be nil")
	}
	if passengerAlarm == nil {
		panic("passengerAlarm of type ReadableProperty for Escalator must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for Escalator must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for Escalator must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Escalator must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Escalator must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Escalator must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for Escalator must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Escalator must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Escalator must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Escalator must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Escalator must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Escalator must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for Escalator must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for Escalator must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Escalator must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Escalator must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Escalator must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Escalator must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Escalator must not be nil")
	}
	return &_Escalator{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, StatusFlags: statusFlags, ElevatorGroup: elevatorGroup, GroupID: groupID, InstallationID: installationID, PowerMode: powerMode, OperationDirection: operationDirection, EscalatorMode: escalatorMode, EnergyMeter: energyMeter, EnergyMeterRef: energyMeterRef, Reliability: reliability, OutOfService: outOfService, FaultSignals: faultSignals, PassengerAlarm: passengerAlarm, TimeDelay: timeDelay, TimeDelayNormal: timeDelayNormal, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, EventState: eventState, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventAlgorithmInhibit: eventAlgorithmInhibit, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// EscalatorBuilder is a builder for Escalator
type EscalatorBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, elevatorGroup ReadableProperty, groupID ReadableProperty, installationID ReadableProperty, powerMode OptionalProperty, operationDirection ReadableProperty, escalatorMode OptionalProperty, energyMeter OptionalProperty, energyMeterRef OptionalProperty, reliability OptionalProperty, outOfService ReadableProperty, faultSignals OptionalProperty, passengerAlarm ReadableProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibit OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) EscalatorBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) EscalatorBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) EscalatorBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) EscalatorBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) EscalatorBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) EscalatorBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithElevatorGroup adds ElevatorGroup (property field)
	WithElevatorGroup(ReadableProperty) EscalatorBuilder
	// WithElevatorGroupBuilder adds ElevatorGroup (property field) which is build by the builder
	WithElevatorGroupBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithGroupID adds GroupID (property field)
	WithGroupID(ReadableProperty) EscalatorBuilder
	// WithGroupIDBuilder adds GroupID (property field) which is build by the builder
	WithGroupIDBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithInstallationID adds InstallationID (property field)
	WithInstallationID(ReadableProperty) EscalatorBuilder
	// WithInstallationIDBuilder adds InstallationID (property field) which is build by the builder
	WithInstallationIDBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithPowerMode adds PowerMode (property field)
	WithPowerMode(OptionalProperty) EscalatorBuilder
	// WithPowerModeBuilder adds PowerMode (property field) which is build by the builder
	WithPowerModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithOperationDirection adds OperationDirection (property field)
	WithOperationDirection(ReadableProperty) EscalatorBuilder
	// WithOperationDirectionBuilder adds OperationDirection (property field) which is build by the builder
	WithOperationDirectionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithEscalatorMode adds EscalatorMode (property field)
	WithEscalatorMode(OptionalProperty) EscalatorBuilder
	// WithEscalatorModeBuilder adds EscalatorMode (property field) which is build by the builder
	WithEscalatorModeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEnergyMeter adds EnergyMeter (property field)
	WithEnergyMeter(OptionalProperty) EscalatorBuilder
	// WithEnergyMeterBuilder adds EnergyMeter (property field) which is build by the builder
	WithEnergyMeterBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEnergyMeterRef adds EnergyMeterRef (property field)
	WithEnergyMeterRef(OptionalProperty) EscalatorBuilder
	// WithEnergyMeterRefBuilder adds EnergyMeterRef (property field) which is build by the builder
	WithEnergyMeterRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) EscalatorBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) EscalatorBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithFaultSignals adds FaultSignals (property field)
	WithFaultSignals(OptionalProperty) EscalatorBuilder
	// WithFaultSignalsBuilder adds FaultSignals (property field) which is build by the builder
	WithFaultSignalsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithPassengerAlarm adds PassengerAlarm (property field)
	WithPassengerAlarm(ReadableProperty) EscalatorBuilder
	// WithPassengerAlarmBuilder adds PassengerAlarm (property field) which is build by the builder
	WithPassengerAlarmBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) EscalatorBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) EscalatorBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) EscalatorBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) EscalatorBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) EscalatorBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) EscalatorBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) EscalatorBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) EscalatorBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) EscalatorBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) EscalatorBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) EscalatorBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) EscalatorBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) EscalatorBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) EscalatorBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) EscalatorBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) EscalatorBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) EscalatorBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) EscalatorBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder
	// Build builds the Escalator or returns an error if something is wrong
	Build() (Escalator, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Escalator
}

// NewEscalatorBuilder() creates a EscalatorBuilder
func NewEscalatorBuilder() EscalatorBuilder {
	return &_EscalatorBuilder{_Escalator: new(_Escalator)}
}

type _EscalatorBuilder struct {
	*_Escalator

	err *utils.MultiError
}

var _ (EscalatorBuilder) = (*_EscalatorBuilder)(nil)

func (b *_EscalatorBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, elevatorGroup ReadableProperty, groupID ReadableProperty, installationID ReadableProperty, powerMode OptionalProperty, operationDirection ReadableProperty, escalatorMode OptionalProperty, energyMeter OptionalProperty, energyMeterRef OptionalProperty, reliability OptionalProperty, outOfService ReadableProperty, faultSignals OptionalProperty, passengerAlarm ReadableProperty, timeDelay OptionalProperty, timeDelayNormal OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, eventState OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventAlgorithmInhibit OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) EscalatorBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithStatusFlags(statusFlags).WithElevatorGroup(elevatorGroup).WithGroupID(groupID).WithInstallationID(installationID).WithPowerMode(powerMode).WithOperationDirection(operationDirection).WithEscalatorMode(escalatorMode).WithEnergyMeter(energyMeter).WithEnergyMeterRef(energyMeterRef).WithReliability(reliability).WithOutOfService(outOfService).WithFaultSignals(faultSignals).WithPassengerAlarm(passengerAlarm).WithTimeDelay(timeDelay).WithTimeDelayNormal(timeDelayNormal).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithEventState(eventState).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_EscalatorBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) EscalatorBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_EscalatorBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithObjectName(objectName ReadableProperty) EscalatorBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_EscalatorBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithObjectType(objectType ReadableProperty) EscalatorBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_EscalatorBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithDescription(description OptionalProperty) EscalatorBuilder {
	b.Description = description
	return b
}

func (b *_EscalatorBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithStatusFlags(statusFlags ReadableProperty) EscalatorBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_EscalatorBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithElevatorGroup(elevatorGroup ReadableProperty) EscalatorBuilder {
	b.ElevatorGroup = elevatorGroup
	return b
}

func (b *_EscalatorBuilder) WithElevatorGroupBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ElevatorGroup.CreateReadablePropertyBuilder())
	var err error
	b.ElevatorGroup, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithGroupID(groupID ReadableProperty) EscalatorBuilder {
	b.GroupID = groupID
	return b
}

func (b *_EscalatorBuilder) WithGroupIDBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.GroupID.CreateReadablePropertyBuilder())
	var err error
	b.GroupID, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithInstallationID(installationID ReadableProperty) EscalatorBuilder {
	b.InstallationID = installationID
	return b
}

func (b *_EscalatorBuilder) WithInstallationIDBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.InstallationID.CreateReadablePropertyBuilder())
	var err error
	b.InstallationID, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithPowerMode(powerMode OptionalProperty) EscalatorBuilder {
	b.PowerMode = powerMode
	return b
}

func (b *_EscalatorBuilder) WithPowerModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.PowerMode.CreateOptionalPropertyBuilder())
	var err error
	b.PowerMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithOperationDirection(operationDirection ReadableProperty) EscalatorBuilder {
	b.OperationDirection = operationDirection
	return b
}

func (b *_EscalatorBuilder) WithOperationDirectionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.OperationDirection.CreateReadablePropertyBuilder())
	var err error
	b.OperationDirection, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEscalatorMode(escalatorMode OptionalProperty) EscalatorBuilder {
	b.EscalatorMode = escalatorMode
	return b
}

func (b *_EscalatorBuilder) WithEscalatorModeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EscalatorMode.CreateOptionalPropertyBuilder())
	var err error
	b.EscalatorMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEnergyMeter(energyMeter OptionalProperty) EscalatorBuilder {
	b.EnergyMeter = energyMeter
	return b
}

func (b *_EscalatorBuilder) WithEnergyMeterBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EnergyMeter.CreateOptionalPropertyBuilder())
	var err error
	b.EnergyMeter, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEnergyMeterRef(energyMeterRef OptionalProperty) EscalatorBuilder {
	b.EnergyMeterRef = energyMeterRef
	return b
}

func (b *_EscalatorBuilder) WithEnergyMeterRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EnergyMeterRef.CreateOptionalPropertyBuilder())
	var err error
	b.EnergyMeterRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithReliability(reliability OptionalProperty) EscalatorBuilder {
	b.Reliability = reliability
	return b
}

func (b *_EscalatorBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithOutOfService(outOfService ReadableProperty) EscalatorBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_EscalatorBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithFaultSignals(faultSignals OptionalProperty) EscalatorBuilder {
	b.FaultSignals = faultSignals
	return b
}

func (b *_EscalatorBuilder) WithFaultSignalsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.FaultSignals.CreateOptionalPropertyBuilder())
	var err error
	b.FaultSignals, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithPassengerAlarm(passengerAlarm ReadableProperty) EscalatorBuilder {
	b.PassengerAlarm = passengerAlarm
	return b
}

func (b *_EscalatorBuilder) WithPassengerAlarmBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.PassengerAlarm.CreateReadablePropertyBuilder())
	var err error
	b.PassengerAlarm, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithTimeDelay(timeDelay OptionalProperty) EscalatorBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_EscalatorBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) EscalatorBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_EscalatorBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) EscalatorBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_EscalatorBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithNotificationClass(notificationClass OptionalProperty) EscalatorBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_EscalatorBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventEnable(eventEnable OptionalProperty) EscalatorBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_EscalatorBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventState(eventState OptionalProperty) EscalatorBuilder {
	b.EventState = eventState
	return b
}

func (b *_EscalatorBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) EscalatorBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_EscalatorBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithNotifyType(notifyType OptionalProperty) EscalatorBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_EscalatorBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) EscalatorBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_EscalatorBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) EscalatorBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_EscalatorBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) EscalatorBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_EscalatorBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) EscalatorBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_EscalatorBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) EscalatorBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_EscalatorBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) EscalatorBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_EscalatorBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithPropertyList(propertyList ReadableProperty) EscalatorBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_EscalatorBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithTags(tags OptionalProperty) EscalatorBuilder {
	b.Tags = tags
	return b
}

func (b *_EscalatorBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithProfileLocation(profileLocation OptionalProperty) EscalatorBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_EscalatorBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) WithProfileName(profileName OptionalProperty) EscalatorBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_EscalatorBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) EscalatorBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_EscalatorBuilder) Build() (Escalator, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.ElevatorGroup == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'elevatorGroup' not set"))
	}
	if b.GroupID == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'groupID' not set"))
	}
	if b.InstallationID == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'installationID' not set"))
	}
	if b.PowerMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'powerMode' not set"))
	}
	if b.OperationDirection == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'operationDirection' not set"))
	}
	if b.EscalatorMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'escalatorMode' not set"))
	}
	if b.EnergyMeter == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'energyMeter' not set"))
	}
	if b.EnergyMeterRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'energyMeterRef' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.FaultSignals == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultSignals' not set"))
	}
	if b.PassengerAlarm == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'passengerAlarm' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Escalator.deepCopy(), nil
}

func (b *_EscalatorBuilder) MustBuild() Escalator {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_EscalatorBuilder) DeepCopy() any {
	_copy := b.CreateEscalatorBuilder().(*_EscalatorBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateEscalatorBuilder creates a EscalatorBuilder
func (b *_Escalator) CreateEscalatorBuilder() EscalatorBuilder {
	if b == nil {
		return NewEscalatorBuilder()
	}
	return &_EscalatorBuilder{_Escalator: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Escalator) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Escalator) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Escalator) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Escalator) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Escalator) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Escalator) GetElevatorGroup() ReadableProperty {
	return m.ElevatorGroup
}

func (m *_Escalator) GetGroupID() ReadableProperty {
	return m.GroupID
}

func (m *_Escalator) GetInstallationID() ReadableProperty {
	return m.InstallationID
}

func (m *_Escalator) GetPowerMode() OptionalProperty {
	return m.PowerMode
}

func (m *_Escalator) GetOperationDirection() ReadableProperty {
	return m.OperationDirection
}

func (m *_Escalator) GetEscalatorMode() OptionalProperty {
	return m.EscalatorMode
}

func (m *_Escalator) GetEnergyMeter() OptionalProperty {
	return m.EnergyMeter
}

func (m *_Escalator) GetEnergyMeterRef() OptionalProperty {
	return m.EnergyMeterRef
}

func (m *_Escalator) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Escalator) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_Escalator) GetFaultSignals() OptionalProperty {
	return m.FaultSignals
}

func (m *_Escalator) GetPassengerAlarm() ReadableProperty {
	return m.PassengerAlarm
}

func (m *_Escalator) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_Escalator) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_Escalator) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Escalator) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Escalator) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Escalator) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_Escalator) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Escalator) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Escalator) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Escalator) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Escalator) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Escalator) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_Escalator) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_Escalator) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Escalator) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Escalator) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Escalator) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Escalator) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastEscalator(structType any) Escalator {
	if casted, ok := structType.(Escalator); ok {
		return casted
	}
	if casted, ok := structType.(*Escalator); ok {
		return *casted
	}
	return nil
}

func (m *_Escalator) GetTypeName() string {
	return "Escalator"
}

func (m *_Escalator) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (elevatorGroup)
	lengthInBits += m.ElevatorGroup.GetLengthInBits(ctx)

	// Simple field (groupID)
	lengthInBits += m.GroupID.GetLengthInBits(ctx)

	// Simple field (installationID)
	lengthInBits += m.InstallationID.GetLengthInBits(ctx)

	// Simple field (powerMode)
	lengthInBits += m.PowerMode.GetLengthInBits(ctx)

	// Simple field (operationDirection)
	lengthInBits += m.OperationDirection.GetLengthInBits(ctx)

	// Simple field (escalatorMode)
	lengthInBits += m.EscalatorMode.GetLengthInBits(ctx)

	// Simple field (energyMeter)
	lengthInBits += m.EnergyMeter.GetLengthInBits(ctx)

	// Simple field (energyMeterRef)
	lengthInBits += m.EnergyMeterRef.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (faultSignals)
	lengthInBits += m.FaultSignals.GetLengthInBits(ctx)

	// Simple field (passengerAlarm)
	lengthInBits += m.PassengerAlarm.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Escalator) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func EscalatorParse(ctx context.Context, theBytes []byte) (Escalator, error) {
	return EscalatorParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func EscalatorParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Escalator, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Escalator, error) {
		return EscalatorParseWithBuffer(ctx, readBuffer)
	}
}

func EscalatorParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Escalator, error) {
	v, err := (&_Escalator{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Escalator) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__escalator Escalator, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Escalator"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Escalator")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	elevatorGroup, err := ReadSimpleField[ReadableProperty](ctx, "elevatorGroup", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'elevatorGroup' field"))
	}
	m.ElevatorGroup = elevatorGroup

	groupID, err := ReadSimpleField[ReadableProperty](ctx, "groupID", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'groupID' field"))
	}
	m.GroupID = groupID

	installationID, err := ReadSimpleField[ReadableProperty](ctx, "installationID", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned8")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'installationID' field"))
	}
	m.InstallationID = installationID

	powerMode, err := ReadSimpleField[OptionalProperty](ctx, "powerMode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'powerMode' field"))
	}
	m.PowerMode = powerMode

	operationDirection, err := ReadSimpleField[ReadableProperty](ctx, "operationDirection", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEscalatorOperationDirection")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'operationDirection' field"))
	}
	m.OperationDirection = operationDirection

	escalatorMode, err := ReadSimpleField[OptionalProperty](ctx, "escalatorMode", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEscalatorMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'escalatorMode' field"))
	}
	m.EscalatorMode = escalatorMode

	energyMeter, err := ReadSimpleField[OptionalProperty](ctx, "energyMeter", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'energyMeter' field"))
	}
	m.EnergyMeter = energyMeter

	energyMeterRef, err := ReadSimpleField[OptionalProperty](ctx, "energyMeterRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'energyMeterRef' field"))
	}
	m.EnergyMeterRef = energyMeterRef

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	faultSignals, err := ReadSimpleField[OptionalProperty](ctx, "faultSignals", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetEscalatorFault")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultSignals' field"))
	}
	m.FaultSignals = faultSignals

	passengerAlarm, err := ReadSimpleField[ReadableProperty](ctx, "passengerAlarm", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'passengerAlarm' field"))
	}
	m.PassengerAlarm = passengerAlarm

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Escalator"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Escalator")
	}

	return m, nil
}

func (m *_Escalator) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Escalator) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Escalator"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Escalator")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "elevatorGroup", m.GetElevatorGroup(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'elevatorGroup' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "groupID", m.GetGroupID(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'groupID' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "installationID", m.GetInstallationID(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'installationID' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "powerMode", m.GetPowerMode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'powerMode' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "operationDirection", m.GetOperationDirection(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'operationDirection' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "escalatorMode", m.GetEscalatorMode(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'escalatorMode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "energyMeter", m.GetEnergyMeter(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'energyMeter' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "energyMeterRef", m.GetEnergyMeterRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'energyMeterRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultSignals", m.GetFaultSignals(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultSignals' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "passengerAlarm", m.GetPassengerAlarm(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'passengerAlarm' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Escalator"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Escalator")
	}
	return nil
}

func (m *_Escalator) IsEscalator() {}

func (m *_Escalator) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Escalator) deepCopy() *_Escalator {
	if m == nil {
		return nil
	}
	_EscalatorCopy := &_Escalator{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.ElevatorGroup.DeepCopy().(ReadableProperty),
		m.GroupID.DeepCopy().(ReadableProperty),
		m.InstallationID.DeepCopy().(ReadableProperty),
		m.PowerMode.DeepCopy().(OptionalProperty),
		m.OperationDirection.DeepCopy().(ReadableProperty),
		m.EscalatorMode.DeepCopy().(OptionalProperty),
		m.EnergyMeter.DeepCopy().(OptionalProperty),
		m.EnergyMeterRef.DeepCopy().(OptionalProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.FaultSignals.DeepCopy().(OptionalProperty),
		m.PassengerAlarm.DeepCopy().(ReadableProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _EscalatorCopy
}

func (m *_Escalator) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
