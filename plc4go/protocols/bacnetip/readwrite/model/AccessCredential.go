/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AccessCredential is the corresponding interface of AccessCredential
type AccessCredential interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetGlobalIdentifier returns GlobalIdentifier (property field)
	GetGlobalIdentifier() WritableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetCredentialStatus returns CredentialStatus (property field)
	GetCredentialStatus() ReadableProperty
	// GetReasonForDisable returns ReasonForDisable (property field)
	GetReasonForDisable() ReadableProperty
	// GetAuthenticationFactors returns AuthenticationFactors (property field)
	GetAuthenticationFactors() ReadableProperty
	// GetActivationTime returns ActivationTime (property field)
	GetActivationTime() ReadableProperty
	// GetExpirationTime returns ExpirationTime (property field)
	GetExpirationTime() ReadableProperty
	// GetCredentialDisable returns CredentialDisable (property field)
	GetCredentialDisable() ReadableProperty
	// GetDaysRemaining returns DaysRemaining (property field)
	GetDaysRemaining() OptionalProperty
	// GetUsesRemaining returns UsesRemaining (property field)
	GetUsesRemaining() OptionalProperty
	// GetAbsenteeLimit returns AbsenteeLimit (property field)
	GetAbsenteeLimit() OptionalProperty
	// GetBelongsTo returns BelongsTo (property field)
	GetBelongsTo() OptionalProperty
	// GetAssignedAccessRights returns AssignedAccessRights (property field)
	GetAssignedAccessRights() ReadableProperty
	// GetLastAccessPoint returns LastAccessPoint (property field)
	GetLastAccessPoint() OptionalProperty
	// GetLastAccessEvent returns LastAccessEvent (property field)
	GetLastAccessEvent() OptionalProperty
	// GetLastUseTime returns LastUseTime (property field)
	GetLastUseTime() OptionalProperty
	// GetTraceFlag returns TraceFlag (property field)
	GetTraceFlag() OptionalProperty
	// GetThreatAuthority returns ThreatAuthority (property field)
	GetThreatAuthority() OptionalProperty
	// GetExtendedTimeEnable returns ExtendedTimeEnable (property field)
	GetExtendedTimeEnable() OptionalProperty
	// GetAuthorizationExemptions returns AuthorizationExemptions (property field)
	GetAuthorizationExemptions() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAccessCredential is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAccessCredential()
	// CreateBuilder creates a AccessCredentialBuilder
	CreateAccessCredentialBuilder() AccessCredentialBuilder
}

// _AccessCredential is the data-structure of this message
type _AccessCredential struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	GlobalIdentifier             WritableProperty
	StatusFlags                  ReadableProperty
	Reliability                  ReadableProperty
	CredentialStatus             ReadableProperty
	ReasonForDisable             ReadableProperty
	AuthenticationFactors        ReadableProperty
	ActivationTime               ReadableProperty
	ExpirationTime               ReadableProperty
	CredentialDisable            ReadableProperty
	DaysRemaining                OptionalProperty
	UsesRemaining                OptionalProperty
	AbsenteeLimit                OptionalProperty
	BelongsTo                    OptionalProperty
	AssignedAccessRights         ReadableProperty
	LastAccessPoint              OptionalProperty
	LastAccessEvent              OptionalProperty
	LastUseTime                  OptionalProperty
	TraceFlag                    OptionalProperty
	ThreatAuthority              OptionalProperty
	ExtendedTimeEnable           OptionalProperty
	AuthorizationExemptions      OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ AccessCredential = (*_AccessCredential)(nil)

// NewAccessCredential factory function for _AccessCredential
func NewAccessCredential(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, credentialStatus ReadableProperty, reasonForDisable ReadableProperty, authenticationFactors ReadableProperty, activationTime ReadableProperty, expirationTime ReadableProperty, credentialDisable ReadableProperty, daysRemaining OptionalProperty, usesRemaining OptionalProperty, absenteeLimit OptionalProperty, belongsTo OptionalProperty, assignedAccessRights ReadableProperty, lastAccessPoint OptionalProperty, lastAccessEvent OptionalProperty, lastUseTime OptionalProperty, traceFlag OptionalProperty, threatAuthority OptionalProperty, extendedTimeEnable OptionalProperty, authorizationExemptions OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_AccessCredential {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for AccessCredential must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for AccessCredential must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for AccessCredential must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for AccessCredential must not be nil")
	}
	if globalIdentifier == nil {
		panic("globalIdentifier of type WritableProperty for AccessCredential must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for AccessCredential must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for AccessCredential must not be nil")
	}
	if credentialStatus == nil {
		panic("credentialStatus of type ReadableProperty for AccessCredential must not be nil")
	}
	if reasonForDisable == nil {
		panic("reasonForDisable of type ReadableProperty for AccessCredential must not be nil")
	}
	if authenticationFactors == nil {
		panic("authenticationFactors of type ReadableProperty for AccessCredential must not be nil")
	}
	if activationTime == nil {
		panic("activationTime of type ReadableProperty for AccessCredential must not be nil")
	}
	if expirationTime == nil {
		panic("expirationTime of type ReadableProperty for AccessCredential must not be nil")
	}
	if credentialDisable == nil {
		panic("credentialDisable of type ReadableProperty for AccessCredential must not be nil")
	}
	if daysRemaining == nil {
		panic("daysRemaining of type OptionalProperty for AccessCredential must not be nil")
	}
	if usesRemaining == nil {
		panic("usesRemaining of type OptionalProperty for AccessCredential must not be nil")
	}
	if absenteeLimit == nil {
		panic("absenteeLimit of type OptionalProperty for AccessCredential must not be nil")
	}
	if belongsTo == nil {
		panic("belongsTo of type OptionalProperty for AccessCredential must not be nil")
	}
	if assignedAccessRights == nil {
		panic("assignedAccessRights of type ReadableProperty for AccessCredential must not be nil")
	}
	if lastAccessPoint == nil {
		panic("lastAccessPoint of type OptionalProperty for AccessCredential must not be nil")
	}
	if lastAccessEvent == nil {
		panic("lastAccessEvent of type OptionalProperty for AccessCredential must not be nil")
	}
	if lastUseTime == nil {
		panic("lastUseTime of type OptionalProperty for AccessCredential must not be nil")
	}
	if traceFlag == nil {
		panic("traceFlag of type OptionalProperty for AccessCredential must not be nil")
	}
	if threatAuthority == nil {
		panic("threatAuthority of type OptionalProperty for AccessCredential must not be nil")
	}
	if extendedTimeEnable == nil {
		panic("extendedTimeEnable of type OptionalProperty for AccessCredential must not be nil")
	}
	if authorizationExemptions == nil {
		panic("authorizationExemptions of type OptionalProperty for AccessCredential must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for AccessCredential must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for AccessCredential must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for AccessCredential must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for AccessCredential must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for AccessCredential must not be nil")
	}
	return &_AccessCredential{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, GlobalIdentifier: globalIdentifier, StatusFlags: statusFlags, Reliability: reliability, CredentialStatus: credentialStatus, ReasonForDisable: reasonForDisable, AuthenticationFactors: authenticationFactors, ActivationTime: activationTime, ExpirationTime: expirationTime, CredentialDisable: credentialDisable, DaysRemaining: daysRemaining, UsesRemaining: usesRemaining, AbsenteeLimit: absenteeLimit, BelongsTo: belongsTo, AssignedAccessRights: assignedAccessRights, LastAccessPoint: lastAccessPoint, LastAccessEvent: lastAccessEvent, LastUseTime: lastUseTime, TraceFlag: traceFlag, ThreatAuthority: threatAuthority, ExtendedTimeEnable: extendedTimeEnable, AuthorizationExemptions: authorizationExemptions, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AccessCredentialBuilder is a builder for AccessCredential
type AccessCredentialBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, credentialStatus ReadableProperty, reasonForDisable ReadableProperty, authenticationFactors ReadableProperty, activationTime ReadableProperty, expirationTime ReadableProperty, credentialDisable ReadableProperty, daysRemaining OptionalProperty, usesRemaining OptionalProperty, absenteeLimit OptionalProperty, belongsTo OptionalProperty, assignedAccessRights ReadableProperty, lastAccessPoint OptionalProperty, lastAccessEvent OptionalProperty, lastUseTime OptionalProperty, traceFlag OptionalProperty, threatAuthority OptionalProperty, extendedTimeEnable OptionalProperty, authorizationExemptions OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessCredentialBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AccessCredentialBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AccessCredentialBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AccessCredentialBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AccessCredentialBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithGlobalIdentifier adds GlobalIdentifier (property field)
	WithGlobalIdentifier(WritableProperty) AccessCredentialBuilder
	// WithGlobalIdentifierBuilder adds GlobalIdentifier (property field) which is build by the builder
	WithGlobalIdentifierBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AccessCredentialBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) AccessCredentialBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) AccessCredentialBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithCredentialStatus adds CredentialStatus (property field)
	WithCredentialStatus(ReadableProperty) AccessCredentialBuilder
	// WithCredentialStatusBuilder adds CredentialStatus (property field) which is build by the builder
	WithCredentialStatusBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithReasonForDisable adds ReasonForDisable (property field)
	WithReasonForDisable(ReadableProperty) AccessCredentialBuilder
	// WithReasonForDisableBuilder adds ReasonForDisable (property field) which is build by the builder
	WithReasonForDisableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithAuthenticationFactors adds AuthenticationFactors (property field)
	WithAuthenticationFactors(ReadableProperty) AccessCredentialBuilder
	// WithAuthenticationFactorsBuilder adds AuthenticationFactors (property field) which is build by the builder
	WithAuthenticationFactorsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithActivationTime adds ActivationTime (property field)
	WithActivationTime(ReadableProperty) AccessCredentialBuilder
	// WithActivationTimeBuilder adds ActivationTime (property field) which is build by the builder
	WithActivationTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithExpirationTime adds ExpirationTime (property field)
	WithExpirationTime(ReadableProperty) AccessCredentialBuilder
	// WithExpirationTimeBuilder adds ExpirationTime (property field) which is build by the builder
	WithExpirationTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithCredentialDisable adds CredentialDisable (property field)
	WithCredentialDisable(ReadableProperty) AccessCredentialBuilder
	// WithCredentialDisableBuilder adds CredentialDisable (property field) which is build by the builder
	WithCredentialDisableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithDaysRemaining adds DaysRemaining (property field)
	WithDaysRemaining(OptionalProperty) AccessCredentialBuilder
	// WithDaysRemainingBuilder adds DaysRemaining (property field) which is build by the builder
	WithDaysRemainingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithUsesRemaining adds UsesRemaining (property field)
	WithUsesRemaining(OptionalProperty) AccessCredentialBuilder
	// WithUsesRemainingBuilder adds UsesRemaining (property field) which is build by the builder
	WithUsesRemainingBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithAbsenteeLimit adds AbsenteeLimit (property field)
	WithAbsenteeLimit(OptionalProperty) AccessCredentialBuilder
	// WithAbsenteeLimitBuilder adds AbsenteeLimit (property field) which is build by the builder
	WithAbsenteeLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithBelongsTo adds BelongsTo (property field)
	WithBelongsTo(OptionalProperty) AccessCredentialBuilder
	// WithBelongsToBuilder adds BelongsTo (property field) which is build by the builder
	WithBelongsToBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithAssignedAccessRights adds AssignedAccessRights (property field)
	WithAssignedAccessRights(ReadableProperty) AccessCredentialBuilder
	// WithAssignedAccessRightsBuilder adds AssignedAccessRights (property field) which is build by the builder
	WithAssignedAccessRightsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithLastAccessPoint adds LastAccessPoint (property field)
	WithLastAccessPoint(OptionalProperty) AccessCredentialBuilder
	// WithLastAccessPointBuilder adds LastAccessPoint (property field) which is build by the builder
	WithLastAccessPointBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithLastAccessEvent adds LastAccessEvent (property field)
	WithLastAccessEvent(OptionalProperty) AccessCredentialBuilder
	// WithLastAccessEventBuilder adds LastAccessEvent (property field) which is build by the builder
	WithLastAccessEventBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithLastUseTime adds LastUseTime (property field)
	WithLastUseTime(OptionalProperty) AccessCredentialBuilder
	// WithLastUseTimeBuilder adds LastUseTime (property field) which is build by the builder
	WithLastUseTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithTraceFlag adds TraceFlag (property field)
	WithTraceFlag(OptionalProperty) AccessCredentialBuilder
	// WithTraceFlagBuilder adds TraceFlag (property field) which is build by the builder
	WithTraceFlagBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithThreatAuthority adds ThreatAuthority (property field)
	WithThreatAuthority(OptionalProperty) AccessCredentialBuilder
	// WithThreatAuthorityBuilder adds ThreatAuthority (property field) which is build by the builder
	WithThreatAuthorityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithExtendedTimeEnable adds ExtendedTimeEnable (property field)
	WithExtendedTimeEnable(OptionalProperty) AccessCredentialBuilder
	// WithExtendedTimeEnableBuilder adds ExtendedTimeEnable (property field) which is build by the builder
	WithExtendedTimeEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithAuthorizationExemptions adds AuthorizationExemptions (property field)
	WithAuthorizationExemptions(OptionalProperty) AccessCredentialBuilder
	// WithAuthorizationExemptionsBuilder adds AuthorizationExemptions (property field) which is build by the builder
	WithAuthorizationExemptionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) AccessCredentialBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AccessCredentialBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AccessCredentialBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AccessCredentialBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AccessCredentialBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder
	// Build builds the AccessCredential or returns an error if something is wrong
	Build() (AccessCredential, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() AccessCredential
}

// NewAccessCredentialBuilder() creates a AccessCredentialBuilder
func NewAccessCredentialBuilder() AccessCredentialBuilder {
	return &_AccessCredentialBuilder{_AccessCredential: new(_AccessCredential)}
}

type _AccessCredentialBuilder struct {
	*_AccessCredential

	err *utils.MultiError
}

var _ (AccessCredentialBuilder) = (*_AccessCredentialBuilder)(nil)

func (b *_AccessCredentialBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, credentialStatus ReadableProperty, reasonForDisable ReadableProperty, authenticationFactors ReadableProperty, activationTime ReadableProperty, expirationTime ReadableProperty, credentialDisable ReadableProperty, daysRemaining OptionalProperty, usesRemaining OptionalProperty, absenteeLimit OptionalProperty, belongsTo OptionalProperty, assignedAccessRights ReadableProperty, lastAccessPoint OptionalProperty, lastAccessEvent OptionalProperty, lastUseTime OptionalProperty, traceFlag OptionalProperty, threatAuthority OptionalProperty, extendedTimeEnable OptionalProperty, authorizationExemptions OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessCredentialBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithGlobalIdentifier(globalIdentifier).WithStatusFlags(statusFlags).WithReliability(reliability).WithCredentialStatus(credentialStatus).WithReasonForDisable(reasonForDisable).WithAuthenticationFactors(authenticationFactors).WithActivationTime(activationTime).WithExpirationTime(expirationTime).WithCredentialDisable(credentialDisable).WithDaysRemaining(daysRemaining).WithUsesRemaining(usesRemaining).WithAbsenteeLimit(absenteeLimit).WithBelongsTo(belongsTo).WithAssignedAccessRights(assignedAccessRights).WithLastAccessPoint(lastAccessPoint).WithLastAccessEvent(lastAccessEvent).WithLastUseTime(lastUseTime).WithTraceFlag(traceFlag).WithThreatAuthority(threatAuthority).WithExtendedTimeEnable(extendedTimeEnable).WithAuthorizationExemptions(authorizationExemptions).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AccessCredentialBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AccessCredentialBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AccessCredentialBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithObjectName(objectName ReadableProperty) AccessCredentialBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AccessCredentialBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithObjectType(objectType ReadableProperty) AccessCredentialBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AccessCredentialBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithDescription(description OptionalProperty) AccessCredentialBuilder {
	b.Description = description
	return b
}

func (b *_AccessCredentialBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithGlobalIdentifier(globalIdentifier WritableProperty) AccessCredentialBuilder {
	b.GlobalIdentifier = globalIdentifier
	return b
}

func (b *_AccessCredentialBuilder) WithGlobalIdentifierBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.GlobalIdentifier.CreateWritablePropertyBuilder())
	var err error
	b.GlobalIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithStatusFlags(statusFlags ReadableProperty) AccessCredentialBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_AccessCredentialBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithReliability(reliability ReadableProperty) AccessCredentialBuilder {
	b.Reliability = reliability
	return b
}

func (b *_AccessCredentialBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithCredentialStatus(credentialStatus ReadableProperty) AccessCredentialBuilder {
	b.CredentialStatus = credentialStatus
	return b
}

func (b *_AccessCredentialBuilder) WithCredentialStatusBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.CredentialStatus.CreateReadablePropertyBuilder())
	var err error
	b.CredentialStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithReasonForDisable(reasonForDisable ReadableProperty) AccessCredentialBuilder {
	b.ReasonForDisable = reasonForDisable
	return b
}

func (b *_AccessCredentialBuilder) WithReasonForDisableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ReasonForDisable.CreateReadablePropertyBuilder())
	var err error
	b.ReasonForDisable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithAuthenticationFactors(authenticationFactors ReadableProperty) AccessCredentialBuilder {
	b.AuthenticationFactors = authenticationFactors
	return b
}

func (b *_AccessCredentialBuilder) WithAuthenticationFactorsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.AuthenticationFactors.CreateReadablePropertyBuilder())
	var err error
	b.AuthenticationFactors, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithActivationTime(activationTime ReadableProperty) AccessCredentialBuilder {
	b.ActivationTime = activationTime
	return b
}

func (b *_AccessCredentialBuilder) WithActivationTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ActivationTime.CreateReadablePropertyBuilder())
	var err error
	b.ActivationTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithExpirationTime(expirationTime ReadableProperty) AccessCredentialBuilder {
	b.ExpirationTime = expirationTime
	return b
}

func (b *_AccessCredentialBuilder) WithExpirationTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ExpirationTime.CreateReadablePropertyBuilder())
	var err error
	b.ExpirationTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithCredentialDisable(credentialDisable ReadableProperty) AccessCredentialBuilder {
	b.CredentialDisable = credentialDisable
	return b
}

func (b *_AccessCredentialBuilder) WithCredentialDisableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.CredentialDisable.CreateReadablePropertyBuilder())
	var err error
	b.CredentialDisable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithDaysRemaining(daysRemaining OptionalProperty) AccessCredentialBuilder {
	b.DaysRemaining = daysRemaining
	return b
}

func (b *_AccessCredentialBuilder) WithDaysRemainingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.DaysRemaining.CreateOptionalPropertyBuilder())
	var err error
	b.DaysRemaining, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithUsesRemaining(usesRemaining OptionalProperty) AccessCredentialBuilder {
	b.UsesRemaining = usesRemaining
	return b
}

func (b *_AccessCredentialBuilder) WithUsesRemainingBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.UsesRemaining.CreateOptionalPropertyBuilder())
	var err error
	b.UsesRemaining, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithAbsenteeLimit(absenteeLimit OptionalProperty) AccessCredentialBuilder {
	b.AbsenteeLimit = absenteeLimit
	return b
}

func (b *_AccessCredentialBuilder) WithAbsenteeLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.AbsenteeLimit.CreateOptionalPropertyBuilder())
	var err error
	b.AbsenteeLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithBelongsTo(belongsTo OptionalProperty) AccessCredentialBuilder {
	b.BelongsTo = belongsTo
	return b
}

func (b *_AccessCredentialBuilder) WithBelongsToBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.BelongsTo.CreateOptionalPropertyBuilder())
	var err error
	b.BelongsTo, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithAssignedAccessRights(assignedAccessRights ReadableProperty) AccessCredentialBuilder {
	b.AssignedAccessRights = assignedAccessRights
	return b
}

func (b *_AccessCredentialBuilder) WithAssignedAccessRightsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.AssignedAccessRights.CreateReadablePropertyBuilder())
	var err error
	b.AssignedAccessRights, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithLastAccessPoint(lastAccessPoint OptionalProperty) AccessCredentialBuilder {
	b.LastAccessPoint = lastAccessPoint
	return b
}

func (b *_AccessCredentialBuilder) WithLastAccessPointBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.LastAccessPoint.CreateOptionalPropertyBuilder())
	var err error
	b.LastAccessPoint, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithLastAccessEvent(lastAccessEvent OptionalProperty) AccessCredentialBuilder {
	b.LastAccessEvent = lastAccessEvent
	return b
}

func (b *_AccessCredentialBuilder) WithLastAccessEventBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.LastAccessEvent.CreateOptionalPropertyBuilder())
	var err error
	b.LastAccessEvent, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithLastUseTime(lastUseTime OptionalProperty) AccessCredentialBuilder {
	b.LastUseTime = lastUseTime
	return b
}

func (b *_AccessCredentialBuilder) WithLastUseTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.LastUseTime.CreateOptionalPropertyBuilder())
	var err error
	b.LastUseTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithTraceFlag(traceFlag OptionalProperty) AccessCredentialBuilder {
	b.TraceFlag = traceFlag
	return b
}

func (b *_AccessCredentialBuilder) WithTraceFlagBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.TraceFlag.CreateOptionalPropertyBuilder())
	var err error
	b.TraceFlag, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithThreatAuthority(threatAuthority OptionalProperty) AccessCredentialBuilder {
	b.ThreatAuthority = threatAuthority
	return b
}

func (b *_AccessCredentialBuilder) WithThreatAuthorityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ThreatAuthority.CreateOptionalPropertyBuilder())
	var err error
	b.ThreatAuthority, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithExtendedTimeEnable(extendedTimeEnable OptionalProperty) AccessCredentialBuilder {
	b.ExtendedTimeEnable = extendedTimeEnable
	return b
}

func (b *_AccessCredentialBuilder) WithExtendedTimeEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ExtendedTimeEnable.CreateOptionalPropertyBuilder())
	var err error
	b.ExtendedTimeEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithAuthorizationExemptions(authorizationExemptions OptionalProperty) AccessCredentialBuilder {
	b.AuthorizationExemptions = authorizationExemptions
	return b
}

func (b *_AccessCredentialBuilder) WithAuthorizationExemptionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.AuthorizationExemptions.CreateOptionalPropertyBuilder())
	var err error
	b.AuthorizationExemptions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) AccessCredentialBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_AccessCredentialBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithPropertyList(propertyList ReadableProperty) AccessCredentialBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AccessCredentialBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithTags(tags OptionalProperty) AccessCredentialBuilder {
	b.Tags = tags
	return b
}

func (b *_AccessCredentialBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithProfileLocation(profileLocation OptionalProperty) AccessCredentialBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AccessCredentialBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) WithProfileName(profileName OptionalProperty) AccessCredentialBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AccessCredentialBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessCredentialBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessCredentialBuilder) Build() (AccessCredential, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.GlobalIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'globalIdentifier' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.CredentialStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'credentialStatus' not set"))
	}
	if b.ReasonForDisable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reasonForDisable' not set"))
	}
	if b.AuthenticationFactors == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'authenticationFactors' not set"))
	}
	if b.ActivationTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'activationTime' not set"))
	}
	if b.ExpirationTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'expirationTime' not set"))
	}
	if b.CredentialDisable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'credentialDisable' not set"))
	}
	if b.DaysRemaining == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'daysRemaining' not set"))
	}
	if b.UsesRemaining == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'usesRemaining' not set"))
	}
	if b.AbsenteeLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'absenteeLimit' not set"))
	}
	if b.BelongsTo == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'belongsTo' not set"))
	}
	if b.AssignedAccessRights == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'assignedAccessRights' not set"))
	}
	if b.LastAccessPoint == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastAccessPoint' not set"))
	}
	if b.LastAccessEvent == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastAccessEvent' not set"))
	}
	if b.LastUseTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastUseTime' not set"))
	}
	if b.TraceFlag == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'traceFlag' not set"))
	}
	if b.ThreatAuthority == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'threatAuthority' not set"))
	}
	if b.ExtendedTimeEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'extendedTimeEnable' not set"))
	}
	if b.AuthorizationExemptions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'authorizationExemptions' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._AccessCredential.deepCopy(), nil
}

func (b *_AccessCredentialBuilder) MustBuild() AccessCredential {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AccessCredentialBuilder) DeepCopy() any {
	_copy := b.CreateAccessCredentialBuilder().(*_AccessCredentialBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAccessCredentialBuilder creates a AccessCredentialBuilder
func (b *_AccessCredential) CreateAccessCredentialBuilder() AccessCredentialBuilder {
	if b == nil {
		return NewAccessCredentialBuilder()
	}
	return &_AccessCredentialBuilder{_AccessCredential: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AccessCredential) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_AccessCredential) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_AccessCredential) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_AccessCredential) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_AccessCredential) GetGlobalIdentifier() WritableProperty {
	return m.GlobalIdentifier
}

func (m *_AccessCredential) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_AccessCredential) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_AccessCredential) GetCredentialStatus() ReadableProperty {
	return m.CredentialStatus
}

func (m *_AccessCredential) GetReasonForDisable() ReadableProperty {
	return m.ReasonForDisable
}

func (m *_AccessCredential) GetAuthenticationFactors() ReadableProperty {
	return m.AuthenticationFactors
}

func (m *_AccessCredential) GetActivationTime() ReadableProperty {
	return m.ActivationTime
}

func (m *_AccessCredential) GetExpirationTime() ReadableProperty {
	return m.ExpirationTime
}

func (m *_AccessCredential) GetCredentialDisable() ReadableProperty {
	return m.CredentialDisable
}

func (m *_AccessCredential) GetDaysRemaining() OptionalProperty {
	return m.DaysRemaining
}

func (m *_AccessCredential) GetUsesRemaining() OptionalProperty {
	return m.UsesRemaining
}

func (m *_AccessCredential) GetAbsenteeLimit() OptionalProperty {
	return m.AbsenteeLimit
}

func (m *_AccessCredential) GetBelongsTo() OptionalProperty {
	return m.BelongsTo
}

func (m *_AccessCredential) GetAssignedAccessRights() ReadableProperty {
	return m.AssignedAccessRights
}

func (m *_AccessCredential) GetLastAccessPoint() OptionalProperty {
	return m.LastAccessPoint
}

func (m *_AccessCredential) GetLastAccessEvent() OptionalProperty {
	return m.LastAccessEvent
}

func (m *_AccessCredential) GetLastUseTime() OptionalProperty {
	return m.LastUseTime
}

func (m *_AccessCredential) GetTraceFlag() OptionalProperty {
	return m.TraceFlag
}

func (m *_AccessCredential) GetThreatAuthority() OptionalProperty {
	return m.ThreatAuthority
}

func (m *_AccessCredential) GetExtendedTimeEnable() OptionalProperty {
	return m.ExtendedTimeEnable
}

func (m *_AccessCredential) GetAuthorizationExemptions() OptionalProperty {
	return m.AuthorizationExemptions
}

func (m *_AccessCredential) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_AccessCredential) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_AccessCredential) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_AccessCredential) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_AccessCredential) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAccessCredential(structType any) AccessCredential {
	if casted, ok := structType.(AccessCredential); ok {
		return casted
	}
	if casted, ok := structType.(*AccessCredential); ok {
		return *casted
	}
	return nil
}

func (m *_AccessCredential) GetTypeName() string {
	return "AccessCredential"
}

func (m *_AccessCredential) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (globalIdentifier)
	lengthInBits += m.GlobalIdentifier.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (credentialStatus)
	lengthInBits += m.CredentialStatus.GetLengthInBits(ctx)

	// Simple field (reasonForDisable)
	lengthInBits += m.ReasonForDisable.GetLengthInBits(ctx)

	// Simple field (authenticationFactors)
	lengthInBits += m.AuthenticationFactors.GetLengthInBits(ctx)

	// Simple field (activationTime)
	lengthInBits += m.ActivationTime.GetLengthInBits(ctx)

	// Simple field (expirationTime)
	lengthInBits += m.ExpirationTime.GetLengthInBits(ctx)

	// Simple field (credentialDisable)
	lengthInBits += m.CredentialDisable.GetLengthInBits(ctx)

	// Simple field (daysRemaining)
	lengthInBits += m.DaysRemaining.GetLengthInBits(ctx)

	// Simple field (usesRemaining)
	lengthInBits += m.UsesRemaining.GetLengthInBits(ctx)

	// Simple field (absenteeLimit)
	lengthInBits += m.AbsenteeLimit.GetLengthInBits(ctx)

	// Simple field (belongsTo)
	lengthInBits += m.BelongsTo.GetLengthInBits(ctx)

	// Simple field (assignedAccessRights)
	lengthInBits += m.AssignedAccessRights.GetLengthInBits(ctx)

	// Simple field (lastAccessPoint)
	lengthInBits += m.LastAccessPoint.GetLengthInBits(ctx)

	// Simple field (lastAccessEvent)
	lengthInBits += m.LastAccessEvent.GetLengthInBits(ctx)

	// Simple field (lastUseTime)
	lengthInBits += m.LastUseTime.GetLengthInBits(ctx)

	// Simple field (traceFlag)
	lengthInBits += m.TraceFlag.GetLengthInBits(ctx)

	// Simple field (threatAuthority)
	lengthInBits += m.ThreatAuthority.GetLengthInBits(ctx)

	// Simple field (extendedTimeEnable)
	lengthInBits += m.ExtendedTimeEnable.GetLengthInBits(ctx)

	// Simple field (authorizationExemptions)
	lengthInBits += m.AuthorizationExemptions.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AccessCredential) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AccessCredentialParse(ctx context.Context, theBytes []byte) (AccessCredential, error) {
	return AccessCredentialParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AccessCredentialParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessCredential, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessCredential, error) {
		return AccessCredentialParseWithBuffer(ctx, readBuffer)
	}
}

func AccessCredentialParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (AccessCredential, error) {
	v, err := (&_AccessCredential{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_AccessCredential) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__accessCredential AccessCredential, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AccessCredential"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AccessCredential")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	globalIdentifier, err := ReadSimpleField[WritableProperty](ctx, "globalIdentifier", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'globalIdentifier' field"))
	}
	m.GlobalIdentifier = globalIdentifier

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	credentialStatus, err := ReadSimpleField[ReadableProperty](ctx, "credentialStatus", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetBinaryPV")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'credentialStatus' field"))
	}
	m.CredentialStatus = credentialStatus

	reasonForDisable, err := ReadSimpleField[ReadableProperty](ctx, "reasonForDisable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAccessCredentialDisableReason")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reasonForDisable' field"))
	}
	m.ReasonForDisable = reasonForDisable

	authenticationFactors, err := ReadSimpleField[ReadableProperty](ctx, "authenticationFactors", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetCredentialAuthenticationFactor")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'authenticationFactors' field"))
	}
	m.AuthenticationFactors = authenticationFactors

	activationTime, err := ReadSimpleField[ReadableProperty](ctx, "activationTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activationTime' field"))
	}
	m.ActivationTime = activationTime

	expirationTime, err := ReadSimpleField[ReadableProperty](ctx, "expirationTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'expirationTime' field"))
	}
	m.ExpirationTime = expirationTime

	credentialDisable, err := ReadSimpleField[ReadableProperty](ctx, "credentialDisable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAccessCredentialDisable")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'credentialDisable' field"))
	}
	m.CredentialDisable = credentialDisable

	daysRemaining, err := ReadSimpleField[OptionalProperty](ctx, "daysRemaining", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("INTEGER")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'daysRemaining' field"))
	}
	m.DaysRemaining = daysRemaining

	usesRemaining, err := ReadSimpleField[OptionalProperty](ctx, "usesRemaining", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("INTEGER")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'usesRemaining' field"))
	}
	m.UsesRemaining = usesRemaining

	absenteeLimit, err := ReadSimpleField[OptionalProperty](ctx, "absenteeLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'absenteeLimit' field"))
	}
	m.AbsenteeLimit = absenteeLimit

	belongsTo, err := ReadSimpleField[OptionalProperty](ctx, "belongsTo", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'belongsTo' field"))
	}
	m.BelongsTo = belongsTo

	assignedAccessRights, err := ReadSimpleField[ReadableProperty](ctx, "assignedAccessRights", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetAssignedAccessRights")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'assignedAccessRights' field"))
	}
	m.AssignedAccessRights = assignedAccessRights

	lastAccessPoint, err := ReadSimpleField[OptionalProperty](ctx, "lastAccessPoint", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastAccessPoint' field"))
	}
	m.LastAccessPoint = lastAccessPoint

	lastAccessEvent, err := ReadSimpleField[OptionalProperty](ctx, "lastAccessEvent", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetAccessEvent")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastAccessEvent' field"))
	}
	m.LastAccessEvent = lastAccessEvent

	lastUseTime, err := ReadSimpleField[OptionalProperty](ctx, "lastUseTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastUseTime' field"))
	}
	m.LastUseTime = lastUseTime

	traceFlag, err := ReadSimpleField[OptionalProperty](ctx, "traceFlag", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'traceFlag' field"))
	}
	m.TraceFlag = traceFlag

	threatAuthority, err := ReadSimpleField[OptionalProperty](ctx, "threatAuthority", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetAccessThreatLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'threatAuthority' field"))
	}
	m.ThreatAuthority = threatAuthority

	extendedTimeEnable, err := ReadSimpleField[OptionalProperty](ctx, "extendedTimeEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'extendedTimeEnable' field"))
	}
	m.ExtendedTimeEnable = extendedTimeEnable

	authorizationExemptions, err := ReadSimpleField[OptionalProperty](ctx, "authorizationExemptions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAuthorizationExemption")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'authorizationExemptions' field"))
	}
	m.AuthorizationExemptions = authorizationExemptions

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("AccessCredential"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AccessCredential")
	}

	return m, nil
}

func (m *_AccessCredential) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AccessCredential) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("AccessCredential"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AccessCredential")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "globalIdentifier", m.GetGlobalIdentifier(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'globalIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "credentialStatus", m.GetCredentialStatus(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'credentialStatus' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reasonForDisable", m.GetReasonForDisable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reasonForDisable' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "authenticationFactors", m.GetAuthenticationFactors(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'authenticationFactors' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "activationTime", m.GetActivationTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activationTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "expirationTime", m.GetExpirationTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'expirationTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "credentialDisable", m.GetCredentialDisable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'credentialDisable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "daysRemaining", m.GetDaysRemaining(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'daysRemaining' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "usesRemaining", m.GetUsesRemaining(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'usesRemaining' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "absenteeLimit", m.GetAbsenteeLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'absenteeLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "belongsTo", m.GetBelongsTo(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'belongsTo' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "assignedAccessRights", m.GetAssignedAccessRights(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'assignedAccessRights' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastAccessPoint", m.GetLastAccessPoint(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastAccessPoint' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastAccessEvent", m.GetLastAccessEvent(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastAccessEvent' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastUseTime", m.GetLastUseTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastUseTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "traceFlag", m.GetTraceFlag(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'traceFlag' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "threatAuthority", m.GetThreatAuthority(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'threatAuthority' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "extendedTimeEnable", m.GetExtendedTimeEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'extendedTimeEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "authorizationExemptions", m.GetAuthorizationExemptions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'authorizationExemptions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("AccessCredential"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AccessCredential")
	}
	return nil
}

func (m *_AccessCredential) IsAccessCredential() {}

func (m *_AccessCredential) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AccessCredential) deepCopy() *_AccessCredential {
	if m == nil {
		return nil
	}
	_AccessCredentialCopy := &_AccessCredential{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.GlobalIdentifier.DeepCopy().(WritableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.CredentialStatus.DeepCopy().(ReadableProperty),
		m.ReasonForDisable.DeepCopy().(ReadableProperty),
		m.AuthenticationFactors.DeepCopy().(ReadableProperty),
		m.ActivationTime.DeepCopy().(ReadableProperty),
		m.ExpirationTime.DeepCopy().(ReadableProperty),
		m.CredentialDisable.DeepCopy().(ReadableProperty),
		m.DaysRemaining.DeepCopy().(OptionalProperty),
		m.UsesRemaining.DeepCopy().(OptionalProperty),
		m.AbsenteeLimit.DeepCopy().(OptionalProperty),
		m.BelongsTo.DeepCopy().(OptionalProperty),
		m.AssignedAccessRights.DeepCopy().(ReadableProperty),
		m.LastAccessPoint.DeepCopy().(OptionalProperty),
		m.LastAccessEvent.DeepCopy().(OptionalProperty),
		m.LastUseTime.DeepCopy().(OptionalProperty),
		m.TraceFlag.DeepCopy().(OptionalProperty),
		m.ThreatAuthority.DeepCopy().(OptionalProperty),
		m.ExtendedTimeEnable.DeepCopy().(OptionalProperty),
		m.AuthorizationExemptions.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AccessCredentialCopy
}

func (m *_AccessCredential) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
