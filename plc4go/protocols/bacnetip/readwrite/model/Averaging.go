/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Averaging is the corresponding interface of Averaging
type Averaging interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetMinimumValue returns MinimumValue (property field)
	GetMinimumValue() ReadableProperty
	// GetMinimumValueTimestamp returns MinimumValueTimestamp (property field)
	GetMinimumValueTimestamp() OptionalProperty
	// GetAverageValue returns AverageValue (property field)
	GetAverageValue() ReadableProperty
	// GetVarianceValue returns VarianceValue (property field)
	GetVarianceValue() OptionalProperty
	// GetMaximumValue returns MaximumValue (property field)
	GetMaximumValue() ReadableProperty
	// GetMaximumValueTimestamp returns MaximumValueTimestamp (property field)
	GetMaximumValueTimestamp() OptionalProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetAttemptedSamples returns AttemptedSamples (property field)
	GetAttemptedSamples() WritableProperty
	// GetValidSamples returns ValidSamples (property field)
	GetValidSamples() ReadableProperty
	// GetObjectPropertyReference returns ObjectPropertyReference (property field)
	GetObjectPropertyReference() ReadableProperty
	// GetWindowInterval returns WindowInterval (property field)
	GetWindowInterval() WritableProperty
	// GetWindowSamples returns WindowSamples (property field)
	GetWindowSamples() WritableProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAveraging is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAveraging()
	// CreateBuilder creates a AveragingBuilder
	CreateAveragingBuilder() AveragingBuilder
}

// _Averaging is the data-structure of this message
type _Averaging struct {
	ObjectIdentifier        ReadableProperty
	ObjectName              ReadableProperty
	ObjectType              ReadableProperty
	MinimumValue            ReadableProperty
	MinimumValueTimestamp   OptionalProperty
	AverageValue            ReadableProperty
	VarianceValue           OptionalProperty
	MaximumValue            ReadableProperty
	MaximumValueTimestamp   OptionalProperty
	Description             OptionalProperty
	AttemptedSamples        WritableProperty
	ValidSamples            ReadableProperty
	ObjectPropertyReference ReadableProperty
	WindowInterval          WritableProperty
	WindowSamples           WritableProperty
	PropertyList            ReadableProperty
	Tags                    OptionalProperty
	ProfileLocation         OptionalProperty
	ProfileName             OptionalProperty
}

var _ Averaging = (*_Averaging)(nil)

// NewAveraging factory function for _Averaging
func NewAveraging(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, minimumValue ReadableProperty, minimumValueTimestamp OptionalProperty, averageValue ReadableProperty, varianceValue OptionalProperty, maximumValue ReadableProperty, maximumValueTimestamp OptionalProperty, description OptionalProperty, attemptedSamples WritableProperty, validSamples ReadableProperty, objectPropertyReference ReadableProperty, windowInterval WritableProperty, windowSamples WritableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Averaging {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Averaging must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Averaging must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Averaging must not be nil")
	}
	if minimumValue == nil {
		panic("minimumValue of type ReadableProperty for Averaging must not be nil")
	}
	if minimumValueTimestamp == nil {
		panic("minimumValueTimestamp of type OptionalProperty for Averaging must not be nil")
	}
	if averageValue == nil {
		panic("averageValue of type ReadableProperty for Averaging must not be nil")
	}
	if varianceValue == nil {
		panic("varianceValue of type OptionalProperty for Averaging must not be nil")
	}
	if maximumValue == nil {
		panic("maximumValue of type ReadableProperty for Averaging must not be nil")
	}
	if maximumValueTimestamp == nil {
		panic("maximumValueTimestamp of type OptionalProperty for Averaging must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Averaging must not be nil")
	}
	if attemptedSamples == nil {
		panic("attemptedSamples of type WritableProperty for Averaging must not be nil")
	}
	if validSamples == nil {
		panic("validSamples of type ReadableProperty for Averaging must not be nil")
	}
	if objectPropertyReference == nil {
		panic("objectPropertyReference of type ReadableProperty for Averaging must not be nil")
	}
	if windowInterval == nil {
		panic("windowInterval of type WritableProperty for Averaging must not be nil")
	}
	if windowSamples == nil {
		panic("windowSamples of type WritableProperty for Averaging must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Averaging must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Averaging must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Averaging must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Averaging must not be nil")
	}
	return &_Averaging{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, MinimumValue: minimumValue, MinimumValueTimestamp: minimumValueTimestamp, AverageValue: averageValue, VarianceValue: varianceValue, MaximumValue: maximumValue, MaximumValueTimestamp: maximumValueTimestamp, Description: description, AttemptedSamples: attemptedSamples, ValidSamples: validSamples, ObjectPropertyReference: objectPropertyReference, WindowInterval: windowInterval, WindowSamples: windowSamples, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AveragingBuilder is a builder for Averaging
type AveragingBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, minimumValue ReadableProperty, minimumValueTimestamp OptionalProperty, averageValue ReadableProperty, varianceValue OptionalProperty, maximumValue ReadableProperty, maximumValueTimestamp OptionalProperty, description OptionalProperty, attemptedSamples WritableProperty, validSamples ReadableProperty, objectPropertyReference ReadableProperty, windowInterval WritableProperty, windowSamples WritableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AveragingBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AveragingBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AveragingBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AveragingBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithMinimumValue adds MinimumValue (property field)
	WithMinimumValue(ReadableProperty) AveragingBuilder
	// WithMinimumValueBuilder adds MinimumValue (property field) which is build by the builder
	WithMinimumValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithMinimumValueTimestamp adds MinimumValueTimestamp (property field)
	WithMinimumValueTimestamp(OptionalProperty) AveragingBuilder
	// WithMinimumValueTimestampBuilder adds MinimumValueTimestamp (property field) which is build by the builder
	WithMinimumValueTimestampBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// WithAverageValue adds AverageValue (property field)
	WithAverageValue(ReadableProperty) AveragingBuilder
	// WithAverageValueBuilder adds AverageValue (property field) which is build by the builder
	WithAverageValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithVarianceValue adds VarianceValue (property field)
	WithVarianceValue(OptionalProperty) AveragingBuilder
	// WithVarianceValueBuilder adds VarianceValue (property field) which is build by the builder
	WithVarianceValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// WithMaximumValue adds MaximumValue (property field)
	WithMaximumValue(ReadableProperty) AveragingBuilder
	// WithMaximumValueBuilder adds MaximumValue (property field) which is build by the builder
	WithMaximumValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithMaximumValueTimestamp adds MaximumValueTimestamp (property field)
	WithMaximumValueTimestamp(OptionalProperty) AveragingBuilder
	// WithMaximumValueTimestampBuilder adds MaximumValueTimestamp (property field) which is build by the builder
	WithMaximumValueTimestampBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AveragingBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// WithAttemptedSamples adds AttemptedSamples (property field)
	WithAttemptedSamples(WritableProperty) AveragingBuilder
	// WithAttemptedSamplesBuilder adds AttemptedSamples (property field) which is build by the builder
	WithAttemptedSamplesBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AveragingBuilder
	// WithValidSamples adds ValidSamples (property field)
	WithValidSamples(ReadableProperty) AveragingBuilder
	// WithValidSamplesBuilder adds ValidSamples (property field) which is build by the builder
	WithValidSamplesBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithObjectPropertyReference adds ObjectPropertyReference (property field)
	WithObjectPropertyReference(ReadableProperty) AveragingBuilder
	// WithObjectPropertyReferenceBuilder adds ObjectPropertyReference (property field) which is build by the builder
	WithObjectPropertyReferenceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithWindowInterval adds WindowInterval (property field)
	WithWindowInterval(WritableProperty) AveragingBuilder
	// WithWindowIntervalBuilder adds WindowInterval (property field) which is build by the builder
	WithWindowIntervalBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AveragingBuilder
	// WithWindowSamples adds WindowSamples (property field)
	WithWindowSamples(WritableProperty) AveragingBuilder
	// WithWindowSamplesBuilder adds WindowSamples (property field) which is build by the builder
	WithWindowSamplesBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AveragingBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AveragingBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AveragingBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AveragingBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AveragingBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder
	// Build builds the Averaging or returns an error if something is wrong
	Build() (Averaging, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Averaging
}

// NewAveragingBuilder() creates a AveragingBuilder
func NewAveragingBuilder() AveragingBuilder {
	return &_AveragingBuilder{_Averaging: new(_Averaging)}
}

type _AveragingBuilder struct {
	*_Averaging

	err *utils.MultiError
}

var _ (AveragingBuilder) = (*_AveragingBuilder)(nil)

func (b *_AveragingBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, minimumValue ReadableProperty, minimumValueTimestamp OptionalProperty, averageValue ReadableProperty, varianceValue OptionalProperty, maximumValue ReadableProperty, maximumValueTimestamp OptionalProperty, description OptionalProperty, attemptedSamples WritableProperty, validSamples ReadableProperty, objectPropertyReference ReadableProperty, windowInterval WritableProperty, windowSamples WritableProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AveragingBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithMinimumValue(minimumValue).WithMinimumValueTimestamp(minimumValueTimestamp).WithAverageValue(averageValue).WithVarianceValue(varianceValue).WithMaximumValue(maximumValue).WithMaximumValueTimestamp(maximumValueTimestamp).WithDescription(description).WithAttemptedSamples(attemptedSamples).WithValidSamples(validSamples).WithObjectPropertyReference(objectPropertyReference).WithWindowInterval(windowInterval).WithWindowSamples(windowSamples).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AveragingBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AveragingBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AveragingBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithObjectName(objectName ReadableProperty) AveragingBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AveragingBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithObjectType(objectType ReadableProperty) AveragingBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AveragingBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithMinimumValue(minimumValue ReadableProperty) AveragingBuilder {
	b.MinimumValue = minimumValue
	return b
}

func (b *_AveragingBuilder) WithMinimumValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.MinimumValue.CreateReadablePropertyBuilder())
	var err error
	b.MinimumValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithMinimumValueTimestamp(minimumValueTimestamp OptionalProperty) AveragingBuilder {
	b.MinimumValueTimestamp = minimumValueTimestamp
	return b
}

func (b *_AveragingBuilder) WithMinimumValueTimestampBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.MinimumValueTimestamp.CreateOptionalPropertyBuilder())
	var err error
	b.MinimumValueTimestamp, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithAverageValue(averageValue ReadableProperty) AveragingBuilder {
	b.AverageValue = averageValue
	return b
}

func (b *_AveragingBuilder) WithAverageValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.AverageValue.CreateReadablePropertyBuilder())
	var err error
	b.AverageValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithVarianceValue(varianceValue OptionalProperty) AveragingBuilder {
	b.VarianceValue = varianceValue
	return b
}

func (b *_AveragingBuilder) WithVarianceValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.VarianceValue.CreateOptionalPropertyBuilder())
	var err error
	b.VarianceValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithMaximumValue(maximumValue ReadableProperty) AveragingBuilder {
	b.MaximumValue = maximumValue
	return b
}

func (b *_AveragingBuilder) WithMaximumValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.MaximumValue.CreateReadablePropertyBuilder())
	var err error
	b.MaximumValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithMaximumValueTimestamp(maximumValueTimestamp OptionalProperty) AveragingBuilder {
	b.MaximumValueTimestamp = maximumValueTimestamp
	return b
}

func (b *_AveragingBuilder) WithMaximumValueTimestampBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.MaximumValueTimestamp.CreateOptionalPropertyBuilder())
	var err error
	b.MaximumValueTimestamp, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithDescription(description OptionalProperty) AveragingBuilder {
	b.Description = description
	return b
}

func (b *_AveragingBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithAttemptedSamples(attemptedSamples WritableProperty) AveragingBuilder {
	b.AttemptedSamples = attemptedSamples
	return b
}

func (b *_AveragingBuilder) WithAttemptedSamplesBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.AttemptedSamples.CreateWritablePropertyBuilder())
	var err error
	b.AttemptedSamples, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithValidSamples(validSamples ReadableProperty) AveragingBuilder {
	b.ValidSamples = validSamples
	return b
}

func (b *_AveragingBuilder) WithValidSamplesBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ValidSamples.CreateReadablePropertyBuilder())
	var err error
	b.ValidSamples, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithObjectPropertyReference(objectPropertyReference ReadableProperty) AveragingBuilder {
	b.ObjectPropertyReference = objectPropertyReference
	return b
}

func (b *_AveragingBuilder) WithObjectPropertyReferenceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ObjectPropertyReference.CreateReadablePropertyBuilder())
	var err error
	b.ObjectPropertyReference, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithWindowInterval(windowInterval WritableProperty) AveragingBuilder {
	b.WindowInterval = windowInterval
	return b
}

func (b *_AveragingBuilder) WithWindowIntervalBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.WindowInterval.CreateWritablePropertyBuilder())
	var err error
	b.WindowInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithWindowSamples(windowSamples WritableProperty) AveragingBuilder {
	b.WindowSamples = windowSamples
	return b
}

func (b *_AveragingBuilder) WithWindowSamplesBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.WindowSamples.CreateWritablePropertyBuilder())
	var err error
	b.WindowSamples, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithPropertyList(propertyList ReadableProperty) AveragingBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AveragingBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithTags(tags OptionalProperty) AveragingBuilder {
	b.Tags = tags
	return b
}

func (b *_AveragingBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithProfileLocation(profileLocation OptionalProperty) AveragingBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AveragingBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) WithProfileName(profileName OptionalProperty) AveragingBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AveragingBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AveragingBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AveragingBuilder) Build() (Averaging, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.MinimumValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'minimumValue' not set"))
	}
	if b.MinimumValueTimestamp == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'minimumValueTimestamp' not set"))
	}
	if b.AverageValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'averageValue' not set"))
	}
	if b.VarianceValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'varianceValue' not set"))
	}
	if b.MaximumValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maximumValue' not set"))
	}
	if b.MaximumValueTimestamp == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maximumValueTimestamp' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.AttemptedSamples == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'attemptedSamples' not set"))
	}
	if b.ValidSamples == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'validSamples' not set"))
	}
	if b.ObjectPropertyReference == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectPropertyReference' not set"))
	}
	if b.WindowInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'windowInterval' not set"))
	}
	if b.WindowSamples == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'windowSamples' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Averaging.deepCopy(), nil
}

func (b *_AveragingBuilder) MustBuild() Averaging {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AveragingBuilder) DeepCopy() any {
	_copy := b.CreateAveragingBuilder().(*_AveragingBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAveragingBuilder creates a AveragingBuilder
func (b *_Averaging) CreateAveragingBuilder() AveragingBuilder {
	if b == nil {
		return NewAveragingBuilder()
	}
	return &_AveragingBuilder{_Averaging: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Averaging) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Averaging) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Averaging) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Averaging) GetMinimumValue() ReadableProperty {
	return m.MinimumValue
}

func (m *_Averaging) GetMinimumValueTimestamp() OptionalProperty {
	return m.MinimumValueTimestamp
}

func (m *_Averaging) GetAverageValue() ReadableProperty {
	return m.AverageValue
}

func (m *_Averaging) GetVarianceValue() OptionalProperty {
	return m.VarianceValue
}

func (m *_Averaging) GetMaximumValue() ReadableProperty {
	return m.MaximumValue
}

func (m *_Averaging) GetMaximumValueTimestamp() OptionalProperty {
	return m.MaximumValueTimestamp
}

func (m *_Averaging) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Averaging) GetAttemptedSamples() WritableProperty {
	return m.AttemptedSamples
}

func (m *_Averaging) GetValidSamples() ReadableProperty {
	return m.ValidSamples
}

func (m *_Averaging) GetObjectPropertyReference() ReadableProperty {
	return m.ObjectPropertyReference
}

func (m *_Averaging) GetWindowInterval() WritableProperty {
	return m.WindowInterval
}

func (m *_Averaging) GetWindowSamples() WritableProperty {
	return m.WindowSamples
}

func (m *_Averaging) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Averaging) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Averaging) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Averaging) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAveraging(structType any) Averaging {
	if casted, ok := structType.(Averaging); ok {
		return casted
	}
	if casted, ok := structType.(*Averaging); ok {
		return *casted
	}
	return nil
}

func (m *_Averaging) GetTypeName() string {
	return "Averaging"
}

func (m *_Averaging) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (minimumValue)
	lengthInBits += m.MinimumValue.GetLengthInBits(ctx)

	// Simple field (minimumValueTimestamp)
	lengthInBits += m.MinimumValueTimestamp.GetLengthInBits(ctx)

	// Simple field (averageValue)
	lengthInBits += m.AverageValue.GetLengthInBits(ctx)

	// Simple field (varianceValue)
	lengthInBits += m.VarianceValue.GetLengthInBits(ctx)

	// Simple field (maximumValue)
	lengthInBits += m.MaximumValue.GetLengthInBits(ctx)

	// Simple field (maximumValueTimestamp)
	lengthInBits += m.MaximumValueTimestamp.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (attemptedSamples)
	lengthInBits += m.AttemptedSamples.GetLengthInBits(ctx)

	// Simple field (validSamples)
	lengthInBits += m.ValidSamples.GetLengthInBits(ctx)

	// Simple field (objectPropertyReference)
	lengthInBits += m.ObjectPropertyReference.GetLengthInBits(ctx)

	// Simple field (windowInterval)
	lengthInBits += m.WindowInterval.GetLengthInBits(ctx)

	// Simple field (windowSamples)
	lengthInBits += m.WindowSamples.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Averaging) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AveragingParse(ctx context.Context, theBytes []byte) (Averaging, error) {
	return AveragingParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AveragingParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Averaging, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Averaging, error) {
		return AveragingParseWithBuffer(ctx, readBuffer)
	}
}

func AveragingParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Averaging, error) {
	v, err := (&_Averaging{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Averaging) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__averaging Averaging, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Averaging"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Averaging")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	minimumValue, err := ReadSimpleField[ReadableProperty](ctx, "minimumValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'minimumValue' field"))
	}
	m.MinimumValue = minimumValue

	minimumValueTimestamp, err := ReadSimpleField[OptionalProperty](ctx, "minimumValueTimestamp", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'minimumValueTimestamp' field"))
	}
	m.MinimumValueTimestamp = minimumValueTimestamp

	averageValue, err := ReadSimpleField[ReadableProperty](ctx, "averageValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'averageValue' field"))
	}
	m.AverageValue = averageValue

	varianceValue, err := ReadSimpleField[OptionalProperty](ctx, "varianceValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'varianceValue' field"))
	}
	m.VarianceValue = varianceValue

	maximumValue, err := ReadSimpleField[ReadableProperty](ctx, "maximumValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maximumValue' field"))
	}
	m.MaximumValue = maximumValue

	maximumValueTimestamp, err := ReadSimpleField[OptionalProperty](ctx, "maximumValueTimestamp", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maximumValueTimestamp' field"))
	}
	m.MaximumValueTimestamp = maximumValueTimestamp

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	attemptedSamples, err := ReadSimpleField[WritableProperty](ctx, "attemptedSamples", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'attemptedSamples' field"))
	}
	m.AttemptedSamples = attemptedSamples

	validSamples, err := ReadSimpleField[ReadableProperty](ctx, "validSamples", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'validSamples' field"))
	}
	m.ValidSamples = validSamples

	objectPropertyReference, err := ReadSimpleField[ReadableProperty](ctx, "objectPropertyReference", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDeviceObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectPropertyReference' field"))
	}
	m.ObjectPropertyReference = objectPropertyReference

	windowInterval, err := ReadSimpleField[WritableProperty](ctx, "windowInterval", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'windowInterval' field"))
	}
	m.WindowInterval = windowInterval

	windowSamples, err := ReadSimpleField[WritableProperty](ctx, "windowSamples", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'windowSamples' field"))
	}
	m.WindowSamples = windowSamples

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Averaging"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Averaging")
	}

	return m, nil
}

func (m *_Averaging) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Averaging) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Averaging"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Averaging")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "minimumValue", m.GetMinimumValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'minimumValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "minimumValueTimestamp", m.GetMinimumValueTimestamp(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'minimumValueTimestamp' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "averageValue", m.GetAverageValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'averageValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "varianceValue", m.GetVarianceValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'varianceValue' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "maximumValue", m.GetMaximumValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maximumValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maximumValueTimestamp", m.GetMaximumValueTimestamp(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maximumValueTimestamp' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "attemptedSamples", m.GetAttemptedSamples(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'attemptedSamples' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "validSamples", m.GetValidSamples(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'validSamples' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectPropertyReference", m.GetObjectPropertyReference(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectPropertyReference' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "windowInterval", m.GetWindowInterval(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'windowInterval' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "windowSamples", m.GetWindowSamples(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'windowSamples' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Averaging"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Averaging")
	}
	return nil
}

func (m *_Averaging) IsAveraging() {}

func (m *_Averaging) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Averaging) deepCopy() *_Averaging {
	if m == nil {
		return nil
	}
	_AveragingCopy := &_Averaging{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.MinimumValue.DeepCopy().(ReadableProperty),
		m.MinimumValueTimestamp.DeepCopy().(OptionalProperty),
		m.AverageValue.DeepCopy().(ReadableProperty),
		m.VarianceValue.DeepCopy().(OptionalProperty),
		m.MaximumValue.DeepCopy().(ReadableProperty),
		m.MaximumValueTimestamp.DeepCopy().(OptionalProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.AttemptedSamples.DeepCopy().(WritableProperty),
		m.ValidSamples.DeepCopy().(ReadableProperty),
		m.ObjectPropertyReference.DeepCopy().(ReadableProperty),
		m.WindowInterval.DeepCopy().(WritableProperty),
		m.WindowSamples.DeepCopy().(WritableProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AveragingCopy
}

func (m *_Averaging) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
