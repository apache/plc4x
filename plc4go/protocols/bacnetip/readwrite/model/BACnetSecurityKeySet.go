/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetSecurityKeySet is the corresponding interface of BACnetSecurityKeySet
type BACnetSecurityKeySet interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetKeyRevision returns KeyRevision (property field)
	GetKeyRevision() BACnetContextTagUnsignedInteger
	// GetActivationTime returns ActivationTime (property field)
	GetActivationTime() BACnetDateTimeEnclosed
	// GetExpirationTime returns ExpirationTime (property field)
	GetExpirationTime() BACnetDateTimeEnclosed
	// GetKeyIds returns KeyIds (property field)
	GetKeyIds() BACnetSecurityKeySetKeyIds
	// IsBACnetSecurityKeySet is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetSecurityKeySet()
	// CreateBuilder creates a BACnetSecurityKeySetBuilder
	CreateBACnetSecurityKeySetBuilder() BACnetSecurityKeySetBuilder
}

// _BACnetSecurityKeySet is the data-structure of this message
type _BACnetSecurityKeySet struct {
	KeyRevision    BACnetContextTagUnsignedInteger
	ActivationTime BACnetDateTimeEnclosed
	ExpirationTime BACnetDateTimeEnclosed
	KeyIds         BACnetSecurityKeySetKeyIds
}

var _ BACnetSecurityKeySet = (*_BACnetSecurityKeySet)(nil)

// NewBACnetSecurityKeySet factory function for _BACnetSecurityKeySet
func NewBACnetSecurityKeySet(keyRevision BACnetContextTagUnsignedInteger, activationTime BACnetDateTimeEnclosed, expirationTime BACnetDateTimeEnclosed, keyIds BACnetSecurityKeySetKeyIds) *_BACnetSecurityKeySet {
	if keyRevision == nil {
		panic("keyRevision of type BACnetContextTagUnsignedInteger for BACnetSecurityKeySet must not be nil")
	}
	if activationTime == nil {
		panic("activationTime of type BACnetDateTimeEnclosed for BACnetSecurityKeySet must not be nil")
	}
	if expirationTime == nil {
		panic("expirationTime of type BACnetDateTimeEnclosed for BACnetSecurityKeySet must not be nil")
	}
	if keyIds == nil {
		panic("keyIds of type BACnetSecurityKeySetKeyIds for BACnetSecurityKeySet must not be nil")
	}
	return &_BACnetSecurityKeySet{KeyRevision: keyRevision, ActivationTime: activationTime, ExpirationTime: expirationTime, KeyIds: keyIds}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// BACnetSecurityKeySetBuilder is a builder for BACnetSecurityKeySet
type BACnetSecurityKeySetBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(keyRevision BACnetContextTagUnsignedInteger, activationTime BACnetDateTimeEnclosed, expirationTime BACnetDateTimeEnclosed, keyIds BACnetSecurityKeySetKeyIds) BACnetSecurityKeySetBuilder
	// WithKeyRevision adds KeyRevision (property field)
	WithKeyRevision(BACnetContextTagUnsignedInteger) BACnetSecurityKeySetBuilder
	// WithKeyRevisionBuilder adds KeyRevision (property field) which is build by the builder
	WithKeyRevisionBuilder(func(BACnetContextTagUnsignedIntegerBuilder) BACnetContextTagUnsignedIntegerBuilder) BACnetSecurityKeySetBuilder
	// WithActivationTime adds ActivationTime (property field)
	WithActivationTime(BACnetDateTimeEnclosed) BACnetSecurityKeySetBuilder
	// WithActivationTimeBuilder adds ActivationTime (property field) which is build by the builder
	WithActivationTimeBuilder(func(BACnetDateTimeEnclosedBuilder) BACnetDateTimeEnclosedBuilder) BACnetSecurityKeySetBuilder
	// WithExpirationTime adds ExpirationTime (property field)
	WithExpirationTime(BACnetDateTimeEnclosed) BACnetSecurityKeySetBuilder
	// WithExpirationTimeBuilder adds ExpirationTime (property field) which is build by the builder
	WithExpirationTimeBuilder(func(BACnetDateTimeEnclosedBuilder) BACnetDateTimeEnclosedBuilder) BACnetSecurityKeySetBuilder
	// WithKeyIds adds KeyIds (property field)
	WithKeyIds(BACnetSecurityKeySetKeyIds) BACnetSecurityKeySetBuilder
	// WithKeyIdsBuilder adds KeyIds (property field) which is build by the builder
	WithKeyIdsBuilder(func(BACnetSecurityKeySetKeyIdsBuilder) BACnetSecurityKeySetKeyIdsBuilder) BACnetSecurityKeySetBuilder
	// Build builds the BACnetSecurityKeySet or returns an error if something is wrong
	Build() (BACnetSecurityKeySet, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() BACnetSecurityKeySet
}

// NewBACnetSecurityKeySetBuilder() creates a BACnetSecurityKeySetBuilder
func NewBACnetSecurityKeySetBuilder() BACnetSecurityKeySetBuilder {
	return &_BACnetSecurityKeySetBuilder{_BACnetSecurityKeySet: new(_BACnetSecurityKeySet)}
}

type _BACnetSecurityKeySetBuilder struct {
	*_BACnetSecurityKeySet

	err *utils.MultiError
}

var _ (BACnetSecurityKeySetBuilder) = (*_BACnetSecurityKeySetBuilder)(nil)

func (m *_BACnetSecurityKeySetBuilder) WithMandatoryFields(keyRevision BACnetContextTagUnsignedInteger, activationTime BACnetDateTimeEnclosed, expirationTime BACnetDateTimeEnclosed, keyIds BACnetSecurityKeySetKeyIds) BACnetSecurityKeySetBuilder {
	return m.WithKeyRevision(keyRevision).WithActivationTime(activationTime).WithExpirationTime(expirationTime).WithKeyIds(keyIds)
}

func (m *_BACnetSecurityKeySetBuilder) WithKeyRevision(keyRevision BACnetContextTagUnsignedInteger) BACnetSecurityKeySetBuilder {
	m.KeyRevision = keyRevision
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithKeyRevisionBuilder(builderSupplier func(BACnetContextTagUnsignedIntegerBuilder) BACnetContextTagUnsignedIntegerBuilder) BACnetSecurityKeySetBuilder {
	builder := builderSupplier(m.KeyRevision.CreateBACnetContextTagUnsignedIntegerBuilder())
	var err error
	m.KeyRevision, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "BACnetContextTagUnsignedIntegerBuilder failed"))
	}
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithActivationTime(activationTime BACnetDateTimeEnclosed) BACnetSecurityKeySetBuilder {
	m.ActivationTime = activationTime
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithActivationTimeBuilder(builderSupplier func(BACnetDateTimeEnclosedBuilder) BACnetDateTimeEnclosedBuilder) BACnetSecurityKeySetBuilder {
	builder := builderSupplier(m.ActivationTime.CreateBACnetDateTimeEnclosedBuilder())
	var err error
	m.ActivationTime, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "BACnetDateTimeEnclosedBuilder failed"))
	}
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithExpirationTime(expirationTime BACnetDateTimeEnclosed) BACnetSecurityKeySetBuilder {
	m.ExpirationTime = expirationTime
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithExpirationTimeBuilder(builderSupplier func(BACnetDateTimeEnclosedBuilder) BACnetDateTimeEnclosedBuilder) BACnetSecurityKeySetBuilder {
	builder := builderSupplier(m.ExpirationTime.CreateBACnetDateTimeEnclosedBuilder())
	var err error
	m.ExpirationTime, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "BACnetDateTimeEnclosedBuilder failed"))
	}
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithKeyIds(keyIds BACnetSecurityKeySetKeyIds) BACnetSecurityKeySetBuilder {
	m.KeyIds = keyIds
	return m
}

func (m *_BACnetSecurityKeySetBuilder) WithKeyIdsBuilder(builderSupplier func(BACnetSecurityKeySetKeyIdsBuilder) BACnetSecurityKeySetKeyIdsBuilder) BACnetSecurityKeySetBuilder {
	builder := builderSupplier(m.KeyIds.CreateBACnetSecurityKeySetKeyIdsBuilder())
	var err error
	m.KeyIds, err = builder.Build()
	if err != nil {
		if m.err == nil {
			m.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		m.err.Append(errors.Wrap(err, "BACnetSecurityKeySetKeyIdsBuilder failed"))
	}
	return m
}

func (m *_BACnetSecurityKeySetBuilder) Build() (BACnetSecurityKeySet, error) {
	if m.KeyRevision == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'keyRevision' not set"))
	}
	if m.ActivationTime == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'activationTime' not set"))
	}
	if m.ExpirationTime == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'expirationTime' not set"))
	}
	if m.KeyIds == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'keyIds' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._BACnetSecurityKeySet.deepCopy(), nil
}

func (m *_BACnetSecurityKeySetBuilder) MustBuild() BACnetSecurityKeySet {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_BACnetSecurityKeySetBuilder) DeepCopy() any {
	return m.CreateBACnetSecurityKeySetBuilder()
}

// CreateBACnetSecurityKeySetBuilder creates a BACnetSecurityKeySetBuilder
func (m *_BACnetSecurityKeySet) CreateBACnetSecurityKeySetBuilder() BACnetSecurityKeySetBuilder {
	if m == nil {
		return NewBACnetSecurityKeySetBuilder()
	}
	return &_BACnetSecurityKeySetBuilder{_BACnetSecurityKeySet: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BACnetSecurityKeySet) GetKeyRevision() BACnetContextTagUnsignedInteger {
	return m.KeyRevision
}

func (m *_BACnetSecurityKeySet) GetActivationTime() BACnetDateTimeEnclosed {
	return m.ActivationTime
}

func (m *_BACnetSecurityKeySet) GetExpirationTime() BACnetDateTimeEnclosed {
	return m.ExpirationTime
}

func (m *_BACnetSecurityKeySet) GetKeyIds() BACnetSecurityKeySetKeyIds {
	return m.KeyIds
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastBACnetSecurityKeySet(structType any) BACnetSecurityKeySet {
	if casted, ok := structType.(BACnetSecurityKeySet); ok {
		return casted
	}
	if casted, ok := structType.(*BACnetSecurityKeySet); ok {
		return *casted
	}
	return nil
}

func (m *_BACnetSecurityKeySet) GetTypeName() string {
	return "BACnetSecurityKeySet"
}

func (m *_BACnetSecurityKeySet) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (keyRevision)
	lengthInBits += m.KeyRevision.GetLengthInBits(ctx)

	// Simple field (activationTime)
	lengthInBits += m.ActivationTime.GetLengthInBits(ctx)

	// Simple field (expirationTime)
	lengthInBits += m.ExpirationTime.GetLengthInBits(ctx)

	// Simple field (keyIds)
	lengthInBits += m.KeyIds.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_BACnetSecurityKeySet) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func BACnetSecurityKeySetParse(ctx context.Context, theBytes []byte) (BACnetSecurityKeySet, error) {
	return BACnetSecurityKeySetParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func BACnetSecurityKeySetParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (BACnetSecurityKeySet, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (BACnetSecurityKeySet, error) {
		return BACnetSecurityKeySetParseWithBuffer(ctx, readBuffer)
	}
}

func BACnetSecurityKeySetParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (BACnetSecurityKeySet, error) {
	v, err := (&_BACnetSecurityKeySet{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_BACnetSecurityKeySet) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__bACnetSecurityKeySet BACnetSecurityKeySet, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetSecurityKeySet"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetSecurityKeySet")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	keyRevision, err := ReadSimpleField[BACnetContextTagUnsignedInteger](ctx, "keyRevision", ReadComplex[BACnetContextTagUnsignedInteger](BACnetContextTagParseWithBufferProducer[BACnetContextTagUnsignedInteger]((uint8)(uint8(0)), (BACnetDataType)(BACnetDataType_UNSIGNED_INTEGER)), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'keyRevision' field"))
	}
	m.KeyRevision = keyRevision

	activationTime, err := ReadSimpleField[BACnetDateTimeEnclosed](ctx, "activationTime", ReadComplex[BACnetDateTimeEnclosed](BACnetDateTimeEnclosedParseWithBufferProducer((uint8)(uint8(1))), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activationTime' field"))
	}
	m.ActivationTime = activationTime

	expirationTime, err := ReadSimpleField[BACnetDateTimeEnclosed](ctx, "expirationTime", ReadComplex[BACnetDateTimeEnclosed](BACnetDateTimeEnclosedParseWithBufferProducer((uint8)(uint8(2))), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'expirationTime' field"))
	}
	m.ExpirationTime = expirationTime

	keyIds, err := ReadSimpleField[BACnetSecurityKeySetKeyIds](ctx, "keyIds", ReadComplex[BACnetSecurityKeySetKeyIds](BACnetSecurityKeySetKeyIdsParseWithBufferProducer((uint8)(uint8(3))), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'keyIds' field"))
	}
	m.KeyIds = keyIds

	if closeErr := readBuffer.CloseContext("BACnetSecurityKeySet"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetSecurityKeySet")
	}

	return m, nil
}

func (m *_BACnetSecurityKeySet) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_BACnetSecurityKeySet) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("BACnetSecurityKeySet"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BACnetSecurityKeySet")
	}

	if err := WriteSimpleField[BACnetContextTagUnsignedInteger](ctx, "keyRevision", m.GetKeyRevision(), WriteComplex[BACnetContextTagUnsignedInteger](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'keyRevision' field")
	}

	if err := WriteSimpleField[BACnetDateTimeEnclosed](ctx, "activationTime", m.GetActivationTime(), WriteComplex[BACnetDateTimeEnclosed](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activationTime' field")
	}

	if err := WriteSimpleField[BACnetDateTimeEnclosed](ctx, "expirationTime", m.GetExpirationTime(), WriteComplex[BACnetDateTimeEnclosed](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'expirationTime' field")
	}

	if err := WriteSimpleField[BACnetSecurityKeySetKeyIds](ctx, "keyIds", m.GetKeyIds(), WriteComplex[BACnetSecurityKeySetKeyIds](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'keyIds' field")
	}

	if popErr := writeBuffer.PopContext("BACnetSecurityKeySet"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BACnetSecurityKeySet")
	}
	return nil
}

func (m *_BACnetSecurityKeySet) IsBACnetSecurityKeySet() {}

func (m *_BACnetSecurityKeySet) DeepCopy() any {
	return m.deepCopy()
}

func (m *_BACnetSecurityKeySet) deepCopy() *_BACnetSecurityKeySet {
	if m == nil {
		return nil
	}
	_BACnetSecurityKeySetCopy := &_BACnetSecurityKeySet{
		m.KeyRevision.DeepCopy().(BACnetContextTagUnsignedInteger),
		m.ActivationTime.DeepCopy().(BACnetDateTimeEnclosed),
		m.ExpirationTime.DeepCopy().(BACnetDateTimeEnclosed),
		m.KeyIds.DeepCopy().(BACnetSecurityKeySetKeyIds),
	}
	return _BACnetSecurityKeySetCopy
}

func (m *_BACnetSecurityKeySet) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
