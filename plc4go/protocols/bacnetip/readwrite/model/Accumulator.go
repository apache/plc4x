/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Accumulator is the corresponding interface of Accumulator
type Accumulator interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetDeviceType returns DeviceType (property field)
	GetDeviceType() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetScale returns Scale (property field)
	GetScale() ReadableProperty
	// GetUnits returns Units (property field)
	GetUnits() ReadableProperty
	// GetPrescale returns Prescale (property field)
	GetPrescale() OptionalProperty
	// GetMaxPresValue returns MaxPresValue (property field)
	GetMaxPresValue() ReadableProperty
	// GetValueChangeTime returns ValueChangeTime (property field)
	GetValueChangeTime() OptionalProperty
	// GetValueBeforeChange returns ValueBeforeChange (property field)
	GetValueBeforeChange() OptionalProperty
	// GetValueSet returns ValueSet (property field)
	GetValueSet() OptionalProperty
	// GetLoggingRecord returns LoggingRecord (property field)
	GetLoggingRecord() OptionalProperty
	// GetLoggingObject returns LoggingObject (property field)
	GetLoggingObject() OptionalProperty
	// GetPulseRate returns PulseRate (property field)
	GetPulseRate() OptionalProperty
	// GetHighLimit returns HighLimit (property field)
	GetHighLimit() OptionalProperty
	// GetLowLimit returns LowLimit (property field)
	GetLowLimit() OptionalProperty
	// GetLimitMonitoringInterval returns LimitMonitoringInterval (property field)
	GetLimitMonitoringInterval() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetLimitEnable returns LimitEnable (property field)
	GetLimitEnable() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetFaultHighLimit returns FaultHighLimit (property field)
	GetFaultHighLimit() OptionalProperty
	// GetFaultLowLimit returns FaultLowLimit (property field)
	GetFaultLowLimit() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAccumulator is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAccumulator()
	// CreateBuilder creates a AccumulatorBuilder
	CreateAccumulatorBuilder() AccumulatorBuilder
}

// _Accumulator is the data-structure of this message
type _Accumulator struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	PresentValue                 ReadableProperty
	Description                  OptionalProperty
	DeviceType                   OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	Scale                        ReadableProperty
	Units                        ReadableProperty
	Prescale                     OptionalProperty
	MaxPresValue                 ReadableProperty
	ValueChangeTime              OptionalProperty
	ValueBeforeChange            OptionalProperty
	ValueSet                     OptionalProperty
	LoggingRecord                OptionalProperty
	LoggingObject                OptionalProperty
	PulseRate                    OptionalProperty
	HighLimit                    OptionalProperty
	LowLimit                     OptionalProperty
	LimitMonitoringInterval      OptionalProperty
	NotificationClass            OptionalProperty
	TimeDelay                    OptionalProperty
	LimitEnable                  OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	FaultHighLimit               OptionalProperty
	FaultLowLimit                OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ Accumulator = (*_Accumulator)(nil)

// NewAccumulator factory function for _Accumulator
func NewAccumulator(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, scale ReadableProperty, units ReadableProperty, prescale OptionalProperty, maxPresValue ReadableProperty, valueChangeTime OptionalProperty, valueBeforeChange OptionalProperty, valueSet OptionalProperty, loggingRecord OptionalProperty, loggingObject OptionalProperty, pulseRate OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, limitMonitoringInterval OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, faultHighLimit OptionalProperty, faultLowLimit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_Accumulator {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Accumulator must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Accumulator must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Accumulator must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for Accumulator must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Accumulator must not be nil")
	}
	if deviceType == nil {
		panic("deviceType of type OptionalProperty for Accumulator must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for Accumulator must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for Accumulator must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Accumulator must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for Accumulator must not be nil")
	}
	if scale == nil {
		panic("scale of type ReadableProperty for Accumulator must not be nil")
	}
	if units == nil {
		panic("units of type ReadableProperty for Accumulator must not be nil")
	}
	if prescale == nil {
		panic("prescale of type OptionalProperty for Accumulator must not be nil")
	}
	if maxPresValue == nil {
		panic("maxPresValue of type ReadableProperty for Accumulator must not be nil")
	}
	if valueChangeTime == nil {
		panic("valueChangeTime of type OptionalProperty for Accumulator must not be nil")
	}
	if valueBeforeChange == nil {
		panic("valueBeforeChange of type OptionalProperty for Accumulator must not be nil")
	}
	if valueSet == nil {
		panic("valueSet of type OptionalProperty for Accumulator must not be nil")
	}
	if loggingRecord == nil {
		panic("loggingRecord of type OptionalProperty for Accumulator must not be nil")
	}
	if loggingObject == nil {
		panic("loggingObject of type OptionalProperty for Accumulator must not be nil")
	}
	if pulseRate == nil {
		panic("pulseRate of type OptionalProperty for Accumulator must not be nil")
	}
	if highLimit == nil {
		panic("highLimit of type OptionalProperty for Accumulator must not be nil")
	}
	if lowLimit == nil {
		panic("lowLimit of type OptionalProperty for Accumulator must not be nil")
	}
	if limitMonitoringInterval == nil {
		panic("limitMonitoringInterval of type OptionalProperty for Accumulator must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Accumulator must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for Accumulator must not be nil")
	}
	if limitEnable == nil {
		panic("limitEnable of type OptionalProperty for Accumulator must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Accumulator must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Accumulator must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Accumulator must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Accumulator must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Accumulator must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Accumulator must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Accumulator must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for Accumulator must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for Accumulator must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for Accumulator must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Accumulator must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Accumulator must not be nil")
	}
	if faultHighLimit == nil {
		panic("faultHighLimit of type OptionalProperty for Accumulator must not be nil")
	}
	if faultLowLimit == nil {
		panic("faultLowLimit of type OptionalProperty for Accumulator must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Accumulator must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Accumulator must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Accumulator must not be nil")
	}
	return &_Accumulator{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, PresentValue: presentValue, Description: description, DeviceType: deviceType, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, Scale: scale, Units: units, Prescale: prescale, MaxPresValue: maxPresValue, ValueChangeTime: valueChangeTime, ValueBeforeChange: valueBeforeChange, ValueSet: valueSet, LoggingRecord: loggingRecord, LoggingObject: loggingObject, PulseRate: pulseRate, HighLimit: highLimit, LowLimit: lowLimit, LimitMonitoringInterval: limitMonitoringInterval, NotificationClass: notificationClass, TimeDelay: timeDelay, LimitEnable: limitEnable, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, FaultHighLimit: faultHighLimit, FaultLowLimit: faultLowLimit, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AccumulatorBuilder is a builder for Accumulator
type AccumulatorBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, scale ReadableProperty, units ReadableProperty, prescale OptionalProperty, maxPresValue ReadableProperty, valueChangeTime OptionalProperty, valueBeforeChange OptionalProperty, valueSet OptionalProperty, loggingRecord OptionalProperty, loggingObject OptionalProperty, pulseRate OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, limitMonitoringInterval OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, faultHighLimit OptionalProperty, faultLowLimit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccumulatorBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AccumulatorBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AccumulatorBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AccumulatorBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) AccumulatorBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AccumulatorBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithDeviceType adds DeviceType (property field)
	WithDeviceType(OptionalProperty) AccumulatorBuilder
	// WithDeviceTypeBuilder adds DeviceType (property field) which is build by the builder
	WithDeviceTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) AccumulatorBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) AccumulatorBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) AccumulatorBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) AccumulatorBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithScale adds Scale (property field)
	WithScale(ReadableProperty) AccumulatorBuilder
	// WithScaleBuilder adds Scale (property field) which is build by the builder
	WithScaleBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithUnits adds Units (property field)
	WithUnits(ReadableProperty) AccumulatorBuilder
	// WithUnitsBuilder adds Units (property field) which is build by the builder
	WithUnitsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithPrescale adds Prescale (property field)
	WithPrescale(OptionalProperty) AccumulatorBuilder
	// WithPrescaleBuilder adds Prescale (property field) which is build by the builder
	WithPrescaleBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithMaxPresValue adds MaxPresValue (property field)
	WithMaxPresValue(ReadableProperty) AccumulatorBuilder
	// WithMaxPresValueBuilder adds MaxPresValue (property field) which is build by the builder
	WithMaxPresValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithValueChangeTime adds ValueChangeTime (property field)
	WithValueChangeTime(OptionalProperty) AccumulatorBuilder
	// WithValueChangeTimeBuilder adds ValueChangeTime (property field) which is build by the builder
	WithValueChangeTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithValueBeforeChange adds ValueBeforeChange (property field)
	WithValueBeforeChange(OptionalProperty) AccumulatorBuilder
	// WithValueBeforeChangeBuilder adds ValueBeforeChange (property field) which is build by the builder
	WithValueBeforeChangeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithValueSet adds ValueSet (property field)
	WithValueSet(OptionalProperty) AccumulatorBuilder
	// WithValueSetBuilder adds ValueSet (property field) which is build by the builder
	WithValueSetBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithLoggingRecord adds LoggingRecord (property field)
	WithLoggingRecord(OptionalProperty) AccumulatorBuilder
	// WithLoggingRecordBuilder adds LoggingRecord (property field) which is build by the builder
	WithLoggingRecordBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithLoggingObject adds LoggingObject (property field)
	WithLoggingObject(OptionalProperty) AccumulatorBuilder
	// WithLoggingObjectBuilder adds LoggingObject (property field) which is build by the builder
	WithLoggingObjectBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithPulseRate adds PulseRate (property field)
	WithPulseRate(OptionalProperty) AccumulatorBuilder
	// WithPulseRateBuilder adds PulseRate (property field) which is build by the builder
	WithPulseRateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithHighLimit adds HighLimit (property field)
	WithHighLimit(OptionalProperty) AccumulatorBuilder
	// WithHighLimitBuilder adds HighLimit (property field) which is build by the builder
	WithHighLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithLowLimit adds LowLimit (property field)
	WithLowLimit(OptionalProperty) AccumulatorBuilder
	// WithLowLimitBuilder adds LowLimit (property field) which is build by the builder
	WithLowLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithLimitMonitoringInterval adds LimitMonitoringInterval (property field)
	WithLimitMonitoringInterval(OptionalProperty) AccumulatorBuilder
	// WithLimitMonitoringIntervalBuilder adds LimitMonitoringInterval (property field) which is build by the builder
	WithLimitMonitoringIntervalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) AccumulatorBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) AccumulatorBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithLimitEnable adds LimitEnable (property field)
	WithLimitEnable(OptionalProperty) AccumulatorBuilder
	// WithLimitEnableBuilder adds LimitEnable (property field) which is build by the builder
	WithLimitEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) AccumulatorBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) AccumulatorBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) AccumulatorBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) AccumulatorBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) AccumulatorBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) AccumulatorBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) AccumulatorBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) AccumulatorBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) AccumulatorBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) AccumulatorBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) AccumulatorBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AccumulatorBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder
	// WithFaultHighLimit adds FaultHighLimit (property field)
	WithFaultHighLimit(OptionalProperty) AccumulatorBuilder
	// WithFaultHighLimitBuilder adds FaultHighLimit (property field) which is build by the builder
	WithFaultHighLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithFaultLowLimit adds FaultLowLimit (property field)
	WithFaultLowLimit(OptionalProperty) AccumulatorBuilder
	// WithFaultLowLimitBuilder adds FaultLowLimit (property field) which is build by the builder
	WithFaultLowLimitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AccumulatorBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AccumulatorBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AccumulatorBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder
	// Build builds the Accumulator or returns an error if something is wrong
	Build() (Accumulator, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Accumulator
}

// NewAccumulatorBuilder() creates a AccumulatorBuilder
func NewAccumulatorBuilder() AccumulatorBuilder {
	return &_AccumulatorBuilder{_Accumulator: new(_Accumulator)}
}

type _AccumulatorBuilder struct {
	*_Accumulator

	err *utils.MultiError
}

var _ (AccumulatorBuilder) = (*_AccumulatorBuilder)(nil)

func (b *_AccumulatorBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, scale ReadableProperty, units ReadableProperty, prescale OptionalProperty, maxPresValue ReadableProperty, valueChangeTime OptionalProperty, valueBeforeChange OptionalProperty, valueSet OptionalProperty, loggingRecord OptionalProperty, loggingObject OptionalProperty, pulseRate OptionalProperty, highLimit OptionalProperty, lowLimit OptionalProperty, limitMonitoringInterval OptionalProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, limitEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, faultHighLimit OptionalProperty, faultLowLimit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccumulatorBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithPresentValue(presentValue).WithDescription(description).WithDeviceType(deviceType).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithScale(scale).WithUnits(units).WithPrescale(prescale).WithMaxPresValue(maxPresValue).WithValueChangeTime(valueChangeTime).WithValueBeforeChange(valueBeforeChange).WithValueSet(valueSet).WithLoggingRecord(loggingRecord).WithLoggingObject(loggingObject).WithPulseRate(pulseRate).WithHighLimit(highLimit).WithLowLimit(lowLimit).WithLimitMonitoringInterval(limitMonitoringInterval).WithNotificationClass(notificationClass).WithTimeDelay(timeDelay).WithLimitEnable(limitEnable).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithFaultHighLimit(faultHighLimit).WithFaultLowLimit(faultLowLimit).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AccumulatorBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AccumulatorBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AccumulatorBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithObjectName(objectName ReadableProperty) AccumulatorBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AccumulatorBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithObjectType(objectType ReadableProperty) AccumulatorBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AccumulatorBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithPresentValue(presentValue ReadableProperty) AccumulatorBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_AccumulatorBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithDescription(description OptionalProperty) AccumulatorBuilder {
	b.Description = description
	return b
}

func (b *_AccumulatorBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithDeviceType(deviceType OptionalProperty) AccumulatorBuilder {
	b.DeviceType = deviceType
	return b
}

func (b *_AccumulatorBuilder) WithDeviceTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.DeviceType.CreateOptionalPropertyBuilder())
	var err error
	b.DeviceType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithStatusFlags(statusFlags ReadableProperty) AccumulatorBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_AccumulatorBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventState(eventState ReadableProperty) AccumulatorBuilder {
	b.EventState = eventState
	return b
}

func (b *_AccumulatorBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithReliability(reliability OptionalProperty) AccumulatorBuilder {
	b.Reliability = reliability
	return b
}

func (b *_AccumulatorBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithOutOfService(outOfService ReadableProperty) AccumulatorBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_AccumulatorBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithScale(scale ReadableProperty) AccumulatorBuilder {
	b.Scale = scale
	return b
}

func (b *_AccumulatorBuilder) WithScaleBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.Scale.CreateReadablePropertyBuilder())
	var err error
	b.Scale, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithUnits(units ReadableProperty) AccumulatorBuilder {
	b.Units = units
	return b
}

func (b *_AccumulatorBuilder) WithUnitsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.Units.CreateReadablePropertyBuilder())
	var err error
	b.Units, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithPrescale(prescale OptionalProperty) AccumulatorBuilder {
	b.Prescale = prescale
	return b
}

func (b *_AccumulatorBuilder) WithPrescaleBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.Prescale.CreateOptionalPropertyBuilder())
	var err error
	b.Prescale, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithMaxPresValue(maxPresValue ReadableProperty) AccumulatorBuilder {
	b.MaxPresValue = maxPresValue
	return b
}

func (b *_AccumulatorBuilder) WithMaxPresValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.MaxPresValue.CreateReadablePropertyBuilder())
	var err error
	b.MaxPresValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithValueChangeTime(valueChangeTime OptionalProperty) AccumulatorBuilder {
	b.ValueChangeTime = valueChangeTime
	return b
}

func (b *_AccumulatorBuilder) WithValueChangeTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ValueChangeTime.CreateOptionalPropertyBuilder())
	var err error
	b.ValueChangeTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithValueBeforeChange(valueBeforeChange OptionalProperty) AccumulatorBuilder {
	b.ValueBeforeChange = valueBeforeChange
	return b
}

func (b *_AccumulatorBuilder) WithValueBeforeChangeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ValueBeforeChange.CreateOptionalPropertyBuilder())
	var err error
	b.ValueBeforeChange, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithValueSet(valueSet OptionalProperty) AccumulatorBuilder {
	b.ValueSet = valueSet
	return b
}

func (b *_AccumulatorBuilder) WithValueSetBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ValueSet.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSet, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithLoggingRecord(loggingRecord OptionalProperty) AccumulatorBuilder {
	b.LoggingRecord = loggingRecord
	return b
}

func (b *_AccumulatorBuilder) WithLoggingRecordBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.LoggingRecord.CreateOptionalPropertyBuilder())
	var err error
	b.LoggingRecord, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithLoggingObject(loggingObject OptionalProperty) AccumulatorBuilder {
	b.LoggingObject = loggingObject
	return b
}

func (b *_AccumulatorBuilder) WithLoggingObjectBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.LoggingObject.CreateOptionalPropertyBuilder())
	var err error
	b.LoggingObject, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithPulseRate(pulseRate OptionalProperty) AccumulatorBuilder {
	b.PulseRate = pulseRate
	return b
}

func (b *_AccumulatorBuilder) WithPulseRateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.PulseRate.CreateOptionalPropertyBuilder())
	var err error
	b.PulseRate, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithHighLimit(highLimit OptionalProperty) AccumulatorBuilder {
	b.HighLimit = highLimit
	return b
}

func (b *_AccumulatorBuilder) WithHighLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.HighLimit.CreateOptionalPropertyBuilder())
	var err error
	b.HighLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithLowLimit(lowLimit OptionalProperty) AccumulatorBuilder {
	b.LowLimit = lowLimit
	return b
}

func (b *_AccumulatorBuilder) WithLowLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.LowLimit.CreateOptionalPropertyBuilder())
	var err error
	b.LowLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithLimitMonitoringInterval(limitMonitoringInterval OptionalProperty) AccumulatorBuilder {
	b.LimitMonitoringInterval = limitMonitoringInterval
	return b
}

func (b *_AccumulatorBuilder) WithLimitMonitoringIntervalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.LimitMonitoringInterval.CreateOptionalPropertyBuilder())
	var err error
	b.LimitMonitoringInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithNotificationClass(notificationClass OptionalProperty) AccumulatorBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_AccumulatorBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithTimeDelay(timeDelay OptionalProperty) AccumulatorBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_AccumulatorBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithLimitEnable(limitEnable OptionalProperty) AccumulatorBuilder {
	b.LimitEnable = limitEnable
	return b
}

func (b *_AccumulatorBuilder) WithLimitEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.LimitEnable.CreateOptionalPropertyBuilder())
	var err error
	b.LimitEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventEnable(eventEnable OptionalProperty) AccumulatorBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_AccumulatorBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) AccumulatorBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_AccumulatorBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithNotifyType(notifyType OptionalProperty) AccumulatorBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_AccumulatorBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) AccumulatorBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_AccumulatorBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) AccumulatorBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_AccumulatorBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) AccumulatorBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_AccumulatorBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) AccumulatorBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_AccumulatorBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) AccumulatorBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_AccumulatorBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) AccumulatorBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_AccumulatorBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) AccumulatorBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_AccumulatorBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) AccumulatorBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_AccumulatorBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithPropertyList(propertyList ReadableProperty) AccumulatorBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AccumulatorBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithFaultHighLimit(faultHighLimit OptionalProperty) AccumulatorBuilder {
	b.FaultHighLimit = faultHighLimit
	return b
}

func (b *_AccumulatorBuilder) WithFaultHighLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.FaultHighLimit.CreateOptionalPropertyBuilder())
	var err error
	b.FaultHighLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithFaultLowLimit(faultLowLimit OptionalProperty) AccumulatorBuilder {
	b.FaultLowLimit = faultLowLimit
	return b
}

func (b *_AccumulatorBuilder) WithFaultLowLimitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.FaultLowLimit.CreateOptionalPropertyBuilder())
	var err error
	b.FaultLowLimit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithTags(tags OptionalProperty) AccumulatorBuilder {
	b.Tags = tags
	return b
}

func (b *_AccumulatorBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithProfileLocation(profileLocation OptionalProperty) AccumulatorBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AccumulatorBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) WithProfileName(profileName OptionalProperty) AccumulatorBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AccumulatorBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccumulatorBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccumulatorBuilder) Build() (Accumulator, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.DeviceType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deviceType' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.Scale == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'scale' not set"))
	}
	if b.Units == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'units' not set"))
	}
	if b.Prescale == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'prescale' not set"))
	}
	if b.MaxPresValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxPresValue' not set"))
	}
	if b.ValueChangeTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueChangeTime' not set"))
	}
	if b.ValueBeforeChange == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueBeforeChange' not set"))
	}
	if b.ValueSet == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSet' not set"))
	}
	if b.LoggingRecord == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'loggingRecord' not set"))
	}
	if b.LoggingObject == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'loggingObject' not set"))
	}
	if b.PulseRate == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'pulseRate' not set"))
	}
	if b.HighLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'highLimit' not set"))
	}
	if b.LowLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lowLimit' not set"))
	}
	if b.LimitMonitoringInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'limitMonitoringInterval' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.LimitEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'limitEnable' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.FaultHighLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultHighLimit' not set"))
	}
	if b.FaultLowLimit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'faultLowLimit' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Accumulator.deepCopy(), nil
}

func (b *_AccumulatorBuilder) MustBuild() Accumulator {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AccumulatorBuilder) DeepCopy() any {
	_copy := b.CreateAccumulatorBuilder().(*_AccumulatorBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAccumulatorBuilder creates a AccumulatorBuilder
func (b *_Accumulator) CreateAccumulatorBuilder() AccumulatorBuilder {
	if b == nil {
		return NewAccumulatorBuilder()
	}
	return &_AccumulatorBuilder{_Accumulator: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Accumulator) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Accumulator) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Accumulator) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Accumulator) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_Accumulator) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Accumulator) GetDeviceType() OptionalProperty {
	return m.DeviceType
}

func (m *_Accumulator) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_Accumulator) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_Accumulator) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Accumulator) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_Accumulator) GetScale() ReadableProperty {
	return m.Scale
}

func (m *_Accumulator) GetUnits() ReadableProperty {
	return m.Units
}

func (m *_Accumulator) GetPrescale() OptionalProperty {
	return m.Prescale
}

func (m *_Accumulator) GetMaxPresValue() ReadableProperty {
	return m.MaxPresValue
}

func (m *_Accumulator) GetValueChangeTime() OptionalProperty {
	return m.ValueChangeTime
}

func (m *_Accumulator) GetValueBeforeChange() OptionalProperty {
	return m.ValueBeforeChange
}

func (m *_Accumulator) GetValueSet() OptionalProperty {
	return m.ValueSet
}

func (m *_Accumulator) GetLoggingRecord() OptionalProperty {
	return m.LoggingRecord
}

func (m *_Accumulator) GetLoggingObject() OptionalProperty {
	return m.LoggingObject
}

func (m *_Accumulator) GetPulseRate() OptionalProperty {
	return m.PulseRate
}

func (m *_Accumulator) GetHighLimit() OptionalProperty {
	return m.HighLimit
}

func (m *_Accumulator) GetLowLimit() OptionalProperty {
	return m.LowLimit
}

func (m *_Accumulator) GetLimitMonitoringInterval() OptionalProperty {
	return m.LimitMonitoringInterval
}

func (m *_Accumulator) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Accumulator) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_Accumulator) GetLimitEnable() OptionalProperty {
	return m.LimitEnable
}

func (m *_Accumulator) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Accumulator) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Accumulator) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Accumulator) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Accumulator) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Accumulator) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Accumulator) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Accumulator) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_Accumulator) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_Accumulator) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_Accumulator) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Accumulator) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Accumulator) GetFaultHighLimit() OptionalProperty {
	return m.FaultHighLimit
}

func (m *_Accumulator) GetFaultLowLimit() OptionalProperty {
	return m.FaultLowLimit
}

func (m *_Accumulator) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Accumulator) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Accumulator) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAccumulator(structType any) Accumulator {
	if casted, ok := structType.(Accumulator); ok {
		return casted
	}
	if casted, ok := structType.(*Accumulator); ok {
		return *casted
	}
	return nil
}

func (m *_Accumulator) GetTypeName() string {
	return "Accumulator"
}

func (m *_Accumulator) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (deviceType)
	lengthInBits += m.DeviceType.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (scale)
	lengthInBits += m.Scale.GetLengthInBits(ctx)

	// Simple field (units)
	lengthInBits += m.Units.GetLengthInBits(ctx)

	// Simple field (prescale)
	lengthInBits += m.Prescale.GetLengthInBits(ctx)

	// Simple field (maxPresValue)
	lengthInBits += m.MaxPresValue.GetLengthInBits(ctx)

	// Simple field (valueChangeTime)
	lengthInBits += m.ValueChangeTime.GetLengthInBits(ctx)

	// Simple field (valueBeforeChange)
	lengthInBits += m.ValueBeforeChange.GetLengthInBits(ctx)

	// Simple field (valueSet)
	lengthInBits += m.ValueSet.GetLengthInBits(ctx)

	// Simple field (loggingRecord)
	lengthInBits += m.LoggingRecord.GetLengthInBits(ctx)

	// Simple field (loggingObject)
	lengthInBits += m.LoggingObject.GetLengthInBits(ctx)

	// Simple field (pulseRate)
	lengthInBits += m.PulseRate.GetLengthInBits(ctx)

	// Simple field (highLimit)
	lengthInBits += m.HighLimit.GetLengthInBits(ctx)

	// Simple field (lowLimit)
	lengthInBits += m.LowLimit.GetLengthInBits(ctx)

	// Simple field (limitMonitoringInterval)
	lengthInBits += m.LimitMonitoringInterval.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (limitEnable)
	lengthInBits += m.LimitEnable.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (faultHighLimit)
	lengthInBits += m.FaultHighLimit.GetLengthInBits(ctx)

	// Simple field (faultLowLimit)
	lengthInBits += m.FaultLowLimit.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Accumulator) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AccumulatorParse(ctx context.Context, theBytes []byte) (Accumulator, error) {
	return AccumulatorParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AccumulatorParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Accumulator, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Accumulator, error) {
		return AccumulatorParseWithBuffer(ctx, readBuffer)
	}
}

func AccumulatorParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Accumulator, error) {
	v, err := (&_Accumulator{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Accumulator) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__accumulator Accumulator, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Accumulator"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Accumulator")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	deviceType, err := ReadSimpleField[OptionalProperty](ctx, "deviceType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deviceType' field"))
	}
	m.DeviceType = deviceType

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	scale, err := ReadSimpleField[ReadableProperty](ctx, "scale", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetScale")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'scale' field"))
	}
	m.Scale = scale

	units, err := ReadSimpleField[ReadableProperty](ctx, "units", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEngineeringUnits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'units' field"))
	}
	m.Units = units

	prescale, err := ReadSimpleField[OptionalProperty](ctx, "prescale", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetPrescale")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'prescale' field"))
	}
	m.Prescale = prescale

	maxPresValue, err := ReadSimpleField[ReadableProperty](ctx, "maxPresValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxPresValue' field"))
	}
	m.MaxPresValue = maxPresValue

	valueChangeTime, err := ReadSimpleField[OptionalProperty](ctx, "valueChangeTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueChangeTime' field"))
	}
	m.ValueChangeTime = valueChangeTime

	valueBeforeChange, err := ReadSimpleField[OptionalProperty](ctx, "valueBeforeChange", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueBeforeChange' field"))
	}
	m.ValueBeforeChange = valueBeforeChange

	valueSet, err := ReadSimpleField[OptionalProperty](ctx, "valueSet", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSet' field"))
	}
	m.ValueSet = valueSet

	loggingRecord, err := ReadSimpleField[OptionalProperty](ctx, "loggingRecord", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetAccumulatorRecord")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'loggingRecord' field"))
	}
	m.LoggingRecord = loggingRecord

	loggingObject, err := ReadSimpleField[OptionalProperty](ctx, "loggingObject", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'loggingObject' field"))
	}
	m.LoggingObject = loggingObject

	pulseRate, err := ReadSimpleField[OptionalProperty](ctx, "pulseRate", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'pulseRate' field"))
	}
	m.PulseRate = pulseRate

	highLimit, err := ReadSimpleField[OptionalProperty](ctx, "highLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'highLimit' field"))
	}
	m.HighLimit = highLimit

	lowLimit, err := ReadSimpleField[OptionalProperty](ctx, "lowLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lowLimit' field"))
	}
	m.LowLimit = lowLimit

	limitMonitoringInterval, err := ReadSimpleField[OptionalProperty](ctx, "limitMonitoringInterval", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'limitMonitoringInterval' field"))
	}
	m.LimitMonitoringInterval = limitMonitoringInterval

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	limitEnable, err := ReadSimpleField[OptionalProperty](ctx, "limitEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLimitEnable")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'limitEnable' field"))
	}
	m.LimitEnable = limitEnable

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	faultHighLimit, err := ReadSimpleField[OptionalProperty](ctx, "faultHighLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultHighLimit' field"))
	}
	m.FaultHighLimit = faultHighLimit

	faultLowLimit, err := ReadSimpleField[OptionalProperty](ctx, "faultLowLimit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'faultLowLimit' field"))
	}
	m.FaultLowLimit = faultLowLimit

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Accumulator"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Accumulator")
	}

	return m, nil
}

func (m *_Accumulator) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Accumulator) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Accumulator"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Accumulator")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deviceType", m.GetDeviceType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deviceType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "scale", m.GetScale(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'scale' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "units", m.GetUnits(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'units' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "prescale", m.GetPrescale(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'prescale' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "maxPresValue", m.GetMaxPresValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxPresValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueChangeTime", m.GetValueChangeTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueChangeTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueBeforeChange", m.GetValueBeforeChange(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueBeforeChange' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSet", m.GetValueSet(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSet' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "loggingRecord", m.GetLoggingRecord(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'loggingRecord' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "loggingObject", m.GetLoggingObject(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'loggingObject' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "pulseRate", m.GetPulseRate(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'pulseRate' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "highLimit", m.GetHighLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'highLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lowLimit", m.GetLowLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lowLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "limitMonitoringInterval", m.GetLimitMonitoringInterval(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'limitMonitoringInterval' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "limitEnable", m.GetLimitEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'limitEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultHighLimit", m.GetFaultHighLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultHighLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "faultLowLimit", m.GetFaultLowLimit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'faultLowLimit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Accumulator"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Accumulator")
	}
	return nil
}

func (m *_Accumulator) IsAccumulator() {}

func (m *_Accumulator) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Accumulator) deepCopy() *_Accumulator {
	if m == nil {
		return nil
	}
	_AccumulatorCopy := &_Accumulator{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.DeviceType.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.Scale.DeepCopy().(ReadableProperty),
		m.Units.DeepCopy().(ReadableProperty),
		m.Prescale.DeepCopy().(OptionalProperty),
		m.MaxPresValue.DeepCopy().(ReadableProperty),
		m.ValueChangeTime.DeepCopy().(OptionalProperty),
		m.ValueBeforeChange.DeepCopy().(OptionalProperty),
		m.ValueSet.DeepCopy().(OptionalProperty),
		m.LoggingRecord.DeepCopy().(OptionalProperty),
		m.LoggingObject.DeepCopy().(OptionalProperty),
		m.PulseRate.DeepCopy().(OptionalProperty),
		m.HighLimit.DeepCopy().(OptionalProperty),
		m.LowLimit.DeepCopy().(OptionalProperty),
		m.LimitMonitoringInterval.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.LimitEnable.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.FaultHighLimit.DeepCopy().(OptionalProperty),
		m.FaultLowLimit.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AccumulatorCopy
}

func (m *_Accumulator) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
