/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// NotificationClass is the corresponding interface of NotificationClass
type NotificationClass interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() ReadableProperty
	// GetPriority returns Priority (property field)
	GetPriority() ReadableProperty
	// GetAckRequired returns AckRequired (property field)
	GetAckRequired() ReadableProperty
	// GetRecipientList returns RecipientList (property field)
	GetRecipientList() ReadableProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsNotificationClass is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsNotificationClass()
	// CreateBuilder creates a NotificationClassBuilder
	CreateNotificationClassBuilder() NotificationClassBuilder
}

// _NotificationClass is the data-structure of this message
type _NotificationClass struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	NotificationClass            ReadableProperty
	Priority                     ReadableProperty
	AckRequired                  ReadableProperty
	RecipientList                ReadableProperty
	PropertyList                 ReadableProperty
	StatusFlags                  OptionalProperty
	EventState                   OptionalProperty
	Reliability                  OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ NotificationClass = (*_NotificationClass)(nil)

// NewNotificationClass factory function for _NotificationClass
func NewNotificationClass(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, notificationClass ReadableProperty, priority ReadableProperty, ackRequired ReadableProperty, recipientList ReadableProperty, propertyList ReadableProperty, statusFlags OptionalProperty, eventState OptionalProperty, reliability OptionalProperty, eventDetectionEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_NotificationClass {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for NotificationClass must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for NotificationClass must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for NotificationClass must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for NotificationClass must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type ReadableProperty for NotificationClass must not be nil")
	}
	if priority == nil {
		panic("priority of type ReadableProperty for NotificationClass must not be nil")
	}
	if ackRequired == nil {
		panic("ackRequired of type ReadableProperty for NotificationClass must not be nil")
	}
	if recipientList == nil {
		panic("recipientList of type ReadableProperty for NotificationClass must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for NotificationClass must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type OptionalProperty for NotificationClass must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for NotificationClass must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for NotificationClass must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for NotificationClass must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for NotificationClass must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for NotificationClass must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for NotificationClass must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for NotificationClass must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for NotificationClass must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for NotificationClass must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for NotificationClass must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for NotificationClass must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for NotificationClass must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for NotificationClass must not be nil")
	}
	return &_NotificationClass{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, NotificationClass: notificationClass, Priority: priority, AckRequired: ackRequired, RecipientList: recipientList, PropertyList: propertyList, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, EventDetectionEnable: eventDetectionEnable, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// NotificationClassBuilder is a builder for NotificationClass
type NotificationClassBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, notificationClass ReadableProperty, priority ReadableProperty, ackRequired ReadableProperty, recipientList ReadableProperty, propertyList ReadableProperty, statusFlags OptionalProperty, eventState OptionalProperty, reliability OptionalProperty, eventDetectionEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NotificationClassBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) NotificationClassBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) NotificationClassBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) NotificationClassBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) NotificationClassBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(ReadableProperty) NotificationClassBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithPriority adds Priority (property field)
	WithPriority(ReadableProperty) NotificationClassBuilder
	// WithPriorityBuilder adds Priority (property field) which is build by the builder
	WithPriorityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithAckRequired adds AckRequired (property field)
	WithAckRequired(ReadableProperty) NotificationClassBuilder
	// WithAckRequiredBuilder adds AckRequired (property field) which is build by the builder
	WithAckRequiredBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithRecipientList adds RecipientList (property field)
	WithRecipientList(ReadableProperty) NotificationClassBuilder
	// WithRecipientListBuilder adds RecipientList (property field) which is build by the builder
	WithRecipientListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) NotificationClassBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(OptionalProperty) NotificationClassBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) NotificationClassBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) NotificationClassBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) NotificationClassBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) NotificationClassBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) NotificationClassBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) NotificationClassBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) NotificationClassBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) NotificationClassBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) NotificationClassBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) NotificationClassBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) NotificationClassBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) NotificationClassBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) NotificationClassBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder
	// Build builds the NotificationClass or returns an error if something is wrong
	Build() (NotificationClass, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() NotificationClass
}

// NewNotificationClassBuilder() creates a NotificationClassBuilder
func NewNotificationClassBuilder() NotificationClassBuilder {
	return &_NotificationClassBuilder{_NotificationClass: new(_NotificationClass)}
}

type _NotificationClassBuilder struct {
	*_NotificationClass

	err *utils.MultiError
}

var _ (NotificationClassBuilder) = (*_NotificationClassBuilder)(nil)

func (b *_NotificationClassBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, notificationClass ReadableProperty, priority ReadableProperty, ackRequired ReadableProperty, recipientList ReadableProperty, propertyList ReadableProperty, statusFlags OptionalProperty, eventState OptionalProperty, reliability OptionalProperty, eventDetectionEnable OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) NotificationClassBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithNotificationClass(notificationClass).WithPriority(priority).WithAckRequired(ackRequired).WithRecipientList(recipientList).WithPropertyList(propertyList).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithEventDetectionEnable(eventDetectionEnable).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_NotificationClassBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) NotificationClassBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_NotificationClassBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithObjectName(objectName ReadableProperty) NotificationClassBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_NotificationClassBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithObjectType(objectType ReadableProperty) NotificationClassBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_NotificationClassBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithDescription(description OptionalProperty) NotificationClassBuilder {
	b.Description = description
	return b
}

func (b *_NotificationClassBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithNotificationClass(notificationClass ReadableProperty) NotificationClassBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_NotificationClassBuilder) WithNotificationClassBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.NotificationClass.CreateReadablePropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithPriority(priority ReadableProperty) NotificationClassBuilder {
	b.Priority = priority
	return b
}

func (b *_NotificationClassBuilder) WithPriorityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.Priority.CreateReadablePropertyBuilder())
	var err error
	b.Priority, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithAckRequired(ackRequired ReadableProperty) NotificationClassBuilder {
	b.AckRequired = ackRequired
	return b
}

func (b *_NotificationClassBuilder) WithAckRequiredBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.AckRequired.CreateReadablePropertyBuilder())
	var err error
	b.AckRequired, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithRecipientList(recipientList ReadableProperty) NotificationClassBuilder {
	b.RecipientList = recipientList
	return b
}

func (b *_NotificationClassBuilder) WithRecipientListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.RecipientList.CreateReadablePropertyBuilder())
	var err error
	b.RecipientList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithPropertyList(propertyList ReadableProperty) NotificationClassBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_NotificationClassBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithStatusFlags(statusFlags OptionalProperty) NotificationClassBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_NotificationClassBuilder) WithStatusFlagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.StatusFlags.CreateOptionalPropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithEventState(eventState OptionalProperty) NotificationClassBuilder {
	b.EventState = eventState
	return b
}

func (b *_NotificationClassBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithReliability(reliability OptionalProperty) NotificationClassBuilder {
	b.Reliability = reliability
	return b
}

func (b *_NotificationClassBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) NotificationClassBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_NotificationClassBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithEventEnable(eventEnable OptionalProperty) NotificationClassBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_NotificationClassBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) NotificationClassBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_NotificationClassBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithNotifyType(notifyType OptionalProperty) NotificationClassBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_NotificationClassBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) NotificationClassBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_NotificationClassBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) NotificationClassBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_NotificationClassBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) NotificationClassBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_NotificationClassBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) NotificationClassBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_NotificationClassBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithTags(tags OptionalProperty) NotificationClassBuilder {
	b.Tags = tags
	return b
}

func (b *_NotificationClassBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithProfileLocation(profileLocation OptionalProperty) NotificationClassBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_NotificationClassBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) WithProfileName(profileName OptionalProperty) NotificationClassBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_NotificationClassBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) NotificationClassBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_NotificationClassBuilder) Build() (NotificationClass, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.Priority == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'priority' not set"))
	}
	if b.AckRequired == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackRequired' not set"))
	}
	if b.RecipientList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'recipientList' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._NotificationClass.deepCopy(), nil
}

func (b *_NotificationClassBuilder) MustBuild() NotificationClass {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_NotificationClassBuilder) DeepCopy() any {
	_copy := b.CreateNotificationClassBuilder().(*_NotificationClassBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateNotificationClassBuilder creates a NotificationClassBuilder
func (b *_NotificationClass) CreateNotificationClassBuilder() NotificationClassBuilder {
	if b == nil {
		return NewNotificationClassBuilder()
	}
	return &_NotificationClassBuilder{_NotificationClass: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_NotificationClass) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_NotificationClass) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_NotificationClass) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_NotificationClass) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_NotificationClass) GetNotificationClass() ReadableProperty {
	return m.NotificationClass
}

func (m *_NotificationClass) GetPriority() ReadableProperty {
	return m.Priority
}

func (m *_NotificationClass) GetAckRequired() ReadableProperty {
	return m.AckRequired
}

func (m *_NotificationClass) GetRecipientList() ReadableProperty {
	return m.RecipientList
}

func (m *_NotificationClass) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_NotificationClass) GetStatusFlags() OptionalProperty {
	return m.StatusFlags
}

func (m *_NotificationClass) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_NotificationClass) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_NotificationClass) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_NotificationClass) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_NotificationClass) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_NotificationClass) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_NotificationClass) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_NotificationClass) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_NotificationClass) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_NotificationClass) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_NotificationClass) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_NotificationClass) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_NotificationClass) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastNotificationClass(structType any) NotificationClass {
	if casted, ok := structType.(NotificationClass); ok {
		return casted
	}
	if casted, ok := structType.(*NotificationClass); ok {
		return *casted
	}
	return nil
}

func (m *_NotificationClass) GetTypeName() string {
	return "NotificationClass"
}

func (m *_NotificationClass) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (priority)
	lengthInBits += m.Priority.GetLengthInBits(ctx)

	// Simple field (ackRequired)
	lengthInBits += m.AckRequired.GetLengthInBits(ctx)

	// Simple field (recipientList)
	lengthInBits += m.RecipientList.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_NotificationClass) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func NotificationClassParse(ctx context.Context, theBytes []byte) (NotificationClass, error) {
	return NotificationClassParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func NotificationClassParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (NotificationClass, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (NotificationClass, error) {
		return NotificationClassParseWithBuffer(ctx, readBuffer)
	}
}

func NotificationClassParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (NotificationClass, error) {
	v, err := (&_NotificationClass{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_NotificationClass) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__notificationClass NotificationClass, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("NotificationClass"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for NotificationClass")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	notificationClass, err := ReadSimpleField[ReadableProperty](ctx, "notificationClass", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	priority, err := ReadSimpleField[ReadableProperty](ctx, "priority", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[3] of Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'priority' field"))
	}
	m.Priority = priority

	ackRequired, err := ReadSimpleField[ReadableProperty](ctx, "ackRequired", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackRequired' field"))
	}
	m.AckRequired = ackRequired

	recipientList, err := ReadSimpleField[ReadableProperty](ctx, "recipientList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetDestination")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'recipientList' field"))
	}
	m.RecipientList = recipientList

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	statusFlags, err := ReadSimpleField[OptionalProperty](ctx, "statusFlags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("NotificationClass"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for NotificationClass")
	}

	return m, nil
}

func (m *_NotificationClass) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_NotificationClass) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("NotificationClass"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for NotificationClass")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "priority", m.GetPriority(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'priority' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "ackRequired", m.GetAckRequired(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackRequired' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "recipientList", m.GetRecipientList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'recipientList' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("NotificationClass"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for NotificationClass")
	}
	return nil
}

func (m *_NotificationClass) IsNotificationClass() {}

func (m *_NotificationClass) DeepCopy() any {
	return m.deepCopy()
}

func (m *_NotificationClass) deepCopy() *_NotificationClass {
	if m == nil {
		return nil
	}
	_NotificationClassCopy := &_NotificationClass{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(ReadableProperty),
		m.Priority.DeepCopy().(ReadableProperty),
		m.AckRequired.DeepCopy().(ReadableProperty),
		m.RecipientList.DeepCopy().(ReadableProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _NotificationClassCopy
}

func (m *_NotificationClass) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
