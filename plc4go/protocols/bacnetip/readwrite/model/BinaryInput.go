/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// BinaryInput is the corresponding interface of BinaryInput
type BinaryInput interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetDeviceType returns DeviceType (property field)
	GetDeviceType() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetPolarity returns Polarity (property field)
	GetPolarity() ReadableProperty
	// GetInactiveText returns InactiveText (property field)
	GetInactiveText() OptionalProperty
	// GetActiveText returns ActiveText (property field)
	GetActiveText() OptionalProperty
	// GetChangeOfStateTime returns ChangeOfStateTime (property field)
	GetChangeOfStateTime() OptionalProperty
	// GetChangeOfStateCount returns ChangeOfStateCount (property field)
	GetChangeOfStateCount() OptionalProperty
	// GetTimeOfStateCountReset returns TimeOfStateCountReset (property field)
	GetTimeOfStateCountReset() OptionalProperty
	// GetElapsedActiveTime returns ElapsedActiveTime (property field)
	GetElapsedActiveTime() OptionalProperty
	// GetTimeOfActiveTimeReset returns TimeOfActiveTimeReset (property field)
	GetTimeOfActiveTimeReset() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetAlarmValue returns AlarmValue (property field)
	GetAlarmValue() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetInterfaceValue returns InterfaceValue (property field)
	GetInterfaceValue() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsBinaryInput is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBinaryInput()
	// CreateBuilder creates a BinaryInputBuilder
	CreateBinaryInputBuilder() BinaryInputBuilder
}

// _BinaryInput is the data-structure of this message
type _BinaryInput struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	PresentValue                 ReadableProperty
	Description                  OptionalProperty
	DeviceType                   OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  OptionalProperty
	OutOfService                 ReadableProperty
	Polarity                     ReadableProperty
	InactiveText                 OptionalProperty
	ActiveText                   OptionalProperty
	ChangeOfStateTime            OptionalProperty
	ChangeOfStateCount           OptionalProperty
	TimeOfStateCountReset        OptionalProperty
	ElapsedActiveTime            OptionalProperty
	TimeOfActiveTimeReset        OptionalProperty
	TimeDelay                    OptionalProperty
	NotificationClass            OptionalProperty
	AlarmValue                   OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	InterfaceValue               OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ BinaryInput = (*_BinaryInput)(nil)

// NewBinaryInput factory function for _BinaryInput
func NewBinaryInput(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, polarity ReadableProperty, inactiveText OptionalProperty, activeText OptionalProperty, changeOfStateTime OptionalProperty, changeOfStateCount OptionalProperty, timeOfStateCountReset OptionalProperty, elapsedActiveTime OptionalProperty, timeOfActiveTimeReset OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, alarmValue OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, interfaceValue OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_BinaryInput {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for BinaryInput must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for BinaryInput must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for BinaryInput must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for BinaryInput must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for BinaryInput must not be nil")
	}
	if deviceType == nil {
		panic("deviceType of type OptionalProperty for BinaryInput must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for BinaryInput must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for BinaryInput must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for BinaryInput must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for BinaryInput must not be nil")
	}
	if polarity == nil {
		panic("polarity of type ReadableProperty for BinaryInput must not be nil")
	}
	if inactiveText == nil {
		panic("inactiveText of type OptionalProperty for BinaryInput must not be nil")
	}
	if activeText == nil {
		panic("activeText of type OptionalProperty for BinaryInput must not be nil")
	}
	if changeOfStateTime == nil {
		panic("changeOfStateTime of type OptionalProperty for BinaryInput must not be nil")
	}
	if changeOfStateCount == nil {
		panic("changeOfStateCount of type OptionalProperty for BinaryInput must not be nil")
	}
	if timeOfStateCountReset == nil {
		panic("timeOfStateCountReset of type OptionalProperty for BinaryInput must not be nil")
	}
	if elapsedActiveTime == nil {
		panic("elapsedActiveTime of type OptionalProperty for BinaryInput must not be nil")
	}
	if timeOfActiveTimeReset == nil {
		panic("timeOfActiveTimeReset of type OptionalProperty for BinaryInput must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for BinaryInput must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for BinaryInput must not be nil")
	}
	if alarmValue == nil {
		panic("alarmValue of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for BinaryInput must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for BinaryInput must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for BinaryInput must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for BinaryInput must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for BinaryInput must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for BinaryInput must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for BinaryInput must not be nil")
	}
	if interfaceValue == nil {
		panic("interfaceValue of type OptionalProperty for BinaryInput must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for BinaryInput must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for BinaryInput must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for BinaryInput must not be nil")
	}
	return &_BinaryInput{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, PresentValue: presentValue, Description: description, DeviceType: deviceType, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, Polarity: polarity, InactiveText: inactiveText, ActiveText: activeText, ChangeOfStateTime: changeOfStateTime, ChangeOfStateCount: changeOfStateCount, TimeOfStateCountReset: timeOfStateCountReset, ElapsedActiveTime: elapsedActiveTime, TimeOfActiveTimeReset: timeOfActiveTimeReset, TimeDelay: timeDelay, NotificationClass: notificationClass, AlarmValue: alarmValue, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, InterfaceValue: interfaceValue, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// BinaryInputBuilder is a builder for BinaryInput
type BinaryInputBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, polarity ReadableProperty, inactiveText OptionalProperty, activeText OptionalProperty, changeOfStateTime OptionalProperty, changeOfStateCount OptionalProperty, timeOfStateCountReset OptionalProperty, elapsedActiveTime OptionalProperty, timeOfActiveTimeReset OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, alarmValue OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, interfaceValue OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) BinaryInputBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) BinaryInputBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) BinaryInputBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) BinaryInputBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) BinaryInputBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) BinaryInputBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithDeviceType adds DeviceType (property field)
	WithDeviceType(OptionalProperty) BinaryInputBuilder
	// WithDeviceTypeBuilder adds DeviceType (property field) which is build by the builder
	WithDeviceTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) BinaryInputBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) BinaryInputBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) BinaryInputBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) BinaryInputBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithPolarity adds Polarity (property field)
	WithPolarity(ReadableProperty) BinaryInputBuilder
	// WithPolarityBuilder adds Polarity (property field) which is build by the builder
	WithPolarityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithInactiveText adds InactiveText (property field)
	WithInactiveText(OptionalProperty) BinaryInputBuilder
	// WithInactiveTextBuilder adds InactiveText (property field) which is build by the builder
	WithInactiveTextBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithActiveText adds ActiveText (property field)
	WithActiveText(OptionalProperty) BinaryInputBuilder
	// WithActiveTextBuilder adds ActiveText (property field) which is build by the builder
	WithActiveTextBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithChangeOfStateTime adds ChangeOfStateTime (property field)
	WithChangeOfStateTime(OptionalProperty) BinaryInputBuilder
	// WithChangeOfStateTimeBuilder adds ChangeOfStateTime (property field) which is build by the builder
	WithChangeOfStateTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithChangeOfStateCount adds ChangeOfStateCount (property field)
	WithChangeOfStateCount(OptionalProperty) BinaryInputBuilder
	// WithChangeOfStateCountBuilder adds ChangeOfStateCount (property field) which is build by the builder
	WithChangeOfStateCountBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithTimeOfStateCountReset adds TimeOfStateCountReset (property field)
	WithTimeOfStateCountReset(OptionalProperty) BinaryInputBuilder
	// WithTimeOfStateCountResetBuilder adds TimeOfStateCountReset (property field) which is build by the builder
	WithTimeOfStateCountResetBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithElapsedActiveTime adds ElapsedActiveTime (property field)
	WithElapsedActiveTime(OptionalProperty) BinaryInputBuilder
	// WithElapsedActiveTimeBuilder adds ElapsedActiveTime (property field) which is build by the builder
	WithElapsedActiveTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithTimeOfActiveTimeReset adds TimeOfActiveTimeReset (property field)
	WithTimeOfActiveTimeReset(OptionalProperty) BinaryInputBuilder
	// WithTimeOfActiveTimeResetBuilder adds TimeOfActiveTimeReset (property field) which is build by the builder
	WithTimeOfActiveTimeResetBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) BinaryInputBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) BinaryInputBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithAlarmValue adds AlarmValue (property field)
	WithAlarmValue(OptionalProperty) BinaryInputBuilder
	// WithAlarmValueBuilder adds AlarmValue (property field) which is build by the builder
	WithAlarmValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) BinaryInputBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) BinaryInputBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) BinaryInputBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) BinaryInputBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) BinaryInputBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) BinaryInputBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) BinaryInputBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) BinaryInputBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) BinaryInputBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) BinaryInputBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) BinaryInputBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) BinaryInputBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder
	// WithInterfaceValue adds InterfaceValue (property field)
	WithInterfaceValue(OptionalProperty) BinaryInputBuilder
	// WithInterfaceValueBuilder adds InterfaceValue (property field) which is build by the builder
	WithInterfaceValueBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) BinaryInputBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) BinaryInputBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) BinaryInputBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder
	// Build builds the BinaryInput or returns an error if something is wrong
	Build() (BinaryInput, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() BinaryInput
}

// NewBinaryInputBuilder() creates a BinaryInputBuilder
func NewBinaryInputBuilder() BinaryInputBuilder {
	return &_BinaryInputBuilder{_BinaryInput: new(_BinaryInput)}
}

type _BinaryInputBuilder struct {
	*_BinaryInput

	err *utils.MultiError
}

var _ (BinaryInputBuilder) = (*_BinaryInputBuilder)(nil)

func (b *_BinaryInputBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, presentValue ReadableProperty, description OptionalProperty, deviceType OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, outOfService ReadableProperty, polarity ReadableProperty, inactiveText OptionalProperty, activeText OptionalProperty, changeOfStateTime OptionalProperty, changeOfStateCount OptionalProperty, timeOfStateCountReset OptionalProperty, elapsedActiveTime OptionalProperty, timeOfActiveTimeReset OptionalProperty, timeDelay OptionalProperty, notificationClass OptionalProperty, alarmValue OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, interfaceValue OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) BinaryInputBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithPresentValue(presentValue).WithDescription(description).WithDeviceType(deviceType).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithPolarity(polarity).WithInactiveText(inactiveText).WithActiveText(activeText).WithChangeOfStateTime(changeOfStateTime).WithChangeOfStateCount(changeOfStateCount).WithTimeOfStateCountReset(timeOfStateCountReset).WithElapsedActiveTime(elapsedActiveTime).WithTimeOfActiveTimeReset(timeOfActiveTimeReset).WithTimeDelay(timeDelay).WithNotificationClass(notificationClass).WithAlarmValue(alarmValue).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithInterfaceValue(interfaceValue).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_BinaryInputBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) BinaryInputBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_BinaryInputBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithObjectName(objectName ReadableProperty) BinaryInputBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_BinaryInputBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithObjectType(objectType ReadableProperty) BinaryInputBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_BinaryInputBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithPresentValue(presentValue ReadableProperty) BinaryInputBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_BinaryInputBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithDescription(description OptionalProperty) BinaryInputBuilder {
	b.Description = description
	return b
}

func (b *_BinaryInputBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithDeviceType(deviceType OptionalProperty) BinaryInputBuilder {
	b.DeviceType = deviceType
	return b
}

func (b *_BinaryInputBuilder) WithDeviceTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.DeviceType.CreateOptionalPropertyBuilder())
	var err error
	b.DeviceType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithStatusFlags(statusFlags ReadableProperty) BinaryInputBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_BinaryInputBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventState(eventState ReadableProperty) BinaryInputBuilder {
	b.EventState = eventState
	return b
}

func (b *_BinaryInputBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithReliability(reliability OptionalProperty) BinaryInputBuilder {
	b.Reliability = reliability
	return b
}

func (b *_BinaryInputBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithOutOfService(outOfService ReadableProperty) BinaryInputBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_BinaryInputBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithPolarity(polarity ReadableProperty) BinaryInputBuilder {
	b.Polarity = polarity
	return b
}

func (b *_BinaryInputBuilder) WithPolarityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.Polarity.CreateReadablePropertyBuilder())
	var err error
	b.Polarity, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithInactiveText(inactiveText OptionalProperty) BinaryInputBuilder {
	b.InactiveText = inactiveText
	return b
}

func (b *_BinaryInputBuilder) WithInactiveTextBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.InactiveText.CreateOptionalPropertyBuilder())
	var err error
	b.InactiveText, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithActiveText(activeText OptionalProperty) BinaryInputBuilder {
	b.ActiveText = activeText
	return b
}

func (b *_BinaryInputBuilder) WithActiveTextBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ActiveText.CreateOptionalPropertyBuilder())
	var err error
	b.ActiveText, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithChangeOfStateTime(changeOfStateTime OptionalProperty) BinaryInputBuilder {
	b.ChangeOfStateTime = changeOfStateTime
	return b
}

func (b *_BinaryInputBuilder) WithChangeOfStateTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ChangeOfStateTime.CreateOptionalPropertyBuilder())
	var err error
	b.ChangeOfStateTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithChangeOfStateCount(changeOfStateCount OptionalProperty) BinaryInputBuilder {
	b.ChangeOfStateCount = changeOfStateCount
	return b
}

func (b *_BinaryInputBuilder) WithChangeOfStateCountBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ChangeOfStateCount.CreateOptionalPropertyBuilder())
	var err error
	b.ChangeOfStateCount, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithTimeOfStateCountReset(timeOfStateCountReset OptionalProperty) BinaryInputBuilder {
	b.TimeOfStateCountReset = timeOfStateCountReset
	return b
}

func (b *_BinaryInputBuilder) WithTimeOfStateCountResetBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.TimeOfStateCountReset.CreateOptionalPropertyBuilder())
	var err error
	b.TimeOfStateCountReset, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithElapsedActiveTime(elapsedActiveTime OptionalProperty) BinaryInputBuilder {
	b.ElapsedActiveTime = elapsedActiveTime
	return b
}

func (b *_BinaryInputBuilder) WithElapsedActiveTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ElapsedActiveTime.CreateOptionalPropertyBuilder())
	var err error
	b.ElapsedActiveTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithTimeOfActiveTimeReset(timeOfActiveTimeReset OptionalProperty) BinaryInputBuilder {
	b.TimeOfActiveTimeReset = timeOfActiveTimeReset
	return b
}

func (b *_BinaryInputBuilder) WithTimeOfActiveTimeResetBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.TimeOfActiveTimeReset.CreateOptionalPropertyBuilder())
	var err error
	b.TimeOfActiveTimeReset, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithTimeDelay(timeDelay OptionalProperty) BinaryInputBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_BinaryInputBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithNotificationClass(notificationClass OptionalProperty) BinaryInputBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_BinaryInputBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithAlarmValue(alarmValue OptionalProperty) BinaryInputBuilder {
	b.AlarmValue = alarmValue
	return b
}

func (b *_BinaryInputBuilder) WithAlarmValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.AlarmValue.CreateOptionalPropertyBuilder())
	var err error
	b.AlarmValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventEnable(eventEnable OptionalProperty) BinaryInputBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_BinaryInputBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) BinaryInputBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_BinaryInputBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithNotifyType(notifyType OptionalProperty) BinaryInputBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_BinaryInputBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) BinaryInputBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_BinaryInputBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) BinaryInputBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_BinaryInputBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) BinaryInputBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_BinaryInputBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) BinaryInputBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_BinaryInputBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) BinaryInputBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_BinaryInputBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) BinaryInputBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_BinaryInputBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) BinaryInputBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_BinaryInputBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) BinaryInputBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_BinaryInputBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithPropertyList(propertyList ReadableProperty) BinaryInputBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_BinaryInputBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithInterfaceValue(interfaceValue OptionalProperty) BinaryInputBuilder {
	b.InterfaceValue = interfaceValue
	return b
}

func (b *_BinaryInputBuilder) WithInterfaceValueBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.InterfaceValue.CreateOptionalPropertyBuilder())
	var err error
	b.InterfaceValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithTags(tags OptionalProperty) BinaryInputBuilder {
	b.Tags = tags
	return b
}

func (b *_BinaryInputBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithProfileLocation(profileLocation OptionalProperty) BinaryInputBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_BinaryInputBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) WithProfileName(profileName OptionalProperty) BinaryInputBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_BinaryInputBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) BinaryInputBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_BinaryInputBuilder) Build() (BinaryInput, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.DeviceType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deviceType' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.Polarity == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'polarity' not set"))
	}
	if b.InactiveText == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'inactiveText' not set"))
	}
	if b.ActiveText == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'activeText' not set"))
	}
	if b.ChangeOfStateTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'changeOfStateTime' not set"))
	}
	if b.ChangeOfStateCount == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'changeOfStateCount' not set"))
	}
	if b.TimeOfStateCountReset == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeOfStateCountReset' not set"))
	}
	if b.ElapsedActiveTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'elapsedActiveTime' not set"))
	}
	if b.TimeOfActiveTimeReset == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeOfActiveTimeReset' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.AlarmValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'alarmValue' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.InterfaceValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'interfaceValue' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._BinaryInput.deepCopy(), nil
}

func (b *_BinaryInputBuilder) MustBuild() BinaryInput {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_BinaryInputBuilder) DeepCopy() any {
	_copy := b.CreateBinaryInputBuilder().(*_BinaryInputBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateBinaryInputBuilder creates a BinaryInputBuilder
func (b *_BinaryInput) CreateBinaryInputBuilder() BinaryInputBuilder {
	if b == nil {
		return NewBinaryInputBuilder()
	}
	return &_BinaryInputBuilder{_BinaryInput: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BinaryInput) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_BinaryInput) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_BinaryInput) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_BinaryInput) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_BinaryInput) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_BinaryInput) GetDeviceType() OptionalProperty {
	return m.DeviceType
}

func (m *_BinaryInput) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_BinaryInput) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_BinaryInput) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_BinaryInput) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_BinaryInput) GetPolarity() ReadableProperty {
	return m.Polarity
}

func (m *_BinaryInput) GetInactiveText() OptionalProperty {
	return m.InactiveText
}

func (m *_BinaryInput) GetActiveText() OptionalProperty {
	return m.ActiveText
}

func (m *_BinaryInput) GetChangeOfStateTime() OptionalProperty {
	return m.ChangeOfStateTime
}

func (m *_BinaryInput) GetChangeOfStateCount() OptionalProperty {
	return m.ChangeOfStateCount
}

func (m *_BinaryInput) GetTimeOfStateCountReset() OptionalProperty {
	return m.TimeOfStateCountReset
}

func (m *_BinaryInput) GetElapsedActiveTime() OptionalProperty {
	return m.ElapsedActiveTime
}

func (m *_BinaryInput) GetTimeOfActiveTimeReset() OptionalProperty {
	return m.TimeOfActiveTimeReset
}

func (m *_BinaryInput) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_BinaryInput) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_BinaryInput) GetAlarmValue() OptionalProperty {
	return m.AlarmValue
}

func (m *_BinaryInput) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_BinaryInput) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_BinaryInput) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_BinaryInput) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_BinaryInput) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_BinaryInput) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_BinaryInput) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_BinaryInput) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_BinaryInput) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_BinaryInput) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_BinaryInput) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_BinaryInput) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_BinaryInput) GetInterfaceValue() OptionalProperty {
	return m.InterfaceValue
}

func (m *_BinaryInput) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_BinaryInput) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_BinaryInput) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastBinaryInput(structType any) BinaryInput {
	if casted, ok := structType.(BinaryInput); ok {
		return casted
	}
	if casted, ok := structType.(*BinaryInput); ok {
		return *casted
	}
	return nil
}

func (m *_BinaryInput) GetTypeName() string {
	return "BinaryInput"
}

func (m *_BinaryInput) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (deviceType)
	lengthInBits += m.DeviceType.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (polarity)
	lengthInBits += m.Polarity.GetLengthInBits(ctx)

	// Simple field (inactiveText)
	lengthInBits += m.InactiveText.GetLengthInBits(ctx)

	// Simple field (activeText)
	lengthInBits += m.ActiveText.GetLengthInBits(ctx)

	// Simple field (changeOfStateTime)
	lengthInBits += m.ChangeOfStateTime.GetLengthInBits(ctx)

	// Simple field (changeOfStateCount)
	lengthInBits += m.ChangeOfStateCount.GetLengthInBits(ctx)

	// Simple field (timeOfStateCountReset)
	lengthInBits += m.TimeOfStateCountReset.GetLengthInBits(ctx)

	// Simple field (elapsedActiveTime)
	lengthInBits += m.ElapsedActiveTime.GetLengthInBits(ctx)

	// Simple field (timeOfActiveTimeReset)
	lengthInBits += m.TimeOfActiveTimeReset.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (alarmValue)
	lengthInBits += m.AlarmValue.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (interfaceValue)
	lengthInBits += m.InterfaceValue.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_BinaryInput) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func BinaryInputParse(ctx context.Context, theBytes []byte) (BinaryInput, error) {
	return BinaryInputParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func BinaryInputParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (BinaryInput, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (BinaryInput, error) {
		return BinaryInputParseWithBuffer(ctx, readBuffer)
	}
}

func BinaryInputParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (BinaryInput, error) {
	v, err := (&_BinaryInput{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_BinaryInput) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__binaryInput BinaryInput, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BinaryInput"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BinaryInput")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetBinaryPV")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	deviceType, err := ReadSimpleField[OptionalProperty](ctx, "deviceType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deviceType' field"))
	}
	m.DeviceType = deviceType

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	polarity, err := ReadSimpleField[ReadableProperty](ctx, "polarity", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetPolarity")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'polarity' field"))
	}
	m.Polarity = polarity

	inactiveText, err := ReadSimpleField[OptionalProperty](ctx, "inactiveText", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'inactiveText' field"))
	}
	m.InactiveText = inactiveText

	activeText, err := ReadSimpleField[OptionalProperty](ctx, "activeText", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activeText' field"))
	}
	m.ActiveText = activeText

	changeOfStateTime, err := ReadSimpleField[OptionalProperty](ctx, "changeOfStateTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'changeOfStateTime' field"))
	}
	m.ChangeOfStateTime = changeOfStateTime

	changeOfStateCount, err := ReadSimpleField[OptionalProperty](ctx, "changeOfStateCount", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'changeOfStateCount' field"))
	}
	m.ChangeOfStateCount = changeOfStateCount

	timeOfStateCountReset, err := ReadSimpleField[OptionalProperty](ctx, "timeOfStateCountReset", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeOfStateCountReset' field"))
	}
	m.TimeOfStateCountReset = timeOfStateCountReset

	elapsedActiveTime, err := ReadSimpleField[OptionalProperty](ctx, "elapsedActiveTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'elapsedActiveTime' field"))
	}
	m.ElapsedActiveTime = elapsedActiveTime

	timeOfActiveTimeReset, err := ReadSimpleField[OptionalProperty](ctx, "timeOfActiveTimeReset", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeOfActiveTimeReset' field"))
	}
	m.TimeOfActiveTimeReset = timeOfActiveTimeReset

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	alarmValue, err := ReadSimpleField[OptionalProperty](ctx, "alarmValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetBinaryPV")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'alarmValue' field"))
	}
	m.AlarmValue = alarmValue

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	interfaceValue, err := ReadSimpleField[OptionalProperty](ctx, "interfaceValue", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetOptionalBinaryPV")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'interfaceValue' field"))
	}
	m.InterfaceValue = interfaceValue

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("BinaryInput"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BinaryInput")
	}

	return m, nil
}

func (m *_BinaryInput) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_BinaryInput) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("BinaryInput"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BinaryInput")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deviceType", m.GetDeviceType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deviceType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "polarity", m.GetPolarity(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'polarity' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "inactiveText", m.GetInactiveText(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'inactiveText' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "activeText", m.GetActiveText(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activeText' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "changeOfStateTime", m.GetChangeOfStateTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'changeOfStateTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "changeOfStateCount", m.GetChangeOfStateCount(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'changeOfStateCount' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeOfStateCountReset", m.GetTimeOfStateCountReset(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeOfStateCountReset' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "elapsedActiveTime", m.GetElapsedActiveTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'elapsedActiveTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeOfActiveTimeReset", m.GetTimeOfActiveTimeReset(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeOfActiveTimeReset' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "alarmValue", m.GetAlarmValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'alarmValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "interfaceValue", m.GetInterfaceValue(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'interfaceValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("BinaryInput"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BinaryInput")
	}
	return nil
}

func (m *_BinaryInput) IsBinaryInput() {}

func (m *_BinaryInput) DeepCopy() any {
	return m.deepCopy()
}

func (m *_BinaryInput) deepCopy() *_BinaryInput {
	if m == nil {
		return nil
	}
	_BinaryInputCopy := &_BinaryInput{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.DeviceType.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.Polarity.DeepCopy().(ReadableProperty),
		m.InactiveText.DeepCopy().(OptionalProperty),
		m.ActiveText.DeepCopy().(OptionalProperty),
		m.ChangeOfStateTime.DeepCopy().(OptionalProperty),
		m.ChangeOfStateCount.DeepCopy().(OptionalProperty),
		m.TimeOfStateCountReset.DeepCopy().(OptionalProperty),
		m.ElapsedActiveTime.DeepCopy().(OptionalProperty),
		m.TimeOfActiveTimeReset.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.AlarmValue.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.InterfaceValue.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _BinaryInputCopy
}

func (m *_BinaryInput) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
