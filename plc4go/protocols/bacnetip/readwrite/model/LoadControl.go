/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// LoadControl is the corresponding interface of LoadControl
type LoadControl interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetPresentValue returns PresentValue (property field)
	GetPresentValue() ReadableProperty
	// GetStateDescription returns StateDescription (property field)
	GetStateDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetRequestedShedLevel returns RequestedShedLevel (property field)
	GetRequestedShedLevel() WritableProperty
	// GetStartTime returns StartTime (property field)
	GetStartTime() WritableProperty
	// GetShedDuration returns ShedDuration (property field)
	GetShedDuration() WritableProperty
	// GetDutyWindow returns DutyWindow (property field)
	GetDutyWindow() WritableProperty
	// GetEnable returns Enable (property field)
	GetEnable() WritableProperty
	// GetFullDutyBaseline returns FullDutyBaseline (property field)
	GetFullDutyBaseline() OptionalProperty
	// GetExpectedShedLevel returns ExpectedShedLevel (property field)
	GetExpectedShedLevel() ReadableProperty
	// GetActualShedLevel returns ActualShedLevel (property field)
	GetActualShedLevel() ReadableProperty
	// GetShedLevels returns ShedLevels (property field)
	GetShedLevels() WritableProperty
	// GetShedLevelDescriptions returns ShedLevelDescriptions (property field)
	GetShedLevelDescriptions() ReadableProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetTimeDelay returns TimeDelay (property field)
	GetTimeDelay() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetTimeDelayNormal returns TimeDelayNormal (property field)
	GetTimeDelayNormal() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetValueSource returns ValueSource (property field)
	GetValueSource() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsLoadControl is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsLoadControl()
	// CreateBuilder creates a LoadControlBuilder
	CreateLoadControlBuilder() LoadControlBuilder
}

// _LoadControl is the data-structure of this message
type _LoadControl struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	PresentValue                 ReadableProperty
	StateDescription             OptionalProperty
	StatusFlags                  ReadableProperty
	EventState                   ReadableProperty
	Reliability                  OptionalProperty
	RequestedShedLevel           WritableProperty
	StartTime                    WritableProperty
	ShedDuration                 WritableProperty
	DutyWindow                   WritableProperty
	Enable                       WritableProperty
	FullDutyBaseline             OptionalProperty
	ExpectedShedLevel            ReadableProperty
	ActualShedLevel              ReadableProperty
	ShedLevels                   WritableProperty
	ShedLevelDescriptions        ReadableProperty
	NotificationClass            OptionalProperty
	TimeDelay                    OptionalProperty
	EventEnable                  OptionalProperty
	AckedTransitions             OptionalProperty
	NotifyType                   OptionalProperty
	EventTimeStamps              OptionalProperty
	EventMessageTexts            OptionalProperty
	EventMessageTextsConfig      OptionalProperty
	EventDetectionEnable         OptionalProperty
	EventAlgorithmInhibitRef     OptionalProperty
	EventAlgorithmInhibit        OptionalProperty
	TimeDelayNormal              OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	ValueSource                  OptionalProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ LoadControl = (*_LoadControl)(nil)

// NewLoadControl factory function for _LoadControl
func NewLoadControl(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, stateDescription OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, requestedShedLevel WritableProperty, startTime WritableProperty, shedDuration WritableProperty, dutyWindow WritableProperty, enable WritableProperty, fullDutyBaseline OptionalProperty, expectedShedLevel ReadableProperty, actualShedLevel ReadableProperty, shedLevels WritableProperty, shedLevelDescriptions ReadableProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_LoadControl {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for LoadControl must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for LoadControl must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for LoadControl must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for LoadControl must not be nil")
	}
	if presentValue == nil {
		panic("presentValue of type ReadableProperty for LoadControl must not be nil")
	}
	if stateDescription == nil {
		panic("stateDescription of type OptionalProperty for LoadControl must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for LoadControl must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for LoadControl must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for LoadControl must not be nil")
	}
	if requestedShedLevel == nil {
		panic("requestedShedLevel of type WritableProperty for LoadControl must not be nil")
	}
	if startTime == nil {
		panic("startTime of type WritableProperty for LoadControl must not be nil")
	}
	if shedDuration == nil {
		panic("shedDuration of type WritableProperty for LoadControl must not be nil")
	}
	if dutyWindow == nil {
		panic("dutyWindow of type WritableProperty for LoadControl must not be nil")
	}
	if enable == nil {
		panic("enable of type WritableProperty for LoadControl must not be nil")
	}
	if fullDutyBaseline == nil {
		panic("fullDutyBaseline of type OptionalProperty for LoadControl must not be nil")
	}
	if expectedShedLevel == nil {
		panic("expectedShedLevel of type ReadableProperty for LoadControl must not be nil")
	}
	if actualShedLevel == nil {
		panic("actualShedLevel of type ReadableProperty for LoadControl must not be nil")
	}
	if shedLevels == nil {
		panic("shedLevels of type WritableProperty for LoadControl must not be nil")
	}
	if shedLevelDescriptions == nil {
		panic("shedLevelDescriptions of type ReadableProperty for LoadControl must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for LoadControl must not be nil")
	}
	if timeDelay == nil {
		panic("timeDelay of type OptionalProperty for LoadControl must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for LoadControl must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for LoadControl must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for LoadControl must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for LoadControl must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for LoadControl must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for LoadControl must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for LoadControl must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for LoadControl must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for LoadControl must not be nil")
	}
	if timeDelayNormal == nil {
		panic("timeDelayNormal of type OptionalProperty for LoadControl must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for LoadControl must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for LoadControl must not be nil")
	}
	if valueSource == nil {
		panic("valueSource of type OptionalProperty for LoadControl must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for LoadControl must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for LoadControl must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for LoadControl must not be nil")
	}
	return &_LoadControl{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, PresentValue: presentValue, StateDescription: stateDescription, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, RequestedShedLevel: requestedShedLevel, StartTime: startTime, ShedDuration: shedDuration, DutyWindow: dutyWindow, Enable: enable, FullDutyBaseline: fullDutyBaseline, ExpectedShedLevel: expectedShedLevel, ActualShedLevel: actualShedLevel, ShedLevels: shedLevels, ShedLevelDescriptions: shedLevelDescriptions, NotificationClass: notificationClass, TimeDelay: timeDelay, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, TimeDelayNormal: timeDelayNormal, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, ValueSource: valueSource, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// LoadControlBuilder is a builder for LoadControl
type LoadControlBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, stateDescription OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, requestedShedLevel WritableProperty, startTime WritableProperty, shedDuration WritableProperty, dutyWindow WritableProperty, enable WritableProperty, fullDutyBaseline OptionalProperty, expectedShedLevel ReadableProperty, actualShedLevel ReadableProperty, shedLevels WritableProperty, shedLevelDescriptions ReadableProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LoadControlBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) LoadControlBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) LoadControlBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) LoadControlBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) LoadControlBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithPresentValue adds PresentValue (property field)
	WithPresentValue(ReadableProperty) LoadControlBuilder
	// WithPresentValueBuilder adds PresentValue (property field) which is build by the builder
	WithPresentValueBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithStateDescription adds StateDescription (property field)
	WithStateDescription(OptionalProperty) LoadControlBuilder
	// WithStateDescriptionBuilder adds StateDescription (property field) which is build by the builder
	WithStateDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) LoadControlBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) LoadControlBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) LoadControlBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithRequestedShedLevel adds RequestedShedLevel (property field)
	WithRequestedShedLevel(WritableProperty) LoadControlBuilder
	// WithRequestedShedLevelBuilder adds RequestedShedLevel (property field) which is build by the builder
	WithRequestedShedLevelBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder
	// WithStartTime adds StartTime (property field)
	WithStartTime(WritableProperty) LoadControlBuilder
	// WithStartTimeBuilder adds StartTime (property field) which is build by the builder
	WithStartTimeBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder
	// WithShedDuration adds ShedDuration (property field)
	WithShedDuration(WritableProperty) LoadControlBuilder
	// WithShedDurationBuilder adds ShedDuration (property field) which is build by the builder
	WithShedDurationBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder
	// WithDutyWindow adds DutyWindow (property field)
	WithDutyWindow(WritableProperty) LoadControlBuilder
	// WithDutyWindowBuilder adds DutyWindow (property field) which is build by the builder
	WithDutyWindowBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder
	// WithEnable adds Enable (property field)
	WithEnable(WritableProperty) LoadControlBuilder
	// WithEnableBuilder adds Enable (property field) which is build by the builder
	WithEnableBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder
	// WithFullDutyBaseline adds FullDutyBaseline (property field)
	WithFullDutyBaseline(OptionalProperty) LoadControlBuilder
	// WithFullDutyBaselineBuilder adds FullDutyBaseline (property field) which is build by the builder
	WithFullDutyBaselineBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithExpectedShedLevel adds ExpectedShedLevel (property field)
	WithExpectedShedLevel(ReadableProperty) LoadControlBuilder
	// WithExpectedShedLevelBuilder adds ExpectedShedLevel (property field) which is build by the builder
	WithExpectedShedLevelBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithActualShedLevel adds ActualShedLevel (property field)
	WithActualShedLevel(ReadableProperty) LoadControlBuilder
	// WithActualShedLevelBuilder adds ActualShedLevel (property field) which is build by the builder
	WithActualShedLevelBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithShedLevels adds ShedLevels (property field)
	WithShedLevels(WritableProperty) LoadControlBuilder
	// WithShedLevelsBuilder adds ShedLevels (property field) which is build by the builder
	WithShedLevelsBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder
	// WithShedLevelDescriptions adds ShedLevelDescriptions (property field)
	WithShedLevelDescriptions(ReadableProperty) LoadControlBuilder
	// WithShedLevelDescriptionsBuilder adds ShedLevelDescriptions (property field) which is build by the builder
	WithShedLevelDescriptionsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) LoadControlBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithTimeDelay adds TimeDelay (property field)
	WithTimeDelay(OptionalProperty) LoadControlBuilder
	// WithTimeDelayBuilder adds TimeDelay (property field) which is build by the builder
	WithTimeDelayBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) LoadControlBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) LoadControlBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) LoadControlBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) LoadControlBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) LoadControlBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) LoadControlBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) LoadControlBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) LoadControlBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) LoadControlBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithTimeDelayNormal adds TimeDelayNormal (property field)
	WithTimeDelayNormal(OptionalProperty) LoadControlBuilder
	// WithTimeDelayNormalBuilder adds TimeDelayNormal (property field) which is build by the builder
	WithTimeDelayNormalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) LoadControlBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) LoadControlBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder
	// WithValueSource adds ValueSource (property field)
	WithValueSource(OptionalProperty) LoadControlBuilder
	// WithValueSourceBuilder adds ValueSource (property field) which is build by the builder
	WithValueSourceBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) LoadControlBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) LoadControlBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) LoadControlBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder
	// Build builds the LoadControl or returns an error if something is wrong
	Build() (LoadControl, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() LoadControl
}

// NewLoadControlBuilder() creates a LoadControlBuilder
func NewLoadControlBuilder() LoadControlBuilder {
	return &_LoadControlBuilder{_LoadControl: new(_LoadControl)}
}

type _LoadControlBuilder struct {
	*_LoadControl

	err *utils.MultiError
}

var _ (LoadControlBuilder) = (*_LoadControlBuilder)(nil)

func (b *_LoadControlBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, presentValue ReadableProperty, stateDescription OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability OptionalProperty, requestedShedLevel WritableProperty, startTime WritableProperty, shedDuration WritableProperty, dutyWindow WritableProperty, enable WritableProperty, fullDutyBaseline OptionalProperty, expectedShedLevel ReadableProperty, actualShedLevel ReadableProperty, shedLevels WritableProperty, shedLevelDescriptions ReadableProperty, notificationClass OptionalProperty, timeDelay OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, timeDelayNormal OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, valueSource OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) LoadControlBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithPresentValue(presentValue).WithStateDescription(stateDescription).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithRequestedShedLevel(requestedShedLevel).WithStartTime(startTime).WithShedDuration(shedDuration).WithDutyWindow(dutyWindow).WithEnable(enable).WithFullDutyBaseline(fullDutyBaseline).WithExpectedShedLevel(expectedShedLevel).WithActualShedLevel(actualShedLevel).WithShedLevels(shedLevels).WithShedLevelDescriptions(shedLevelDescriptions).WithNotificationClass(notificationClass).WithTimeDelay(timeDelay).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithTimeDelayNormal(timeDelayNormal).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithValueSource(valueSource).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_LoadControlBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) LoadControlBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_LoadControlBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithObjectName(objectName ReadableProperty) LoadControlBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_LoadControlBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithObjectType(objectType ReadableProperty) LoadControlBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_LoadControlBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithDescription(description OptionalProperty) LoadControlBuilder {
	b.Description = description
	return b
}

func (b *_LoadControlBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithPresentValue(presentValue ReadableProperty) LoadControlBuilder {
	b.PresentValue = presentValue
	return b
}

func (b *_LoadControlBuilder) WithPresentValueBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.PresentValue.CreateReadablePropertyBuilder())
	var err error
	b.PresentValue, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithStateDescription(stateDescription OptionalProperty) LoadControlBuilder {
	b.StateDescription = stateDescription
	return b
}

func (b *_LoadControlBuilder) WithStateDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.StateDescription.CreateOptionalPropertyBuilder())
	var err error
	b.StateDescription, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithStatusFlags(statusFlags ReadableProperty) LoadControlBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_LoadControlBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventState(eventState ReadableProperty) LoadControlBuilder {
	b.EventState = eventState
	return b
}

func (b *_LoadControlBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithReliability(reliability OptionalProperty) LoadControlBuilder {
	b.Reliability = reliability
	return b
}

func (b *_LoadControlBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithRequestedShedLevel(requestedShedLevel WritableProperty) LoadControlBuilder {
	b.RequestedShedLevel = requestedShedLevel
	return b
}

func (b *_LoadControlBuilder) WithRequestedShedLevelBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.RequestedShedLevel.CreateWritablePropertyBuilder())
	var err error
	b.RequestedShedLevel, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithStartTime(startTime WritableProperty) LoadControlBuilder {
	b.StartTime = startTime
	return b
}

func (b *_LoadControlBuilder) WithStartTimeBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.StartTime.CreateWritablePropertyBuilder())
	var err error
	b.StartTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithShedDuration(shedDuration WritableProperty) LoadControlBuilder {
	b.ShedDuration = shedDuration
	return b
}

func (b *_LoadControlBuilder) WithShedDurationBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ShedDuration.CreateWritablePropertyBuilder())
	var err error
	b.ShedDuration, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithDutyWindow(dutyWindow WritableProperty) LoadControlBuilder {
	b.DutyWindow = dutyWindow
	return b
}

func (b *_LoadControlBuilder) WithDutyWindowBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.DutyWindow.CreateWritablePropertyBuilder())
	var err error
	b.DutyWindow, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEnable(enable WritableProperty) LoadControlBuilder {
	b.Enable = enable
	return b
}

func (b *_LoadControlBuilder) WithEnableBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.Enable.CreateWritablePropertyBuilder())
	var err error
	b.Enable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithFullDutyBaseline(fullDutyBaseline OptionalProperty) LoadControlBuilder {
	b.FullDutyBaseline = fullDutyBaseline
	return b
}

func (b *_LoadControlBuilder) WithFullDutyBaselineBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.FullDutyBaseline.CreateOptionalPropertyBuilder())
	var err error
	b.FullDutyBaseline, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithExpectedShedLevel(expectedShedLevel ReadableProperty) LoadControlBuilder {
	b.ExpectedShedLevel = expectedShedLevel
	return b
}

func (b *_LoadControlBuilder) WithExpectedShedLevelBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ExpectedShedLevel.CreateReadablePropertyBuilder())
	var err error
	b.ExpectedShedLevel, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithActualShedLevel(actualShedLevel ReadableProperty) LoadControlBuilder {
	b.ActualShedLevel = actualShedLevel
	return b
}

func (b *_LoadControlBuilder) WithActualShedLevelBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ActualShedLevel.CreateReadablePropertyBuilder())
	var err error
	b.ActualShedLevel, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithShedLevels(shedLevels WritableProperty) LoadControlBuilder {
	b.ShedLevels = shedLevels
	return b
}

func (b *_LoadControlBuilder) WithShedLevelsBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ShedLevels.CreateWritablePropertyBuilder())
	var err error
	b.ShedLevels, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithShedLevelDescriptions(shedLevelDescriptions ReadableProperty) LoadControlBuilder {
	b.ShedLevelDescriptions = shedLevelDescriptions
	return b
}

func (b *_LoadControlBuilder) WithShedLevelDescriptionsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ShedLevelDescriptions.CreateReadablePropertyBuilder())
	var err error
	b.ShedLevelDescriptions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithNotificationClass(notificationClass OptionalProperty) LoadControlBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_LoadControlBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithTimeDelay(timeDelay OptionalProperty) LoadControlBuilder {
	b.TimeDelay = timeDelay
	return b
}

func (b *_LoadControlBuilder) WithTimeDelayBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.TimeDelay.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelay, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventEnable(eventEnable OptionalProperty) LoadControlBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_LoadControlBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) LoadControlBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_LoadControlBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithNotifyType(notifyType OptionalProperty) LoadControlBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_LoadControlBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) LoadControlBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_LoadControlBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) LoadControlBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_LoadControlBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) LoadControlBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_LoadControlBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) LoadControlBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_LoadControlBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) LoadControlBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_LoadControlBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) LoadControlBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_LoadControlBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithTimeDelayNormal(timeDelayNormal OptionalProperty) LoadControlBuilder {
	b.TimeDelayNormal = timeDelayNormal
	return b
}

func (b *_LoadControlBuilder) WithTimeDelayNormalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.TimeDelayNormal.CreateOptionalPropertyBuilder())
	var err error
	b.TimeDelayNormal, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) LoadControlBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_LoadControlBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithPropertyList(propertyList ReadableProperty) LoadControlBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_LoadControlBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithValueSource(valueSource OptionalProperty) LoadControlBuilder {
	b.ValueSource = valueSource
	return b
}

func (b *_LoadControlBuilder) WithValueSourceBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ValueSource.CreateOptionalPropertyBuilder())
	var err error
	b.ValueSource, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithTags(tags OptionalProperty) LoadControlBuilder {
	b.Tags = tags
	return b
}

func (b *_LoadControlBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithProfileLocation(profileLocation OptionalProperty) LoadControlBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_LoadControlBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) WithProfileName(profileName OptionalProperty) LoadControlBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_LoadControlBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) LoadControlBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_LoadControlBuilder) Build() (LoadControl, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.PresentValue == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'presentValue' not set"))
	}
	if b.StateDescription == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'stateDescription' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.RequestedShedLevel == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'requestedShedLevel' not set"))
	}
	if b.StartTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'startTime' not set"))
	}
	if b.ShedDuration == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'shedDuration' not set"))
	}
	if b.DutyWindow == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'dutyWindow' not set"))
	}
	if b.Enable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'enable' not set"))
	}
	if b.FullDutyBaseline == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'fullDutyBaseline' not set"))
	}
	if b.ExpectedShedLevel == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'expectedShedLevel' not set"))
	}
	if b.ActualShedLevel == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'actualShedLevel' not set"))
	}
	if b.ShedLevels == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'shedLevels' not set"))
	}
	if b.ShedLevelDescriptions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'shedLevelDescriptions' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.TimeDelay == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelay' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.TimeDelayNormal == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeDelayNormal' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.ValueSource == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'valueSource' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._LoadControl.deepCopy(), nil
}

func (b *_LoadControlBuilder) MustBuild() LoadControl {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_LoadControlBuilder) DeepCopy() any {
	_copy := b.CreateLoadControlBuilder().(*_LoadControlBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateLoadControlBuilder creates a LoadControlBuilder
func (b *_LoadControl) CreateLoadControlBuilder() LoadControlBuilder {
	if b == nil {
		return NewLoadControlBuilder()
	}
	return &_LoadControlBuilder{_LoadControl: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_LoadControl) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_LoadControl) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_LoadControl) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_LoadControl) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_LoadControl) GetPresentValue() ReadableProperty {
	return m.PresentValue
}

func (m *_LoadControl) GetStateDescription() OptionalProperty {
	return m.StateDescription
}

func (m *_LoadControl) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_LoadControl) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_LoadControl) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_LoadControl) GetRequestedShedLevel() WritableProperty {
	return m.RequestedShedLevel
}

func (m *_LoadControl) GetStartTime() WritableProperty {
	return m.StartTime
}

func (m *_LoadControl) GetShedDuration() WritableProperty {
	return m.ShedDuration
}

func (m *_LoadControl) GetDutyWindow() WritableProperty {
	return m.DutyWindow
}

func (m *_LoadControl) GetEnable() WritableProperty {
	return m.Enable
}

func (m *_LoadControl) GetFullDutyBaseline() OptionalProperty {
	return m.FullDutyBaseline
}

func (m *_LoadControl) GetExpectedShedLevel() ReadableProperty {
	return m.ExpectedShedLevel
}

func (m *_LoadControl) GetActualShedLevel() ReadableProperty {
	return m.ActualShedLevel
}

func (m *_LoadControl) GetShedLevels() WritableProperty {
	return m.ShedLevels
}

func (m *_LoadControl) GetShedLevelDescriptions() ReadableProperty {
	return m.ShedLevelDescriptions
}

func (m *_LoadControl) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_LoadControl) GetTimeDelay() OptionalProperty {
	return m.TimeDelay
}

func (m *_LoadControl) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_LoadControl) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_LoadControl) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_LoadControl) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_LoadControl) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_LoadControl) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_LoadControl) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_LoadControl) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_LoadControl) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_LoadControl) GetTimeDelayNormal() OptionalProperty {
	return m.TimeDelayNormal
}

func (m *_LoadControl) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_LoadControl) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_LoadControl) GetValueSource() OptionalProperty {
	return m.ValueSource
}

func (m *_LoadControl) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_LoadControl) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_LoadControl) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastLoadControl(structType any) LoadControl {
	if casted, ok := structType.(LoadControl); ok {
		return casted
	}
	if casted, ok := structType.(*LoadControl); ok {
		return *casted
	}
	return nil
}

func (m *_LoadControl) GetTypeName() string {
	return "LoadControl"
}

func (m *_LoadControl) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (presentValue)
	lengthInBits += m.PresentValue.GetLengthInBits(ctx)

	// Simple field (stateDescription)
	lengthInBits += m.StateDescription.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (requestedShedLevel)
	lengthInBits += m.RequestedShedLevel.GetLengthInBits(ctx)

	// Simple field (startTime)
	lengthInBits += m.StartTime.GetLengthInBits(ctx)

	// Simple field (shedDuration)
	lengthInBits += m.ShedDuration.GetLengthInBits(ctx)

	// Simple field (dutyWindow)
	lengthInBits += m.DutyWindow.GetLengthInBits(ctx)

	// Simple field (enable)
	lengthInBits += m.Enable.GetLengthInBits(ctx)

	// Simple field (fullDutyBaseline)
	lengthInBits += m.FullDutyBaseline.GetLengthInBits(ctx)

	// Simple field (expectedShedLevel)
	lengthInBits += m.ExpectedShedLevel.GetLengthInBits(ctx)

	// Simple field (actualShedLevel)
	lengthInBits += m.ActualShedLevel.GetLengthInBits(ctx)

	// Simple field (shedLevels)
	lengthInBits += m.ShedLevels.GetLengthInBits(ctx)

	// Simple field (shedLevelDescriptions)
	lengthInBits += m.ShedLevelDescriptions.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (timeDelay)
	lengthInBits += m.TimeDelay.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (timeDelayNormal)
	lengthInBits += m.TimeDelayNormal.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (valueSource)
	lengthInBits += m.ValueSource.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_LoadControl) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func LoadControlParse(ctx context.Context, theBytes []byte) (LoadControl, error) {
	return LoadControlParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func LoadControlParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (LoadControl, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (LoadControl, error) {
		return LoadControlParseWithBuffer(ctx, readBuffer)
	}
}

func LoadControlParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (LoadControl, error) {
	v, err := (&_LoadControl{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_LoadControl) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__loadControl LoadControl, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("LoadControl"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for LoadControl")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	presentValue, err := ReadSimpleField[ReadableProperty](ctx, "presentValue", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetShedState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'presentValue' field"))
	}
	m.PresentValue = presentValue

	stateDescription, err := ReadSimpleField[OptionalProperty](ctx, "stateDescription", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'stateDescription' field"))
	}
	m.StateDescription = stateDescription

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	requestedShedLevel, err := ReadSimpleField[WritableProperty](ctx, "requestedShedLevel", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetShedLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'requestedShedLevel' field"))
	}
	m.RequestedShedLevel = requestedShedLevel

	startTime, err := ReadSimpleField[WritableProperty](ctx, "startTime", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetDateTime")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'startTime' field"))
	}
	m.StartTime = startTime

	shedDuration, err := ReadSimpleField[WritableProperty](ctx, "shedDuration", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'shedDuration' field"))
	}
	m.ShedDuration = shedDuration

	dutyWindow, err := ReadSimpleField[WritableProperty](ctx, "dutyWindow", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'dutyWindow' field"))
	}
	m.DutyWindow = dutyWindow

	enable, err := ReadSimpleField[WritableProperty](ctx, "enable", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'enable' field"))
	}
	m.Enable = enable

	fullDutyBaseline, err := ReadSimpleField[OptionalProperty](ctx, "fullDutyBaseline", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("REAL")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'fullDutyBaseline' field"))
	}
	m.FullDutyBaseline = fullDutyBaseline

	expectedShedLevel, err := ReadSimpleField[ReadableProperty](ctx, "expectedShedLevel", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetShedLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'expectedShedLevel' field"))
	}
	m.ExpectedShedLevel = expectedShedLevel

	actualShedLevel, err := ReadSimpleField[ReadableProperty](ctx, "actualShedLevel", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetShedLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'actualShedLevel' field"))
	}
	m.ActualShedLevel = actualShedLevel

	shedLevels, err := ReadSimpleField[WritableProperty](ctx, "shedLevels", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'shedLevels' field"))
	}
	m.ShedLevels = shedLevels

	shedLevelDescriptions, err := ReadSimpleField[ReadableProperty](ctx, "shedLevelDescriptions", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'shedLevelDescriptions' field"))
	}
	m.ShedLevelDescriptions = shedLevelDescriptions

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	timeDelay, err := ReadSimpleField[OptionalProperty](ctx, "timeDelay", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelay' field"))
	}
	m.TimeDelay = timeDelay

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	timeDelayNormal, err := ReadSimpleField[OptionalProperty](ctx, "timeDelayNormal", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeDelayNormal' field"))
	}
	m.TimeDelayNormal = timeDelayNormal

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	valueSource, err := ReadSimpleField[OptionalProperty](ctx, "valueSource", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetValueSource")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'valueSource' field"))
	}
	m.ValueSource = valueSource

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("LoadControl"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for LoadControl")
	}

	return m, nil
}

func (m *_LoadControl) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_LoadControl) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("LoadControl"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for LoadControl")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "presentValue", m.GetPresentValue(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'presentValue' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "stateDescription", m.GetStateDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'stateDescription' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "requestedShedLevel", m.GetRequestedShedLevel(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'requestedShedLevel' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "startTime", m.GetStartTime(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'startTime' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "shedDuration", m.GetShedDuration(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'shedDuration' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "dutyWindow", m.GetDutyWindow(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'dutyWindow' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "enable", m.GetEnable(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'enable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "fullDutyBaseline", m.GetFullDutyBaseline(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'fullDutyBaseline' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "expectedShedLevel", m.GetExpectedShedLevel(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'expectedShedLevel' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "actualShedLevel", m.GetActualShedLevel(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'actualShedLevel' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "shedLevels", m.GetShedLevels(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'shedLevels' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "shedLevelDescriptions", m.GetShedLevelDescriptions(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'shedLevelDescriptions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelay", m.GetTimeDelay(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelay' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeDelayNormal", m.GetTimeDelayNormal(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeDelayNormal' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "valueSource", m.GetValueSource(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'valueSource' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("LoadControl"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for LoadControl")
	}
	return nil
}

func (m *_LoadControl) IsLoadControl() {}

func (m *_LoadControl) DeepCopy() any {
	return m.deepCopy()
}

func (m *_LoadControl) deepCopy() *_LoadControl {
	if m == nil {
		return nil
	}
	_LoadControlCopy := &_LoadControl{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.PresentValue.DeepCopy().(ReadableProperty),
		m.StateDescription.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.RequestedShedLevel.DeepCopy().(WritableProperty),
		m.StartTime.DeepCopy().(WritableProperty),
		m.ShedDuration.DeepCopy().(WritableProperty),
		m.DutyWindow.DeepCopy().(WritableProperty),
		m.Enable.DeepCopy().(WritableProperty),
		m.FullDutyBaseline.DeepCopy().(OptionalProperty),
		m.ExpectedShedLevel.DeepCopy().(ReadableProperty),
		m.ActualShedLevel.DeepCopy().(ReadableProperty),
		m.ShedLevels.DeepCopy().(WritableProperty),
		m.ShedLevelDescriptions.DeepCopy().(ReadableProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.TimeDelay.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.TimeDelayNormal.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.ValueSource.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _LoadControlCopy
}

func (m *_LoadControl) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
