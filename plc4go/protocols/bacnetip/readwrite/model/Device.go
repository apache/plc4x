/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// Device is the corresponding interface of Device
type Device interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetSystemStatus returns SystemStatus (property field)
	GetSystemStatus() ReadableProperty
	// GetVendorName returns VendorName (property field)
	GetVendorName() ReadableProperty
	// GetVendorIdentifier returns VendorIdentifier (property field)
	GetVendorIdentifier() ReadableProperty
	// GetModelName returns ModelName (property field)
	GetModelName() ReadableProperty
	// GetFirmwareRevision returns FirmwareRevision (property field)
	GetFirmwareRevision() ReadableProperty
	// GetApplicationSoftwareVersion returns ApplicationSoftwareVersion (property field)
	GetApplicationSoftwareVersion() ReadableProperty
	// GetLocation returns Location (property field)
	GetLocation() OptionalProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetProtocolVersion returns ProtocolVersion (property field)
	GetProtocolVersion() ReadableProperty
	// GetProtocolRevision returns ProtocolRevision (property field)
	GetProtocolRevision() ReadableProperty
	// GetProtocolServicesSupported returns ProtocolServicesSupported (property field)
	GetProtocolServicesSupported() ReadableProperty
	// GetProtocolObjectTypesSupported returns ProtocolObjectTypesSupported (property field)
	GetProtocolObjectTypesSupported() ReadableProperty
	// GetObjectList returns ObjectList (property field)
	GetObjectList() ReadableProperty
	// GetStructuredObjectList returns StructuredObjectList (property field)
	GetStructuredObjectList() OptionalProperty
	// GetMaxAPDULengthAccepted returns MaxAPDULengthAccepted (property field)
	GetMaxAPDULengthAccepted() ReadableProperty
	// GetSegmentationSupported returns SegmentationSupported (property field)
	GetSegmentationSupported() ReadableProperty
	// GetMaxSegmentsAccepted returns MaxSegmentsAccepted (property field)
	GetMaxSegmentsAccepted() OptionalProperty
	// GetVTClassesSupported returns VTClassesSupported (property field)
	GetVTClassesSupported() OptionalProperty
	// GetActiveVTSessions returns ActiveVTSessions (property field)
	GetActiveVTSessions() OptionalProperty
	// GetLocalTime returns LocalTime (property field)
	GetLocalTime() OptionalProperty
	// GetLocalDate returns LocalDate (property field)
	GetLocalDate() OptionalProperty
	// GetUTCOffset returns UTCOffset (property field)
	GetUTCOffset() OptionalProperty
	// GetDaylightSavingsStatus returns DaylightSavingsStatus (property field)
	GetDaylightSavingsStatus() OptionalProperty
	// GetAPDUSegmentTimeout returns APDUSegmentTimeout (property field)
	GetAPDUSegmentTimeout() OptionalProperty
	// GetAPDUTimeout returns APDUTimeout (property field)
	GetAPDUTimeout() ReadableProperty
	// GetNumberOfAPDURetries returns NumberOfAPDURetries (property field)
	GetNumberOfAPDURetries() ReadableProperty
	// GetTimeSynchronizationRecipients returns TimeSynchronizationRecipients (property field)
	GetTimeSynchronizationRecipients() OptionalProperty
	// GetMaxMaster returns MaxMaster (property field)
	GetMaxMaster() OptionalProperty
	// GetMaxInfoFrames returns MaxInfoFrames (property field)
	GetMaxInfoFrames() OptionalProperty
	// GetDeviceAddressBinding returns DeviceAddressBinding (property field)
	GetDeviceAddressBinding() ReadableProperty
	// GetDatabaseRevision returns DatabaseRevision (property field)
	GetDatabaseRevision() ReadableProperty
	// GetConfigurationFiles returns ConfigurationFiles (property field)
	GetConfigurationFiles() OptionalProperty
	// GetLastRestoreTime returns LastRestoreTime (property field)
	GetLastRestoreTime() OptionalProperty
	// GetBackupFailureTimeout returns BackupFailureTimeout (property field)
	GetBackupFailureTimeout() OptionalProperty
	// GetBackupPreparationTime returns BackupPreparationTime (property field)
	GetBackupPreparationTime() OptionalProperty
	// GetRestorePreparationTime returns RestorePreparationTime (property field)
	GetRestorePreparationTime() OptionalProperty
	// GetRestoreCompletionTime returns RestoreCompletionTime (property field)
	GetRestoreCompletionTime() OptionalProperty
	// GetBackupAndRestoreState returns BackupAndRestoreState (property field)
	GetBackupAndRestoreState() OptionalProperty
	// GetActiveCOVSubscriptions returns ActiveCOVSubscriptions (property field)
	GetActiveCOVSubscriptions() OptionalProperty
	// GetLastRestartReason returns LastRestartReason (property field)
	GetLastRestartReason() OptionalProperty
	// GetTimeOfDeviceRestart returns TimeOfDeviceRestart (property field)
	GetTimeOfDeviceRestart() OptionalProperty
	// GetRestartNotificationRecipients returns RestartNotificationRecipients (property field)
	GetRestartNotificationRecipients() OptionalProperty
	// GetUTCTimeSynchronizationRecipients returns UTCTimeSynchronizationRecipients (property field)
	GetUTCTimeSynchronizationRecipients() OptionalProperty
	// GetTimeSynchronizationInterval returns TimeSynchronizationInterval (property field)
	GetTimeSynchronizationInterval() OptionalProperty
	// GetAlignIntervals returns AlignIntervals (property field)
	GetAlignIntervals() OptionalProperty
	// GetIntervalOffset returns IntervalOffset (property field)
	GetIntervalOffset() OptionalProperty
	// GetSerialNumber returns SerialNumber (property field)
	GetSerialNumber() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() OptionalProperty
	// GetEventState returns EventState (property field)
	GetEventState() OptionalProperty
	// GetReliability returns Reliability (property field)
	GetReliability() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetActiveCOVMultipleSubscriptions returns ActiveCOVMultipleSubscriptions (property field)
	GetActiveCOVMultipleSubscriptions() OptionalProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetDeployedProfileLocation returns DeployedProfileLocation (property field)
	GetDeployedProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsDevice is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsDevice()
	// CreateBuilder creates a DeviceBuilder
	CreateDeviceBuilder() DeviceBuilder
}

// _Device is the data-structure of this message
type _Device struct {
	ObjectIdentifier                 ReadableProperty
	ObjectName                       ReadableProperty
	ObjectType                       ReadableProperty
	SystemStatus                     ReadableProperty
	VendorName                       ReadableProperty
	VendorIdentifier                 ReadableProperty
	ModelName                        ReadableProperty
	FirmwareRevision                 ReadableProperty
	ApplicationSoftwareVersion       ReadableProperty
	Location                         OptionalProperty
	Description                      OptionalProperty
	ProtocolVersion                  ReadableProperty
	ProtocolRevision                 ReadableProperty
	ProtocolServicesSupported        ReadableProperty
	ProtocolObjectTypesSupported     ReadableProperty
	ObjectList                       ReadableProperty
	StructuredObjectList             OptionalProperty
	MaxAPDULengthAccepted            ReadableProperty
	SegmentationSupported            ReadableProperty
	MaxSegmentsAccepted              OptionalProperty
	VTClassesSupported               OptionalProperty
	ActiveVTSessions                 OptionalProperty
	LocalTime                        OptionalProperty
	LocalDate                        OptionalProperty
	UTCOffset                        OptionalProperty
	DaylightSavingsStatus            OptionalProperty
	APDUSegmentTimeout               OptionalProperty
	APDUTimeout                      ReadableProperty
	NumberOfAPDURetries              ReadableProperty
	TimeSynchronizationRecipients    OptionalProperty
	MaxMaster                        OptionalProperty
	MaxInfoFrames                    OptionalProperty
	DeviceAddressBinding             ReadableProperty
	DatabaseRevision                 ReadableProperty
	ConfigurationFiles               OptionalProperty
	LastRestoreTime                  OptionalProperty
	BackupFailureTimeout             OptionalProperty
	BackupPreparationTime            OptionalProperty
	RestorePreparationTime           OptionalProperty
	RestoreCompletionTime            OptionalProperty
	BackupAndRestoreState            OptionalProperty
	ActiveCOVSubscriptions           OptionalProperty
	LastRestartReason                OptionalProperty
	TimeOfDeviceRestart              OptionalProperty
	RestartNotificationRecipients    OptionalProperty
	UTCTimeSynchronizationRecipients OptionalProperty
	TimeSynchronizationInterval      OptionalProperty
	AlignIntervals                   OptionalProperty
	IntervalOffset                   OptionalProperty
	SerialNumber                     OptionalProperty
	PropertyList                     ReadableProperty
	StatusFlags                      OptionalProperty
	EventState                       OptionalProperty
	Reliability                      OptionalProperty
	EventDetectionEnable             OptionalProperty
	NotificationClass                OptionalProperty
	EventEnable                      OptionalProperty
	AckedTransitions                 OptionalProperty
	NotifyType                       OptionalProperty
	EventTimeStamps                  OptionalProperty
	EventMessageTexts                OptionalProperty
	EventMessageTextsConfig          OptionalProperty
	ReliabilityEvaluationInhibit     OptionalProperty
	ActiveCOVMultipleSubscriptions   OptionalProperty
	Tags                             OptionalProperty
	ProfileLocation                  OptionalProperty
	DeployedProfileLocation          OptionalProperty
	ProfileName                      OptionalProperty
}

var _ Device = (*_Device)(nil)

// NewDevice factory function for _Device
func NewDevice(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, systemStatus ReadableProperty, vendorName ReadableProperty, vendorIdentifier ReadableProperty, modelName ReadableProperty, firmwareRevision ReadableProperty, applicationSoftwareVersion ReadableProperty, location OptionalProperty, description OptionalProperty, protocolVersion ReadableProperty, protocolRevision ReadableProperty, protocolServicesSupported ReadableProperty, protocolObjectTypesSupported ReadableProperty, objectList ReadableProperty, structuredObjectList OptionalProperty, maxAPDULengthAccepted ReadableProperty, segmentationSupported ReadableProperty, maxSegmentsAccepted OptionalProperty, vTClassesSupported OptionalProperty, activeVTSessions OptionalProperty, localTime OptionalProperty, localDate OptionalProperty, uTCOffset OptionalProperty, daylightSavingsStatus OptionalProperty, aPDUSegmentTimeout OptionalProperty, aPDUTimeout ReadableProperty, numberOfAPDURetries ReadableProperty, timeSynchronizationRecipients OptionalProperty, maxMaster OptionalProperty, maxInfoFrames OptionalProperty, deviceAddressBinding ReadableProperty, databaseRevision ReadableProperty, configurationFiles OptionalProperty, lastRestoreTime OptionalProperty, backupFailureTimeout OptionalProperty, backupPreparationTime OptionalProperty, restorePreparationTime OptionalProperty, restoreCompletionTime OptionalProperty, backupAndRestoreState OptionalProperty, activeCOVSubscriptions OptionalProperty, lastRestartReason OptionalProperty, timeOfDeviceRestart OptionalProperty, restartNotificationRecipients OptionalProperty, uTCTimeSynchronizationRecipients OptionalProperty, timeSynchronizationInterval OptionalProperty, alignIntervals OptionalProperty, intervalOffset OptionalProperty, serialNumber OptionalProperty, propertyList ReadableProperty, statusFlags OptionalProperty, eventState OptionalProperty, reliability OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, activeCOVMultipleSubscriptions OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, deployedProfileLocation OptionalProperty, profileName OptionalProperty) *_Device {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for Device must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for Device must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for Device must not be nil")
	}
	if systemStatus == nil {
		panic("systemStatus of type ReadableProperty for Device must not be nil")
	}
	if vendorName == nil {
		panic("vendorName of type ReadableProperty for Device must not be nil")
	}
	if vendorIdentifier == nil {
		panic("vendorIdentifier of type ReadableProperty for Device must not be nil")
	}
	if modelName == nil {
		panic("modelName of type ReadableProperty for Device must not be nil")
	}
	if firmwareRevision == nil {
		panic("firmwareRevision of type ReadableProperty for Device must not be nil")
	}
	if applicationSoftwareVersion == nil {
		panic("applicationSoftwareVersion of type ReadableProperty for Device must not be nil")
	}
	if location == nil {
		panic("location of type OptionalProperty for Device must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for Device must not be nil")
	}
	if protocolVersion == nil {
		panic("protocolVersion of type ReadableProperty for Device must not be nil")
	}
	if protocolRevision == nil {
		panic("protocolRevision of type ReadableProperty for Device must not be nil")
	}
	if protocolServicesSupported == nil {
		panic("protocolServicesSupported of type ReadableProperty for Device must not be nil")
	}
	if protocolObjectTypesSupported == nil {
		panic("protocolObjectTypesSupported of type ReadableProperty for Device must not be nil")
	}
	if objectList == nil {
		panic("objectList of type ReadableProperty for Device must not be nil")
	}
	if structuredObjectList == nil {
		panic("structuredObjectList of type OptionalProperty for Device must not be nil")
	}
	if maxAPDULengthAccepted == nil {
		panic("maxAPDULengthAccepted of type ReadableProperty for Device must not be nil")
	}
	if segmentationSupported == nil {
		panic("segmentationSupported of type ReadableProperty for Device must not be nil")
	}
	if maxSegmentsAccepted == nil {
		panic("maxSegmentsAccepted of type OptionalProperty for Device must not be nil")
	}
	if vTClassesSupported == nil {
		panic("vTClassesSupported of type OptionalProperty for Device must not be nil")
	}
	if activeVTSessions == nil {
		panic("activeVTSessions of type OptionalProperty for Device must not be nil")
	}
	if localTime == nil {
		panic("localTime of type OptionalProperty for Device must not be nil")
	}
	if localDate == nil {
		panic("localDate of type OptionalProperty for Device must not be nil")
	}
	if uTCOffset == nil {
		panic("uTCOffset of type OptionalProperty for Device must not be nil")
	}
	if daylightSavingsStatus == nil {
		panic("daylightSavingsStatus of type OptionalProperty for Device must not be nil")
	}
	if aPDUSegmentTimeout == nil {
		panic("aPDUSegmentTimeout of type OptionalProperty for Device must not be nil")
	}
	if aPDUTimeout == nil {
		panic("aPDUTimeout of type ReadableProperty for Device must not be nil")
	}
	if numberOfAPDURetries == nil {
		panic("numberOfAPDURetries of type ReadableProperty for Device must not be nil")
	}
	if timeSynchronizationRecipients == nil {
		panic("timeSynchronizationRecipients of type OptionalProperty for Device must not be nil")
	}
	if maxMaster == nil {
		panic("maxMaster of type OptionalProperty for Device must not be nil")
	}
	if maxInfoFrames == nil {
		panic("maxInfoFrames of type OptionalProperty for Device must not be nil")
	}
	if deviceAddressBinding == nil {
		panic("deviceAddressBinding of type ReadableProperty for Device must not be nil")
	}
	if databaseRevision == nil {
		panic("databaseRevision of type ReadableProperty for Device must not be nil")
	}
	if configurationFiles == nil {
		panic("configurationFiles of type OptionalProperty for Device must not be nil")
	}
	if lastRestoreTime == nil {
		panic("lastRestoreTime of type OptionalProperty for Device must not be nil")
	}
	if backupFailureTimeout == nil {
		panic("backupFailureTimeout of type OptionalProperty for Device must not be nil")
	}
	if backupPreparationTime == nil {
		panic("backupPreparationTime of type OptionalProperty for Device must not be nil")
	}
	if restorePreparationTime == nil {
		panic("restorePreparationTime of type OptionalProperty for Device must not be nil")
	}
	if restoreCompletionTime == nil {
		panic("restoreCompletionTime of type OptionalProperty for Device must not be nil")
	}
	if backupAndRestoreState == nil {
		panic("backupAndRestoreState of type OptionalProperty for Device must not be nil")
	}
	if activeCOVSubscriptions == nil {
		panic("activeCOVSubscriptions of type OptionalProperty for Device must not be nil")
	}
	if lastRestartReason == nil {
		panic("lastRestartReason of type OptionalProperty for Device must not be nil")
	}
	if timeOfDeviceRestart == nil {
		panic("timeOfDeviceRestart of type OptionalProperty for Device must not be nil")
	}
	if restartNotificationRecipients == nil {
		panic("restartNotificationRecipients of type OptionalProperty for Device must not be nil")
	}
	if uTCTimeSynchronizationRecipients == nil {
		panic("uTCTimeSynchronizationRecipients of type OptionalProperty for Device must not be nil")
	}
	if timeSynchronizationInterval == nil {
		panic("timeSynchronizationInterval of type OptionalProperty for Device must not be nil")
	}
	if alignIntervals == nil {
		panic("alignIntervals of type OptionalProperty for Device must not be nil")
	}
	if intervalOffset == nil {
		panic("intervalOffset of type OptionalProperty for Device must not be nil")
	}
	if serialNumber == nil {
		panic("serialNumber of type OptionalProperty for Device must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for Device must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type OptionalProperty for Device must not be nil")
	}
	if eventState == nil {
		panic("eventState of type OptionalProperty for Device must not be nil")
	}
	if reliability == nil {
		panic("reliability of type OptionalProperty for Device must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for Device must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for Device must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for Device must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for Device must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for Device must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for Device must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for Device must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for Device must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for Device must not be nil")
	}
	if activeCOVMultipleSubscriptions == nil {
		panic("activeCOVMultipleSubscriptions of type OptionalProperty for Device must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for Device must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for Device must not be nil")
	}
	if deployedProfileLocation == nil {
		panic("deployedProfileLocation of type OptionalProperty for Device must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for Device must not be nil")
	}
	return &_Device{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, SystemStatus: systemStatus, VendorName: vendorName, VendorIdentifier: vendorIdentifier, ModelName: modelName, FirmwareRevision: firmwareRevision, ApplicationSoftwareVersion: applicationSoftwareVersion, Location: location, Description: description, ProtocolVersion: protocolVersion, ProtocolRevision: protocolRevision, ProtocolServicesSupported: protocolServicesSupported, ProtocolObjectTypesSupported: protocolObjectTypesSupported, ObjectList: objectList, StructuredObjectList: structuredObjectList, MaxAPDULengthAccepted: maxAPDULengthAccepted, SegmentationSupported: segmentationSupported, MaxSegmentsAccepted: maxSegmentsAccepted, VTClassesSupported: vTClassesSupported, ActiveVTSessions: activeVTSessions, LocalTime: localTime, LocalDate: localDate, UTCOffset: uTCOffset, DaylightSavingsStatus: daylightSavingsStatus, APDUSegmentTimeout: aPDUSegmentTimeout, APDUTimeout: aPDUTimeout, NumberOfAPDURetries: numberOfAPDURetries, TimeSynchronizationRecipients: timeSynchronizationRecipients, MaxMaster: maxMaster, MaxInfoFrames: maxInfoFrames, DeviceAddressBinding: deviceAddressBinding, DatabaseRevision: databaseRevision, ConfigurationFiles: configurationFiles, LastRestoreTime: lastRestoreTime, BackupFailureTimeout: backupFailureTimeout, BackupPreparationTime: backupPreparationTime, RestorePreparationTime: restorePreparationTime, RestoreCompletionTime: restoreCompletionTime, BackupAndRestoreState: backupAndRestoreState, ActiveCOVSubscriptions: activeCOVSubscriptions, LastRestartReason: lastRestartReason, TimeOfDeviceRestart: timeOfDeviceRestart, RestartNotificationRecipients: restartNotificationRecipients, UTCTimeSynchronizationRecipients: uTCTimeSynchronizationRecipients, TimeSynchronizationInterval: timeSynchronizationInterval, AlignIntervals: alignIntervals, IntervalOffset: intervalOffset, SerialNumber: serialNumber, PropertyList: propertyList, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, EventDetectionEnable: eventDetectionEnable, NotificationClass: notificationClass, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, ActiveCOVMultipleSubscriptions: activeCOVMultipleSubscriptions, Tags: tags, ProfileLocation: profileLocation, DeployedProfileLocation: deployedProfileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// DeviceBuilder is a builder for Device
type DeviceBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, systemStatus ReadableProperty, vendorName ReadableProperty, vendorIdentifier ReadableProperty, modelName ReadableProperty, firmwareRevision ReadableProperty, applicationSoftwareVersion ReadableProperty, location OptionalProperty, description OptionalProperty, protocolVersion ReadableProperty, protocolRevision ReadableProperty, protocolServicesSupported ReadableProperty, protocolObjectTypesSupported ReadableProperty, objectList ReadableProperty, structuredObjectList OptionalProperty, maxAPDULengthAccepted ReadableProperty, segmentationSupported ReadableProperty, maxSegmentsAccepted OptionalProperty, vTClassesSupported OptionalProperty, activeVTSessions OptionalProperty, localTime OptionalProperty, localDate OptionalProperty, uTCOffset OptionalProperty, daylightSavingsStatus OptionalProperty, aPDUSegmentTimeout OptionalProperty, aPDUTimeout ReadableProperty, numberOfAPDURetries ReadableProperty, timeSynchronizationRecipients OptionalProperty, maxMaster OptionalProperty, maxInfoFrames OptionalProperty, deviceAddressBinding ReadableProperty, databaseRevision ReadableProperty, configurationFiles OptionalProperty, lastRestoreTime OptionalProperty, backupFailureTimeout OptionalProperty, backupPreparationTime OptionalProperty, restorePreparationTime OptionalProperty, restoreCompletionTime OptionalProperty, backupAndRestoreState OptionalProperty, activeCOVSubscriptions OptionalProperty, lastRestartReason OptionalProperty, timeOfDeviceRestart OptionalProperty, restartNotificationRecipients OptionalProperty, uTCTimeSynchronizationRecipients OptionalProperty, timeSynchronizationInterval OptionalProperty, alignIntervals OptionalProperty, intervalOffset OptionalProperty, serialNumber OptionalProperty, propertyList ReadableProperty, statusFlags OptionalProperty, eventState OptionalProperty, reliability OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, activeCOVMultipleSubscriptions OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, deployedProfileLocation OptionalProperty, profileName OptionalProperty) DeviceBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) DeviceBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) DeviceBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) DeviceBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithSystemStatus adds SystemStatus (property field)
	WithSystemStatus(ReadableProperty) DeviceBuilder
	// WithSystemStatusBuilder adds SystemStatus (property field) which is build by the builder
	WithSystemStatusBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithVendorName adds VendorName (property field)
	WithVendorName(ReadableProperty) DeviceBuilder
	// WithVendorNameBuilder adds VendorName (property field) which is build by the builder
	WithVendorNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithVendorIdentifier adds VendorIdentifier (property field)
	WithVendorIdentifier(ReadableProperty) DeviceBuilder
	// WithVendorIdentifierBuilder adds VendorIdentifier (property field) which is build by the builder
	WithVendorIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithModelName adds ModelName (property field)
	WithModelName(ReadableProperty) DeviceBuilder
	// WithModelNameBuilder adds ModelName (property field) which is build by the builder
	WithModelNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithFirmwareRevision adds FirmwareRevision (property field)
	WithFirmwareRevision(ReadableProperty) DeviceBuilder
	// WithFirmwareRevisionBuilder adds FirmwareRevision (property field) which is build by the builder
	WithFirmwareRevisionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithApplicationSoftwareVersion adds ApplicationSoftwareVersion (property field)
	WithApplicationSoftwareVersion(ReadableProperty) DeviceBuilder
	// WithApplicationSoftwareVersionBuilder adds ApplicationSoftwareVersion (property field) which is build by the builder
	WithApplicationSoftwareVersionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithLocation adds Location (property field)
	WithLocation(OptionalProperty) DeviceBuilder
	// WithLocationBuilder adds Location (property field) which is build by the builder
	WithLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) DeviceBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithProtocolVersion adds ProtocolVersion (property field)
	WithProtocolVersion(ReadableProperty) DeviceBuilder
	// WithProtocolVersionBuilder adds ProtocolVersion (property field) which is build by the builder
	WithProtocolVersionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithProtocolRevision adds ProtocolRevision (property field)
	WithProtocolRevision(ReadableProperty) DeviceBuilder
	// WithProtocolRevisionBuilder adds ProtocolRevision (property field) which is build by the builder
	WithProtocolRevisionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithProtocolServicesSupported adds ProtocolServicesSupported (property field)
	WithProtocolServicesSupported(ReadableProperty) DeviceBuilder
	// WithProtocolServicesSupportedBuilder adds ProtocolServicesSupported (property field) which is build by the builder
	WithProtocolServicesSupportedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithProtocolObjectTypesSupported adds ProtocolObjectTypesSupported (property field)
	WithProtocolObjectTypesSupported(ReadableProperty) DeviceBuilder
	// WithProtocolObjectTypesSupportedBuilder adds ProtocolObjectTypesSupported (property field) which is build by the builder
	WithProtocolObjectTypesSupportedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithObjectList adds ObjectList (property field)
	WithObjectList(ReadableProperty) DeviceBuilder
	// WithObjectListBuilder adds ObjectList (property field) which is build by the builder
	WithObjectListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithStructuredObjectList adds StructuredObjectList (property field)
	WithStructuredObjectList(OptionalProperty) DeviceBuilder
	// WithStructuredObjectListBuilder adds StructuredObjectList (property field) which is build by the builder
	WithStructuredObjectListBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithMaxAPDULengthAccepted adds MaxAPDULengthAccepted (property field)
	WithMaxAPDULengthAccepted(ReadableProperty) DeviceBuilder
	// WithMaxAPDULengthAcceptedBuilder adds MaxAPDULengthAccepted (property field) which is build by the builder
	WithMaxAPDULengthAcceptedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithSegmentationSupported adds SegmentationSupported (property field)
	WithSegmentationSupported(ReadableProperty) DeviceBuilder
	// WithSegmentationSupportedBuilder adds SegmentationSupported (property field) which is build by the builder
	WithSegmentationSupportedBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithMaxSegmentsAccepted adds MaxSegmentsAccepted (property field)
	WithMaxSegmentsAccepted(OptionalProperty) DeviceBuilder
	// WithMaxSegmentsAcceptedBuilder adds MaxSegmentsAccepted (property field) which is build by the builder
	WithMaxSegmentsAcceptedBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithVTClassesSupported adds VTClassesSupported (property field)
	WithVTClassesSupported(OptionalProperty) DeviceBuilder
	// WithVTClassesSupportedBuilder adds VTClassesSupported (property field) which is build by the builder
	WithVTClassesSupportedBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithActiveVTSessions adds ActiveVTSessions (property field)
	WithActiveVTSessions(OptionalProperty) DeviceBuilder
	// WithActiveVTSessionsBuilder adds ActiveVTSessions (property field) which is build by the builder
	WithActiveVTSessionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithLocalTime adds LocalTime (property field)
	WithLocalTime(OptionalProperty) DeviceBuilder
	// WithLocalTimeBuilder adds LocalTime (property field) which is build by the builder
	WithLocalTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithLocalDate adds LocalDate (property field)
	WithLocalDate(OptionalProperty) DeviceBuilder
	// WithLocalDateBuilder adds LocalDate (property field) which is build by the builder
	WithLocalDateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithUTCOffset adds UTCOffset (property field)
	WithUTCOffset(OptionalProperty) DeviceBuilder
	// WithUTCOffsetBuilder adds UTCOffset (property field) which is build by the builder
	WithUTCOffsetBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithDaylightSavingsStatus adds DaylightSavingsStatus (property field)
	WithDaylightSavingsStatus(OptionalProperty) DeviceBuilder
	// WithDaylightSavingsStatusBuilder adds DaylightSavingsStatus (property field) which is build by the builder
	WithDaylightSavingsStatusBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithAPDUSegmentTimeout adds APDUSegmentTimeout (property field)
	WithAPDUSegmentTimeout(OptionalProperty) DeviceBuilder
	// WithAPDUSegmentTimeoutBuilder adds APDUSegmentTimeout (property field) which is build by the builder
	WithAPDUSegmentTimeoutBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithAPDUTimeout adds APDUTimeout (property field)
	WithAPDUTimeout(ReadableProperty) DeviceBuilder
	// WithAPDUTimeoutBuilder adds APDUTimeout (property field) which is build by the builder
	WithAPDUTimeoutBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithNumberOfAPDURetries adds NumberOfAPDURetries (property field)
	WithNumberOfAPDURetries(ReadableProperty) DeviceBuilder
	// WithNumberOfAPDURetriesBuilder adds NumberOfAPDURetries (property field) which is build by the builder
	WithNumberOfAPDURetriesBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithTimeSynchronizationRecipients adds TimeSynchronizationRecipients (property field)
	WithTimeSynchronizationRecipients(OptionalProperty) DeviceBuilder
	// WithTimeSynchronizationRecipientsBuilder adds TimeSynchronizationRecipients (property field) which is build by the builder
	WithTimeSynchronizationRecipientsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithMaxMaster adds MaxMaster (property field)
	WithMaxMaster(OptionalProperty) DeviceBuilder
	// WithMaxMasterBuilder adds MaxMaster (property field) which is build by the builder
	WithMaxMasterBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithMaxInfoFrames adds MaxInfoFrames (property field)
	WithMaxInfoFrames(OptionalProperty) DeviceBuilder
	// WithMaxInfoFramesBuilder adds MaxInfoFrames (property field) which is build by the builder
	WithMaxInfoFramesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithDeviceAddressBinding adds DeviceAddressBinding (property field)
	WithDeviceAddressBinding(ReadableProperty) DeviceBuilder
	// WithDeviceAddressBindingBuilder adds DeviceAddressBinding (property field) which is build by the builder
	WithDeviceAddressBindingBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithDatabaseRevision adds DatabaseRevision (property field)
	WithDatabaseRevision(ReadableProperty) DeviceBuilder
	// WithDatabaseRevisionBuilder adds DatabaseRevision (property field) which is build by the builder
	WithDatabaseRevisionBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithConfigurationFiles adds ConfigurationFiles (property field)
	WithConfigurationFiles(OptionalProperty) DeviceBuilder
	// WithConfigurationFilesBuilder adds ConfigurationFiles (property field) which is build by the builder
	WithConfigurationFilesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithLastRestoreTime adds LastRestoreTime (property field)
	WithLastRestoreTime(OptionalProperty) DeviceBuilder
	// WithLastRestoreTimeBuilder adds LastRestoreTime (property field) which is build by the builder
	WithLastRestoreTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithBackupFailureTimeout adds BackupFailureTimeout (property field)
	WithBackupFailureTimeout(OptionalProperty) DeviceBuilder
	// WithBackupFailureTimeoutBuilder adds BackupFailureTimeout (property field) which is build by the builder
	WithBackupFailureTimeoutBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithBackupPreparationTime adds BackupPreparationTime (property field)
	WithBackupPreparationTime(OptionalProperty) DeviceBuilder
	// WithBackupPreparationTimeBuilder adds BackupPreparationTime (property field) which is build by the builder
	WithBackupPreparationTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithRestorePreparationTime adds RestorePreparationTime (property field)
	WithRestorePreparationTime(OptionalProperty) DeviceBuilder
	// WithRestorePreparationTimeBuilder adds RestorePreparationTime (property field) which is build by the builder
	WithRestorePreparationTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithRestoreCompletionTime adds RestoreCompletionTime (property field)
	WithRestoreCompletionTime(OptionalProperty) DeviceBuilder
	// WithRestoreCompletionTimeBuilder adds RestoreCompletionTime (property field) which is build by the builder
	WithRestoreCompletionTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithBackupAndRestoreState adds BackupAndRestoreState (property field)
	WithBackupAndRestoreState(OptionalProperty) DeviceBuilder
	// WithBackupAndRestoreStateBuilder adds BackupAndRestoreState (property field) which is build by the builder
	WithBackupAndRestoreStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithActiveCOVSubscriptions adds ActiveCOVSubscriptions (property field)
	WithActiveCOVSubscriptions(OptionalProperty) DeviceBuilder
	// WithActiveCOVSubscriptionsBuilder adds ActiveCOVSubscriptions (property field) which is build by the builder
	WithActiveCOVSubscriptionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithLastRestartReason adds LastRestartReason (property field)
	WithLastRestartReason(OptionalProperty) DeviceBuilder
	// WithLastRestartReasonBuilder adds LastRestartReason (property field) which is build by the builder
	WithLastRestartReasonBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithTimeOfDeviceRestart adds TimeOfDeviceRestart (property field)
	WithTimeOfDeviceRestart(OptionalProperty) DeviceBuilder
	// WithTimeOfDeviceRestartBuilder adds TimeOfDeviceRestart (property field) which is build by the builder
	WithTimeOfDeviceRestartBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithRestartNotificationRecipients adds RestartNotificationRecipients (property field)
	WithRestartNotificationRecipients(OptionalProperty) DeviceBuilder
	// WithRestartNotificationRecipientsBuilder adds RestartNotificationRecipients (property field) which is build by the builder
	WithRestartNotificationRecipientsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithUTCTimeSynchronizationRecipients adds UTCTimeSynchronizationRecipients (property field)
	WithUTCTimeSynchronizationRecipients(OptionalProperty) DeviceBuilder
	// WithUTCTimeSynchronizationRecipientsBuilder adds UTCTimeSynchronizationRecipients (property field) which is build by the builder
	WithUTCTimeSynchronizationRecipientsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithTimeSynchronizationInterval adds TimeSynchronizationInterval (property field)
	WithTimeSynchronizationInterval(OptionalProperty) DeviceBuilder
	// WithTimeSynchronizationIntervalBuilder adds TimeSynchronizationInterval (property field) which is build by the builder
	WithTimeSynchronizationIntervalBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithAlignIntervals adds AlignIntervals (property field)
	WithAlignIntervals(OptionalProperty) DeviceBuilder
	// WithAlignIntervalsBuilder adds AlignIntervals (property field) which is build by the builder
	WithAlignIntervalsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithIntervalOffset adds IntervalOffset (property field)
	WithIntervalOffset(OptionalProperty) DeviceBuilder
	// WithIntervalOffsetBuilder adds IntervalOffset (property field) which is build by the builder
	WithIntervalOffsetBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithSerialNumber adds SerialNumber (property field)
	WithSerialNumber(OptionalProperty) DeviceBuilder
	// WithSerialNumberBuilder adds SerialNumber (property field) which is build by the builder
	WithSerialNumberBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) DeviceBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(OptionalProperty) DeviceBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithEventState adds EventState (property field)
	WithEventState(OptionalProperty) DeviceBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(OptionalProperty) DeviceBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) DeviceBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) DeviceBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) DeviceBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) DeviceBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) DeviceBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) DeviceBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) DeviceBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) DeviceBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) DeviceBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithActiveCOVMultipleSubscriptions adds ActiveCOVMultipleSubscriptions (property field)
	WithActiveCOVMultipleSubscriptions(OptionalProperty) DeviceBuilder
	// WithActiveCOVMultipleSubscriptionsBuilder adds ActiveCOVMultipleSubscriptions (property field) which is build by the builder
	WithActiveCOVMultipleSubscriptionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) DeviceBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) DeviceBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithDeployedProfileLocation adds DeployedProfileLocation (property field)
	WithDeployedProfileLocation(OptionalProperty) DeviceBuilder
	// WithDeployedProfileLocationBuilder adds DeployedProfileLocation (property field) which is build by the builder
	WithDeployedProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) DeviceBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder
	// Build builds the Device or returns an error if something is wrong
	Build() (Device, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() Device
}

// NewDeviceBuilder() creates a DeviceBuilder
func NewDeviceBuilder() DeviceBuilder {
	return &_DeviceBuilder{_Device: new(_Device)}
}

type _DeviceBuilder struct {
	*_Device

	err *utils.MultiError
}

var _ (DeviceBuilder) = (*_DeviceBuilder)(nil)

func (b *_DeviceBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, systemStatus ReadableProperty, vendorName ReadableProperty, vendorIdentifier ReadableProperty, modelName ReadableProperty, firmwareRevision ReadableProperty, applicationSoftwareVersion ReadableProperty, location OptionalProperty, description OptionalProperty, protocolVersion ReadableProperty, protocolRevision ReadableProperty, protocolServicesSupported ReadableProperty, protocolObjectTypesSupported ReadableProperty, objectList ReadableProperty, structuredObjectList OptionalProperty, maxAPDULengthAccepted ReadableProperty, segmentationSupported ReadableProperty, maxSegmentsAccepted OptionalProperty, vTClassesSupported OptionalProperty, activeVTSessions OptionalProperty, localTime OptionalProperty, localDate OptionalProperty, uTCOffset OptionalProperty, daylightSavingsStatus OptionalProperty, aPDUSegmentTimeout OptionalProperty, aPDUTimeout ReadableProperty, numberOfAPDURetries ReadableProperty, timeSynchronizationRecipients OptionalProperty, maxMaster OptionalProperty, maxInfoFrames OptionalProperty, deviceAddressBinding ReadableProperty, databaseRevision ReadableProperty, configurationFiles OptionalProperty, lastRestoreTime OptionalProperty, backupFailureTimeout OptionalProperty, backupPreparationTime OptionalProperty, restorePreparationTime OptionalProperty, restoreCompletionTime OptionalProperty, backupAndRestoreState OptionalProperty, activeCOVSubscriptions OptionalProperty, lastRestartReason OptionalProperty, timeOfDeviceRestart OptionalProperty, restartNotificationRecipients OptionalProperty, uTCTimeSynchronizationRecipients OptionalProperty, timeSynchronizationInterval OptionalProperty, alignIntervals OptionalProperty, intervalOffset OptionalProperty, serialNumber OptionalProperty, propertyList ReadableProperty, statusFlags OptionalProperty, eventState OptionalProperty, reliability OptionalProperty, eventDetectionEnable OptionalProperty, notificationClass OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, activeCOVMultipleSubscriptions OptionalProperty, tags OptionalProperty, profileLocation OptionalProperty, deployedProfileLocation OptionalProperty, profileName OptionalProperty) DeviceBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithSystemStatus(systemStatus).WithVendorName(vendorName).WithVendorIdentifier(vendorIdentifier).WithModelName(modelName).WithFirmwareRevision(firmwareRevision).WithApplicationSoftwareVersion(applicationSoftwareVersion).WithLocation(location).WithDescription(description).WithProtocolVersion(protocolVersion).WithProtocolRevision(protocolRevision).WithProtocolServicesSupported(protocolServicesSupported).WithProtocolObjectTypesSupported(protocolObjectTypesSupported).WithObjectList(objectList).WithStructuredObjectList(structuredObjectList).WithMaxAPDULengthAccepted(maxAPDULengthAccepted).WithSegmentationSupported(segmentationSupported).WithMaxSegmentsAccepted(maxSegmentsAccepted).WithVTClassesSupported(vTClassesSupported).WithActiveVTSessions(activeVTSessions).WithLocalTime(localTime).WithLocalDate(localDate).WithUTCOffset(uTCOffset).WithDaylightSavingsStatus(daylightSavingsStatus).WithAPDUSegmentTimeout(aPDUSegmentTimeout).WithAPDUTimeout(aPDUTimeout).WithNumberOfAPDURetries(numberOfAPDURetries).WithTimeSynchronizationRecipients(timeSynchronizationRecipients).WithMaxMaster(maxMaster).WithMaxInfoFrames(maxInfoFrames).WithDeviceAddressBinding(deviceAddressBinding).WithDatabaseRevision(databaseRevision).WithConfigurationFiles(configurationFiles).WithLastRestoreTime(lastRestoreTime).WithBackupFailureTimeout(backupFailureTimeout).WithBackupPreparationTime(backupPreparationTime).WithRestorePreparationTime(restorePreparationTime).WithRestoreCompletionTime(restoreCompletionTime).WithBackupAndRestoreState(backupAndRestoreState).WithActiveCOVSubscriptions(activeCOVSubscriptions).WithLastRestartReason(lastRestartReason).WithTimeOfDeviceRestart(timeOfDeviceRestart).WithRestartNotificationRecipients(restartNotificationRecipients).WithUTCTimeSynchronizationRecipients(uTCTimeSynchronizationRecipients).WithTimeSynchronizationInterval(timeSynchronizationInterval).WithAlignIntervals(alignIntervals).WithIntervalOffset(intervalOffset).WithSerialNumber(serialNumber).WithPropertyList(propertyList).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithEventDetectionEnable(eventDetectionEnable).WithNotificationClass(notificationClass).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithActiveCOVMultipleSubscriptions(activeCOVMultipleSubscriptions).WithTags(tags).WithProfileLocation(profileLocation).WithDeployedProfileLocation(deployedProfileLocation).WithProfileName(profileName)
}

func (b *_DeviceBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) DeviceBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_DeviceBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithObjectName(objectName ReadableProperty) DeviceBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_DeviceBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithObjectType(objectType ReadableProperty) DeviceBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_DeviceBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithSystemStatus(systemStatus ReadableProperty) DeviceBuilder {
	b.SystemStatus = systemStatus
	return b
}

func (b *_DeviceBuilder) WithSystemStatusBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.SystemStatus.CreateReadablePropertyBuilder())
	var err error
	b.SystemStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithVendorName(vendorName ReadableProperty) DeviceBuilder {
	b.VendorName = vendorName
	return b
}

func (b *_DeviceBuilder) WithVendorNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.VendorName.CreateReadablePropertyBuilder())
	var err error
	b.VendorName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithVendorIdentifier(vendorIdentifier ReadableProperty) DeviceBuilder {
	b.VendorIdentifier = vendorIdentifier
	return b
}

func (b *_DeviceBuilder) WithVendorIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.VendorIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.VendorIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithModelName(modelName ReadableProperty) DeviceBuilder {
	b.ModelName = modelName
	return b
}

func (b *_DeviceBuilder) WithModelNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ModelName.CreateReadablePropertyBuilder())
	var err error
	b.ModelName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithFirmwareRevision(firmwareRevision ReadableProperty) DeviceBuilder {
	b.FirmwareRevision = firmwareRevision
	return b
}

func (b *_DeviceBuilder) WithFirmwareRevisionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.FirmwareRevision.CreateReadablePropertyBuilder())
	var err error
	b.FirmwareRevision, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithApplicationSoftwareVersion(applicationSoftwareVersion ReadableProperty) DeviceBuilder {
	b.ApplicationSoftwareVersion = applicationSoftwareVersion
	return b
}

func (b *_DeviceBuilder) WithApplicationSoftwareVersionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ApplicationSoftwareVersion.CreateReadablePropertyBuilder())
	var err error
	b.ApplicationSoftwareVersion, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithLocation(location OptionalProperty) DeviceBuilder {
	b.Location = location
	return b
}

func (b *_DeviceBuilder) WithLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.Location.CreateOptionalPropertyBuilder())
	var err error
	b.Location, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithDescription(description OptionalProperty) DeviceBuilder {
	b.Description = description
	return b
}

func (b *_DeviceBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithProtocolVersion(protocolVersion ReadableProperty) DeviceBuilder {
	b.ProtocolVersion = protocolVersion
	return b
}

func (b *_DeviceBuilder) WithProtocolVersionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ProtocolVersion.CreateReadablePropertyBuilder())
	var err error
	b.ProtocolVersion, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithProtocolRevision(protocolRevision ReadableProperty) DeviceBuilder {
	b.ProtocolRevision = protocolRevision
	return b
}

func (b *_DeviceBuilder) WithProtocolRevisionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ProtocolRevision.CreateReadablePropertyBuilder())
	var err error
	b.ProtocolRevision, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithProtocolServicesSupported(protocolServicesSupported ReadableProperty) DeviceBuilder {
	b.ProtocolServicesSupported = protocolServicesSupported
	return b
}

func (b *_DeviceBuilder) WithProtocolServicesSupportedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ProtocolServicesSupported.CreateReadablePropertyBuilder())
	var err error
	b.ProtocolServicesSupported, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithProtocolObjectTypesSupported(protocolObjectTypesSupported ReadableProperty) DeviceBuilder {
	b.ProtocolObjectTypesSupported = protocolObjectTypesSupported
	return b
}

func (b *_DeviceBuilder) WithProtocolObjectTypesSupportedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ProtocolObjectTypesSupported.CreateReadablePropertyBuilder())
	var err error
	b.ProtocolObjectTypesSupported, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithObjectList(objectList ReadableProperty) DeviceBuilder {
	b.ObjectList = objectList
	return b
}

func (b *_DeviceBuilder) WithObjectListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ObjectList.CreateReadablePropertyBuilder())
	var err error
	b.ObjectList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithStructuredObjectList(structuredObjectList OptionalProperty) DeviceBuilder {
	b.StructuredObjectList = structuredObjectList
	return b
}

func (b *_DeviceBuilder) WithStructuredObjectListBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.StructuredObjectList.CreateOptionalPropertyBuilder())
	var err error
	b.StructuredObjectList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithMaxAPDULengthAccepted(maxAPDULengthAccepted ReadableProperty) DeviceBuilder {
	b.MaxAPDULengthAccepted = maxAPDULengthAccepted
	return b
}

func (b *_DeviceBuilder) WithMaxAPDULengthAcceptedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.MaxAPDULengthAccepted.CreateReadablePropertyBuilder())
	var err error
	b.MaxAPDULengthAccepted, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithSegmentationSupported(segmentationSupported ReadableProperty) DeviceBuilder {
	b.SegmentationSupported = segmentationSupported
	return b
}

func (b *_DeviceBuilder) WithSegmentationSupportedBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.SegmentationSupported.CreateReadablePropertyBuilder())
	var err error
	b.SegmentationSupported, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithMaxSegmentsAccepted(maxSegmentsAccepted OptionalProperty) DeviceBuilder {
	b.MaxSegmentsAccepted = maxSegmentsAccepted
	return b
}

func (b *_DeviceBuilder) WithMaxSegmentsAcceptedBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.MaxSegmentsAccepted.CreateOptionalPropertyBuilder())
	var err error
	b.MaxSegmentsAccepted, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithVTClassesSupported(vTClassesSupported OptionalProperty) DeviceBuilder {
	b.VTClassesSupported = vTClassesSupported
	return b
}

func (b *_DeviceBuilder) WithVTClassesSupportedBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.VTClassesSupported.CreateOptionalPropertyBuilder())
	var err error
	b.VTClassesSupported, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithActiveVTSessions(activeVTSessions OptionalProperty) DeviceBuilder {
	b.ActiveVTSessions = activeVTSessions
	return b
}

func (b *_DeviceBuilder) WithActiveVTSessionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ActiveVTSessions.CreateOptionalPropertyBuilder())
	var err error
	b.ActiveVTSessions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithLocalTime(localTime OptionalProperty) DeviceBuilder {
	b.LocalTime = localTime
	return b
}

func (b *_DeviceBuilder) WithLocalTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.LocalTime.CreateOptionalPropertyBuilder())
	var err error
	b.LocalTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithLocalDate(localDate OptionalProperty) DeviceBuilder {
	b.LocalDate = localDate
	return b
}

func (b *_DeviceBuilder) WithLocalDateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.LocalDate.CreateOptionalPropertyBuilder())
	var err error
	b.LocalDate, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithUTCOffset(uTCOffset OptionalProperty) DeviceBuilder {
	b.UTCOffset = uTCOffset
	return b
}

func (b *_DeviceBuilder) WithUTCOffsetBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.UTCOffset.CreateOptionalPropertyBuilder())
	var err error
	b.UTCOffset, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithDaylightSavingsStatus(daylightSavingsStatus OptionalProperty) DeviceBuilder {
	b.DaylightSavingsStatus = daylightSavingsStatus
	return b
}

func (b *_DeviceBuilder) WithDaylightSavingsStatusBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.DaylightSavingsStatus.CreateOptionalPropertyBuilder())
	var err error
	b.DaylightSavingsStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithAPDUSegmentTimeout(aPDUSegmentTimeout OptionalProperty) DeviceBuilder {
	b.APDUSegmentTimeout = aPDUSegmentTimeout
	return b
}

func (b *_DeviceBuilder) WithAPDUSegmentTimeoutBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.APDUSegmentTimeout.CreateOptionalPropertyBuilder())
	var err error
	b.APDUSegmentTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithAPDUTimeout(aPDUTimeout ReadableProperty) DeviceBuilder {
	b.APDUTimeout = aPDUTimeout
	return b
}

func (b *_DeviceBuilder) WithAPDUTimeoutBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.APDUTimeout.CreateReadablePropertyBuilder())
	var err error
	b.APDUTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithNumberOfAPDURetries(numberOfAPDURetries ReadableProperty) DeviceBuilder {
	b.NumberOfAPDURetries = numberOfAPDURetries
	return b
}

func (b *_DeviceBuilder) WithNumberOfAPDURetriesBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.NumberOfAPDURetries.CreateReadablePropertyBuilder())
	var err error
	b.NumberOfAPDURetries, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithTimeSynchronizationRecipients(timeSynchronizationRecipients OptionalProperty) DeviceBuilder {
	b.TimeSynchronizationRecipients = timeSynchronizationRecipients
	return b
}

func (b *_DeviceBuilder) WithTimeSynchronizationRecipientsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.TimeSynchronizationRecipients.CreateOptionalPropertyBuilder())
	var err error
	b.TimeSynchronizationRecipients, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithMaxMaster(maxMaster OptionalProperty) DeviceBuilder {
	b.MaxMaster = maxMaster
	return b
}

func (b *_DeviceBuilder) WithMaxMasterBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.MaxMaster.CreateOptionalPropertyBuilder())
	var err error
	b.MaxMaster, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithMaxInfoFrames(maxInfoFrames OptionalProperty) DeviceBuilder {
	b.MaxInfoFrames = maxInfoFrames
	return b
}

func (b *_DeviceBuilder) WithMaxInfoFramesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.MaxInfoFrames.CreateOptionalPropertyBuilder())
	var err error
	b.MaxInfoFrames, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithDeviceAddressBinding(deviceAddressBinding ReadableProperty) DeviceBuilder {
	b.DeviceAddressBinding = deviceAddressBinding
	return b
}

func (b *_DeviceBuilder) WithDeviceAddressBindingBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.DeviceAddressBinding.CreateReadablePropertyBuilder())
	var err error
	b.DeviceAddressBinding, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithDatabaseRevision(databaseRevision ReadableProperty) DeviceBuilder {
	b.DatabaseRevision = databaseRevision
	return b
}

func (b *_DeviceBuilder) WithDatabaseRevisionBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.DatabaseRevision.CreateReadablePropertyBuilder())
	var err error
	b.DatabaseRevision, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithConfigurationFiles(configurationFiles OptionalProperty) DeviceBuilder {
	b.ConfigurationFiles = configurationFiles
	return b
}

func (b *_DeviceBuilder) WithConfigurationFilesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ConfigurationFiles.CreateOptionalPropertyBuilder())
	var err error
	b.ConfigurationFiles, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithLastRestoreTime(lastRestoreTime OptionalProperty) DeviceBuilder {
	b.LastRestoreTime = lastRestoreTime
	return b
}

func (b *_DeviceBuilder) WithLastRestoreTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.LastRestoreTime.CreateOptionalPropertyBuilder())
	var err error
	b.LastRestoreTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithBackupFailureTimeout(backupFailureTimeout OptionalProperty) DeviceBuilder {
	b.BackupFailureTimeout = backupFailureTimeout
	return b
}

func (b *_DeviceBuilder) WithBackupFailureTimeoutBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.BackupFailureTimeout.CreateOptionalPropertyBuilder())
	var err error
	b.BackupFailureTimeout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithBackupPreparationTime(backupPreparationTime OptionalProperty) DeviceBuilder {
	b.BackupPreparationTime = backupPreparationTime
	return b
}

func (b *_DeviceBuilder) WithBackupPreparationTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.BackupPreparationTime.CreateOptionalPropertyBuilder())
	var err error
	b.BackupPreparationTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithRestorePreparationTime(restorePreparationTime OptionalProperty) DeviceBuilder {
	b.RestorePreparationTime = restorePreparationTime
	return b
}

func (b *_DeviceBuilder) WithRestorePreparationTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.RestorePreparationTime.CreateOptionalPropertyBuilder())
	var err error
	b.RestorePreparationTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithRestoreCompletionTime(restoreCompletionTime OptionalProperty) DeviceBuilder {
	b.RestoreCompletionTime = restoreCompletionTime
	return b
}

func (b *_DeviceBuilder) WithRestoreCompletionTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.RestoreCompletionTime.CreateOptionalPropertyBuilder())
	var err error
	b.RestoreCompletionTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithBackupAndRestoreState(backupAndRestoreState OptionalProperty) DeviceBuilder {
	b.BackupAndRestoreState = backupAndRestoreState
	return b
}

func (b *_DeviceBuilder) WithBackupAndRestoreStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.BackupAndRestoreState.CreateOptionalPropertyBuilder())
	var err error
	b.BackupAndRestoreState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithActiveCOVSubscriptions(activeCOVSubscriptions OptionalProperty) DeviceBuilder {
	b.ActiveCOVSubscriptions = activeCOVSubscriptions
	return b
}

func (b *_DeviceBuilder) WithActiveCOVSubscriptionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ActiveCOVSubscriptions.CreateOptionalPropertyBuilder())
	var err error
	b.ActiveCOVSubscriptions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithLastRestartReason(lastRestartReason OptionalProperty) DeviceBuilder {
	b.LastRestartReason = lastRestartReason
	return b
}

func (b *_DeviceBuilder) WithLastRestartReasonBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.LastRestartReason.CreateOptionalPropertyBuilder())
	var err error
	b.LastRestartReason, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithTimeOfDeviceRestart(timeOfDeviceRestart OptionalProperty) DeviceBuilder {
	b.TimeOfDeviceRestart = timeOfDeviceRestart
	return b
}

func (b *_DeviceBuilder) WithTimeOfDeviceRestartBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.TimeOfDeviceRestart.CreateOptionalPropertyBuilder())
	var err error
	b.TimeOfDeviceRestart, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithRestartNotificationRecipients(restartNotificationRecipients OptionalProperty) DeviceBuilder {
	b.RestartNotificationRecipients = restartNotificationRecipients
	return b
}

func (b *_DeviceBuilder) WithRestartNotificationRecipientsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.RestartNotificationRecipients.CreateOptionalPropertyBuilder())
	var err error
	b.RestartNotificationRecipients, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithUTCTimeSynchronizationRecipients(uTCTimeSynchronizationRecipients OptionalProperty) DeviceBuilder {
	b.UTCTimeSynchronizationRecipients = uTCTimeSynchronizationRecipients
	return b
}

func (b *_DeviceBuilder) WithUTCTimeSynchronizationRecipientsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.UTCTimeSynchronizationRecipients.CreateOptionalPropertyBuilder())
	var err error
	b.UTCTimeSynchronizationRecipients, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithTimeSynchronizationInterval(timeSynchronizationInterval OptionalProperty) DeviceBuilder {
	b.TimeSynchronizationInterval = timeSynchronizationInterval
	return b
}

func (b *_DeviceBuilder) WithTimeSynchronizationIntervalBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.TimeSynchronizationInterval.CreateOptionalPropertyBuilder())
	var err error
	b.TimeSynchronizationInterval, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithAlignIntervals(alignIntervals OptionalProperty) DeviceBuilder {
	b.AlignIntervals = alignIntervals
	return b
}

func (b *_DeviceBuilder) WithAlignIntervalsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.AlignIntervals.CreateOptionalPropertyBuilder())
	var err error
	b.AlignIntervals, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithIntervalOffset(intervalOffset OptionalProperty) DeviceBuilder {
	b.IntervalOffset = intervalOffset
	return b
}

func (b *_DeviceBuilder) WithIntervalOffsetBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.IntervalOffset.CreateOptionalPropertyBuilder())
	var err error
	b.IntervalOffset, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithSerialNumber(serialNumber OptionalProperty) DeviceBuilder {
	b.SerialNumber = serialNumber
	return b
}

func (b *_DeviceBuilder) WithSerialNumberBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.SerialNumber.CreateOptionalPropertyBuilder())
	var err error
	b.SerialNumber, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithPropertyList(propertyList ReadableProperty) DeviceBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_DeviceBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithStatusFlags(statusFlags OptionalProperty) DeviceBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_DeviceBuilder) WithStatusFlagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.StatusFlags.CreateOptionalPropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithEventState(eventState OptionalProperty) DeviceBuilder {
	b.EventState = eventState
	return b
}

func (b *_DeviceBuilder) WithEventStateBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.EventState.CreateOptionalPropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithReliability(reliability OptionalProperty) DeviceBuilder {
	b.Reliability = reliability
	return b
}

func (b *_DeviceBuilder) WithReliabilityBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.Reliability.CreateOptionalPropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) DeviceBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_DeviceBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithNotificationClass(notificationClass OptionalProperty) DeviceBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_DeviceBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithEventEnable(eventEnable OptionalProperty) DeviceBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_DeviceBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) DeviceBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_DeviceBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithNotifyType(notifyType OptionalProperty) DeviceBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_DeviceBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) DeviceBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_DeviceBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) DeviceBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_DeviceBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) DeviceBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_DeviceBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) DeviceBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_DeviceBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithActiveCOVMultipleSubscriptions(activeCOVMultipleSubscriptions OptionalProperty) DeviceBuilder {
	b.ActiveCOVMultipleSubscriptions = activeCOVMultipleSubscriptions
	return b
}

func (b *_DeviceBuilder) WithActiveCOVMultipleSubscriptionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ActiveCOVMultipleSubscriptions.CreateOptionalPropertyBuilder())
	var err error
	b.ActiveCOVMultipleSubscriptions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithTags(tags OptionalProperty) DeviceBuilder {
	b.Tags = tags
	return b
}

func (b *_DeviceBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithProfileLocation(profileLocation OptionalProperty) DeviceBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_DeviceBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithDeployedProfileLocation(deployedProfileLocation OptionalProperty) DeviceBuilder {
	b.DeployedProfileLocation = deployedProfileLocation
	return b
}

func (b *_DeviceBuilder) WithDeployedProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.DeployedProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.DeployedProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) WithProfileName(profileName OptionalProperty) DeviceBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_DeviceBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) DeviceBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_DeviceBuilder) Build() (Device, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.SystemStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'systemStatus' not set"))
	}
	if b.VendorName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'vendorName' not set"))
	}
	if b.VendorIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'vendorIdentifier' not set"))
	}
	if b.ModelName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'modelName' not set"))
	}
	if b.FirmwareRevision == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'firmwareRevision' not set"))
	}
	if b.ApplicationSoftwareVersion == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'applicationSoftwareVersion' not set"))
	}
	if b.Location == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'location' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.ProtocolVersion == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'protocolVersion' not set"))
	}
	if b.ProtocolRevision == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'protocolRevision' not set"))
	}
	if b.ProtocolServicesSupported == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'protocolServicesSupported' not set"))
	}
	if b.ProtocolObjectTypesSupported == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'protocolObjectTypesSupported' not set"))
	}
	if b.ObjectList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectList' not set"))
	}
	if b.StructuredObjectList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'structuredObjectList' not set"))
	}
	if b.MaxAPDULengthAccepted == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxAPDULengthAccepted' not set"))
	}
	if b.SegmentationSupported == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'segmentationSupported' not set"))
	}
	if b.MaxSegmentsAccepted == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxSegmentsAccepted' not set"))
	}
	if b.VTClassesSupported == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'vTClassesSupported' not set"))
	}
	if b.ActiveVTSessions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'activeVTSessions' not set"))
	}
	if b.LocalTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'localTime' not set"))
	}
	if b.LocalDate == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'localDate' not set"))
	}
	if b.UTCOffset == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'uTCOffset' not set"))
	}
	if b.DaylightSavingsStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'daylightSavingsStatus' not set"))
	}
	if b.APDUSegmentTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'aPDUSegmentTimeout' not set"))
	}
	if b.APDUTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'aPDUTimeout' not set"))
	}
	if b.NumberOfAPDURetries == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'numberOfAPDURetries' not set"))
	}
	if b.TimeSynchronizationRecipients == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeSynchronizationRecipients' not set"))
	}
	if b.MaxMaster == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxMaster' not set"))
	}
	if b.MaxInfoFrames == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxInfoFrames' not set"))
	}
	if b.DeviceAddressBinding == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deviceAddressBinding' not set"))
	}
	if b.DatabaseRevision == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'databaseRevision' not set"))
	}
	if b.ConfigurationFiles == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'configurationFiles' not set"))
	}
	if b.LastRestoreTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastRestoreTime' not set"))
	}
	if b.BackupFailureTimeout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'backupFailureTimeout' not set"))
	}
	if b.BackupPreparationTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'backupPreparationTime' not set"))
	}
	if b.RestorePreparationTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'restorePreparationTime' not set"))
	}
	if b.RestoreCompletionTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'restoreCompletionTime' not set"))
	}
	if b.BackupAndRestoreState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'backupAndRestoreState' not set"))
	}
	if b.ActiveCOVSubscriptions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'activeCOVSubscriptions' not set"))
	}
	if b.LastRestartReason == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lastRestartReason' not set"))
	}
	if b.TimeOfDeviceRestart == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeOfDeviceRestart' not set"))
	}
	if b.RestartNotificationRecipients == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'restartNotificationRecipients' not set"))
	}
	if b.UTCTimeSynchronizationRecipients == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'uTCTimeSynchronizationRecipients' not set"))
	}
	if b.TimeSynchronizationInterval == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'timeSynchronizationInterval' not set"))
	}
	if b.AlignIntervals == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'alignIntervals' not set"))
	}
	if b.IntervalOffset == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'intervalOffset' not set"))
	}
	if b.SerialNumber == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'serialNumber' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.ActiveCOVMultipleSubscriptions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'activeCOVMultipleSubscriptions' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.DeployedProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'deployedProfileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._Device.deepCopy(), nil
}

func (b *_DeviceBuilder) MustBuild() Device {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_DeviceBuilder) DeepCopy() any {
	_copy := b.CreateDeviceBuilder().(*_DeviceBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateDeviceBuilder creates a DeviceBuilder
func (b *_Device) CreateDeviceBuilder() DeviceBuilder {
	if b == nil {
		return NewDeviceBuilder()
	}
	return &_DeviceBuilder{_Device: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_Device) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_Device) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_Device) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_Device) GetSystemStatus() ReadableProperty {
	return m.SystemStatus
}

func (m *_Device) GetVendorName() ReadableProperty {
	return m.VendorName
}

func (m *_Device) GetVendorIdentifier() ReadableProperty {
	return m.VendorIdentifier
}

func (m *_Device) GetModelName() ReadableProperty {
	return m.ModelName
}

func (m *_Device) GetFirmwareRevision() ReadableProperty {
	return m.FirmwareRevision
}

func (m *_Device) GetApplicationSoftwareVersion() ReadableProperty {
	return m.ApplicationSoftwareVersion
}

func (m *_Device) GetLocation() OptionalProperty {
	return m.Location
}

func (m *_Device) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_Device) GetProtocolVersion() ReadableProperty {
	return m.ProtocolVersion
}

func (m *_Device) GetProtocolRevision() ReadableProperty {
	return m.ProtocolRevision
}

func (m *_Device) GetProtocolServicesSupported() ReadableProperty {
	return m.ProtocolServicesSupported
}

func (m *_Device) GetProtocolObjectTypesSupported() ReadableProperty {
	return m.ProtocolObjectTypesSupported
}

func (m *_Device) GetObjectList() ReadableProperty {
	return m.ObjectList
}

func (m *_Device) GetStructuredObjectList() OptionalProperty {
	return m.StructuredObjectList
}

func (m *_Device) GetMaxAPDULengthAccepted() ReadableProperty {
	return m.MaxAPDULengthAccepted
}

func (m *_Device) GetSegmentationSupported() ReadableProperty {
	return m.SegmentationSupported
}

func (m *_Device) GetMaxSegmentsAccepted() OptionalProperty {
	return m.MaxSegmentsAccepted
}

func (m *_Device) GetVTClassesSupported() OptionalProperty {
	return m.VTClassesSupported
}

func (m *_Device) GetActiveVTSessions() OptionalProperty {
	return m.ActiveVTSessions
}

func (m *_Device) GetLocalTime() OptionalProperty {
	return m.LocalTime
}

func (m *_Device) GetLocalDate() OptionalProperty {
	return m.LocalDate
}

func (m *_Device) GetUTCOffset() OptionalProperty {
	return m.UTCOffset
}

func (m *_Device) GetDaylightSavingsStatus() OptionalProperty {
	return m.DaylightSavingsStatus
}

func (m *_Device) GetAPDUSegmentTimeout() OptionalProperty {
	return m.APDUSegmentTimeout
}

func (m *_Device) GetAPDUTimeout() ReadableProperty {
	return m.APDUTimeout
}

func (m *_Device) GetNumberOfAPDURetries() ReadableProperty {
	return m.NumberOfAPDURetries
}

func (m *_Device) GetTimeSynchronizationRecipients() OptionalProperty {
	return m.TimeSynchronizationRecipients
}

func (m *_Device) GetMaxMaster() OptionalProperty {
	return m.MaxMaster
}

func (m *_Device) GetMaxInfoFrames() OptionalProperty {
	return m.MaxInfoFrames
}

func (m *_Device) GetDeviceAddressBinding() ReadableProperty {
	return m.DeviceAddressBinding
}

func (m *_Device) GetDatabaseRevision() ReadableProperty {
	return m.DatabaseRevision
}

func (m *_Device) GetConfigurationFiles() OptionalProperty {
	return m.ConfigurationFiles
}

func (m *_Device) GetLastRestoreTime() OptionalProperty {
	return m.LastRestoreTime
}

func (m *_Device) GetBackupFailureTimeout() OptionalProperty {
	return m.BackupFailureTimeout
}

func (m *_Device) GetBackupPreparationTime() OptionalProperty {
	return m.BackupPreparationTime
}

func (m *_Device) GetRestorePreparationTime() OptionalProperty {
	return m.RestorePreparationTime
}

func (m *_Device) GetRestoreCompletionTime() OptionalProperty {
	return m.RestoreCompletionTime
}

func (m *_Device) GetBackupAndRestoreState() OptionalProperty {
	return m.BackupAndRestoreState
}

func (m *_Device) GetActiveCOVSubscriptions() OptionalProperty {
	return m.ActiveCOVSubscriptions
}

func (m *_Device) GetLastRestartReason() OptionalProperty {
	return m.LastRestartReason
}

func (m *_Device) GetTimeOfDeviceRestart() OptionalProperty {
	return m.TimeOfDeviceRestart
}

func (m *_Device) GetRestartNotificationRecipients() OptionalProperty {
	return m.RestartNotificationRecipients
}

func (m *_Device) GetUTCTimeSynchronizationRecipients() OptionalProperty {
	return m.UTCTimeSynchronizationRecipients
}

func (m *_Device) GetTimeSynchronizationInterval() OptionalProperty {
	return m.TimeSynchronizationInterval
}

func (m *_Device) GetAlignIntervals() OptionalProperty {
	return m.AlignIntervals
}

func (m *_Device) GetIntervalOffset() OptionalProperty {
	return m.IntervalOffset
}

func (m *_Device) GetSerialNumber() OptionalProperty {
	return m.SerialNumber
}

func (m *_Device) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_Device) GetStatusFlags() OptionalProperty {
	return m.StatusFlags
}

func (m *_Device) GetEventState() OptionalProperty {
	return m.EventState
}

func (m *_Device) GetReliability() OptionalProperty {
	return m.Reliability
}

func (m *_Device) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_Device) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_Device) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_Device) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_Device) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_Device) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_Device) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_Device) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_Device) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_Device) GetActiveCOVMultipleSubscriptions() OptionalProperty {
	return m.ActiveCOVMultipleSubscriptions
}

func (m *_Device) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_Device) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_Device) GetDeployedProfileLocation() OptionalProperty {
	return m.DeployedProfileLocation
}

func (m *_Device) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastDevice(structType any) Device {
	if casted, ok := structType.(Device); ok {
		return casted
	}
	if casted, ok := structType.(*Device); ok {
		return *casted
	}
	return nil
}

func (m *_Device) GetTypeName() string {
	return "Device"
}

func (m *_Device) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (systemStatus)
	lengthInBits += m.SystemStatus.GetLengthInBits(ctx)

	// Simple field (vendorName)
	lengthInBits += m.VendorName.GetLengthInBits(ctx)

	// Simple field (vendorIdentifier)
	lengthInBits += m.VendorIdentifier.GetLengthInBits(ctx)

	// Simple field (modelName)
	lengthInBits += m.ModelName.GetLengthInBits(ctx)

	// Simple field (firmwareRevision)
	lengthInBits += m.FirmwareRevision.GetLengthInBits(ctx)

	// Simple field (applicationSoftwareVersion)
	lengthInBits += m.ApplicationSoftwareVersion.GetLengthInBits(ctx)

	// Simple field (location)
	lengthInBits += m.Location.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (protocolVersion)
	lengthInBits += m.ProtocolVersion.GetLengthInBits(ctx)

	// Simple field (protocolRevision)
	lengthInBits += m.ProtocolRevision.GetLengthInBits(ctx)

	// Simple field (protocolServicesSupported)
	lengthInBits += m.ProtocolServicesSupported.GetLengthInBits(ctx)

	// Simple field (protocolObjectTypesSupported)
	lengthInBits += m.ProtocolObjectTypesSupported.GetLengthInBits(ctx)

	// Simple field (objectList)
	lengthInBits += m.ObjectList.GetLengthInBits(ctx)

	// Simple field (structuredObjectList)
	lengthInBits += m.StructuredObjectList.GetLengthInBits(ctx)

	// Simple field (maxAPDULengthAccepted)
	lengthInBits += m.MaxAPDULengthAccepted.GetLengthInBits(ctx)

	// Simple field (segmentationSupported)
	lengthInBits += m.SegmentationSupported.GetLengthInBits(ctx)

	// Simple field (maxSegmentsAccepted)
	lengthInBits += m.MaxSegmentsAccepted.GetLengthInBits(ctx)

	// Simple field (vTClassesSupported)
	lengthInBits += m.VTClassesSupported.GetLengthInBits(ctx)

	// Simple field (activeVTSessions)
	lengthInBits += m.ActiveVTSessions.GetLengthInBits(ctx)

	// Simple field (localTime)
	lengthInBits += m.LocalTime.GetLengthInBits(ctx)

	// Simple field (localDate)
	lengthInBits += m.LocalDate.GetLengthInBits(ctx)

	// Simple field (uTCOffset)
	lengthInBits += m.UTCOffset.GetLengthInBits(ctx)

	// Simple field (daylightSavingsStatus)
	lengthInBits += m.DaylightSavingsStatus.GetLengthInBits(ctx)

	// Simple field (aPDUSegmentTimeout)
	lengthInBits += m.APDUSegmentTimeout.GetLengthInBits(ctx)

	// Simple field (aPDUTimeout)
	lengthInBits += m.APDUTimeout.GetLengthInBits(ctx)

	// Simple field (numberOfAPDURetries)
	lengthInBits += m.NumberOfAPDURetries.GetLengthInBits(ctx)

	// Simple field (timeSynchronizationRecipients)
	lengthInBits += m.TimeSynchronizationRecipients.GetLengthInBits(ctx)

	// Simple field (maxMaster)
	lengthInBits += m.MaxMaster.GetLengthInBits(ctx)

	// Simple field (maxInfoFrames)
	lengthInBits += m.MaxInfoFrames.GetLengthInBits(ctx)

	// Simple field (deviceAddressBinding)
	lengthInBits += m.DeviceAddressBinding.GetLengthInBits(ctx)

	// Simple field (databaseRevision)
	lengthInBits += m.DatabaseRevision.GetLengthInBits(ctx)

	// Simple field (configurationFiles)
	lengthInBits += m.ConfigurationFiles.GetLengthInBits(ctx)

	// Simple field (lastRestoreTime)
	lengthInBits += m.LastRestoreTime.GetLengthInBits(ctx)

	// Simple field (backupFailureTimeout)
	lengthInBits += m.BackupFailureTimeout.GetLengthInBits(ctx)

	// Simple field (backupPreparationTime)
	lengthInBits += m.BackupPreparationTime.GetLengthInBits(ctx)

	// Simple field (restorePreparationTime)
	lengthInBits += m.RestorePreparationTime.GetLengthInBits(ctx)

	// Simple field (restoreCompletionTime)
	lengthInBits += m.RestoreCompletionTime.GetLengthInBits(ctx)

	// Simple field (backupAndRestoreState)
	lengthInBits += m.BackupAndRestoreState.GetLengthInBits(ctx)

	// Simple field (activeCOVSubscriptions)
	lengthInBits += m.ActiveCOVSubscriptions.GetLengthInBits(ctx)

	// Simple field (lastRestartReason)
	lengthInBits += m.LastRestartReason.GetLengthInBits(ctx)

	// Simple field (timeOfDeviceRestart)
	lengthInBits += m.TimeOfDeviceRestart.GetLengthInBits(ctx)

	// Simple field (restartNotificationRecipients)
	lengthInBits += m.RestartNotificationRecipients.GetLengthInBits(ctx)

	// Simple field (uTCTimeSynchronizationRecipients)
	lengthInBits += m.UTCTimeSynchronizationRecipients.GetLengthInBits(ctx)

	// Simple field (timeSynchronizationInterval)
	lengthInBits += m.TimeSynchronizationInterval.GetLengthInBits(ctx)

	// Simple field (alignIntervals)
	lengthInBits += m.AlignIntervals.GetLengthInBits(ctx)

	// Simple field (intervalOffset)
	lengthInBits += m.IntervalOffset.GetLengthInBits(ctx)

	// Simple field (serialNumber)
	lengthInBits += m.SerialNumber.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (activeCOVMultipleSubscriptions)
	lengthInBits += m.ActiveCOVMultipleSubscriptions.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (deployedProfileLocation)
	lengthInBits += m.DeployedProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_Device) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func DeviceParse(ctx context.Context, theBytes []byte) (Device, error) {
	return DeviceParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func DeviceParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (Device, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (Device, error) {
		return DeviceParseWithBuffer(ctx, readBuffer)
	}
}

func DeviceParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (Device, error) {
	v, err := (&_Device{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_Device) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__device Device, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Device"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Device")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	systemStatus, err := ReadSimpleField[ReadableProperty](ctx, "systemStatus", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDeviceStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'systemStatus' field"))
	}
	m.SystemStatus = systemStatus

	vendorName, err := ReadSimpleField[ReadableProperty](ctx, "vendorName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'vendorName' field"))
	}
	m.VendorName = vendorName

	vendorIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "vendorIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'vendorIdentifier' field"))
	}
	m.VendorIdentifier = vendorIdentifier

	modelName, err := ReadSimpleField[ReadableProperty](ctx, "modelName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'modelName' field"))
	}
	m.ModelName = modelName

	firmwareRevision, err := ReadSimpleField[ReadableProperty](ctx, "firmwareRevision", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'firmwareRevision' field"))
	}
	m.FirmwareRevision = firmwareRevision

	applicationSoftwareVersion, err := ReadSimpleField[ReadableProperty](ctx, "applicationSoftwareVersion", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'applicationSoftwareVersion' field"))
	}
	m.ApplicationSoftwareVersion = applicationSoftwareVersion

	location, err := ReadSimpleField[OptionalProperty](ctx, "location", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'location' field"))
	}
	m.Location = location

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	protocolVersion, err := ReadSimpleField[ReadableProperty](ctx, "protocolVersion", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'protocolVersion' field"))
	}
	m.ProtocolVersion = protocolVersion

	protocolRevision, err := ReadSimpleField[ReadableProperty](ctx, "protocolRevision", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'protocolRevision' field"))
	}
	m.ProtocolRevision = protocolRevision

	protocolServicesSupported, err := ReadSimpleField[ReadableProperty](ctx, "protocolServicesSupported", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetServicesSupported")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'protocolServicesSupported' field"))
	}
	m.ProtocolServicesSupported = protocolServicesSupported

	protocolObjectTypesSupported, err := ReadSimpleField[ReadableProperty](ctx, "protocolObjectTypesSupported", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectTypesSupported")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'protocolObjectTypesSupported' field"))
	}
	m.ProtocolObjectTypesSupported = protocolObjectTypesSupported

	objectList, err := ReadSimpleField[ReadableProperty](ctx, "objectList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectList' field"))
	}
	m.ObjectList = objectList

	structuredObjectList, err := ReadSimpleField[OptionalProperty](ctx, "structuredObjectList", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'structuredObjectList' field"))
	}
	m.StructuredObjectList = structuredObjectList

	maxAPDULengthAccepted, err := ReadSimpleField[ReadableProperty](ctx, "maxAPDULengthAccepted", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxAPDULengthAccepted' field"))
	}
	m.MaxAPDULengthAccepted = maxAPDULengthAccepted

	segmentationSupported, err := ReadSimpleField[ReadableProperty](ctx, "segmentationSupported", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetSegmentation")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'segmentationSupported' field"))
	}
	m.SegmentationSupported = segmentationSupported

	maxSegmentsAccepted, err := ReadSimpleField[OptionalProperty](ctx, "maxSegmentsAccepted", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxSegmentsAccepted' field"))
	}
	m.MaxSegmentsAccepted = maxSegmentsAccepted

	vTClassesSupported, err := ReadSimpleField[OptionalProperty](ctx, "vTClassesSupported", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetVTClass")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'vTClassesSupported' field"))
	}
	m.VTClassesSupported = vTClassesSupported

	activeVTSessions, err := ReadSimpleField[OptionalProperty](ctx, "activeVTSessions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetVTSession")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activeVTSessions' field"))
	}
	m.ActiveVTSessions = activeVTSessions

	localTime, err := ReadSimpleField[OptionalProperty](ctx, "localTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Time")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'localTime' field"))
	}
	m.LocalTime = localTime

	localDate, err := ReadSimpleField[OptionalProperty](ctx, "localDate", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Date")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'localDate' field"))
	}
	m.LocalDate = localDate

	uTCOffset, err := ReadSimpleField[OptionalProperty](ctx, "uTCOffset", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("INTEGER")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'uTCOffset' field"))
	}
	m.UTCOffset = uTCOffset

	daylightSavingsStatus, err := ReadSimpleField[OptionalProperty](ctx, "daylightSavingsStatus", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'daylightSavingsStatus' field"))
	}
	m.DaylightSavingsStatus = daylightSavingsStatus

	aPDUSegmentTimeout, err := ReadSimpleField[OptionalProperty](ctx, "aPDUSegmentTimeout", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'aPDUSegmentTimeout' field"))
	}
	m.APDUSegmentTimeout = aPDUSegmentTimeout

	aPDUTimeout, err := ReadSimpleField[ReadableProperty](ctx, "aPDUTimeout", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'aPDUTimeout' field"))
	}
	m.APDUTimeout = aPDUTimeout

	numberOfAPDURetries, err := ReadSimpleField[ReadableProperty](ctx, "numberOfAPDURetries", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'numberOfAPDURetries' field"))
	}
	m.NumberOfAPDURetries = numberOfAPDURetries

	timeSynchronizationRecipients, err := ReadSimpleField[OptionalProperty](ctx, "timeSynchronizationRecipients", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetRecipient")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeSynchronizationRecipients' field"))
	}
	m.TimeSynchronizationRecipients = timeSynchronizationRecipients

	maxMaster, err := ReadSimpleField[OptionalProperty](ctx, "maxMaster", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned(0..127)")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxMaster' field"))
	}
	m.MaxMaster = maxMaster

	maxInfoFrames, err := ReadSimpleField[OptionalProperty](ctx, "maxInfoFrames", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxInfoFrames' field"))
	}
	m.MaxInfoFrames = maxInfoFrames

	deviceAddressBinding, err := ReadSimpleField[ReadableProperty](ctx, "deviceAddressBinding", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAddressBinding")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deviceAddressBinding' field"))
	}
	m.DeviceAddressBinding = deviceAddressBinding

	databaseRevision, err := ReadSimpleField[ReadableProperty](ctx, "databaseRevision", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'databaseRevision' field"))
	}
	m.DatabaseRevision = databaseRevision

	configurationFiles, err := ReadSimpleField[OptionalProperty](ctx, "configurationFiles", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'configurationFiles' field"))
	}
	m.ConfigurationFiles = configurationFiles

	lastRestoreTime, err := ReadSimpleField[OptionalProperty](ctx, "lastRestoreTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastRestoreTime' field"))
	}
	m.LastRestoreTime = lastRestoreTime

	backupFailureTimeout, err := ReadSimpleField[OptionalProperty](ctx, "backupFailureTimeout", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'backupFailureTimeout' field"))
	}
	m.BackupFailureTimeout = backupFailureTimeout

	backupPreparationTime, err := ReadSimpleField[OptionalProperty](ctx, "backupPreparationTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'backupPreparationTime' field"))
	}
	m.BackupPreparationTime = backupPreparationTime

	restorePreparationTime, err := ReadSimpleField[OptionalProperty](ctx, "restorePreparationTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'restorePreparationTime' field"))
	}
	m.RestorePreparationTime = restorePreparationTime

	restoreCompletionTime, err := ReadSimpleField[OptionalProperty](ctx, "restoreCompletionTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned16")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'restoreCompletionTime' field"))
	}
	m.RestoreCompletionTime = restoreCompletionTime

	backupAndRestoreState, err := ReadSimpleField[OptionalProperty](ctx, "backupAndRestoreState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetBackupState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'backupAndRestoreState' field"))
	}
	m.BackupAndRestoreState = backupAndRestoreState

	activeCOVSubscriptions, err := ReadSimpleField[OptionalProperty](ctx, "activeCOVSubscriptions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetCOVSubscription")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activeCOVSubscriptions' field"))
	}
	m.ActiveCOVSubscriptions = activeCOVSubscriptions

	lastRestartReason, err := ReadSimpleField[OptionalProperty](ctx, "lastRestartReason", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetRestartReason")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lastRestartReason' field"))
	}
	m.LastRestartReason = lastRestartReason

	timeOfDeviceRestart, err := ReadSimpleField[OptionalProperty](ctx, "timeOfDeviceRestart", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeOfDeviceRestart' field"))
	}
	m.TimeOfDeviceRestart = timeOfDeviceRestart

	restartNotificationRecipients, err := ReadSimpleField[OptionalProperty](ctx, "restartNotificationRecipients", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetRecipient")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'restartNotificationRecipients' field"))
	}
	m.RestartNotificationRecipients = restartNotificationRecipients

	uTCTimeSynchronizationRecipients, err := ReadSimpleField[OptionalProperty](ctx, "uTCTimeSynchronizationRecipients", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetRecipient")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'uTCTimeSynchronizationRecipients' field"))
	}
	m.UTCTimeSynchronizationRecipients = uTCTimeSynchronizationRecipients

	timeSynchronizationInterval, err := ReadSimpleField[OptionalProperty](ctx, "timeSynchronizationInterval", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeSynchronizationInterval' field"))
	}
	m.TimeSynchronizationInterval = timeSynchronizationInterval

	alignIntervals, err := ReadSimpleField[OptionalProperty](ctx, "alignIntervals", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'alignIntervals' field"))
	}
	m.AlignIntervals = alignIntervals

	intervalOffset, err := ReadSimpleField[OptionalProperty](ctx, "intervalOffset", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'intervalOffset' field"))
	}
	m.IntervalOffset = intervalOffset

	serialNumber, err := ReadSimpleField[OptionalProperty](ctx, "serialNumber", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'serialNumber' field"))
	}
	m.SerialNumber = serialNumber

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	statusFlags, err := ReadSimpleField[OptionalProperty](ctx, "statusFlags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[OptionalProperty](ctx, "eventState", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[OptionalProperty](ctx, "reliability", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	activeCOVMultipleSubscriptions, err := ReadSimpleField[OptionalProperty](ctx, "activeCOVMultipleSubscriptions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetCOVMultipleSubscription")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activeCOVMultipleSubscriptions' field"))
	}
	m.ActiveCOVMultipleSubscriptions = activeCOVMultipleSubscriptions

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	deployedProfileLocation, err := ReadSimpleField[OptionalProperty](ctx, "deployedProfileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'deployedProfileLocation' field"))
	}
	m.DeployedProfileLocation = deployedProfileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("Device"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Device")
	}

	return m, nil
}

func (m *_Device) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_Device) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("Device"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Device")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "systemStatus", m.GetSystemStatus(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'systemStatus' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "vendorName", m.GetVendorName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'vendorName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "vendorIdentifier", m.GetVendorIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'vendorIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "modelName", m.GetModelName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'modelName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "firmwareRevision", m.GetFirmwareRevision(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'firmwareRevision' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "applicationSoftwareVersion", m.GetApplicationSoftwareVersion(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'applicationSoftwareVersion' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "location", m.GetLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'location' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "protocolVersion", m.GetProtocolVersion(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'protocolVersion' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "protocolRevision", m.GetProtocolRevision(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'protocolRevision' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "protocolServicesSupported", m.GetProtocolServicesSupported(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'protocolServicesSupported' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "protocolObjectTypesSupported", m.GetProtocolObjectTypesSupported(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'protocolObjectTypesSupported' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectList", m.GetObjectList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "structuredObjectList", m.GetStructuredObjectList(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'structuredObjectList' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "maxAPDULengthAccepted", m.GetMaxAPDULengthAccepted(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxAPDULengthAccepted' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "segmentationSupported", m.GetSegmentationSupported(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'segmentationSupported' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxSegmentsAccepted", m.GetMaxSegmentsAccepted(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxSegmentsAccepted' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "vTClassesSupported", m.GetVTClassesSupported(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'vTClassesSupported' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "activeVTSessions", m.GetActiveVTSessions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activeVTSessions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "localTime", m.GetLocalTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'localTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "localDate", m.GetLocalDate(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'localDate' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "uTCOffset", m.GetUTCOffset(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'uTCOffset' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "daylightSavingsStatus", m.GetDaylightSavingsStatus(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'daylightSavingsStatus' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "aPDUSegmentTimeout", m.GetAPDUSegmentTimeout(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'aPDUSegmentTimeout' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "aPDUTimeout", m.GetAPDUTimeout(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'aPDUTimeout' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "numberOfAPDURetries", m.GetNumberOfAPDURetries(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'numberOfAPDURetries' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeSynchronizationRecipients", m.GetTimeSynchronizationRecipients(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeSynchronizationRecipients' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxMaster", m.GetMaxMaster(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxMaster' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxInfoFrames", m.GetMaxInfoFrames(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxInfoFrames' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "deviceAddressBinding", m.GetDeviceAddressBinding(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deviceAddressBinding' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "databaseRevision", m.GetDatabaseRevision(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'databaseRevision' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "configurationFiles", m.GetConfigurationFiles(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'configurationFiles' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastRestoreTime", m.GetLastRestoreTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastRestoreTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "backupFailureTimeout", m.GetBackupFailureTimeout(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'backupFailureTimeout' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "backupPreparationTime", m.GetBackupPreparationTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'backupPreparationTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "restorePreparationTime", m.GetRestorePreparationTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'restorePreparationTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "restoreCompletionTime", m.GetRestoreCompletionTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'restoreCompletionTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "backupAndRestoreState", m.GetBackupAndRestoreState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'backupAndRestoreState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "activeCOVSubscriptions", m.GetActiveCOVSubscriptions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activeCOVSubscriptions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lastRestartReason", m.GetLastRestartReason(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lastRestartReason' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeOfDeviceRestart", m.GetTimeOfDeviceRestart(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeOfDeviceRestart' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "restartNotificationRecipients", m.GetRestartNotificationRecipients(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'restartNotificationRecipients' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "uTCTimeSynchronizationRecipients", m.GetUTCTimeSynchronizationRecipients(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'uTCTimeSynchronizationRecipients' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "timeSynchronizationInterval", m.GetTimeSynchronizationInterval(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'timeSynchronizationInterval' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "alignIntervals", m.GetAlignIntervals(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'alignIntervals' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "intervalOffset", m.GetIntervalOffset(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'intervalOffset' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "serialNumber", m.GetSerialNumber(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'serialNumber' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventState", m.GetEventState(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliability", m.GetReliability(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "activeCOVMultipleSubscriptions", m.GetActiveCOVMultipleSubscriptions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activeCOVMultipleSubscriptions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "deployedProfileLocation", m.GetDeployedProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'deployedProfileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("Device"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Device")
	}
	return nil
}

func (m *_Device) IsDevice() {}

func (m *_Device) DeepCopy() any {
	return m.deepCopy()
}

func (m *_Device) deepCopy() *_Device {
	if m == nil {
		return nil
	}
	_DeviceCopy := &_Device{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.SystemStatus.DeepCopy().(ReadableProperty),
		m.VendorName.DeepCopy().(ReadableProperty),
		m.VendorIdentifier.DeepCopy().(ReadableProperty),
		m.ModelName.DeepCopy().(ReadableProperty),
		m.FirmwareRevision.DeepCopy().(ReadableProperty),
		m.ApplicationSoftwareVersion.DeepCopy().(ReadableProperty),
		m.Location.DeepCopy().(OptionalProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.ProtocolVersion.DeepCopy().(ReadableProperty),
		m.ProtocolRevision.DeepCopy().(ReadableProperty),
		m.ProtocolServicesSupported.DeepCopy().(ReadableProperty),
		m.ProtocolObjectTypesSupported.DeepCopy().(ReadableProperty),
		m.ObjectList.DeepCopy().(ReadableProperty),
		m.StructuredObjectList.DeepCopy().(OptionalProperty),
		m.MaxAPDULengthAccepted.DeepCopy().(ReadableProperty),
		m.SegmentationSupported.DeepCopy().(ReadableProperty),
		m.MaxSegmentsAccepted.DeepCopy().(OptionalProperty),
		m.VTClassesSupported.DeepCopy().(OptionalProperty),
		m.ActiveVTSessions.DeepCopy().(OptionalProperty),
		m.LocalTime.DeepCopy().(OptionalProperty),
		m.LocalDate.DeepCopy().(OptionalProperty),
		m.UTCOffset.DeepCopy().(OptionalProperty),
		m.DaylightSavingsStatus.DeepCopy().(OptionalProperty),
		m.APDUSegmentTimeout.DeepCopy().(OptionalProperty),
		m.APDUTimeout.DeepCopy().(ReadableProperty),
		m.NumberOfAPDURetries.DeepCopy().(ReadableProperty),
		m.TimeSynchronizationRecipients.DeepCopy().(OptionalProperty),
		m.MaxMaster.DeepCopy().(OptionalProperty),
		m.MaxInfoFrames.DeepCopy().(OptionalProperty),
		m.DeviceAddressBinding.DeepCopy().(ReadableProperty),
		m.DatabaseRevision.DeepCopy().(ReadableProperty),
		m.ConfigurationFiles.DeepCopy().(OptionalProperty),
		m.LastRestoreTime.DeepCopy().(OptionalProperty),
		m.BackupFailureTimeout.DeepCopy().(OptionalProperty),
		m.BackupPreparationTime.DeepCopy().(OptionalProperty),
		m.RestorePreparationTime.DeepCopy().(OptionalProperty),
		m.RestoreCompletionTime.DeepCopy().(OptionalProperty),
		m.BackupAndRestoreState.DeepCopy().(OptionalProperty),
		m.ActiveCOVSubscriptions.DeepCopy().(OptionalProperty),
		m.LastRestartReason.DeepCopy().(OptionalProperty),
		m.TimeOfDeviceRestart.DeepCopy().(OptionalProperty),
		m.RestartNotificationRecipients.DeepCopy().(OptionalProperty),
		m.UTCTimeSynchronizationRecipients.DeepCopy().(OptionalProperty),
		m.TimeSynchronizationInterval.DeepCopy().(OptionalProperty),
		m.AlignIntervals.DeepCopy().(OptionalProperty),
		m.IntervalOffset.DeepCopy().(OptionalProperty),
		m.SerialNumber.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.StatusFlags.DeepCopy().(OptionalProperty),
		m.EventState.DeepCopy().(OptionalProperty),
		m.Reliability.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.ActiveCOVMultipleSubscriptions.DeepCopy().(OptionalProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.DeployedProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _DeviceCopy
}

func (m *_Device) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
