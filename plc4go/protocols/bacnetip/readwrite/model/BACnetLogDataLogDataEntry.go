/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLogDataLogDataEntry is the corresponding interface of BACnetLogDataLogDataEntry
type BACnetLogDataLogDataEntry interface {
	BACnetLogDataLogDataEntryContract
	BACnetLogDataLogDataEntryRequirements
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	// IsBACnetLogDataLogDataEntry is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetLogDataLogDataEntry()
}

// BACnetLogDataLogDataEntryContract provides a set of functions which can be overwritten by a sub struct
type BACnetLogDataLogDataEntryContract interface {
	// GetPeekedTagHeader returns PeekedTagHeader (property field)
	GetPeekedTagHeader() BACnetTagHeader
	// GetPeekedTagNumber returns PeekedTagNumber (virtual field)
	GetPeekedTagNumber() uint8
	// IsBACnetLogDataLogDataEntry is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetLogDataLogDataEntry()
}

// BACnetLogDataLogDataEntryRequirements provides a set of functions which need to be implemented by a sub struct
type BACnetLogDataLogDataEntryRequirements interface {
	GetLengthInBits(ctx context.Context) uint16
	GetLengthInBytes(ctx context.Context) uint16
	// GetPeekedTagNumber returns PeekedTagNumber (discriminator field)
	GetPeekedTagNumber() uint8
}

// _BACnetLogDataLogDataEntry is the data-structure of this message
type _BACnetLogDataLogDataEntry struct {
	_SubType        BACnetLogDataLogDataEntry
	PeekedTagHeader BACnetTagHeader
}

var _ BACnetLogDataLogDataEntryContract = (*_BACnetLogDataLogDataEntry)(nil)

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BACnetLogDataLogDataEntry) GetPeekedTagHeader() BACnetTagHeader {
	return m.PeekedTagHeader
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (pm *_BACnetLogDataLogDataEntry) GetPeekedTagNumber() uint8 {
	m := pm._SubType
	ctx := context.Background()
	_ = ctx
	return uint8(m.GetPeekedTagHeader().GetActualTagNumber())
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetLogDataLogDataEntry factory function for _BACnetLogDataLogDataEntry
func NewBACnetLogDataLogDataEntry(peekedTagHeader BACnetTagHeader) *_BACnetLogDataLogDataEntry {
	if peekedTagHeader == nil {
		panic("peekedTagHeader of type BACnetTagHeader for BACnetLogDataLogDataEntry must not be nil")
	}
	return &_BACnetLogDataLogDataEntry{PeekedTagHeader: peekedTagHeader}
}

// Deprecated: use the interface for direct cast
func CastBACnetLogDataLogDataEntry(structType any) BACnetLogDataLogDataEntry {
	if casted, ok := structType.(BACnetLogDataLogDataEntry); ok {
		return casted
	}
	if casted, ok := structType.(*BACnetLogDataLogDataEntry); ok {
		return *casted
	}
	return nil
}

func (m *_BACnetLogDataLogDataEntry) GetTypeName() string {
	return "BACnetLogDataLogDataEntry"
}

func (m *_BACnetLogDataLogDataEntry) getLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *_BACnetLogDataLogDataEntry) GetLengthInBytes(ctx context.Context) uint16 {
	return m._SubType.GetLengthInBits(ctx) / 8
}

func BACnetLogDataLogDataEntryParse[T BACnetLogDataLogDataEntry](ctx context.Context, theBytes []byte) (T, error) {
	return BACnetLogDataLogDataEntryParseWithBuffer[T](ctx, utils.NewReadBufferByteBased(theBytes))
}

func BACnetLogDataLogDataEntryParseWithBufferProducer[T BACnetLogDataLogDataEntry]() func(ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
		v, err := BACnetLogDataLogDataEntryParseWithBuffer[T](ctx, readBuffer)
		if err != nil {
			var zero T
			return zero, err
		}
		return v, err
	}
}

func BACnetLogDataLogDataEntryParseWithBuffer[T BACnetLogDataLogDataEntry](ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
	v, err := (&_BACnetLogDataLogDataEntry{}).parse(ctx, readBuffer)
	if err != nil {
		var zero T
		return zero, err
	}
	return v.(T), err
}

func (m *_BACnetLogDataLogDataEntry) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__bACnetLogDataLogDataEntry BACnetLogDataLogDataEntry, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetLogDataLogDataEntry"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetLogDataLogDataEntry")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	peekedTagHeader, err := ReadPeekField[BACnetTagHeader](ctx, "peekedTagHeader", ReadComplex[BACnetTagHeader](BACnetTagHeaderParseWithBuffer, readBuffer), 0)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'peekedTagHeader' field"))
	}
	m.PeekedTagHeader = peekedTagHeader

	peekedTagNumber, err := ReadVirtualField[uint8](ctx, "peekedTagNumber", (*uint8)(nil), peekedTagHeader.GetActualTagNumber())
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'peekedTagNumber' field"))
	}
	_ = peekedTagNumber

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _child BACnetLogDataLogDataEntry
	switch {
	case peekedTagNumber == uint8(0): // BACnetLogDataLogDataEntryBooleanValue
		if _child, err = (&_BACnetLogDataLogDataEntryBooleanValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryBooleanValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(1): // BACnetLogDataLogDataEntryRealValue
		if _child, err = (&_BACnetLogDataLogDataEntryRealValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryRealValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(2): // BACnetLogDataLogDataEntryEnumeratedValue
		if _child, err = (&_BACnetLogDataLogDataEntryEnumeratedValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryEnumeratedValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(3): // BACnetLogDataLogDataEntryUnsignedValue
		if _child, err = (&_BACnetLogDataLogDataEntryUnsignedValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryUnsignedValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(4): // BACnetLogDataLogDataEntryIntegerValue
		if _child, err = (&_BACnetLogDataLogDataEntryIntegerValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryIntegerValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(5): // BACnetLogDataLogDataEntryBitStringValue
		if _child, err = (&_BACnetLogDataLogDataEntryBitStringValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryBitStringValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(6): // BACnetLogDataLogDataEntryNullValue
		if _child, err = (&_BACnetLogDataLogDataEntryNullValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryNullValue for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(7): // BACnetLogDataLogDataEntryFailure
		if _child, err = (&_BACnetLogDataLogDataEntryFailure{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryFailure for type-switch of BACnetLogDataLogDataEntry")
		}
	case peekedTagNumber == uint8(8): // BACnetLogDataLogDataEntryAnyValue
		if _child, err = (&_BACnetLogDataLogDataEntryAnyValue{}).parse(ctx, readBuffer, m); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetLogDataLogDataEntryAnyValue for type-switch of BACnetLogDataLogDataEntry")
		}
	default:
		return nil, errors.Errorf("Unmapped type for parameters [peekedTagNumber=%v]", peekedTagNumber)
	}

	if closeErr := readBuffer.CloseContext("BACnetLogDataLogDataEntry"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetLogDataLogDataEntry")
	}

	return _child, nil
}

func (pm *_BACnetLogDataLogDataEntry) serializeParent(ctx context.Context, writeBuffer utils.WriteBuffer, child BACnetLogDataLogDataEntry, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("BACnetLogDataLogDataEntry"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BACnetLogDataLogDataEntry")
	}
	// Virtual field
	peekedTagNumber := m.GetPeekedTagNumber()
	_ = peekedTagNumber
	if _peekedTagNumberErr := writeBuffer.WriteVirtual(ctx, "peekedTagNumber", m.GetPeekedTagNumber()); _peekedTagNumberErr != nil {
		return errors.Wrap(_peekedTagNumberErr, "Error serializing 'peekedTagNumber' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("BACnetLogDataLogDataEntry"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BACnetLogDataLogDataEntry")
	}
	return nil
}

func (m *_BACnetLogDataLogDataEntry) IsBACnetLogDataLogDataEntry() {}
