/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetConstructedData is the corresponding interface of BACnetConstructedData
type BACnetConstructedData interface {
	BACnetConstructedDataContract
	BACnetConstructedDataRequirements
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// IsBACnetConstructedData is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetConstructedData()
	// CreateBuilder creates a BACnetConstructedDataBuilder
	CreateBACnetConstructedDataBuilder() BACnetConstructedDataBuilder
}

// BACnetConstructedDataContract provides a set of functions which can be overwritten by a sub struct
type BACnetConstructedDataContract interface {
	// GetOpeningTag returns OpeningTag (property field)
	GetOpeningTag() BACnetOpeningTag
	// GetPeekedTagHeader returns PeekedTagHeader (property field)
	GetPeekedTagHeader() BACnetTagHeader
	// GetClosingTag returns ClosingTag (property field)
	GetClosingTag() BACnetClosingTag
	// GetPeekedTagNumber returns PeekedTagNumber (virtual field)
	GetPeekedTagNumber() uint8
	// GetTagNumber() returns a parser argument
	GetTagNumber() uint8
	// GetArrayIndexArgument() returns a parser argument
	GetArrayIndexArgument() BACnetTagPayloadUnsignedInteger
	// IsBACnetConstructedData is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsBACnetConstructedData()
	// CreateBuilder creates a BACnetConstructedDataBuilder
	CreateBACnetConstructedDataBuilder() BACnetConstructedDataBuilder
}

// BACnetConstructedDataRequirements provides a set of functions which need to be implemented by a sub struct
type BACnetConstructedDataRequirements interface {
	GetLengthInBits(ctx context.Context) uint16
	GetLengthInBytes(ctx context.Context) uint16
	// GetObjectTypeArgument returns ObjectTypeArgument (discriminator field)
	GetObjectTypeArgument() BACnetObjectType
	// GetPeekedTagNumber returns PeekedTagNumber (discriminator field)
	GetPeekedTagNumber() uint8
	// GetPropertyIdentifierArgument returns PropertyIdentifierArgument (discriminator field)
	GetPropertyIdentifierArgument() BACnetPropertyIdentifier
}

// _BACnetConstructedData is the data-structure of this message
type _BACnetConstructedData struct {
	_SubType        BACnetConstructedData
	OpeningTag      BACnetOpeningTag
	PeekedTagHeader BACnetTagHeader
	ClosingTag      BACnetClosingTag

	// Arguments.
	TagNumber          uint8
	ArrayIndexArgument BACnetTagPayloadUnsignedInteger
}

var _ BACnetConstructedDataContract = (*_BACnetConstructedData)(nil)

// NewBACnetConstructedData factory function for _BACnetConstructedData
func NewBACnetConstructedData(openingTag BACnetOpeningTag, peekedTagHeader BACnetTagHeader, closingTag BACnetClosingTag, tagNumber uint8, arrayIndexArgument BACnetTagPayloadUnsignedInteger) *_BACnetConstructedData {
	if openingTag == nil {
		panic("openingTag of type BACnetOpeningTag for BACnetConstructedData must not be nil")
	}
	if peekedTagHeader == nil {
		panic("peekedTagHeader of type BACnetTagHeader for BACnetConstructedData must not be nil")
	}
	if closingTag == nil {
		panic("closingTag of type BACnetClosingTag for BACnetConstructedData must not be nil")
	}
	return &_BACnetConstructedData{OpeningTag: openingTag, PeekedTagHeader: peekedTagHeader, ClosingTag: closingTag, TagNumber: tagNumber, ArrayIndexArgument: arrayIndexArgument}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// BACnetConstructedDataBuilder is a builder for BACnetConstructedData
type BACnetConstructedDataBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(openingTag BACnetOpeningTag, peekedTagHeader BACnetTagHeader, closingTag BACnetClosingTag) BACnetConstructedDataBuilder
	// WithOpeningTag adds OpeningTag (property field)
	WithOpeningTag(BACnetOpeningTag) BACnetConstructedDataBuilder
	// WithOpeningTagBuilder adds OpeningTag (property field) which is build by the builder
	WithOpeningTagBuilder(func(BACnetOpeningTagBuilder) BACnetOpeningTagBuilder) BACnetConstructedDataBuilder
	// WithPeekedTagHeader adds PeekedTagHeader (property field)
	WithPeekedTagHeader(BACnetTagHeader) BACnetConstructedDataBuilder
	// WithPeekedTagHeaderBuilder adds PeekedTagHeader (property field) which is build by the builder
	WithPeekedTagHeaderBuilder(func(BACnetTagHeaderBuilder) BACnetTagHeaderBuilder) BACnetConstructedDataBuilder
	// WithClosingTag adds ClosingTag (property field)
	WithClosingTag(BACnetClosingTag) BACnetConstructedDataBuilder
	// WithClosingTagBuilder adds ClosingTag (property field) which is build by the builder
	WithClosingTagBuilder(func(BACnetClosingTagBuilder) BACnetClosingTagBuilder) BACnetConstructedDataBuilder
	// AsBACnetConstructedDataAbsenteeLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAbsenteeLimit() interface {
		BACnetConstructedDataAbsenteeLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAcceptedModes converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAcceptedModes() interface {
		BACnetConstructedDataAcceptedModesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessAlarmEvents converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessAlarmEvents() interface {
		BACnetConstructedDataAccessAlarmEventsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessDoors converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessDoors() interface {
		BACnetConstructedDataAccessDoorsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessEvent converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessEvent() interface {
		BACnetConstructedDataAccessEventBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessEventAuthenticationFactor converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessEventAuthenticationFactor() interface {
		BACnetConstructedDataAccessEventAuthenticationFactorBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessEventCredential converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessEventCredential() interface {
		BACnetConstructedDataAccessEventCredentialBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessEventTag converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessEventTag() interface {
		BACnetConstructedDataAccessEventTagBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessEventTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessEventTime() interface {
		BACnetConstructedDataAccessEventTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessTransactionEvents converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessTransactionEvents() interface {
		BACnetConstructedDataAccessTransactionEventsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccompaniment converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccompaniment() interface {
		BACnetConstructedDataAccompanimentBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccompanimentTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccompanimentTime() interface {
		BACnetConstructedDataAccompanimentTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAckRequired converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAckRequired() interface {
		BACnetConstructedDataAckRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAckedTransitions converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAckedTransitions() interface {
		BACnetConstructedDataAckedTransitionsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoopAction converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoopAction() interface {
		BACnetConstructedDataLoopActionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCommandAction converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCommandAction() interface {
		BACnetConstructedDataCommandActionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAction converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAction() interface {
		BACnetConstructedDataActionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActionText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActionText() interface {
		BACnetConstructedDataActionTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActivationTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActivationTime() interface {
		BACnetConstructedDataActivationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActiveAuthenticationPolicy converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActiveAuthenticationPolicy() interface {
		BACnetConstructedDataActiveAuthenticationPolicyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActiveCOVMultipleSubscriptions converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActiveCOVMultipleSubscriptions() interface {
		BACnetConstructedDataActiveCOVMultipleSubscriptionsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActiveCOVSubscriptions converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActiveCOVSubscriptions() interface {
		BACnetConstructedDataActiveCOVSubscriptionsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActiveText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActiveText() interface {
		BACnetConstructedDataActiveTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActiveVTSessions converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActiveVTSessions() interface {
		BACnetConstructedDataActiveVTSessionsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataActualShedLevel converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataActualShedLevel() interface {
		BACnetConstructedDataActualShedLevelBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessZoneAdjustValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessZoneAdjustValue() interface {
		BACnetConstructedDataAccessZoneAdjustValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPulseConverterAdjustValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPulseConverterAdjustValue() interface {
		BACnetConstructedDataPulseConverterAdjustValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAdjustValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAdjustValue() interface {
		BACnetConstructedDataAdjustValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAlarmValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAlarmValue() interface {
		BACnetConstructedDataAlarmValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessDoorAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessDoorAlarmValues() interface {
		BACnetConstructedDataAccessDoorAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessZoneAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessZoneAlarmValues() interface {
		BACnetConstructedDataAccessZoneAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBitStringValueAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBitStringValueAlarmValues() interface {
		BACnetConstructedDataBitStringValueAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCharacterStringValueAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCharacterStringValueAlarmValues() interface {
		BACnetConstructedDataCharacterStringValueAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyPointAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyPointAlarmValues() interface {
		BACnetConstructedDataLifeSafetyPointAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyZoneAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyZoneAlarmValues() interface {
		BACnetConstructedDataLifeSafetyZoneAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateInputAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateInputAlarmValues() interface {
		BACnetConstructedDataMultiStateInputAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateValueAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateValueAlarmValues() interface {
		BACnetConstructedDataMultiStateValueAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerAlarmValues() interface {
		BACnetConstructedDataTimerAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAlarmValues() interface {
		BACnetConstructedDataAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAlignIntervals converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAlignIntervals() interface {
		BACnetConstructedDataAlignIntervalsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessCredentialAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessCredentialAll() interface {
		BACnetConstructedDataAccessCredentialAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessDoorAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessDoorAll() interface {
		BACnetConstructedDataAccessDoorAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessPointAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessPointAll() interface {
		BACnetConstructedDataAccessPointAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessRightsAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessRightsAll() interface {
		BACnetConstructedDataAccessRightsAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessUserAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessUserAll() interface {
		BACnetConstructedDataAccessUserAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessZoneAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessZoneAll() interface {
		BACnetConstructedDataAccessZoneAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorAll() interface {
		BACnetConstructedDataAccumulatorAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAlertEnrollmentAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAlertEnrollmentAll() interface {
		BACnetConstructedDataAlertEnrollmentAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogInputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogInputAll() interface {
		BACnetConstructedDataAnalogInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogOutputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogOutputAll() interface {
		BACnetConstructedDataAnalogOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogValueAll() interface {
		BACnetConstructedDataAnalogValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAveragingAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAveragingAll() interface {
		BACnetConstructedDataAveragingAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryInputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryInputAll() interface {
		BACnetConstructedDataBinaryInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryLightingOutputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryLightingOutputAll() interface {
		BACnetConstructedDataBinaryLightingOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryOutputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryOutputAll() interface {
		BACnetConstructedDataBinaryOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryValueAll() interface {
		BACnetConstructedDataBinaryValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBitstringValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBitstringValueAll() interface {
		BACnetConstructedDataBitstringValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCalendarAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCalendarAll() interface {
		BACnetConstructedDataCalendarAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChannelAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChannelAll() interface {
		BACnetConstructedDataChannelAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCharacterstringValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCharacterstringValueAll() interface {
		BACnetConstructedDataCharacterstringValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCommandAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCommandAll() interface {
		BACnetConstructedDataCommandAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentialDataInputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentialDataInputAll() interface {
		BACnetConstructedDataCredentialDataInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDatepatternValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDatepatternValueAll() interface {
		BACnetConstructedDataDatepatternValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateValueAll() interface {
		BACnetConstructedDataDateValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDatetimepatternValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDatetimepatternValueAll() interface {
		BACnetConstructedDataDatetimepatternValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDatetimeValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDatetimeValueAll() interface {
		BACnetConstructedDataDatetimeValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeviceAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeviceAll() interface {
		BACnetConstructedDataDeviceAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataElevatorGroupAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataElevatorGroupAll() interface {
		BACnetConstructedDataElevatorGroupAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEscalatorAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEscalatorAll() interface {
		BACnetConstructedDataEscalatorAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventEnrollmentAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventEnrollmentAll() interface {
		BACnetConstructedDataEventEnrollmentAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventLogAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventLogAll() interface {
		BACnetConstructedDataEventLogAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFileAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFileAll() interface {
		BACnetConstructedDataFileAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGlobalGroupAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGlobalGroupAll() interface {
		BACnetConstructedDataGlobalGroupAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGroupAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGroupAll() interface {
		BACnetConstructedDataGroupAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueAll() interface {
		BACnetConstructedDataIntegerValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueAll() interface {
		BACnetConstructedDataLargeAnalogValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyPointAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyPointAll() interface {
		BACnetConstructedDataLifeSafetyPointAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyZoneAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyZoneAll() interface {
		BACnetConstructedDataLifeSafetyZoneAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLiftAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLiftAll() interface {
		BACnetConstructedDataLiftAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingOutputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingOutputAll() interface {
		BACnetConstructedDataLightingOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoadControlAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoadControlAll() interface {
		BACnetConstructedDataLoadControlAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoopAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoopAll() interface {
		BACnetConstructedDataLoopAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateInputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateInputAll() interface {
		BACnetConstructedDataMultiStateInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateOutputAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateOutputAll() interface {
		BACnetConstructedDataMultiStateOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateValueAll() interface {
		BACnetConstructedDataMultiStateValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkPortAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkPortAll() interface {
		BACnetConstructedDataNetworkPortAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkSecurityAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkSecurityAll() interface {
		BACnetConstructedDataNetworkSecurityAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNotificationClassAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNotificationClassAll() interface {
		BACnetConstructedDataNotificationClassAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNotificationForwarderAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNotificationForwarderAll() interface {
		BACnetConstructedDataNotificationForwarderAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOctetstringValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOctetstringValueAll() interface {
		BACnetConstructedDataOctetstringValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueAll() interface {
		BACnetConstructedDataPositiveIntegerValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProgramAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProgramAll() interface {
		BACnetConstructedDataProgramAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPulseConverterAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPulseConverterAll() interface {
		BACnetConstructedDataPulseConverterAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataScheduleAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataScheduleAll() interface {
		BACnetConstructedDataScheduleAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStructuredViewAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStructuredViewAll() interface {
		BACnetConstructedDataStructuredViewAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimepatternValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimepatternValueAll() interface {
		BACnetConstructedDataTimepatternValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeValueAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeValueAll() interface {
		BACnetConstructedDataTimeValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerAll() interface {
		BACnetConstructedDataTimerAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrendLogAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrendLogAll() interface {
		BACnetConstructedDataTrendLogAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrendLogMultipleAll converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrendLogMultipleAll() interface {
		BACnetConstructedDataTrendLogMultipleAllBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAllWritesSuccessful converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAllWritesSuccessful() interface {
		BACnetConstructedDataAllWritesSuccessfulBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAllowGroupDelayInhibit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAllowGroupDelayInhibit() interface {
		BACnetConstructedDataAllowGroupDelayInhibitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAPDULength converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAPDULength() interface {
		BACnetConstructedDataAPDULengthBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAPDUSegmentTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAPDUSegmentTimeout() interface {
		BACnetConstructedDataAPDUSegmentTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAPDUTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAPDUTimeout() interface {
		BACnetConstructedDataAPDUTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataApplicationSoftwareVersion converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataApplicationSoftwareVersion() interface {
		BACnetConstructedDataApplicationSoftwareVersionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataArchive converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataArchive() interface {
		BACnetConstructedDataArchiveBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAssignedAccessRights converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAssignedAccessRights() interface {
		BACnetConstructedDataAssignedAccessRightsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAssignedLandingCalls converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAssignedLandingCalls() interface {
		BACnetConstructedDataAssignedLandingCallsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAttemptedSamples converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAttemptedSamples() interface {
		BACnetConstructedDataAttemptedSamplesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAuthenticationFactors converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAuthenticationFactors() interface {
		BACnetConstructedDataAuthenticationFactorsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAuthenticationPolicyList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAuthenticationPolicyList() interface {
		BACnetConstructedDataAuthenticationPolicyListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAuthenticationPolicyNames converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAuthenticationPolicyNames() interface {
		BACnetConstructedDataAuthenticationPolicyNamesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAuthenticationStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAuthenticationStatus() interface {
		BACnetConstructedDataAuthenticationStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAuthorizationExemptions converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAuthorizationExemptions() interface {
		BACnetConstructedDataAuthorizationExemptionsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAuthorizationMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAuthorizationMode() interface {
		BACnetConstructedDataAuthorizationModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAutoSlaveDiscovery converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAutoSlaveDiscovery() interface {
		BACnetConstructedDataAutoSlaveDiscoveryBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAverageValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAverageValue() interface {
		BACnetConstructedDataAverageValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBackupAndRestoreState converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBackupAndRestoreState() interface {
		BACnetConstructedDataBackupAndRestoreStateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBackupFailureTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBackupFailureTimeout() interface {
		BACnetConstructedDataBackupFailureTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBackupPreparationTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBackupPreparationTime() interface {
		BACnetConstructedDataBackupPreparationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPGlobalAddress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPGlobalAddress() interface {
		BACnetConstructedDataBACnetIPGlobalAddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPMode() interface {
		BACnetConstructedDataBACnetIPModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPMulticastAddress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPMulticastAddress() interface {
		BACnetConstructedDataBACnetIPMulticastAddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPNATTraversal converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPNATTraversal() interface {
		BACnetConstructedDataBACnetIPNATTraversalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPUDPPort converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPUDPPort() interface {
		BACnetConstructedDataBACnetIPUDPPortBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPv6Mode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPv6Mode() interface {
		BACnetConstructedDataBACnetIPv6ModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPv6UDPPort converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPv6UDPPort() interface {
		BACnetConstructedDataBACnetIPv6UDPPortBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBACnetIPv6MulticastAddress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBACnetIPv6MulticastAddress() interface {
		BACnetConstructedDataBACnetIPv6MulticastAddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBaseDeviceSecurityPolicy converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBaseDeviceSecurityPolicy() interface {
		BACnetConstructedDataBaseDeviceSecurityPolicyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBBMDAcceptFDRegistrations converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBBMDAcceptFDRegistrations() interface {
		BACnetConstructedDataBBMDAcceptFDRegistrationsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBBMDBroadcastDistributionTable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBBMDBroadcastDistributionTable() interface {
		BACnetConstructedDataBBMDBroadcastDistributionTableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBBMDForeignDeviceTable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBBMDForeignDeviceTable() interface {
		BACnetConstructedDataBBMDForeignDeviceTableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBelongsTo converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBelongsTo() interface {
		BACnetConstructedDataBelongsToBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBias converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBias() interface {
		BACnetConstructedDataBiasBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBitMask converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBitMask() interface {
		BACnetConstructedDataBitMaskBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBitText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBitText() interface {
		BACnetConstructedDataBitTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBlinkWarnEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBlinkWarnEnable() interface {
		BACnetConstructedDataBlinkWarnEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBufferSize converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBufferSize() interface {
		BACnetConstructedDataBufferSizeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarAssignedDirection converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarAssignedDirection() interface {
		BACnetConstructedDataCarAssignedDirectionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarDoorCommand converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarDoorCommand() interface {
		BACnetConstructedDataCarDoorCommandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarDoorStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarDoorStatus() interface {
		BACnetConstructedDataCarDoorStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarDoorText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarDoorText() interface {
		BACnetConstructedDataCarDoorTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarDoorZone converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarDoorZone() interface {
		BACnetConstructedDataCarDoorZoneBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarDriveStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarDriveStatus() interface {
		BACnetConstructedDataCarDriveStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarLoad converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarLoad() interface {
		BACnetConstructedDataCarLoadBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarLoadUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarLoadUnits() interface {
		BACnetConstructedDataCarLoadUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarMode() interface {
		BACnetConstructedDataCarModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarMovingDirection converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarMovingDirection() interface {
		BACnetConstructedDataCarMovingDirectionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCarPosition converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCarPosition() interface {
		BACnetConstructedDataCarPositionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChangeOfStateCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChangeOfStateCount() interface {
		BACnetConstructedDataChangeOfStateCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChangeOfStateTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChangeOfStateTime() interface {
		BACnetConstructedDataChangeOfStateTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChangesPending converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChangesPending() interface {
		BACnetConstructedDataChangesPendingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChannelNumber converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChannelNumber() interface {
		BACnetConstructedDataChannelNumberBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataClientCOVIncrement converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataClientCOVIncrement() interface {
		BACnetConstructedDataClientCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCommand converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCommand() interface {
		BACnetConstructedDataCommandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCommandTimeArray converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCommandTimeArray() interface {
		BACnetConstructedDataCommandTimeArrayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataConfigurationFiles converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataConfigurationFiles() interface {
		BACnetConstructedDataConfigurationFilesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataControlGroups converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataControlGroups() interface {
		BACnetConstructedDataControlGroupsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataControlledVariableReference converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataControlledVariableReference() interface {
		BACnetConstructedDataControlledVariableReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataControlledVariableUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataControlledVariableUnits() interface {
		BACnetConstructedDataControlledVariableUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataControlledVariableValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataControlledVariableValue() interface {
		BACnetConstructedDataControlledVariableValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCount() interface {
		BACnetConstructedDataCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCountBeforeChange converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCountBeforeChange() interface {
		BACnetConstructedDataCountBeforeChangeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCountChangeTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCountChangeTime() interface {
		BACnetConstructedDataCountChangeTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueCOVIncrement converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueCOVIncrement() interface {
		BACnetConstructedDataIntegerValueCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueCOVIncrement converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueCOVIncrement() interface {
		BACnetConstructedDataLargeAnalogValueCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueCOVIncrement converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueCOVIncrement() interface {
		BACnetConstructedDataPositiveIntegerValueCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCOVIncrement converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCOVIncrement() interface {
		BACnetConstructedDataCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCOVPeriod converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCOVPeriod() interface {
		BACnetConstructedDataCOVPeriodBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCOVResubscriptionInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCOVResubscriptionInterval() interface {
		BACnetConstructedDataCOVResubscriptionIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCOVUPeriod converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCOVUPeriod() interface {
		BACnetConstructedDataCOVUPeriodBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCOVURecipients converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCOVURecipients() interface {
		BACnetConstructedDataCOVURecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentialDisable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentialDisable() interface {
		BACnetConstructedDataCredentialDisableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentialStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentialStatus() interface {
		BACnetConstructedDataCredentialStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentials converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentials() interface {
		BACnetConstructedDataCredentialsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentialsInZone converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentialsInZone() interface {
		BACnetConstructedDataCredentialsInZoneBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCurrentCommandPriority converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCurrentCommandPriority() interface {
		BACnetConstructedDataCurrentCommandPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDatabaseRevision converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDatabaseRevision() interface {
		BACnetConstructedDataDatabaseRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateList() interface {
		BACnetConstructedDataDateListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDaylightSavingsStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDaylightSavingsStatus() interface {
		BACnetConstructedDataDaylightSavingsStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDaysRemaining converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDaysRemaining() interface {
		BACnetConstructedDataDaysRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueDeadband converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueDeadband() interface {
		BACnetConstructedDataIntegerValueDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueDeadband converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueDeadband() interface {
		BACnetConstructedDataLargeAnalogValueDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueDeadband converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueDeadband() interface {
		BACnetConstructedDataPositiveIntegerValueDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeadband converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeadband() interface {
		BACnetConstructedDataDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDefaultFadeTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDefaultFadeTime() interface {
		BACnetConstructedDataDefaultFadeTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDefaultRampRate converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDefaultRampRate() interface {
		BACnetConstructedDataDefaultRampRateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDefaultStepIncrement converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDefaultStepIncrement() interface {
		BACnetConstructedDataDefaultStepIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDefaultSubordinateRelationship converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDefaultSubordinateRelationship() interface {
		BACnetConstructedDataDefaultSubordinateRelationshipBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDefaultTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDefaultTimeout() interface {
		BACnetConstructedDataDefaultTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeployedProfileLocation converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeployedProfileLocation() interface {
		BACnetConstructedDataDeployedProfileLocationBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDerivativeConstant converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDerivativeConstant() interface {
		BACnetConstructedDataDerivativeConstantBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDerivativeConstantUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDerivativeConstantUnits() interface {
		BACnetConstructedDataDerivativeConstantUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDescription converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDescription() interface {
		BACnetConstructedDataDescriptionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDescriptionOfHalt converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDescriptionOfHalt() interface {
		BACnetConstructedDataDescriptionOfHaltBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeviceAddressBinding converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeviceAddressBinding() interface {
		BACnetConstructedDataDeviceAddressBindingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeviceType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeviceType() interface {
		BACnetConstructedDataDeviceTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDirectReading converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDirectReading() interface {
		BACnetConstructedDataDirectReadingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDistributionKeyRevision converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDistributionKeyRevision() interface {
		BACnetConstructedDataDistributionKeyRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoNotHide converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoNotHide() interface {
		BACnetConstructedDataDoNotHideBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorAlarmState converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorAlarmState() interface {
		BACnetConstructedDataDoorAlarmStateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorExtendedPulseTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorExtendedPulseTime() interface {
		BACnetConstructedDataDoorExtendedPulseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorMembers() interface {
		BACnetConstructedDataDoorMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorOpenTooLongTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorOpenTooLongTime() interface {
		BACnetConstructedDataDoorOpenTooLongTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorPulseTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorPulseTime() interface {
		BACnetConstructedDataDoorPulseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorStatus() interface {
		BACnetConstructedDataDoorStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDoorUnlockDelayTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDoorUnlockDelayTime() interface {
		BACnetConstructedDataDoorUnlockDelayTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDutyWindow converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDutyWindow() interface {
		BACnetConstructedDataDutyWindowBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEffectivePeriod converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEffectivePeriod() interface {
		BACnetConstructedDataEffectivePeriodBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEgressActive converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEgressActive() interface {
		BACnetConstructedDataEgressActiveBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEgressTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEgressTime() interface {
		BACnetConstructedDataEgressTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataElapsedActiveTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataElapsedActiveTime() interface {
		BACnetConstructedDataElapsedActiveTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataElevatorGroup converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataElevatorGroup() interface {
		BACnetConstructedDataElevatorGroupBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEnable() interface {
		BACnetConstructedDataEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEnergyMeter converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEnergyMeter() interface {
		BACnetConstructedDataEnergyMeterBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEnergyMeterRef converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEnergyMeterRef() interface {
		BACnetConstructedDataEnergyMeterRefBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEntryPoints converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEntryPoints() interface {
		BACnetConstructedDataEntryPointsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataErrorLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataErrorLimit() interface {
		BACnetConstructedDataErrorLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEscalatorMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEscalatorMode() interface {
		BACnetConstructedDataEscalatorModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventAlgorithmInhibit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventAlgorithmInhibit() interface {
		BACnetConstructedDataEventAlgorithmInhibitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventAlgorithmInhibitRef converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventAlgorithmInhibitRef() interface {
		BACnetConstructedDataEventAlgorithmInhibitRefBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventDetectionEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventDetectionEnable() interface {
		BACnetConstructedDataEventDetectionEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventEnable() interface {
		BACnetConstructedDataEventEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventMessageTexts converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventMessageTexts() interface {
		BACnetConstructedDataEventMessageTextsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventMessageTextsConfig converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventMessageTextsConfig() interface {
		BACnetConstructedDataEventMessageTextsConfigBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventParameters converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventParameters() interface {
		BACnetConstructedDataEventParametersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventState converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventState() interface {
		BACnetConstructedDataEventStateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventTimeStamps converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventTimeStamps() interface {
		BACnetConstructedDataEventTimeStampsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventType() interface {
		BACnetConstructedDataEventTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataExceptionSchedule converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataExceptionSchedule() interface {
		BACnetConstructedDataExceptionScheduleBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataExecutionDelay converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataExecutionDelay() interface {
		BACnetConstructedDataExecutionDelayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataExitPoints converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataExitPoints() interface {
		BACnetConstructedDataExitPointsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataExpectedShedLevel converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataExpectedShedLevel() interface {
		BACnetConstructedDataExpectedShedLevelBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataExpirationTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataExpirationTime() interface {
		BACnetConstructedDataExpirationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataExtendedTimeEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataExtendedTimeEnable() interface {
		BACnetConstructedDataExtendedTimeEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFailedAttemptEvents converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFailedAttemptEvents() interface {
		BACnetConstructedDataFailedAttemptEventsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFailedAttempts converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFailedAttempts() interface {
		BACnetConstructedDataFailedAttemptsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFailedAttemptsTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFailedAttemptsTime() interface {
		BACnetConstructedDataFailedAttemptsTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorFaultHighLimit() interface {
		BACnetConstructedDataAccumulatorFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogInputFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogInputFaultHighLimit() interface {
		BACnetConstructedDataAnalogInputFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogValueFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogValueFaultHighLimit() interface {
		BACnetConstructedDataAnalogValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueFaultHighLimit() interface {
		BACnetConstructedDataIntegerValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueFaultHighLimit() interface {
		BACnetConstructedDataLargeAnalogValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueFaultHighLimit() interface {
		BACnetConstructedDataPositiveIntegerValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFaultHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFaultHighLimit() interface {
		BACnetConstructedDataFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorFaultLowLimit() interface {
		BACnetConstructedDataAccumulatorFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogInputFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogInputFaultLowLimit() interface {
		BACnetConstructedDataAnalogInputFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogValueFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogValueFaultLowLimit() interface {
		BACnetConstructedDataAnalogValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueFaultLowLimit() interface {
		BACnetConstructedDataLargeAnalogValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueFaultLowLimit() interface {
		BACnetConstructedDataIntegerValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueFaultLowLimit() interface {
		BACnetConstructedDataPositiveIntegerValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFaultLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFaultLowLimit() interface {
		BACnetConstructedDataFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFaultParameters converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFaultParameters() interface {
		BACnetConstructedDataFaultParametersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEscalatorFaultSignals converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEscalatorFaultSignals() interface {
		BACnetConstructedDataEscalatorFaultSignalsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLiftFaultSignals converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLiftFaultSignals() interface {
		BACnetConstructedDataLiftFaultSignalsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFaultSignals converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFaultSignals() interface {
		BACnetConstructedDataFaultSignalsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFaultType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFaultType() interface {
		BACnetConstructedDataFaultTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessDoorFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessDoorFaultValues() interface {
		BACnetConstructedDataAccessDoorFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCharacterStringValueFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCharacterStringValueFaultValues() interface {
		BACnetConstructedDataCharacterStringValueFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyPointFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyPointFaultValues() interface {
		BACnetConstructedDataLifeSafetyPointFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyZoneFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyZoneFaultValues() interface {
		BACnetConstructedDataLifeSafetyZoneFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateInputFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateInputFaultValues() interface {
		BACnetConstructedDataMultiStateInputFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateValueFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateValueFaultValues() interface {
		BACnetConstructedDataMultiStateValueFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFaultValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFaultValues() interface {
		BACnetConstructedDataFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFDBBMDAddress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFDBBMDAddress() interface {
		BACnetConstructedDataFDBBMDAddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFDSubscriptionLifetime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFDSubscriptionLifetime() interface {
		BACnetConstructedDataFDSubscriptionLifetimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryLightingOutputFeedbackValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryLightingOutputFeedbackValue() interface {
		BACnetConstructedDataBinaryLightingOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryOutputFeedbackValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryOutputFeedbackValue() interface {
		BACnetConstructedDataBinaryOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingOutputFeedbackValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingOutputFeedbackValue() interface {
		BACnetConstructedDataLightingOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateOutputFeedbackValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateOutputFeedbackValue() interface {
		BACnetConstructedDataMultiStateOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFileAccessMethod converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFileAccessMethod() interface {
		BACnetConstructedDataFileAccessMethodBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFileSize converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFileSize() interface {
		BACnetConstructedDataFileSizeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFileType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFileType() interface {
		BACnetConstructedDataFileTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFirmwareRevision converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFirmwareRevision() interface {
		BACnetConstructedDataFirmwareRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFloorText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFloorText() interface {
		BACnetConstructedDataFloorTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFullDutyBaseline converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFullDutyBaseline() interface {
		BACnetConstructedDataFullDutyBaselineBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGlobalIdentifier converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGlobalIdentifier() interface {
		BACnetConstructedDataGlobalIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGroupID converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGroupID() interface {
		BACnetConstructedDataGroupIDBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGroupMemberNames converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGroupMemberNames() interface {
		BACnetConstructedDataGroupMemberNamesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGlobalGroupGroupMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGlobalGroupGroupMembers() interface {
		BACnetConstructedDataGlobalGroupGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataElevatorGroupGroupMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataElevatorGroupGroupMembers() interface {
		BACnetConstructedDataElevatorGroupGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGroupMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGroupMembers() interface {
		BACnetConstructedDataGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGroupMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGroupMode() interface {
		BACnetConstructedDataGroupModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorHighLimit() interface {
		BACnetConstructedDataAccumulatorHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueHighLimit() interface {
		BACnetConstructedDataLargeAnalogValueHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueHighLimit() interface {
		BACnetConstructedDataIntegerValueHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueHighLimit() interface {
		BACnetConstructedDataPositiveIntegerValueHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataHighLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataHighLimit() interface {
		BACnetConstructedDataHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataHigherDeck converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataHigherDeck() interface {
		BACnetConstructedDataHigherDeckBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInProcess converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInProcess() interface {
		BACnetConstructedDataInProcessBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInProgress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInProgress() interface {
		BACnetConstructedDataInProgressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInactiveText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInactiveText() interface {
		BACnetConstructedDataInactiveTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInitialTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInitialTimeout() interface {
		BACnetConstructedDataInitialTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInputReference converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInputReference() interface {
		BACnetConstructedDataInputReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInstallationID converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInstallationID() interface {
		BACnetConstructedDataInstallationIDBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInstanceOf converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInstanceOf() interface {
		BACnetConstructedDataInstanceOfBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataInstantaneousPower converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataInstantaneousPower() interface {
		BACnetConstructedDataInstantaneousPowerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegralConstant converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegralConstant() interface {
		BACnetConstructedDataIntegralConstantBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegralConstantUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegralConstantUnits() interface {
		BACnetConstructedDataIntegralConstantUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogInputInterfaceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogInputInterfaceValue() interface {
		BACnetConstructedDataAnalogInputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogOutputInterfaceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogOutputInterfaceValue() interface {
		BACnetConstructedDataAnalogOutputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryInputInterfaceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryInputInterfaceValue() interface {
		BACnetConstructedDataBinaryInputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryOutputInterfaceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryOutputInterfaceValue() interface {
		BACnetConstructedDataBinaryOutputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateInputInterfaceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateInputInterfaceValue() interface {
		BACnetConstructedDataMultiStateInputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateOutputInterfaceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateOutputInterfaceValue() interface {
		BACnetConstructedDataMultiStateOutputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntervalOffset converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntervalOffset() interface {
		BACnetConstructedDataIntervalOffsetBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPAddress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPAddress() interface {
		BACnetConstructedDataIPAddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPDefaultGateway converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPDefaultGateway() interface {
		BACnetConstructedDataIPDefaultGatewayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPDHCPEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPDHCPEnable() interface {
		BACnetConstructedDataIPDHCPEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPDHCPLeaseTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPDHCPLeaseTime() interface {
		BACnetConstructedDataIPDHCPLeaseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPDHCPLeaseTimeRemaining converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPDHCPLeaseTimeRemaining() interface {
		BACnetConstructedDataIPDHCPLeaseTimeRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPDHCPServer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPDHCPServer() interface {
		BACnetConstructedDataIPDHCPServerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPDNSServer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPDNSServer() interface {
		BACnetConstructedDataIPDNSServerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPSubnetMask converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPSubnetMask() interface {
		BACnetConstructedDataIPSubnetMaskBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6Address converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6Address() interface {
		BACnetConstructedDataIPv6AddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6AutoAddressingEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6AutoAddressingEnable() interface {
		BACnetConstructedDataIPv6AutoAddressingEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6DefaultGateway converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6DefaultGateway() interface {
		BACnetConstructedDataIPv6DefaultGatewayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6DHCPLeaseTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6DHCPLeaseTime() interface {
		BACnetConstructedDataIPv6DHCPLeaseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6DHCPLeaseTimeRemaining converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6DHCPLeaseTimeRemaining() interface {
		BACnetConstructedDataIPv6DHCPLeaseTimeRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6DHCPServer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6DHCPServer() interface {
		BACnetConstructedDataIPv6DHCPServerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6DNSServer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6DNSServer() interface {
		BACnetConstructedDataIPv6DNSServerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6PrefixLength converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6PrefixLength() interface {
		BACnetConstructedDataIPv6PrefixLengthBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIPv6ZoneIndex converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIPv6ZoneIndex() interface {
		BACnetConstructedDataIPv6ZoneIndexBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIsUTC converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIsUTC() interface {
		BACnetConstructedDataIsUTCBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataKeySets converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataKeySets() interface {
		BACnetConstructedDataKeySetsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLandingCallControl converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLandingCallControl() interface {
		BACnetConstructedDataLandingCallControlBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLandingCalls converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLandingCalls() interface {
		BACnetConstructedDataLandingCallsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLandingDoorStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLandingDoorStatus() interface {
		BACnetConstructedDataLandingDoorStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastAccessEvent converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastAccessEvent() interface {
		BACnetConstructedDataLastAccessEventBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastAccessPoint converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastAccessPoint() interface {
		BACnetConstructedDataLastAccessPointBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastCommandTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastCommandTime() interface {
		BACnetConstructedDataLastCommandTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastCredentialAdded converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastCredentialAdded() interface {
		BACnetConstructedDataLastCredentialAddedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastCredentialAddedTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastCredentialAddedTime() interface {
		BACnetConstructedDataLastCredentialAddedTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastCredentialRemoved converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastCredentialRemoved() interface {
		BACnetConstructedDataLastCredentialRemovedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastCredentialRemovedTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastCredentialRemovedTime() interface {
		BACnetConstructedDataLastCredentialRemovedTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastKeyServer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastKeyServer() interface {
		BACnetConstructedDataLastKeyServerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastNotifyRecord converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastNotifyRecord() interface {
		BACnetConstructedDataLastNotifyRecordBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastPriority converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastPriority() interface {
		BACnetConstructedDataLastPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastRestartReason converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastRestartReason() interface {
		BACnetConstructedDataLastRestartReasonBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastRestoreTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastRestoreTime() interface {
		BACnetConstructedDataLastRestoreTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastStateChange converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastStateChange() interface {
		BACnetConstructedDataLastStateChangeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLastUseTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLastUseTime() interface {
		BACnetConstructedDataLastUseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyAlarmValues() interface {
		BACnetConstructedDataLifeSafetyAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingCommand converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingCommand() interface {
		BACnetConstructedDataLightingCommandBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingCommandDefaultPriority converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingCommandDefaultPriority() interface {
		BACnetConstructedDataLightingCommandDefaultPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLimitEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLimitEnable() interface {
		BACnetConstructedDataLimitEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLimitMonitoringInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLimitMonitoringInterval() interface {
		BACnetConstructedDataLimitMonitoringIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLinkSpeed converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLinkSpeed() interface {
		BACnetConstructedDataLinkSpeedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLinkSpeedAutonegotiate converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLinkSpeedAutonegotiate() interface {
		BACnetConstructedDataLinkSpeedAutonegotiateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLinkSpeeds converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLinkSpeeds() interface {
		BACnetConstructedDataLinkSpeedsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataListOfGroupMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataListOfGroupMembers() interface {
		BACnetConstructedDataListOfGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChannelListOfObjectPropertyReferences converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChannelListOfObjectPropertyReferences() interface {
		BACnetConstructedDataChannelListOfObjectPropertyReferencesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataListOfObjectPropertyReferences converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataListOfObjectPropertyReferences() interface {
		BACnetConstructedDataListOfObjectPropertyReferencesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLocalDate converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLocalDate() interface {
		BACnetConstructedDataLocalDateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLocalForwardingOnly converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLocalForwardingOnly() interface {
		BACnetConstructedDataLocalForwardingOnlyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLocalTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLocalTime() interface {
		BACnetConstructedDataLocalTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLocation converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLocation() interface {
		BACnetConstructedDataLocationBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLockStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLockStatus() interface {
		BACnetConstructedDataLockStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLockout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLockout() interface {
		BACnetConstructedDataLockoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLockoutRelinquishTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLockoutRelinquishTime() interface {
		BACnetConstructedDataLockoutRelinquishTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataEventLogLogBuffer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataEventLogLogBuffer() interface {
		BACnetConstructedDataEventLogLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrendLogLogBuffer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrendLogLogBuffer() interface {
		BACnetConstructedDataTrendLogLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrendLogMultipleLogBuffer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrendLogMultipleLogBuffer() interface {
		BACnetConstructedDataTrendLogMultipleLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLogBuffer converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLogBuffer() interface {
		BACnetConstructedDataLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrendLogLogDeviceObjectProperty converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrendLogLogDeviceObjectProperty() interface {
		BACnetConstructedDataTrendLogLogDeviceObjectPropertyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrendLogMultipleLogDeviceObjectProperty converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrendLogMultipleLogDeviceObjectProperty() interface {
		BACnetConstructedDataTrendLogMultipleLogDeviceObjectPropertyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLogDeviceObjectProperty converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLogDeviceObjectProperty() interface {
		BACnetConstructedDataLogDeviceObjectPropertyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLogInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLogInterval() interface {
		BACnetConstructedDataLogIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoggingObject converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoggingObject() interface {
		BACnetConstructedDataLoggingObjectBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoggingRecord converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoggingRecord() interface {
		BACnetConstructedDataLoggingRecordBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoggingType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoggingType() interface {
		BACnetConstructedDataLoggingTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLowDiffLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLowDiffLimit() interface {
		BACnetConstructedDataLowDiffLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorLowLimit() interface {
		BACnetConstructedDataAccumulatorLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueLowLimit() interface {
		BACnetConstructedDataLargeAnalogValueLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueLowLimit() interface {
		BACnetConstructedDataIntegerValueLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueLowLimit() interface {
		BACnetConstructedDataPositiveIntegerValueLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLowLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLowLimit() interface {
		BACnetConstructedDataLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLowerDeck converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLowerDeck() interface {
		BACnetConstructedDataLowerDeckBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMACAddress converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMACAddress() interface {
		BACnetConstructedDataMACAddressBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMachineRoomID converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMachineRoomID() interface {
		BACnetConstructedDataMachineRoomIDBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyZoneMaintenanceRequired converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyZoneMaintenanceRequired() interface {
		BACnetConstructedDataLifeSafetyZoneMaintenanceRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaintenanceRequired converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaintenanceRequired() interface {
		BACnetConstructedDataMaintenanceRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMakingCarCall converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMakingCarCall() interface {
		BACnetConstructedDataMakingCarCallBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataManipulatedVariableReference converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataManipulatedVariableReference() interface {
		BACnetConstructedDataManipulatedVariableReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataManualSlaveAddressBinding converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataManualSlaveAddressBinding() interface {
		BACnetConstructedDataManualSlaveAddressBindingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaskedAlarmValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaskedAlarmValues() interface {
		BACnetConstructedDataMaskedAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxActualValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxActualValue() interface {
		BACnetConstructedDataMaxActualValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxAPDULengthAccepted converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxAPDULengthAccepted() interface {
		BACnetConstructedDataMaxAPDULengthAcceptedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxFailedAttempts converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxFailedAttempts() interface {
		BACnetConstructedDataMaxFailedAttemptsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeviceMaxInfoFrames converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeviceMaxInfoFrames() interface {
		BACnetConstructedDataDeviceMaxInfoFramesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkPortMaxInfoFrames converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkPortMaxInfoFrames() interface {
		BACnetConstructedDataNetworkPortMaxInfoFramesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxInfoFrames converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxInfoFrames() interface {
		BACnetConstructedDataMaxInfoFramesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDeviceMaxMaster converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDeviceMaxMaster() interface {
		BACnetConstructedDataDeviceMaxMasterBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkPortMaxMaster converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkPortMaxMaster() interface {
		BACnetConstructedDataNetworkPortMaxMasterBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxMaster converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxMaster() interface {
		BACnetConstructedDataMaxMasterBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorMaxPresValue() interface {
		BACnetConstructedDataAccumulatorMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogInputMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogInputMaxPresValue() interface {
		BACnetConstructedDataAnalogInputMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogOutputMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogOutputMaxPresValue() interface {
		BACnetConstructedDataAnalogOutputMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogValueMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogValueMaxPresValue() interface {
		BACnetConstructedDataAnalogValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueMaxPresValue() interface {
		BACnetConstructedDataLargeAnalogValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueMaxPresValue() interface {
		BACnetConstructedDataIntegerValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueMaxPresValue() interface {
		BACnetConstructedDataPositiveIntegerValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerMaxPresValue() interface {
		BACnetConstructedDataTimerMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxPresValue() interface {
		BACnetConstructedDataMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaxSegmentsAccepted converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaxSegmentsAccepted() interface {
		BACnetConstructedDataMaxSegmentsAcceptedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaximumOutput converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaximumOutput() interface {
		BACnetConstructedDataMaximumOutputBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaximumValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaximumValue() interface {
		BACnetConstructedDataMaximumValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMaximumValueTimestamp converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMaximumValueTimestamp() interface {
		BACnetConstructedDataMaximumValueTimestampBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMemberOf converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMemberOf() interface {
		BACnetConstructedDataMemberOfBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMemberStatusFlags converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMemberStatusFlags() interface {
		BACnetConstructedDataMemberStatusFlagsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMembers() interface {
		BACnetConstructedDataMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinActualValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinActualValue() interface {
		BACnetConstructedDataMinActualValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccumulatorMinPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccumulatorMinPresValue() interface {
		BACnetConstructedDataAccumulatorMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueMinPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueMinPresValue() interface {
		BACnetConstructedDataIntegerValueMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueMinPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueMinPresValue() interface {
		BACnetConstructedDataPositiveIntegerValueMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueMinPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueMinPresValue() interface {
		BACnetConstructedDataLargeAnalogValueMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerMinPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerMinPresValue() interface {
		BACnetConstructedDataTimerMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinPresValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinPresValue() interface {
		BACnetConstructedDataMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinimumOffTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinimumOffTime() interface {
		BACnetConstructedDataMinimumOffTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinimumOnTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinimumOnTime() interface {
		BACnetConstructedDataMinimumOnTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinimumOutput converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinimumOutput() interface {
		BACnetConstructedDataMinimumOutputBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinimumValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinimumValue() interface {
		BACnetConstructedDataMinimumValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMinimumValueTimestamp converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMinimumValueTimestamp() interface {
		BACnetConstructedDataMinimumValueTimestampBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMode() interface {
		BACnetConstructedDataModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataModelName converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataModelName() interface {
		BACnetConstructedDataModelNameBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataModificationDate converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataModificationDate() interface {
		BACnetConstructedDataModificationDateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMusterPoint converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMusterPoint() interface {
		BACnetConstructedDataMusterPointBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNegativeAccessRules converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNegativeAccessRules() interface {
		BACnetConstructedDataNegativeAccessRulesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkAccessSecurityPolicies converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkAccessSecurityPolicies() interface {
		BACnetConstructedDataNetworkAccessSecurityPoliciesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkInterfaceName converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkInterfaceName() interface {
		BACnetConstructedDataNetworkInterfaceNameBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkNumber converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkNumber() interface {
		BACnetConstructedDataNetworkNumberBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkNumberQuality converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkNumberQuality() interface {
		BACnetConstructedDataNetworkNumberQualityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNetworkType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNetworkType() interface {
		BACnetConstructedDataNetworkTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNextStoppingFloor converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNextStoppingFloor() interface {
		BACnetConstructedDataNextStoppingFloorBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNodeSubtype converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNodeSubtype() interface {
		BACnetConstructedDataNodeSubtypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNodeType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNodeType() interface {
		BACnetConstructedDataNodeTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNotificationClass converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNotificationClass() interface {
		BACnetConstructedDataNotificationClassBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNotificationThreshold converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNotificationThreshold() interface {
		BACnetConstructedDataNotificationThresholdBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNotifyType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNotifyType() interface {
		BACnetConstructedDataNotifyTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNumberOfAPDURetries converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNumberOfAPDURetries() interface {
		BACnetConstructedDataNumberOfAPDURetriesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNumberOfAuthenticationPolicies converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNumberOfAuthenticationPolicies() interface {
		BACnetConstructedDataNumberOfAuthenticationPoliciesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataNumberOfStates converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataNumberOfStates() interface {
		BACnetConstructedDataNumberOfStatesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataObjectIdentifier converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataObjectIdentifier() interface {
		BACnetConstructedDataObjectIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataObjectList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataObjectList() interface {
		BACnetConstructedDataObjectListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataObjectName converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataObjectName() interface {
		BACnetConstructedDataObjectNameBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataObjectPropertyReference converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataObjectPropertyReference() interface {
		BACnetConstructedDataObjectPropertyReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataObjectType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataObjectType() interface {
		BACnetConstructedDataObjectTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyCount() interface {
		BACnetConstructedDataOccupancyCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyCountAdjust converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyCountAdjust() interface {
		BACnetConstructedDataOccupancyCountAdjustBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyCountEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyCountEnable() interface {
		BACnetConstructedDataOccupancyCountEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyLowerLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyLowerLimit() interface {
		BACnetConstructedDataOccupancyLowerLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyLowerLimitEnforced converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyLowerLimitEnforced() interface {
		BACnetConstructedDataOccupancyLowerLimitEnforcedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyState converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyState() interface {
		BACnetConstructedDataOccupancyStateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyUpperLimit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyUpperLimit() interface {
		BACnetConstructedDataOccupancyUpperLimitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOccupancyUpperLimitEnforced converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOccupancyUpperLimitEnforced() interface {
		BACnetConstructedDataOccupancyUpperLimitEnforcedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOperationDirection converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOperationDirection() interface {
		BACnetConstructedDataOperationDirectionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOperationExpected converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOperationExpected() interface {
		BACnetConstructedDataOperationExpectedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOptional converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOptional() interface {
		BACnetConstructedDataOptionalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOutOfService converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOutOfService() interface {
		BACnetConstructedDataOutOfServiceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOutputUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOutputUnits() interface {
		BACnetConstructedDataOutputUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPacketReorderTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPacketReorderTime() interface {
		BACnetConstructedDataPacketReorderTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPassbackMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPassbackMode() interface {
		BACnetConstructedDataPassbackModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPassbackTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPassbackTimeout() interface {
		BACnetConstructedDataPassbackTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPassengerAlarm converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPassengerAlarm() interface {
		BACnetConstructedDataPassengerAlarmBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPolarity converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPolarity() interface {
		BACnetConstructedDataPolarityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPortFilter converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPortFilter() interface {
		BACnetConstructedDataPortFilterBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveAccessRules converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveAccessRules() interface {
		BACnetConstructedDataPositiveAccessRulesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPower converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPower() interface {
		BACnetConstructedDataPowerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPowerMode converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPowerMode() interface {
		BACnetConstructedDataPowerModeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPrescale converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPrescale() interface {
		BACnetConstructedDataPrescaleBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessDoorPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessDoorPresentValue() interface {
		BACnetConstructedDataAccessDoorPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAlertEnrollmentPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAlertEnrollmentPresentValue() interface {
		BACnetConstructedDataAlertEnrollmentPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogInputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogInputPresentValue() interface {
		BACnetConstructedDataAnalogInputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogOutputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogOutputPresentValue() interface {
		BACnetConstructedDataAnalogOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogValuePresentValue() interface {
		BACnetConstructedDataAnalogValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryInputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryInputPresentValue() interface {
		BACnetConstructedDataBinaryInputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryOutputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryOutputPresentValue() interface {
		BACnetConstructedDataBinaryOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryValuePresentValue() interface {
		BACnetConstructedDataBinaryValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryLightingOutputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryLightingOutputPresentValue() interface {
		BACnetConstructedDataBinaryLightingOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBitStringValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBitStringValuePresentValue() interface {
		BACnetConstructedDataBitStringValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCalendarPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCalendarPresentValue() interface {
		BACnetConstructedDataCalendarPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataChannelPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataChannelPresentValue() interface {
		BACnetConstructedDataChannelPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCharacterStringValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCharacterStringValuePresentValue() interface {
		BACnetConstructedDataCharacterStringValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentialDataInputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentialDataInputPresentValue() interface {
		BACnetConstructedDataCredentialDataInputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateValuePresentValue() interface {
		BACnetConstructedDataDateValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDatePatternValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDatePatternValuePresentValue() interface {
		BACnetConstructedDataDatePatternValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateTimeValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateTimeValuePresentValue() interface {
		BACnetConstructedDataDateTimeValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateTimePatternValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateTimePatternValuePresentValue() interface {
		BACnetConstructedDataDateTimePatternValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValuePresentValue() interface {
		BACnetConstructedDataIntegerValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValuePresentValue() interface {
		BACnetConstructedDataLargeAnalogValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingOutputPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingOutputPresentValue() interface {
		BACnetConstructedDataLightingOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyPointPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyPointPresentValue() interface {
		BACnetConstructedDataLifeSafetyPointPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLifeSafetyZonePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLifeSafetyZonePresentValue() interface {
		BACnetConstructedDataLifeSafetyZonePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoadControlPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoadControlPresentValue() interface {
		BACnetConstructedDataLoadControlPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLoopPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLoopPresentValue() interface {
		BACnetConstructedDataLoopPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPulseConverterPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPulseConverterPresentValue() interface {
		BACnetConstructedDataPulseConverterPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGroupPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGroupPresentValue() interface {
		BACnetConstructedDataGroupPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataGlobalGroupPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataGlobalGroupPresentValue() interface {
		BACnetConstructedDataGlobalGroupPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOctetStringValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOctetStringValuePresentValue() interface {
		BACnetConstructedDataOctetStringValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSchedulePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSchedulePresentValue() interface {
		BACnetConstructedDataSchedulePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeValuePresentValue() interface {
		BACnetConstructedDataTimeValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimePatternValuePresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimePatternValuePresentValue() interface {
		BACnetConstructedDataTimePatternValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPresentValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPresentValue() interface {
		BACnetConstructedDataPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPriority converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPriority() interface {
		BACnetConstructedDataPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPriorityArray converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPriorityArray() interface {
		BACnetConstructedDataPriorityArrayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPriorityForWriting converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPriorityForWriting() interface {
		BACnetConstructedDataPriorityForWritingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProcessIdentifier converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProcessIdentifier() interface {
		BACnetConstructedDataProcessIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProcessIdentifierFilter converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProcessIdentifierFilter() interface {
		BACnetConstructedDataProcessIdentifierFilterBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProfileLocation converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProfileLocation() interface {
		BACnetConstructedDataProfileLocationBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProfileName converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProfileName() interface {
		BACnetConstructedDataProfileNameBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProgramChange converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProgramChange() interface {
		BACnetConstructedDataProgramChangeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProgramLocation converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProgramLocation() interface {
		BACnetConstructedDataProgramLocationBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProgramState converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProgramState() interface {
		BACnetConstructedDataProgramStateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPropertyList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPropertyList() interface {
		BACnetConstructedDataPropertyListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProportionalConstant converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProportionalConstant() interface {
		BACnetConstructedDataProportionalConstantBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProportionalConstantUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProportionalConstantUnits() interface {
		BACnetConstructedDataProportionalConstantUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProtocolLevel converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProtocolLevel() interface {
		BACnetConstructedDataProtocolLevelBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProtocolObjectTypesSupported converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProtocolObjectTypesSupported() interface {
		BACnetConstructedDataProtocolObjectTypesSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProtocolRevision converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProtocolRevision() interface {
		BACnetConstructedDataProtocolRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProtocolServicesSupported converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProtocolServicesSupported() interface {
		BACnetConstructedDataProtocolServicesSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataProtocolVersion converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataProtocolVersion() interface {
		BACnetConstructedDataProtocolVersionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPulseRate converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPulseRate() interface {
		BACnetConstructedDataPulseRateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataReadOnly converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataReadOnly() interface {
		BACnetConstructedDataReadOnlyBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataReasonForDisable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataReasonForDisable() interface {
		BACnetConstructedDataReasonForDisableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataReasonForHalt converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataReasonForHalt() interface {
		BACnetConstructedDataReasonForHaltBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRecipientList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRecipientList() interface {
		BACnetConstructedDataRecipientListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataFileRecordCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataFileRecordCount() interface {
		BACnetConstructedDataFileRecordCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRecordCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRecordCount() interface {
		BACnetConstructedDataRecordCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRecordsSinceNotification converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRecordsSinceNotification() interface {
		BACnetConstructedDataRecordsSinceNotificationBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataReferencePort converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataReferencePort() interface {
		BACnetConstructedDataReferencePortBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRegisteredCarCall converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRegisteredCarCall() interface {
		BACnetConstructedDataRegisteredCarCallBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataReliability converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataReliability() interface {
		BACnetConstructedDataReliabilityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataReliabilityEvaluationInhibit converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataReliabilityEvaluationInhibit() interface {
		BACnetConstructedDataReliabilityEvaluationInhibitBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAccessDoorRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAccessDoorRelinquishDefault() interface {
		BACnetConstructedDataAccessDoorRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogOutputRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogOutputRelinquishDefault() interface {
		BACnetConstructedDataAnalogOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataAnalogValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataAnalogValueRelinquishDefault() interface {
		BACnetConstructedDataAnalogValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryOutputRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryOutputRelinquishDefault() interface {
		BACnetConstructedDataBinaryOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryValueRelinquishDefault() interface {
		BACnetConstructedDataBinaryValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBinaryLightingOutputRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBinaryLightingOutputRelinquishDefault() interface {
		BACnetConstructedDataBinaryLightingOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataBitStringValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataBitStringValueRelinquishDefault() interface {
		BACnetConstructedDataBitStringValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCharacterStringValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCharacterStringValueRelinquishDefault() interface {
		BACnetConstructedDataCharacterStringValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateValueRelinquishDefault() interface {
		BACnetConstructedDataDateValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDatePatternValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDatePatternValueRelinquishDefault() interface {
		BACnetConstructedDataDatePatternValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateTimeValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateTimeValueRelinquishDefault() interface {
		BACnetConstructedDataDateTimeValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataDateTimePatternValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataDateTimePatternValueRelinquishDefault() interface {
		BACnetConstructedDataDateTimePatternValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueRelinquishDefault() interface {
		BACnetConstructedDataLargeAnalogValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingOutputRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingOutputRelinquishDefault() interface {
		BACnetConstructedDataLightingOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimePatternValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimePatternValueRelinquishDefault() interface {
		BACnetConstructedDataTimePatternValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeValueRelinquishDefault() interface {
		BACnetConstructedDataTimeValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueRelinquishDefault() interface {
		BACnetConstructedDataIntegerValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataOctetStringValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataOctetStringValueRelinquishDefault() interface {
		BACnetConstructedDataOctetStringValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueRelinquishDefault() interface {
		BACnetConstructedDataPositiveIntegerValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateOutputRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateOutputRelinquishDefault() interface {
		BACnetConstructedDataMultiStateOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataMultiStateValueRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataMultiStateValueRelinquishDefault() interface {
		BACnetConstructedDataMultiStateValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRelinquishDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRelinquishDefault() interface {
		BACnetConstructedDataRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRepresents converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRepresents() interface {
		BACnetConstructedDataRepresentsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRequestedShedLevel converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRequestedShedLevel() interface {
		BACnetConstructedDataRequestedShedLevelBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRequestedUpdateInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRequestedUpdateInterval() interface {
		BACnetConstructedDataRequestedUpdateIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRequired converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRequired() interface {
		BACnetConstructedDataRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLargeAnalogValueResolution converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLargeAnalogValueResolution() interface {
		BACnetConstructedDataLargeAnalogValueResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataIntegerValueResolution converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataIntegerValueResolution() interface {
		BACnetConstructedDataIntegerValueResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataPositiveIntegerValueResolution converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataPositiveIntegerValueResolution() interface {
		BACnetConstructedDataPositiveIntegerValueResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerResolution converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerResolution() interface {
		BACnetConstructedDataTimerResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataResolution converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataResolution() interface {
		BACnetConstructedDataResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRestartNotificationRecipients converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRestartNotificationRecipients() interface {
		BACnetConstructedDataRestartNotificationRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRestoreCompletionTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRestoreCompletionTime() interface {
		BACnetConstructedDataRestoreCompletionTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRestorePreparationTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRestorePreparationTime() interface {
		BACnetConstructedDataRestorePreparationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataRoutingTable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataRoutingTable() interface {
		BACnetConstructedDataRoutingTableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataScale converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataScale() interface {
		BACnetConstructedDataScaleBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataScaleFactor converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataScaleFactor() interface {
		BACnetConstructedDataScaleFactorBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataScheduleDefault converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataScheduleDefault() interface {
		BACnetConstructedDataScheduleDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSecuredStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSecuredStatus() interface {
		BACnetConstructedDataSecuredStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSecurityPDUTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSecurityPDUTimeout() interface {
		BACnetConstructedDataSecurityPDUTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSecurityTimeWindow converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSecurityTimeWindow() interface {
		BACnetConstructedDataSecurityTimeWindowBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSegmentationSupported converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSegmentationSupported() interface {
		BACnetConstructedDataSegmentationSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSerialNumber converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSerialNumber() interface {
		BACnetConstructedDataSerialNumberBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSetpoint converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSetpoint() interface {
		BACnetConstructedDataSetpointBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSetpointReference converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSetpointReference() interface {
		BACnetConstructedDataSetpointReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSetting converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSetting() interface {
		BACnetConstructedDataSettingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataShedDuration converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataShedDuration() interface {
		BACnetConstructedDataShedDurationBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataShedLevelDescriptions converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataShedLevelDescriptions() interface {
		BACnetConstructedDataShedLevelDescriptionsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataShedLevels converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataShedLevels() interface {
		BACnetConstructedDataShedLevelsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSilenced converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSilenced() interface {
		BACnetConstructedDataSilencedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSlaveAddressBinding converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSlaveAddressBinding() interface {
		BACnetConstructedDataSlaveAddressBindingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSlaveProxyEnable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSlaveProxyEnable() interface {
		BACnetConstructedDataSlaveProxyEnableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStartTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStartTime() interface {
		BACnetConstructedDataStartTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStateChangeValues converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStateChangeValues() interface {
		BACnetConstructedDataStateChangeValuesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStateDescription converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStateDescription() interface {
		BACnetConstructedDataStateDescriptionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStateText converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStateText() interface {
		BACnetConstructedDataStateTextBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStatusFlags converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStatusFlags() interface {
		BACnetConstructedDataStatusFlagsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStopTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStopTime() interface {
		BACnetConstructedDataStopTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStopWhenFull converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStopWhenFull() interface {
		BACnetConstructedDataStopWhenFullBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStrikeCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStrikeCount() interface {
		BACnetConstructedDataStrikeCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataStructuredObjectList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataStructuredObjectList() interface {
		BACnetConstructedDataStructuredObjectListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSubordinateAnnotations converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSubordinateAnnotations() interface {
		BACnetConstructedDataSubordinateAnnotationsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSubordinateList converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSubordinateList() interface {
		BACnetConstructedDataSubordinateListBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSubordinateNodeTypes converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSubordinateNodeTypes() interface {
		BACnetConstructedDataSubordinateNodeTypesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSubordinateRelationships converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSubordinateRelationships() interface {
		BACnetConstructedDataSubordinateRelationshipsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSubordinateTags converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSubordinateTags() interface {
		BACnetConstructedDataSubordinateTagsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSubscribedRecipients converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSubscribedRecipients() interface {
		BACnetConstructedDataSubscribedRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSupportedFormatClasses converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSupportedFormatClasses() interface {
		BACnetConstructedDataSupportedFormatClassesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSupportedFormats converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSupportedFormats() interface {
		BACnetConstructedDataSupportedFormatsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSupportedSecurityAlgorithms converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSupportedSecurityAlgorithms() interface {
		BACnetConstructedDataSupportedSecurityAlgorithmsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataSystemStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataSystemStatus() interface {
		BACnetConstructedDataSystemStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTags converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTags() interface {
		BACnetConstructedDataTagsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataThreatAuthority converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataThreatAuthority() interface {
		BACnetConstructedDataThreatAuthorityBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataThreatLevel converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataThreatLevel() interface {
		BACnetConstructedDataThreatLevelBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeDelay converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeDelay() interface {
		BACnetConstructedDataTimeDelayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeDelayNormal converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeDelayNormal() interface {
		BACnetConstructedDataTimeDelayNormalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeOfActiveTimeReset converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeOfActiveTimeReset() interface {
		BACnetConstructedDataTimeOfActiveTimeResetBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeOfDeviceRestart converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeOfDeviceRestart() interface {
		BACnetConstructedDataTimeOfDeviceRestartBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeOfStateCountReset converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeOfStateCountReset() interface {
		BACnetConstructedDataTimeOfStateCountResetBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeOfStrikeCountReset converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeOfStrikeCountReset() interface {
		BACnetConstructedDataTimeOfStrikeCountResetBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeSynchronizationInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeSynchronizationInterval() interface {
		BACnetConstructedDataTimeSynchronizationIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimeSynchronizationRecipients converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimeSynchronizationRecipients() interface {
		BACnetConstructedDataTimeSynchronizationRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerRunning converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerRunning() interface {
		BACnetConstructedDataTimerRunningBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTimerState converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTimerState() interface {
		BACnetConstructedDataTimerStateBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTotalRecordCount converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTotalRecordCount() interface {
		BACnetConstructedDataTotalRecordCountBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTraceFlag converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTraceFlag() interface {
		BACnetConstructedDataTraceFlagBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataLightingOutputTrackingValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataLightingOutputTrackingValue() interface {
		BACnetConstructedDataLightingOutputTrackingValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrackingValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrackingValue() interface {
		BACnetConstructedDataTrackingValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTransactionNotificationClass converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTransactionNotificationClass() interface {
		BACnetConstructedDataTransactionNotificationClassBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTransition converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTransition() interface {
		BACnetConstructedDataTransitionBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataTrigger converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataTrigger() interface {
		BACnetConstructedDataTriggerBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUnits converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUnits() interface {
		BACnetConstructedDataUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUpdateInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUpdateInterval() interface {
		BACnetConstructedDataUpdateIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUpdateKeySetTimeout converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUpdateKeySetTimeout() interface {
		BACnetConstructedDataUpdateKeySetTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataCredentialDataInputUpdateTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataCredentialDataInputUpdateTime() interface {
		BACnetConstructedDataCredentialDataInputUpdateTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUpdateTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUpdateTime() interface {
		BACnetConstructedDataUpdateTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUserExternalIdentifier converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUserExternalIdentifier() interface {
		BACnetConstructedDataUserExternalIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUserInformationReference converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUserInformationReference() interface {
		BACnetConstructedDataUserInformationReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUserName converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUserName() interface {
		BACnetConstructedDataUserNameBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUserType converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUserType() interface {
		BACnetConstructedDataUserTypeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUsesRemaining converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUsesRemaining() interface {
		BACnetConstructedDataUsesRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUTCOffset converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUTCOffset() interface {
		BACnetConstructedDataUTCOffsetBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUTCTimeSynchronizationRecipients converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUTCTimeSynchronizationRecipients() interface {
		BACnetConstructedDataUTCTimeSynchronizationRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataValidSamples converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataValidSamples() interface {
		BACnetConstructedDataValidSamplesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataValueBeforeChange converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataValueBeforeChange() interface {
		BACnetConstructedDataValueBeforeChangeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataValueChangeTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataValueChangeTime() interface {
		BACnetConstructedDataValueChangeTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataValueSet converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataValueSet() interface {
		BACnetConstructedDataValueSetBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataValueSource converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataValueSource() interface {
		BACnetConstructedDataValueSourceBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataValueSourceArray converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataValueSourceArray() interface {
		BACnetConstructedDataValueSourceArrayBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataVarianceValue converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataVarianceValue() interface {
		BACnetConstructedDataVarianceValueBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataVendorIdentifier converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataVendorIdentifier() interface {
		BACnetConstructedDataVendorIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataVendorName converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataVendorName() interface {
		BACnetConstructedDataVendorNameBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataVerificationTime converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataVerificationTime() interface {
		BACnetConstructedDataVerificationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataVirtualMACAddressTable converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataVirtualMACAddressTable() interface {
		BACnetConstructedDataVirtualMACAddressTableBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataVTClassesSupported converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataVTClassesSupported() interface {
		BACnetConstructedDataVTClassesSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataWeeklySchedule converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataWeeklySchedule() interface {
		BACnetConstructedDataWeeklyScheduleBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataWindowInterval converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataWindowInterval() interface {
		BACnetConstructedDataWindowIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataWindowSamples converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataWindowSamples() interface {
		BACnetConstructedDataWindowSamplesBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataWriteStatus converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataWriteStatus() interface {
		BACnetConstructedDataWriteStatusBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataZoneFrom converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataZoneFrom() interface {
		BACnetConstructedDataZoneFromBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataZoneMembers converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataZoneMembers() interface {
		BACnetConstructedDataZoneMembersBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataZoneTo converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataZoneTo() interface {
		BACnetConstructedDataZoneToBuilder
		Done() BACnetConstructedDataBuilder
	}
	// AsBACnetConstructedDataUnspecified converts this build to a subType of BACnetConstructedData. It is always possible to return to current builder using Done()
	AsBACnetConstructedDataUnspecified() interface {
		BACnetConstructedDataUnspecifiedBuilder
		Done() BACnetConstructedDataBuilder
	}
	// Build builds the BACnetConstructedData or returns an error if something is wrong
	PartialBuild() (BACnetConstructedDataContract, error)
	// MustBuild does the same as Build but panics on error
	PartialMustBuild() BACnetConstructedDataContract
	// Build builds the BACnetConstructedData or returns an error if something is wrong
	Build() (BACnetConstructedData, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() BACnetConstructedData
}

// NewBACnetConstructedDataBuilder() creates a BACnetConstructedDataBuilder
func NewBACnetConstructedDataBuilder() BACnetConstructedDataBuilder {
	return &_BACnetConstructedDataBuilder{_BACnetConstructedData: new(_BACnetConstructedData)}
}

type _BACnetConstructedDataChildBuilder interface {
	utils.Copyable
	setParent(BACnetConstructedDataContract)
	buildForBACnetConstructedData() (BACnetConstructedData, error)
}

type _BACnetConstructedDataBuilder struct {
	*_BACnetConstructedData

	childBuilder _BACnetConstructedDataChildBuilder

	err *utils.MultiError
}

var _ (BACnetConstructedDataBuilder) = (*_BACnetConstructedDataBuilder)(nil)

func (b *_BACnetConstructedDataBuilder) WithMandatoryFields(openingTag BACnetOpeningTag, peekedTagHeader BACnetTagHeader, closingTag BACnetClosingTag) BACnetConstructedDataBuilder {
	return b.WithOpeningTag(openingTag).WithPeekedTagHeader(peekedTagHeader).WithClosingTag(closingTag)
}

func (b *_BACnetConstructedDataBuilder) WithOpeningTag(openingTag BACnetOpeningTag) BACnetConstructedDataBuilder {
	b.OpeningTag = openingTag
	return b
}

func (b *_BACnetConstructedDataBuilder) WithOpeningTagBuilder(builderSupplier func(BACnetOpeningTagBuilder) BACnetOpeningTagBuilder) BACnetConstructedDataBuilder {
	builder := builderSupplier(b.OpeningTag.CreateBACnetOpeningTagBuilder())
	var err error
	b.OpeningTag, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "BACnetOpeningTagBuilder failed"))
	}
	return b
}

func (b *_BACnetConstructedDataBuilder) WithPeekedTagHeader(peekedTagHeader BACnetTagHeader) BACnetConstructedDataBuilder {
	b.PeekedTagHeader = peekedTagHeader
	return b
}

func (b *_BACnetConstructedDataBuilder) WithPeekedTagHeaderBuilder(builderSupplier func(BACnetTagHeaderBuilder) BACnetTagHeaderBuilder) BACnetConstructedDataBuilder {
	builder := builderSupplier(b.PeekedTagHeader.CreateBACnetTagHeaderBuilder())
	var err error
	b.PeekedTagHeader, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "BACnetTagHeaderBuilder failed"))
	}
	return b
}

func (b *_BACnetConstructedDataBuilder) WithClosingTag(closingTag BACnetClosingTag) BACnetConstructedDataBuilder {
	b.ClosingTag = closingTag
	return b
}

func (b *_BACnetConstructedDataBuilder) WithClosingTagBuilder(builderSupplier func(BACnetClosingTagBuilder) BACnetClosingTagBuilder) BACnetConstructedDataBuilder {
	builder := builderSupplier(b.ClosingTag.CreateBACnetClosingTagBuilder())
	var err error
	b.ClosingTag, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "BACnetClosingTagBuilder failed"))
	}
	return b
}

func (b *_BACnetConstructedDataBuilder) PartialBuild() (BACnetConstructedDataContract, error) {
	if b.OpeningTag == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'openingTag' not set"))
	}
	if b.PeekedTagHeader == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'peekedTagHeader' not set"))
	}
	if b.ClosingTag == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'closingTag' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._BACnetConstructedData.deepCopy(), nil
}

func (b *_BACnetConstructedDataBuilder) PartialMustBuild() BACnetConstructedDataContract {
	build, err := b.PartialBuild()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAbsenteeLimit() interface {
	BACnetConstructedDataAbsenteeLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAbsenteeLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAbsenteeLimitBuilder().(*_BACnetConstructedDataAbsenteeLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAcceptedModes() interface {
	BACnetConstructedDataAcceptedModesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAcceptedModesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAcceptedModesBuilder().(*_BACnetConstructedDataAcceptedModesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessAlarmEvents() interface {
	BACnetConstructedDataAccessAlarmEventsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessAlarmEventsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessAlarmEventsBuilder().(*_BACnetConstructedDataAccessAlarmEventsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessDoors() interface {
	BACnetConstructedDataAccessDoorsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessDoorsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessDoorsBuilder().(*_BACnetConstructedDataAccessDoorsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessEvent() interface {
	BACnetConstructedDataAccessEventBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessEventBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessEventBuilder().(*_BACnetConstructedDataAccessEventBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessEventAuthenticationFactor() interface {
	BACnetConstructedDataAccessEventAuthenticationFactorBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessEventAuthenticationFactorBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessEventAuthenticationFactorBuilder().(*_BACnetConstructedDataAccessEventAuthenticationFactorBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessEventCredential() interface {
	BACnetConstructedDataAccessEventCredentialBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessEventCredentialBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessEventCredentialBuilder().(*_BACnetConstructedDataAccessEventCredentialBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessEventTag() interface {
	BACnetConstructedDataAccessEventTagBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessEventTagBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessEventTagBuilder().(*_BACnetConstructedDataAccessEventTagBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessEventTime() interface {
	BACnetConstructedDataAccessEventTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessEventTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessEventTimeBuilder().(*_BACnetConstructedDataAccessEventTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessTransactionEvents() interface {
	BACnetConstructedDataAccessTransactionEventsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessTransactionEventsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessTransactionEventsBuilder().(*_BACnetConstructedDataAccessTransactionEventsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccompaniment() interface {
	BACnetConstructedDataAccompanimentBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccompanimentBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccompanimentBuilder().(*_BACnetConstructedDataAccompanimentBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccompanimentTime() interface {
	BACnetConstructedDataAccompanimentTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccompanimentTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccompanimentTimeBuilder().(*_BACnetConstructedDataAccompanimentTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAckRequired() interface {
	BACnetConstructedDataAckRequiredBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAckRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAckRequiredBuilder().(*_BACnetConstructedDataAckRequiredBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAckedTransitions() interface {
	BACnetConstructedDataAckedTransitionsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAckedTransitionsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAckedTransitionsBuilder().(*_BACnetConstructedDataAckedTransitionsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoopAction() interface {
	BACnetConstructedDataLoopActionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoopActionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoopActionBuilder().(*_BACnetConstructedDataLoopActionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCommandAction() interface {
	BACnetConstructedDataCommandActionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCommandActionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCommandActionBuilder().(*_BACnetConstructedDataCommandActionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAction() interface {
	BACnetConstructedDataActionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActionBuilder().(*_BACnetConstructedDataActionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActionText() interface {
	BACnetConstructedDataActionTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActionTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActionTextBuilder().(*_BACnetConstructedDataActionTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActivationTime() interface {
	BACnetConstructedDataActivationTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActivationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActivationTimeBuilder().(*_BACnetConstructedDataActivationTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActiveAuthenticationPolicy() interface {
	BACnetConstructedDataActiveAuthenticationPolicyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActiveAuthenticationPolicyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActiveAuthenticationPolicyBuilder().(*_BACnetConstructedDataActiveAuthenticationPolicyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActiveCOVMultipleSubscriptions() interface {
	BACnetConstructedDataActiveCOVMultipleSubscriptionsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActiveCOVMultipleSubscriptionsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActiveCOVMultipleSubscriptionsBuilder().(*_BACnetConstructedDataActiveCOVMultipleSubscriptionsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActiveCOVSubscriptions() interface {
	BACnetConstructedDataActiveCOVSubscriptionsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActiveCOVSubscriptionsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActiveCOVSubscriptionsBuilder().(*_BACnetConstructedDataActiveCOVSubscriptionsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActiveText() interface {
	BACnetConstructedDataActiveTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActiveTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActiveTextBuilder().(*_BACnetConstructedDataActiveTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActiveVTSessions() interface {
	BACnetConstructedDataActiveVTSessionsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActiveVTSessionsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActiveVTSessionsBuilder().(*_BACnetConstructedDataActiveVTSessionsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataActualShedLevel() interface {
	BACnetConstructedDataActualShedLevelBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataActualShedLevelBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataActualShedLevelBuilder().(*_BACnetConstructedDataActualShedLevelBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessZoneAdjustValue() interface {
	BACnetConstructedDataAccessZoneAdjustValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessZoneAdjustValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessZoneAdjustValueBuilder().(*_BACnetConstructedDataAccessZoneAdjustValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPulseConverterAdjustValue() interface {
	BACnetConstructedDataPulseConverterAdjustValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPulseConverterAdjustValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPulseConverterAdjustValueBuilder().(*_BACnetConstructedDataPulseConverterAdjustValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAdjustValue() interface {
	BACnetConstructedDataAdjustValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAdjustValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAdjustValueBuilder().(*_BACnetConstructedDataAdjustValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAlarmValue() interface {
	BACnetConstructedDataAlarmValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAlarmValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAlarmValueBuilder().(*_BACnetConstructedDataAlarmValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessDoorAlarmValues() interface {
	BACnetConstructedDataAccessDoorAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessDoorAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessDoorAlarmValuesBuilder().(*_BACnetConstructedDataAccessDoorAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessZoneAlarmValues() interface {
	BACnetConstructedDataAccessZoneAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessZoneAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessZoneAlarmValuesBuilder().(*_BACnetConstructedDataAccessZoneAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBitStringValueAlarmValues() interface {
	BACnetConstructedDataBitStringValueAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBitStringValueAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBitStringValueAlarmValuesBuilder().(*_BACnetConstructedDataBitStringValueAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCharacterStringValueAlarmValues() interface {
	BACnetConstructedDataCharacterStringValueAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCharacterStringValueAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCharacterStringValueAlarmValuesBuilder().(*_BACnetConstructedDataCharacterStringValueAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyPointAlarmValues() interface {
	BACnetConstructedDataLifeSafetyPointAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyPointAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyPointAlarmValuesBuilder().(*_BACnetConstructedDataLifeSafetyPointAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyZoneAlarmValues() interface {
	BACnetConstructedDataLifeSafetyZoneAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyZoneAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyZoneAlarmValuesBuilder().(*_BACnetConstructedDataLifeSafetyZoneAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateInputAlarmValues() interface {
	BACnetConstructedDataMultiStateInputAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateInputAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateInputAlarmValuesBuilder().(*_BACnetConstructedDataMultiStateInputAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateValueAlarmValues() interface {
	BACnetConstructedDataMultiStateValueAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateValueAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateValueAlarmValuesBuilder().(*_BACnetConstructedDataMultiStateValueAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerAlarmValues() interface {
	BACnetConstructedDataTimerAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerAlarmValuesBuilder().(*_BACnetConstructedDataTimerAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAlarmValues() interface {
	BACnetConstructedDataAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAlarmValuesBuilder().(*_BACnetConstructedDataAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAlignIntervals() interface {
	BACnetConstructedDataAlignIntervalsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAlignIntervalsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAlignIntervalsBuilder().(*_BACnetConstructedDataAlignIntervalsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessCredentialAll() interface {
	BACnetConstructedDataAccessCredentialAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessCredentialAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessCredentialAllBuilder().(*_BACnetConstructedDataAccessCredentialAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessDoorAll() interface {
	BACnetConstructedDataAccessDoorAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessDoorAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessDoorAllBuilder().(*_BACnetConstructedDataAccessDoorAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessPointAll() interface {
	BACnetConstructedDataAccessPointAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessPointAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessPointAllBuilder().(*_BACnetConstructedDataAccessPointAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessRightsAll() interface {
	BACnetConstructedDataAccessRightsAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessRightsAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessRightsAllBuilder().(*_BACnetConstructedDataAccessRightsAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessUserAll() interface {
	BACnetConstructedDataAccessUserAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessUserAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessUserAllBuilder().(*_BACnetConstructedDataAccessUserAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessZoneAll() interface {
	BACnetConstructedDataAccessZoneAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessZoneAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessZoneAllBuilder().(*_BACnetConstructedDataAccessZoneAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorAll() interface {
	BACnetConstructedDataAccumulatorAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorAllBuilder().(*_BACnetConstructedDataAccumulatorAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAlertEnrollmentAll() interface {
	BACnetConstructedDataAlertEnrollmentAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAlertEnrollmentAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAlertEnrollmentAllBuilder().(*_BACnetConstructedDataAlertEnrollmentAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogInputAll() interface {
	BACnetConstructedDataAnalogInputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogInputAllBuilder().(*_BACnetConstructedDataAnalogInputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogOutputAll() interface {
	BACnetConstructedDataAnalogOutputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogOutputAllBuilder().(*_BACnetConstructedDataAnalogOutputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogValueAll() interface {
	BACnetConstructedDataAnalogValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogValueAllBuilder().(*_BACnetConstructedDataAnalogValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAveragingAll() interface {
	BACnetConstructedDataAveragingAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAveragingAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAveragingAllBuilder().(*_BACnetConstructedDataAveragingAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryInputAll() interface {
	BACnetConstructedDataBinaryInputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryInputAllBuilder().(*_BACnetConstructedDataBinaryInputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryLightingOutputAll() interface {
	BACnetConstructedDataBinaryLightingOutputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryLightingOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryLightingOutputAllBuilder().(*_BACnetConstructedDataBinaryLightingOutputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryOutputAll() interface {
	BACnetConstructedDataBinaryOutputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryOutputAllBuilder().(*_BACnetConstructedDataBinaryOutputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryValueAll() interface {
	BACnetConstructedDataBinaryValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryValueAllBuilder().(*_BACnetConstructedDataBinaryValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBitstringValueAll() interface {
	BACnetConstructedDataBitstringValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBitstringValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBitstringValueAllBuilder().(*_BACnetConstructedDataBitstringValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCalendarAll() interface {
	BACnetConstructedDataCalendarAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCalendarAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCalendarAllBuilder().(*_BACnetConstructedDataCalendarAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChannelAll() interface {
	BACnetConstructedDataChannelAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChannelAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChannelAllBuilder().(*_BACnetConstructedDataChannelAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCharacterstringValueAll() interface {
	BACnetConstructedDataCharacterstringValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCharacterstringValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCharacterstringValueAllBuilder().(*_BACnetConstructedDataCharacterstringValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCommandAll() interface {
	BACnetConstructedDataCommandAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCommandAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCommandAllBuilder().(*_BACnetConstructedDataCommandAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentialDataInputAll() interface {
	BACnetConstructedDataCredentialDataInputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialDataInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialDataInputAllBuilder().(*_BACnetConstructedDataCredentialDataInputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDatepatternValueAll() interface {
	BACnetConstructedDataDatepatternValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDatepatternValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDatepatternValueAllBuilder().(*_BACnetConstructedDataDatepatternValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateValueAll() interface {
	BACnetConstructedDataDateValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateValueAllBuilder().(*_BACnetConstructedDataDateValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDatetimepatternValueAll() interface {
	BACnetConstructedDataDatetimepatternValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDatetimepatternValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDatetimepatternValueAllBuilder().(*_BACnetConstructedDataDatetimepatternValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDatetimeValueAll() interface {
	BACnetConstructedDataDatetimeValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDatetimeValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDatetimeValueAllBuilder().(*_BACnetConstructedDataDatetimeValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeviceAll() interface {
	BACnetConstructedDataDeviceAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeviceAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeviceAllBuilder().(*_BACnetConstructedDataDeviceAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataElevatorGroupAll() interface {
	BACnetConstructedDataElevatorGroupAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataElevatorGroupAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataElevatorGroupAllBuilder().(*_BACnetConstructedDataElevatorGroupAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEscalatorAll() interface {
	BACnetConstructedDataEscalatorAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEscalatorAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEscalatorAllBuilder().(*_BACnetConstructedDataEscalatorAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventEnrollmentAll() interface {
	BACnetConstructedDataEventEnrollmentAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventEnrollmentAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventEnrollmentAllBuilder().(*_BACnetConstructedDataEventEnrollmentAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventLogAll() interface {
	BACnetConstructedDataEventLogAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventLogAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventLogAllBuilder().(*_BACnetConstructedDataEventLogAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFileAll() interface {
	BACnetConstructedDataFileAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFileAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFileAllBuilder().(*_BACnetConstructedDataFileAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGlobalGroupAll() interface {
	BACnetConstructedDataGlobalGroupAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGlobalGroupAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGlobalGroupAllBuilder().(*_BACnetConstructedDataGlobalGroupAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGroupAll() interface {
	BACnetConstructedDataGroupAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGroupAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGroupAllBuilder().(*_BACnetConstructedDataGroupAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueAll() interface {
	BACnetConstructedDataIntegerValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueAllBuilder().(*_BACnetConstructedDataIntegerValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueAll() interface {
	BACnetConstructedDataLargeAnalogValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueAllBuilder().(*_BACnetConstructedDataLargeAnalogValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyPointAll() interface {
	BACnetConstructedDataLifeSafetyPointAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyPointAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyPointAllBuilder().(*_BACnetConstructedDataLifeSafetyPointAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyZoneAll() interface {
	BACnetConstructedDataLifeSafetyZoneAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyZoneAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyZoneAllBuilder().(*_BACnetConstructedDataLifeSafetyZoneAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLiftAll() interface {
	BACnetConstructedDataLiftAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLiftAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLiftAllBuilder().(*_BACnetConstructedDataLiftAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingOutputAll() interface {
	BACnetConstructedDataLightingOutputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingOutputAllBuilder().(*_BACnetConstructedDataLightingOutputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoadControlAll() interface {
	BACnetConstructedDataLoadControlAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoadControlAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoadControlAllBuilder().(*_BACnetConstructedDataLoadControlAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoopAll() interface {
	BACnetConstructedDataLoopAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoopAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoopAllBuilder().(*_BACnetConstructedDataLoopAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateInputAll() interface {
	BACnetConstructedDataMultiStateInputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateInputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateInputAllBuilder().(*_BACnetConstructedDataMultiStateInputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateOutputAll() interface {
	BACnetConstructedDataMultiStateOutputAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateOutputAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateOutputAllBuilder().(*_BACnetConstructedDataMultiStateOutputAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateValueAll() interface {
	BACnetConstructedDataMultiStateValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateValueAllBuilder().(*_BACnetConstructedDataMultiStateValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkPortAll() interface {
	BACnetConstructedDataNetworkPortAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkPortAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkPortAllBuilder().(*_BACnetConstructedDataNetworkPortAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkSecurityAll() interface {
	BACnetConstructedDataNetworkSecurityAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkSecurityAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkSecurityAllBuilder().(*_BACnetConstructedDataNetworkSecurityAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNotificationClassAll() interface {
	BACnetConstructedDataNotificationClassAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNotificationClassAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNotificationClassAllBuilder().(*_BACnetConstructedDataNotificationClassAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNotificationForwarderAll() interface {
	BACnetConstructedDataNotificationForwarderAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNotificationForwarderAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNotificationForwarderAllBuilder().(*_BACnetConstructedDataNotificationForwarderAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOctetstringValueAll() interface {
	BACnetConstructedDataOctetstringValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOctetstringValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOctetstringValueAllBuilder().(*_BACnetConstructedDataOctetstringValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueAll() interface {
	BACnetConstructedDataPositiveIntegerValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueAllBuilder().(*_BACnetConstructedDataPositiveIntegerValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProgramAll() interface {
	BACnetConstructedDataProgramAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProgramAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProgramAllBuilder().(*_BACnetConstructedDataProgramAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPulseConverterAll() interface {
	BACnetConstructedDataPulseConverterAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPulseConverterAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPulseConverterAllBuilder().(*_BACnetConstructedDataPulseConverterAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataScheduleAll() interface {
	BACnetConstructedDataScheduleAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataScheduleAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataScheduleAllBuilder().(*_BACnetConstructedDataScheduleAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStructuredViewAll() interface {
	BACnetConstructedDataStructuredViewAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStructuredViewAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStructuredViewAllBuilder().(*_BACnetConstructedDataStructuredViewAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimepatternValueAll() interface {
	BACnetConstructedDataTimepatternValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimepatternValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimepatternValueAllBuilder().(*_BACnetConstructedDataTimepatternValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeValueAll() interface {
	BACnetConstructedDataTimeValueAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeValueAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeValueAllBuilder().(*_BACnetConstructedDataTimeValueAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerAll() interface {
	BACnetConstructedDataTimerAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerAllBuilder().(*_BACnetConstructedDataTimerAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrendLogAll() interface {
	BACnetConstructedDataTrendLogAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrendLogAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrendLogAllBuilder().(*_BACnetConstructedDataTrendLogAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrendLogMultipleAll() interface {
	BACnetConstructedDataTrendLogMultipleAllBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrendLogMultipleAllBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrendLogMultipleAllBuilder().(*_BACnetConstructedDataTrendLogMultipleAllBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAllWritesSuccessful() interface {
	BACnetConstructedDataAllWritesSuccessfulBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAllWritesSuccessfulBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAllWritesSuccessfulBuilder().(*_BACnetConstructedDataAllWritesSuccessfulBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAllowGroupDelayInhibit() interface {
	BACnetConstructedDataAllowGroupDelayInhibitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAllowGroupDelayInhibitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAllowGroupDelayInhibitBuilder().(*_BACnetConstructedDataAllowGroupDelayInhibitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAPDULength() interface {
	BACnetConstructedDataAPDULengthBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAPDULengthBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAPDULengthBuilder().(*_BACnetConstructedDataAPDULengthBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAPDUSegmentTimeout() interface {
	BACnetConstructedDataAPDUSegmentTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAPDUSegmentTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAPDUSegmentTimeoutBuilder().(*_BACnetConstructedDataAPDUSegmentTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAPDUTimeout() interface {
	BACnetConstructedDataAPDUTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAPDUTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAPDUTimeoutBuilder().(*_BACnetConstructedDataAPDUTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataApplicationSoftwareVersion() interface {
	BACnetConstructedDataApplicationSoftwareVersionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataApplicationSoftwareVersionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataApplicationSoftwareVersionBuilder().(*_BACnetConstructedDataApplicationSoftwareVersionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataArchive() interface {
	BACnetConstructedDataArchiveBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataArchiveBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataArchiveBuilder().(*_BACnetConstructedDataArchiveBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAssignedAccessRights() interface {
	BACnetConstructedDataAssignedAccessRightsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAssignedAccessRightsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAssignedAccessRightsBuilder().(*_BACnetConstructedDataAssignedAccessRightsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAssignedLandingCalls() interface {
	BACnetConstructedDataAssignedLandingCallsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAssignedLandingCallsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAssignedLandingCallsBuilder().(*_BACnetConstructedDataAssignedLandingCallsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAttemptedSamples() interface {
	BACnetConstructedDataAttemptedSamplesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAttemptedSamplesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAttemptedSamplesBuilder().(*_BACnetConstructedDataAttemptedSamplesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAuthenticationFactors() interface {
	BACnetConstructedDataAuthenticationFactorsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAuthenticationFactorsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAuthenticationFactorsBuilder().(*_BACnetConstructedDataAuthenticationFactorsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAuthenticationPolicyList() interface {
	BACnetConstructedDataAuthenticationPolicyListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAuthenticationPolicyListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAuthenticationPolicyListBuilder().(*_BACnetConstructedDataAuthenticationPolicyListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAuthenticationPolicyNames() interface {
	BACnetConstructedDataAuthenticationPolicyNamesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAuthenticationPolicyNamesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAuthenticationPolicyNamesBuilder().(*_BACnetConstructedDataAuthenticationPolicyNamesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAuthenticationStatus() interface {
	BACnetConstructedDataAuthenticationStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAuthenticationStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAuthenticationStatusBuilder().(*_BACnetConstructedDataAuthenticationStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAuthorizationExemptions() interface {
	BACnetConstructedDataAuthorizationExemptionsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAuthorizationExemptionsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAuthorizationExemptionsBuilder().(*_BACnetConstructedDataAuthorizationExemptionsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAuthorizationMode() interface {
	BACnetConstructedDataAuthorizationModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAuthorizationModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAuthorizationModeBuilder().(*_BACnetConstructedDataAuthorizationModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAutoSlaveDiscovery() interface {
	BACnetConstructedDataAutoSlaveDiscoveryBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAutoSlaveDiscoveryBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAutoSlaveDiscoveryBuilder().(*_BACnetConstructedDataAutoSlaveDiscoveryBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAverageValue() interface {
	BACnetConstructedDataAverageValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAverageValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAverageValueBuilder().(*_BACnetConstructedDataAverageValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBackupAndRestoreState() interface {
	BACnetConstructedDataBackupAndRestoreStateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBackupAndRestoreStateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBackupAndRestoreStateBuilder().(*_BACnetConstructedDataBackupAndRestoreStateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBackupFailureTimeout() interface {
	BACnetConstructedDataBackupFailureTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBackupFailureTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBackupFailureTimeoutBuilder().(*_BACnetConstructedDataBackupFailureTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBackupPreparationTime() interface {
	BACnetConstructedDataBackupPreparationTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBackupPreparationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBackupPreparationTimeBuilder().(*_BACnetConstructedDataBackupPreparationTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPGlobalAddress() interface {
	BACnetConstructedDataBACnetIPGlobalAddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPGlobalAddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPGlobalAddressBuilder().(*_BACnetConstructedDataBACnetIPGlobalAddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPMode() interface {
	BACnetConstructedDataBACnetIPModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPModeBuilder().(*_BACnetConstructedDataBACnetIPModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPMulticastAddress() interface {
	BACnetConstructedDataBACnetIPMulticastAddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPMulticastAddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPMulticastAddressBuilder().(*_BACnetConstructedDataBACnetIPMulticastAddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPNATTraversal() interface {
	BACnetConstructedDataBACnetIPNATTraversalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPNATTraversalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPNATTraversalBuilder().(*_BACnetConstructedDataBACnetIPNATTraversalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPUDPPort() interface {
	BACnetConstructedDataBACnetIPUDPPortBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPUDPPortBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPUDPPortBuilder().(*_BACnetConstructedDataBACnetIPUDPPortBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPv6Mode() interface {
	BACnetConstructedDataBACnetIPv6ModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPv6ModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPv6ModeBuilder().(*_BACnetConstructedDataBACnetIPv6ModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPv6UDPPort() interface {
	BACnetConstructedDataBACnetIPv6UDPPortBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPv6UDPPortBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPv6UDPPortBuilder().(*_BACnetConstructedDataBACnetIPv6UDPPortBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBACnetIPv6MulticastAddress() interface {
	BACnetConstructedDataBACnetIPv6MulticastAddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBACnetIPv6MulticastAddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBACnetIPv6MulticastAddressBuilder().(*_BACnetConstructedDataBACnetIPv6MulticastAddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBaseDeviceSecurityPolicy() interface {
	BACnetConstructedDataBaseDeviceSecurityPolicyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBaseDeviceSecurityPolicyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBaseDeviceSecurityPolicyBuilder().(*_BACnetConstructedDataBaseDeviceSecurityPolicyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBBMDAcceptFDRegistrations() interface {
	BACnetConstructedDataBBMDAcceptFDRegistrationsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBBMDAcceptFDRegistrationsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBBMDAcceptFDRegistrationsBuilder().(*_BACnetConstructedDataBBMDAcceptFDRegistrationsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBBMDBroadcastDistributionTable() interface {
	BACnetConstructedDataBBMDBroadcastDistributionTableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBBMDBroadcastDistributionTableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBBMDBroadcastDistributionTableBuilder().(*_BACnetConstructedDataBBMDBroadcastDistributionTableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBBMDForeignDeviceTable() interface {
	BACnetConstructedDataBBMDForeignDeviceTableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBBMDForeignDeviceTableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBBMDForeignDeviceTableBuilder().(*_BACnetConstructedDataBBMDForeignDeviceTableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBelongsTo() interface {
	BACnetConstructedDataBelongsToBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBelongsToBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBelongsToBuilder().(*_BACnetConstructedDataBelongsToBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBias() interface {
	BACnetConstructedDataBiasBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBiasBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBiasBuilder().(*_BACnetConstructedDataBiasBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBitMask() interface {
	BACnetConstructedDataBitMaskBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBitMaskBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBitMaskBuilder().(*_BACnetConstructedDataBitMaskBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBitText() interface {
	BACnetConstructedDataBitTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBitTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBitTextBuilder().(*_BACnetConstructedDataBitTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBlinkWarnEnable() interface {
	BACnetConstructedDataBlinkWarnEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBlinkWarnEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBlinkWarnEnableBuilder().(*_BACnetConstructedDataBlinkWarnEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBufferSize() interface {
	BACnetConstructedDataBufferSizeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBufferSizeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBufferSizeBuilder().(*_BACnetConstructedDataBufferSizeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarAssignedDirection() interface {
	BACnetConstructedDataCarAssignedDirectionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarAssignedDirectionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarAssignedDirectionBuilder().(*_BACnetConstructedDataCarAssignedDirectionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarDoorCommand() interface {
	BACnetConstructedDataCarDoorCommandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarDoorCommandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarDoorCommandBuilder().(*_BACnetConstructedDataCarDoorCommandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarDoorStatus() interface {
	BACnetConstructedDataCarDoorStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarDoorStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarDoorStatusBuilder().(*_BACnetConstructedDataCarDoorStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarDoorText() interface {
	BACnetConstructedDataCarDoorTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarDoorTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarDoorTextBuilder().(*_BACnetConstructedDataCarDoorTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarDoorZone() interface {
	BACnetConstructedDataCarDoorZoneBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarDoorZoneBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarDoorZoneBuilder().(*_BACnetConstructedDataCarDoorZoneBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarDriveStatus() interface {
	BACnetConstructedDataCarDriveStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarDriveStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarDriveStatusBuilder().(*_BACnetConstructedDataCarDriveStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarLoad() interface {
	BACnetConstructedDataCarLoadBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarLoadBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarLoadBuilder().(*_BACnetConstructedDataCarLoadBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarLoadUnits() interface {
	BACnetConstructedDataCarLoadUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarLoadUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarLoadUnitsBuilder().(*_BACnetConstructedDataCarLoadUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarMode() interface {
	BACnetConstructedDataCarModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarModeBuilder().(*_BACnetConstructedDataCarModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarMovingDirection() interface {
	BACnetConstructedDataCarMovingDirectionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarMovingDirectionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarMovingDirectionBuilder().(*_BACnetConstructedDataCarMovingDirectionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCarPosition() interface {
	BACnetConstructedDataCarPositionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCarPositionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCarPositionBuilder().(*_BACnetConstructedDataCarPositionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChangeOfStateCount() interface {
	BACnetConstructedDataChangeOfStateCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChangeOfStateCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChangeOfStateCountBuilder().(*_BACnetConstructedDataChangeOfStateCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChangeOfStateTime() interface {
	BACnetConstructedDataChangeOfStateTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChangeOfStateTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChangeOfStateTimeBuilder().(*_BACnetConstructedDataChangeOfStateTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChangesPending() interface {
	BACnetConstructedDataChangesPendingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChangesPendingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChangesPendingBuilder().(*_BACnetConstructedDataChangesPendingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChannelNumber() interface {
	BACnetConstructedDataChannelNumberBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChannelNumberBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChannelNumberBuilder().(*_BACnetConstructedDataChannelNumberBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataClientCOVIncrement() interface {
	BACnetConstructedDataClientCOVIncrementBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataClientCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataClientCOVIncrementBuilder().(*_BACnetConstructedDataClientCOVIncrementBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCommand() interface {
	BACnetConstructedDataCommandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCommandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCommandBuilder().(*_BACnetConstructedDataCommandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCommandTimeArray() interface {
	BACnetConstructedDataCommandTimeArrayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCommandTimeArrayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCommandTimeArrayBuilder().(*_BACnetConstructedDataCommandTimeArrayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataConfigurationFiles() interface {
	BACnetConstructedDataConfigurationFilesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataConfigurationFilesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataConfigurationFilesBuilder().(*_BACnetConstructedDataConfigurationFilesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataControlGroups() interface {
	BACnetConstructedDataControlGroupsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataControlGroupsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataControlGroupsBuilder().(*_BACnetConstructedDataControlGroupsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataControlledVariableReference() interface {
	BACnetConstructedDataControlledVariableReferenceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataControlledVariableReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataControlledVariableReferenceBuilder().(*_BACnetConstructedDataControlledVariableReferenceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataControlledVariableUnits() interface {
	BACnetConstructedDataControlledVariableUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataControlledVariableUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataControlledVariableUnitsBuilder().(*_BACnetConstructedDataControlledVariableUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataControlledVariableValue() interface {
	BACnetConstructedDataControlledVariableValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataControlledVariableValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataControlledVariableValueBuilder().(*_BACnetConstructedDataControlledVariableValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCount() interface {
	BACnetConstructedDataCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCountBuilder().(*_BACnetConstructedDataCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCountBeforeChange() interface {
	BACnetConstructedDataCountBeforeChangeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCountBeforeChangeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCountBeforeChangeBuilder().(*_BACnetConstructedDataCountBeforeChangeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCountChangeTime() interface {
	BACnetConstructedDataCountChangeTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCountChangeTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCountChangeTimeBuilder().(*_BACnetConstructedDataCountChangeTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueCOVIncrement() interface {
	BACnetConstructedDataIntegerValueCOVIncrementBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueCOVIncrementBuilder().(*_BACnetConstructedDataIntegerValueCOVIncrementBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueCOVIncrement() interface {
	BACnetConstructedDataLargeAnalogValueCOVIncrementBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueCOVIncrementBuilder().(*_BACnetConstructedDataLargeAnalogValueCOVIncrementBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueCOVIncrement() interface {
	BACnetConstructedDataPositiveIntegerValueCOVIncrementBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueCOVIncrementBuilder().(*_BACnetConstructedDataPositiveIntegerValueCOVIncrementBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCOVIncrement() interface {
	BACnetConstructedDataCOVIncrementBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCOVIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCOVIncrementBuilder().(*_BACnetConstructedDataCOVIncrementBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCOVPeriod() interface {
	BACnetConstructedDataCOVPeriodBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCOVPeriodBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCOVPeriodBuilder().(*_BACnetConstructedDataCOVPeriodBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCOVResubscriptionInterval() interface {
	BACnetConstructedDataCOVResubscriptionIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCOVResubscriptionIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCOVResubscriptionIntervalBuilder().(*_BACnetConstructedDataCOVResubscriptionIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCOVUPeriod() interface {
	BACnetConstructedDataCOVUPeriodBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCOVUPeriodBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCOVUPeriodBuilder().(*_BACnetConstructedDataCOVUPeriodBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCOVURecipients() interface {
	BACnetConstructedDataCOVURecipientsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCOVURecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCOVURecipientsBuilder().(*_BACnetConstructedDataCOVURecipientsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentialDisable() interface {
	BACnetConstructedDataCredentialDisableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialDisableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialDisableBuilder().(*_BACnetConstructedDataCredentialDisableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentialStatus() interface {
	BACnetConstructedDataCredentialStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialStatusBuilder().(*_BACnetConstructedDataCredentialStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentials() interface {
	BACnetConstructedDataCredentialsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialsBuilder().(*_BACnetConstructedDataCredentialsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentialsInZone() interface {
	BACnetConstructedDataCredentialsInZoneBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialsInZoneBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialsInZoneBuilder().(*_BACnetConstructedDataCredentialsInZoneBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCurrentCommandPriority() interface {
	BACnetConstructedDataCurrentCommandPriorityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCurrentCommandPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCurrentCommandPriorityBuilder().(*_BACnetConstructedDataCurrentCommandPriorityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDatabaseRevision() interface {
	BACnetConstructedDataDatabaseRevisionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDatabaseRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDatabaseRevisionBuilder().(*_BACnetConstructedDataDatabaseRevisionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateList() interface {
	BACnetConstructedDataDateListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateListBuilder().(*_BACnetConstructedDataDateListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDaylightSavingsStatus() interface {
	BACnetConstructedDataDaylightSavingsStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDaylightSavingsStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDaylightSavingsStatusBuilder().(*_BACnetConstructedDataDaylightSavingsStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDaysRemaining() interface {
	BACnetConstructedDataDaysRemainingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDaysRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDaysRemainingBuilder().(*_BACnetConstructedDataDaysRemainingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueDeadband() interface {
	BACnetConstructedDataIntegerValueDeadbandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueDeadbandBuilder().(*_BACnetConstructedDataIntegerValueDeadbandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueDeadband() interface {
	BACnetConstructedDataLargeAnalogValueDeadbandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueDeadbandBuilder().(*_BACnetConstructedDataLargeAnalogValueDeadbandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueDeadband() interface {
	BACnetConstructedDataPositiveIntegerValueDeadbandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueDeadbandBuilder().(*_BACnetConstructedDataPositiveIntegerValueDeadbandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeadband() interface {
	BACnetConstructedDataDeadbandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeadbandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeadbandBuilder().(*_BACnetConstructedDataDeadbandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDefaultFadeTime() interface {
	BACnetConstructedDataDefaultFadeTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDefaultFadeTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDefaultFadeTimeBuilder().(*_BACnetConstructedDataDefaultFadeTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDefaultRampRate() interface {
	BACnetConstructedDataDefaultRampRateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDefaultRampRateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDefaultRampRateBuilder().(*_BACnetConstructedDataDefaultRampRateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDefaultStepIncrement() interface {
	BACnetConstructedDataDefaultStepIncrementBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDefaultStepIncrementBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDefaultStepIncrementBuilder().(*_BACnetConstructedDataDefaultStepIncrementBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDefaultSubordinateRelationship() interface {
	BACnetConstructedDataDefaultSubordinateRelationshipBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDefaultSubordinateRelationshipBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDefaultSubordinateRelationshipBuilder().(*_BACnetConstructedDataDefaultSubordinateRelationshipBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDefaultTimeout() interface {
	BACnetConstructedDataDefaultTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDefaultTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDefaultTimeoutBuilder().(*_BACnetConstructedDataDefaultTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeployedProfileLocation() interface {
	BACnetConstructedDataDeployedProfileLocationBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeployedProfileLocationBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeployedProfileLocationBuilder().(*_BACnetConstructedDataDeployedProfileLocationBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDerivativeConstant() interface {
	BACnetConstructedDataDerivativeConstantBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDerivativeConstantBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDerivativeConstantBuilder().(*_BACnetConstructedDataDerivativeConstantBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDerivativeConstantUnits() interface {
	BACnetConstructedDataDerivativeConstantUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDerivativeConstantUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDerivativeConstantUnitsBuilder().(*_BACnetConstructedDataDerivativeConstantUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDescription() interface {
	BACnetConstructedDataDescriptionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDescriptionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDescriptionBuilder().(*_BACnetConstructedDataDescriptionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDescriptionOfHalt() interface {
	BACnetConstructedDataDescriptionOfHaltBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDescriptionOfHaltBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDescriptionOfHaltBuilder().(*_BACnetConstructedDataDescriptionOfHaltBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeviceAddressBinding() interface {
	BACnetConstructedDataDeviceAddressBindingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeviceAddressBindingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeviceAddressBindingBuilder().(*_BACnetConstructedDataDeviceAddressBindingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeviceType() interface {
	BACnetConstructedDataDeviceTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeviceTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeviceTypeBuilder().(*_BACnetConstructedDataDeviceTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDirectReading() interface {
	BACnetConstructedDataDirectReadingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDirectReadingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDirectReadingBuilder().(*_BACnetConstructedDataDirectReadingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDistributionKeyRevision() interface {
	BACnetConstructedDataDistributionKeyRevisionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDistributionKeyRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDistributionKeyRevisionBuilder().(*_BACnetConstructedDataDistributionKeyRevisionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoNotHide() interface {
	BACnetConstructedDataDoNotHideBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoNotHideBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoNotHideBuilder().(*_BACnetConstructedDataDoNotHideBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorAlarmState() interface {
	BACnetConstructedDataDoorAlarmStateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorAlarmStateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorAlarmStateBuilder().(*_BACnetConstructedDataDoorAlarmStateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorExtendedPulseTime() interface {
	BACnetConstructedDataDoorExtendedPulseTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorExtendedPulseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorExtendedPulseTimeBuilder().(*_BACnetConstructedDataDoorExtendedPulseTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorMembers() interface {
	BACnetConstructedDataDoorMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorMembersBuilder().(*_BACnetConstructedDataDoorMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorOpenTooLongTime() interface {
	BACnetConstructedDataDoorOpenTooLongTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorOpenTooLongTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorOpenTooLongTimeBuilder().(*_BACnetConstructedDataDoorOpenTooLongTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorPulseTime() interface {
	BACnetConstructedDataDoorPulseTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorPulseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorPulseTimeBuilder().(*_BACnetConstructedDataDoorPulseTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorStatus() interface {
	BACnetConstructedDataDoorStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorStatusBuilder().(*_BACnetConstructedDataDoorStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDoorUnlockDelayTime() interface {
	BACnetConstructedDataDoorUnlockDelayTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDoorUnlockDelayTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDoorUnlockDelayTimeBuilder().(*_BACnetConstructedDataDoorUnlockDelayTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDutyWindow() interface {
	BACnetConstructedDataDutyWindowBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDutyWindowBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDutyWindowBuilder().(*_BACnetConstructedDataDutyWindowBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEffectivePeriod() interface {
	BACnetConstructedDataEffectivePeriodBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEffectivePeriodBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEffectivePeriodBuilder().(*_BACnetConstructedDataEffectivePeriodBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEgressActive() interface {
	BACnetConstructedDataEgressActiveBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEgressActiveBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEgressActiveBuilder().(*_BACnetConstructedDataEgressActiveBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEgressTime() interface {
	BACnetConstructedDataEgressTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEgressTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEgressTimeBuilder().(*_BACnetConstructedDataEgressTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataElapsedActiveTime() interface {
	BACnetConstructedDataElapsedActiveTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataElapsedActiveTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataElapsedActiveTimeBuilder().(*_BACnetConstructedDataElapsedActiveTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataElevatorGroup() interface {
	BACnetConstructedDataElevatorGroupBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataElevatorGroupBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataElevatorGroupBuilder().(*_BACnetConstructedDataElevatorGroupBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEnable() interface {
	BACnetConstructedDataEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEnableBuilder().(*_BACnetConstructedDataEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEnergyMeter() interface {
	BACnetConstructedDataEnergyMeterBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEnergyMeterBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEnergyMeterBuilder().(*_BACnetConstructedDataEnergyMeterBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEnergyMeterRef() interface {
	BACnetConstructedDataEnergyMeterRefBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEnergyMeterRefBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEnergyMeterRefBuilder().(*_BACnetConstructedDataEnergyMeterRefBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEntryPoints() interface {
	BACnetConstructedDataEntryPointsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEntryPointsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEntryPointsBuilder().(*_BACnetConstructedDataEntryPointsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataErrorLimit() interface {
	BACnetConstructedDataErrorLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataErrorLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataErrorLimitBuilder().(*_BACnetConstructedDataErrorLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEscalatorMode() interface {
	BACnetConstructedDataEscalatorModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEscalatorModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEscalatorModeBuilder().(*_BACnetConstructedDataEscalatorModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventAlgorithmInhibit() interface {
	BACnetConstructedDataEventAlgorithmInhibitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventAlgorithmInhibitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventAlgorithmInhibitBuilder().(*_BACnetConstructedDataEventAlgorithmInhibitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventAlgorithmInhibitRef() interface {
	BACnetConstructedDataEventAlgorithmInhibitRefBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventAlgorithmInhibitRefBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventAlgorithmInhibitRefBuilder().(*_BACnetConstructedDataEventAlgorithmInhibitRefBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventDetectionEnable() interface {
	BACnetConstructedDataEventDetectionEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventDetectionEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventDetectionEnableBuilder().(*_BACnetConstructedDataEventDetectionEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventEnable() interface {
	BACnetConstructedDataEventEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventEnableBuilder().(*_BACnetConstructedDataEventEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventMessageTexts() interface {
	BACnetConstructedDataEventMessageTextsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventMessageTextsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventMessageTextsBuilder().(*_BACnetConstructedDataEventMessageTextsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventMessageTextsConfig() interface {
	BACnetConstructedDataEventMessageTextsConfigBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventMessageTextsConfigBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventMessageTextsConfigBuilder().(*_BACnetConstructedDataEventMessageTextsConfigBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventParameters() interface {
	BACnetConstructedDataEventParametersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventParametersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventParametersBuilder().(*_BACnetConstructedDataEventParametersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventState() interface {
	BACnetConstructedDataEventStateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventStateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventStateBuilder().(*_BACnetConstructedDataEventStateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventTimeStamps() interface {
	BACnetConstructedDataEventTimeStampsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventTimeStampsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventTimeStampsBuilder().(*_BACnetConstructedDataEventTimeStampsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventType() interface {
	BACnetConstructedDataEventTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventTypeBuilder().(*_BACnetConstructedDataEventTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataExceptionSchedule() interface {
	BACnetConstructedDataExceptionScheduleBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataExceptionScheduleBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataExceptionScheduleBuilder().(*_BACnetConstructedDataExceptionScheduleBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataExecutionDelay() interface {
	BACnetConstructedDataExecutionDelayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataExecutionDelayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataExecutionDelayBuilder().(*_BACnetConstructedDataExecutionDelayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataExitPoints() interface {
	BACnetConstructedDataExitPointsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataExitPointsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataExitPointsBuilder().(*_BACnetConstructedDataExitPointsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataExpectedShedLevel() interface {
	BACnetConstructedDataExpectedShedLevelBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataExpectedShedLevelBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataExpectedShedLevelBuilder().(*_BACnetConstructedDataExpectedShedLevelBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataExpirationTime() interface {
	BACnetConstructedDataExpirationTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataExpirationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataExpirationTimeBuilder().(*_BACnetConstructedDataExpirationTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataExtendedTimeEnable() interface {
	BACnetConstructedDataExtendedTimeEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataExtendedTimeEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataExtendedTimeEnableBuilder().(*_BACnetConstructedDataExtendedTimeEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFailedAttemptEvents() interface {
	BACnetConstructedDataFailedAttemptEventsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFailedAttemptEventsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFailedAttemptEventsBuilder().(*_BACnetConstructedDataFailedAttemptEventsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFailedAttempts() interface {
	BACnetConstructedDataFailedAttemptsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFailedAttemptsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFailedAttemptsBuilder().(*_BACnetConstructedDataFailedAttemptsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFailedAttemptsTime() interface {
	BACnetConstructedDataFailedAttemptsTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFailedAttemptsTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFailedAttemptsTimeBuilder().(*_BACnetConstructedDataFailedAttemptsTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorFaultHighLimit() interface {
	BACnetConstructedDataAccumulatorFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorFaultHighLimitBuilder().(*_BACnetConstructedDataAccumulatorFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogInputFaultHighLimit() interface {
	BACnetConstructedDataAnalogInputFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogInputFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogInputFaultHighLimitBuilder().(*_BACnetConstructedDataAnalogInputFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogValueFaultHighLimit() interface {
	BACnetConstructedDataAnalogValueFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogValueFaultHighLimitBuilder().(*_BACnetConstructedDataAnalogValueFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueFaultHighLimit() interface {
	BACnetConstructedDataIntegerValueFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueFaultHighLimitBuilder().(*_BACnetConstructedDataIntegerValueFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueFaultHighLimit() interface {
	BACnetConstructedDataLargeAnalogValueFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueFaultHighLimitBuilder().(*_BACnetConstructedDataLargeAnalogValueFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueFaultHighLimit() interface {
	BACnetConstructedDataPositiveIntegerValueFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueFaultHighLimitBuilder().(*_BACnetConstructedDataPositiveIntegerValueFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFaultHighLimit() interface {
	BACnetConstructedDataFaultHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFaultHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFaultHighLimitBuilder().(*_BACnetConstructedDataFaultHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorFaultLowLimit() interface {
	BACnetConstructedDataAccumulatorFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorFaultLowLimitBuilder().(*_BACnetConstructedDataAccumulatorFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogInputFaultLowLimit() interface {
	BACnetConstructedDataAnalogInputFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogInputFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogInputFaultLowLimitBuilder().(*_BACnetConstructedDataAnalogInputFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogValueFaultLowLimit() interface {
	BACnetConstructedDataAnalogValueFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogValueFaultLowLimitBuilder().(*_BACnetConstructedDataAnalogValueFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueFaultLowLimit() interface {
	BACnetConstructedDataLargeAnalogValueFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueFaultLowLimitBuilder().(*_BACnetConstructedDataLargeAnalogValueFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueFaultLowLimit() interface {
	BACnetConstructedDataIntegerValueFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueFaultLowLimitBuilder().(*_BACnetConstructedDataIntegerValueFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueFaultLowLimit() interface {
	BACnetConstructedDataPositiveIntegerValueFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueFaultLowLimitBuilder().(*_BACnetConstructedDataPositiveIntegerValueFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFaultLowLimit() interface {
	BACnetConstructedDataFaultLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFaultLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFaultLowLimitBuilder().(*_BACnetConstructedDataFaultLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFaultParameters() interface {
	BACnetConstructedDataFaultParametersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFaultParametersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFaultParametersBuilder().(*_BACnetConstructedDataFaultParametersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEscalatorFaultSignals() interface {
	BACnetConstructedDataEscalatorFaultSignalsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEscalatorFaultSignalsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEscalatorFaultSignalsBuilder().(*_BACnetConstructedDataEscalatorFaultSignalsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLiftFaultSignals() interface {
	BACnetConstructedDataLiftFaultSignalsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLiftFaultSignalsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLiftFaultSignalsBuilder().(*_BACnetConstructedDataLiftFaultSignalsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFaultSignals() interface {
	BACnetConstructedDataFaultSignalsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFaultSignalsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFaultSignalsBuilder().(*_BACnetConstructedDataFaultSignalsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFaultType() interface {
	BACnetConstructedDataFaultTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFaultTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFaultTypeBuilder().(*_BACnetConstructedDataFaultTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessDoorFaultValues() interface {
	BACnetConstructedDataAccessDoorFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessDoorFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessDoorFaultValuesBuilder().(*_BACnetConstructedDataAccessDoorFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCharacterStringValueFaultValues() interface {
	BACnetConstructedDataCharacterStringValueFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCharacterStringValueFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCharacterStringValueFaultValuesBuilder().(*_BACnetConstructedDataCharacterStringValueFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyPointFaultValues() interface {
	BACnetConstructedDataLifeSafetyPointFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyPointFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyPointFaultValuesBuilder().(*_BACnetConstructedDataLifeSafetyPointFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyZoneFaultValues() interface {
	BACnetConstructedDataLifeSafetyZoneFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyZoneFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyZoneFaultValuesBuilder().(*_BACnetConstructedDataLifeSafetyZoneFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateInputFaultValues() interface {
	BACnetConstructedDataMultiStateInputFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateInputFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateInputFaultValuesBuilder().(*_BACnetConstructedDataMultiStateInputFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateValueFaultValues() interface {
	BACnetConstructedDataMultiStateValueFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateValueFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateValueFaultValuesBuilder().(*_BACnetConstructedDataMultiStateValueFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFaultValues() interface {
	BACnetConstructedDataFaultValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFaultValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFaultValuesBuilder().(*_BACnetConstructedDataFaultValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFDBBMDAddress() interface {
	BACnetConstructedDataFDBBMDAddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFDBBMDAddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFDBBMDAddressBuilder().(*_BACnetConstructedDataFDBBMDAddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFDSubscriptionLifetime() interface {
	BACnetConstructedDataFDSubscriptionLifetimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFDSubscriptionLifetimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFDSubscriptionLifetimeBuilder().(*_BACnetConstructedDataFDSubscriptionLifetimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryLightingOutputFeedbackValue() interface {
	BACnetConstructedDataBinaryLightingOutputFeedbackValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryLightingOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryLightingOutputFeedbackValueBuilder().(*_BACnetConstructedDataBinaryLightingOutputFeedbackValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryOutputFeedbackValue() interface {
	BACnetConstructedDataBinaryOutputFeedbackValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryOutputFeedbackValueBuilder().(*_BACnetConstructedDataBinaryOutputFeedbackValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingOutputFeedbackValue() interface {
	BACnetConstructedDataLightingOutputFeedbackValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingOutputFeedbackValueBuilder().(*_BACnetConstructedDataLightingOutputFeedbackValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateOutputFeedbackValue() interface {
	BACnetConstructedDataMultiStateOutputFeedbackValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateOutputFeedbackValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateOutputFeedbackValueBuilder().(*_BACnetConstructedDataMultiStateOutputFeedbackValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFileAccessMethod() interface {
	BACnetConstructedDataFileAccessMethodBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFileAccessMethodBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFileAccessMethodBuilder().(*_BACnetConstructedDataFileAccessMethodBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFileSize() interface {
	BACnetConstructedDataFileSizeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFileSizeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFileSizeBuilder().(*_BACnetConstructedDataFileSizeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFileType() interface {
	BACnetConstructedDataFileTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFileTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFileTypeBuilder().(*_BACnetConstructedDataFileTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFirmwareRevision() interface {
	BACnetConstructedDataFirmwareRevisionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFirmwareRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFirmwareRevisionBuilder().(*_BACnetConstructedDataFirmwareRevisionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFloorText() interface {
	BACnetConstructedDataFloorTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFloorTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFloorTextBuilder().(*_BACnetConstructedDataFloorTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFullDutyBaseline() interface {
	BACnetConstructedDataFullDutyBaselineBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFullDutyBaselineBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFullDutyBaselineBuilder().(*_BACnetConstructedDataFullDutyBaselineBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGlobalIdentifier() interface {
	BACnetConstructedDataGlobalIdentifierBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGlobalIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGlobalIdentifierBuilder().(*_BACnetConstructedDataGlobalIdentifierBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGroupID() interface {
	BACnetConstructedDataGroupIDBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGroupIDBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGroupIDBuilder().(*_BACnetConstructedDataGroupIDBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGroupMemberNames() interface {
	BACnetConstructedDataGroupMemberNamesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGroupMemberNamesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGroupMemberNamesBuilder().(*_BACnetConstructedDataGroupMemberNamesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGlobalGroupGroupMembers() interface {
	BACnetConstructedDataGlobalGroupGroupMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGlobalGroupGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGlobalGroupGroupMembersBuilder().(*_BACnetConstructedDataGlobalGroupGroupMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataElevatorGroupGroupMembers() interface {
	BACnetConstructedDataElevatorGroupGroupMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataElevatorGroupGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataElevatorGroupGroupMembersBuilder().(*_BACnetConstructedDataElevatorGroupGroupMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGroupMembers() interface {
	BACnetConstructedDataGroupMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGroupMembersBuilder().(*_BACnetConstructedDataGroupMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGroupMode() interface {
	BACnetConstructedDataGroupModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGroupModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGroupModeBuilder().(*_BACnetConstructedDataGroupModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorHighLimit() interface {
	BACnetConstructedDataAccumulatorHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorHighLimitBuilder().(*_BACnetConstructedDataAccumulatorHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueHighLimit() interface {
	BACnetConstructedDataLargeAnalogValueHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueHighLimitBuilder().(*_BACnetConstructedDataLargeAnalogValueHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueHighLimit() interface {
	BACnetConstructedDataIntegerValueHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueHighLimitBuilder().(*_BACnetConstructedDataIntegerValueHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueHighLimit() interface {
	BACnetConstructedDataPositiveIntegerValueHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueHighLimitBuilder().(*_BACnetConstructedDataPositiveIntegerValueHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataHighLimit() interface {
	BACnetConstructedDataHighLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataHighLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataHighLimitBuilder().(*_BACnetConstructedDataHighLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataHigherDeck() interface {
	BACnetConstructedDataHigherDeckBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataHigherDeckBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataHigherDeckBuilder().(*_BACnetConstructedDataHigherDeckBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInProcess() interface {
	BACnetConstructedDataInProcessBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInProcessBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInProcessBuilder().(*_BACnetConstructedDataInProcessBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInProgress() interface {
	BACnetConstructedDataInProgressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInProgressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInProgressBuilder().(*_BACnetConstructedDataInProgressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInactiveText() interface {
	BACnetConstructedDataInactiveTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInactiveTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInactiveTextBuilder().(*_BACnetConstructedDataInactiveTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInitialTimeout() interface {
	BACnetConstructedDataInitialTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInitialTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInitialTimeoutBuilder().(*_BACnetConstructedDataInitialTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInputReference() interface {
	BACnetConstructedDataInputReferenceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInputReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInputReferenceBuilder().(*_BACnetConstructedDataInputReferenceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInstallationID() interface {
	BACnetConstructedDataInstallationIDBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInstallationIDBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInstallationIDBuilder().(*_BACnetConstructedDataInstallationIDBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInstanceOf() interface {
	BACnetConstructedDataInstanceOfBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInstanceOfBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInstanceOfBuilder().(*_BACnetConstructedDataInstanceOfBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataInstantaneousPower() interface {
	BACnetConstructedDataInstantaneousPowerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataInstantaneousPowerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataInstantaneousPowerBuilder().(*_BACnetConstructedDataInstantaneousPowerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegralConstant() interface {
	BACnetConstructedDataIntegralConstantBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegralConstantBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegralConstantBuilder().(*_BACnetConstructedDataIntegralConstantBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegralConstantUnits() interface {
	BACnetConstructedDataIntegralConstantUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegralConstantUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegralConstantUnitsBuilder().(*_BACnetConstructedDataIntegralConstantUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogInputInterfaceValue() interface {
	BACnetConstructedDataAnalogInputInterfaceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogInputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogInputInterfaceValueBuilder().(*_BACnetConstructedDataAnalogInputInterfaceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogOutputInterfaceValue() interface {
	BACnetConstructedDataAnalogOutputInterfaceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogOutputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogOutputInterfaceValueBuilder().(*_BACnetConstructedDataAnalogOutputInterfaceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryInputInterfaceValue() interface {
	BACnetConstructedDataBinaryInputInterfaceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryInputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryInputInterfaceValueBuilder().(*_BACnetConstructedDataBinaryInputInterfaceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryOutputInterfaceValue() interface {
	BACnetConstructedDataBinaryOutputInterfaceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryOutputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryOutputInterfaceValueBuilder().(*_BACnetConstructedDataBinaryOutputInterfaceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateInputInterfaceValue() interface {
	BACnetConstructedDataMultiStateInputInterfaceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateInputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateInputInterfaceValueBuilder().(*_BACnetConstructedDataMultiStateInputInterfaceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateOutputInterfaceValue() interface {
	BACnetConstructedDataMultiStateOutputInterfaceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateOutputInterfaceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateOutputInterfaceValueBuilder().(*_BACnetConstructedDataMultiStateOutputInterfaceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntervalOffset() interface {
	BACnetConstructedDataIntervalOffsetBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntervalOffsetBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntervalOffsetBuilder().(*_BACnetConstructedDataIntervalOffsetBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPAddress() interface {
	BACnetConstructedDataIPAddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPAddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPAddressBuilder().(*_BACnetConstructedDataIPAddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPDefaultGateway() interface {
	BACnetConstructedDataIPDefaultGatewayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPDefaultGatewayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPDefaultGatewayBuilder().(*_BACnetConstructedDataIPDefaultGatewayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPDHCPEnable() interface {
	BACnetConstructedDataIPDHCPEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPDHCPEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPDHCPEnableBuilder().(*_BACnetConstructedDataIPDHCPEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPDHCPLeaseTime() interface {
	BACnetConstructedDataIPDHCPLeaseTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPDHCPLeaseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPDHCPLeaseTimeBuilder().(*_BACnetConstructedDataIPDHCPLeaseTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPDHCPLeaseTimeRemaining() interface {
	BACnetConstructedDataIPDHCPLeaseTimeRemainingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPDHCPLeaseTimeRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPDHCPLeaseTimeRemainingBuilder().(*_BACnetConstructedDataIPDHCPLeaseTimeRemainingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPDHCPServer() interface {
	BACnetConstructedDataIPDHCPServerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPDHCPServerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPDHCPServerBuilder().(*_BACnetConstructedDataIPDHCPServerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPDNSServer() interface {
	BACnetConstructedDataIPDNSServerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPDNSServerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPDNSServerBuilder().(*_BACnetConstructedDataIPDNSServerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPSubnetMask() interface {
	BACnetConstructedDataIPSubnetMaskBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPSubnetMaskBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPSubnetMaskBuilder().(*_BACnetConstructedDataIPSubnetMaskBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6Address() interface {
	BACnetConstructedDataIPv6AddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6AddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6AddressBuilder().(*_BACnetConstructedDataIPv6AddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6AutoAddressingEnable() interface {
	BACnetConstructedDataIPv6AutoAddressingEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6AutoAddressingEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6AutoAddressingEnableBuilder().(*_BACnetConstructedDataIPv6AutoAddressingEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6DefaultGateway() interface {
	BACnetConstructedDataIPv6DefaultGatewayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6DefaultGatewayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6DefaultGatewayBuilder().(*_BACnetConstructedDataIPv6DefaultGatewayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6DHCPLeaseTime() interface {
	BACnetConstructedDataIPv6DHCPLeaseTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6DHCPLeaseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6DHCPLeaseTimeBuilder().(*_BACnetConstructedDataIPv6DHCPLeaseTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6DHCPLeaseTimeRemaining() interface {
	BACnetConstructedDataIPv6DHCPLeaseTimeRemainingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6DHCPLeaseTimeRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6DHCPLeaseTimeRemainingBuilder().(*_BACnetConstructedDataIPv6DHCPLeaseTimeRemainingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6DHCPServer() interface {
	BACnetConstructedDataIPv6DHCPServerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6DHCPServerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6DHCPServerBuilder().(*_BACnetConstructedDataIPv6DHCPServerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6DNSServer() interface {
	BACnetConstructedDataIPv6DNSServerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6DNSServerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6DNSServerBuilder().(*_BACnetConstructedDataIPv6DNSServerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6PrefixLength() interface {
	BACnetConstructedDataIPv6PrefixLengthBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6PrefixLengthBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6PrefixLengthBuilder().(*_BACnetConstructedDataIPv6PrefixLengthBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIPv6ZoneIndex() interface {
	BACnetConstructedDataIPv6ZoneIndexBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIPv6ZoneIndexBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIPv6ZoneIndexBuilder().(*_BACnetConstructedDataIPv6ZoneIndexBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIsUTC() interface {
	BACnetConstructedDataIsUTCBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIsUTCBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIsUTCBuilder().(*_BACnetConstructedDataIsUTCBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataKeySets() interface {
	BACnetConstructedDataKeySetsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataKeySetsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataKeySetsBuilder().(*_BACnetConstructedDataKeySetsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLandingCallControl() interface {
	BACnetConstructedDataLandingCallControlBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLandingCallControlBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLandingCallControlBuilder().(*_BACnetConstructedDataLandingCallControlBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLandingCalls() interface {
	BACnetConstructedDataLandingCallsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLandingCallsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLandingCallsBuilder().(*_BACnetConstructedDataLandingCallsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLandingDoorStatus() interface {
	BACnetConstructedDataLandingDoorStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLandingDoorStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLandingDoorStatusBuilder().(*_BACnetConstructedDataLandingDoorStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastAccessEvent() interface {
	BACnetConstructedDataLastAccessEventBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastAccessEventBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastAccessEventBuilder().(*_BACnetConstructedDataLastAccessEventBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastAccessPoint() interface {
	BACnetConstructedDataLastAccessPointBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastAccessPointBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastAccessPointBuilder().(*_BACnetConstructedDataLastAccessPointBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastCommandTime() interface {
	BACnetConstructedDataLastCommandTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastCommandTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastCommandTimeBuilder().(*_BACnetConstructedDataLastCommandTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastCredentialAdded() interface {
	BACnetConstructedDataLastCredentialAddedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastCredentialAddedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastCredentialAddedBuilder().(*_BACnetConstructedDataLastCredentialAddedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastCredentialAddedTime() interface {
	BACnetConstructedDataLastCredentialAddedTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastCredentialAddedTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastCredentialAddedTimeBuilder().(*_BACnetConstructedDataLastCredentialAddedTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastCredentialRemoved() interface {
	BACnetConstructedDataLastCredentialRemovedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastCredentialRemovedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastCredentialRemovedBuilder().(*_BACnetConstructedDataLastCredentialRemovedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastCredentialRemovedTime() interface {
	BACnetConstructedDataLastCredentialRemovedTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastCredentialRemovedTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastCredentialRemovedTimeBuilder().(*_BACnetConstructedDataLastCredentialRemovedTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastKeyServer() interface {
	BACnetConstructedDataLastKeyServerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastKeyServerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastKeyServerBuilder().(*_BACnetConstructedDataLastKeyServerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastNotifyRecord() interface {
	BACnetConstructedDataLastNotifyRecordBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastNotifyRecordBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastNotifyRecordBuilder().(*_BACnetConstructedDataLastNotifyRecordBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastPriority() interface {
	BACnetConstructedDataLastPriorityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastPriorityBuilder().(*_BACnetConstructedDataLastPriorityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastRestartReason() interface {
	BACnetConstructedDataLastRestartReasonBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastRestartReasonBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastRestartReasonBuilder().(*_BACnetConstructedDataLastRestartReasonBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastRestoreTime() interface {
	BACnetConstructedDataLastRestoreTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastRestoreTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastRestoreTimeBuilder().(*_BACnetConstructedDataLastRestoreTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastStateChange() interface {
	BACnetConstructedDataLastStateChangeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastStateChangeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastStateChangeBuilder().(*_BACnetConstructedDataLastStateChangeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLastUseTime() interface {
	BACnetConstructedDataLastUseTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLastUseTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLastUseTimeBuilder().(*_BACnetConstructedDataLastUseTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyAlarmValues() interface {
	BACnetConstructedDataLifeSafetyAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyAlarmValuesBuilder().(*_BACnetConstructedDataLifeSafetyAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingCommand() interface {
	BACnetConstructedDataLightingCommandBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingCommandBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingCommandBuilder().(*_BACnetConstructedDataLightingCommandBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingCommandDefaultPriority() interface {
	BACnetConstructedDataLightingCommandDefaultPriorityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingCommandDefaultPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingCommandDefaultPriorityBuilder().(*_BACnetConstructedDataLightingCommandDefaultPriorityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLimitEnable() interface {
	BACnetConstructedDataLimitEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLimitEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLimitEnableBuilder().(*_BACnetConstructedDataLimitEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLimitMonitoringInterval() interface {
	BACnetConstructedDataLimitMonitoringIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLimitMonitoringIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLimitMonitoringIntervalBuilder().(*_BACnetConstructedDataLimitMonitoringIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLinkSpeed() interface {
	BACnetConstructedDataLinkSpeedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLinkSpeedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLinkSpeedBuilder().(*_BACnetConstructedDataLinkSpeedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLinkSpeedAutonegotiate() interface {
	BACnetConstructedDataLinkSpeedAutonegotiateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLinkSpeedAutonegotiateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLinkSpeedAutonegotiateBuilder().(*_BACnetConstructedDataLinkSpeedAutonegotiateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLinkSpeeds() interface {
	BACnetConstructedDataLinkSpeedsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLinkSpeedsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLinkSpeedsBuilder().(*_BACnetConstructedDataLinkSpeedsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataListOfGroupMembers() interface {
	BACnetConstructedDataListOfGroupMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataListOfGroupMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataListOfGroupMembersBuilder().(*_BACnetConstructedDataListOfGroupMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChannelListOfObjectPropertyReferences() interface {
	BACnetConstructedDataChannelListOfObjectPropertyReferencesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChannelListOfObjectPropertyReferencesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChannelListOfObjectPropertyReferencesBuilder().(*_BACnetConstructedDataChannelListOfObjectPropertyReferencesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataListOfObjectPropertyReferences() interface {
	BACnetConstructedDataListOfObjectPropertyReferencesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataListOfObjectPropertyReferencesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataListOfObjectPropertyReferencesBuilder().(*_BACnetConstructedDataListOfObjectPropertyReferencesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLocalDate() interface {
	BACnetConstructedDataLocalDateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLocalDateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLocalDateBuilder().(*_BACnetConstructedDataLocalDateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLocalForwardingOnly() interface {
	BACnetConstructedDataLocalForwardingOnlyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLocalForwardingOnlyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLocalForwardingOnlyBuilder().(*_BACnetConstructedDataLocalForwardingOnlyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLocalTime() interface {
	BACnetConstructedDataLocalTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLocalTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLocalTimeBuilder().(*_BACnetConstructedDataLocalTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLocation() interface {
	BACnetConstructedDataLocationBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLocationBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLocationBuilder().(*_BACnetConstructedDataLocationBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLockStatus() interface {
	BACnetConstructedDataLockStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLockStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLockStatusBuilder().(*_BACnetConstructedDataLockStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLockout() interface {
	BACnetConstructedDataLockoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLockoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLockoutBuilder().(*_BACnetConstructedDataLockoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLockoutRelinquishTime() interface {
	BACnetConstructedDataLockoutRelinquishTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLockoutRelinquishTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLockoutRelinquishTimeBuilder().(*_BACnetConstructedDataLockoutRelinquishTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataEventLogLogBuffer() interface {
	BACnetConstructedDataEventLogLogBufferBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataEventLogLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataEventLogLogBufferBuilder().(*_BACnetConstructedDataEventLogLogBufferBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrendLogLogBuffer() interface {
	BACnetConstructedDataTrendLogLogBufferBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrendLogLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrendLogLogBufferBuilder().(*_BACnetConstructedDataTrendLogLogBufferBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrendLogMultipleLogBuffer() interface {
	BACnetConstructedDataTrendLogMultipleLogBufferBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrendLogMultipleLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrendLogMultipleLogBufferBuilder().(*_BACnetConstructedDataTrendLogMultipleLogBufferBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLogBuffer() interface {
	BACnetConstructedDataLogBufferBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLogBufferBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLogBufferBuilder().(*_BACnetConstructedDataLogBufferBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrendLogLogDeviceObjectProperty() interface {
	BACnetConstructedDataTrendLogLogDeviceObjectPropertyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrendLogLogDeviceObjectPropertyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrendLogLogDeviceObjectPropertyBuilder().(*_BACnetConstructedDataTrendLogLogDeviceObjectPropertyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrendLogMultipleLogDeviceObjectProperty() interface {
	BACnetConstructedDataTrendLogMultipleLogDeviceObjectPropertyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrendLogMultipleLogDeviceObjectPropertyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrendLogMultipleLogDeviceObjectPropertyBuilder().(*_BACnetConstructedDataTrendLogMultipleLogDeviceObjectPropertyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLogDeviceObjectProperty() interface {
	BACnetConstructedDataLogDeviceObjectPropertyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLogDeviceObjectPropertyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLogDeviceObjectPropertyBuilder().(*_BACnetConstructedDataLogDeviceObjectPropertyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLogInterval() interface {
	BACnetConstructedDataLogIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLogIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLogIntervalBuilder().(*_BACnetConstructedDataLogIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoggingObject() interface {
	BACnetConstructedDataLoggingObjectBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoggingObjectBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoggingObjectBuilder().(*_BACnetConstructedDataLoggingObjectBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoggingRecord() interface {
	BACnetConstructedDataLoggingRecordBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoggingRecordBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoggingRecordBuilder().(*_BACnetConstructedDataLoggingRecordBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoggingType() interface {
	BACnetConstructedDataLoggingTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoggingTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoggingTypeBuilder().(*_BACnetConstructedDataLoggingTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLowDiffLimit() interface {
	BACnetConstructedDataLowDiffLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLowDiffLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLowDiffLimitBuilder().(*_BACnetConstructedDataLowDiffLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorLowLimit() interface {
	BACnetConstructedDataAccumulatorLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorLowLimitBuilder().(*_BACnetConstructedDataAccumulatorLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueLowLimit() interface {
	BACnetConstructedDataLargeAnalogValueLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueLowLimitBuilder().(*_BACnetConstructedDataLargeAnalogValueLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueLowLimit() interface {
	BACnetConstructedDataIntegerValueLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueLowLimitBuilder().(*_BACnetConstructedDataIntegerValueLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueLowLimit() interface {
	BACnetConstructedDataPositiveIntegerValueLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueLowLimitBuilder().(*_BACnetConstructedDataPositiveIntegerValueLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLowLimit() interface {
	BACnetConstructedDataLowLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLowLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLowLimitBuilder().(*_BACnetConstructedDataLowLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLowerDeck() interface {
	BACnetConstructedDataLowerDeckBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLowerDeckBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLowerDeckBuilder().(*_BACnetConstructedDataLowerDeckBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMACAddress() interface {
	BACnetConstructedDataMACAddressBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMACAddressBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMACAddressBuilder().(*_BACnetConstructedDataMACAddressBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMachineRoomID() interface {
	BACnetConstructedDataMachineRoomIDBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMachineRoomIDBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMachineRoomIDBuilder().(*_BACnetConstructedDataMachineRoomIDBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyZoneMaintenanceRequired() interface {
	BACnetConstructedDataLifeSafetyZoneMaintenanceRequiredBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyZoneMaintenanceRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyZoneMaintenanceRequiredBuilder().(*_BACnetConstructedDataLifeSafetyZoneMaintenanceRequiredBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaintenanceRequired() interface {
	BACnetConstructedDataMaintenanceRequiredBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaintenanceRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaintenanceRequiredBuilder().(*_BACnetConstructedDataMaintenanceRequiredBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMakingCarCall() interface {
	BACnetConstructedDataMakingCarCallBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMakingCarCallBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMakingCarCallBuilder().(*_BACnetConstructedDataMakingCarCallBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataManipulatedVariableReference() interface {
	BACnetConstructedDataManipulatedVariableReferenceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataManipulatedVariableReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataManipulatedVariableReferenceBuilder().(*_BACnetConstructedDataManipulatedVariableReferenceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataManualSlaveAddressBinding() interface {
	BACnetConstructedDataManualSlaveAddressBindingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataManualSlaveAddressBindingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataManualSlaveAddressBindingBuilder().(*_BACnetConstructedDataManualSlaveAddressBindingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaskedAlarmValues() interface {
	BACnetConstructedDataMaskedAlarmValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaskedAlarmValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaskedAlarmValuesBuilder().(*_BACnetConstructedDataMaskedAlarmValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxActualValue() interface {
	BACnetConstructedDataMaxActualValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxActualValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxActualValueBuilder().(*_BACnetConstructedDataMaxActualValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxAPDULengthAccepted() interface {
	BACnetConstructedDataMaxAPDULengthAcceptedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxAPDULengthAcceptedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxAPDULengthAcceptedBuilder().(*_BACnetConstructedDataMaxAPDULengthAcceptedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxFailedAttempts() interface {
	BACnetConstructedDataMaxFailedAttemptsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxFailedAttemptsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxFailedAttemptsBuilder().(*_BACnetConstructedDataMaxFailedAttemptsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeviceMaxInfoFrames() interface {
	BACnetConstructedDataDeviceMaxInfoFramesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeviceMaxInfoFramesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeviceMaxInfoFramesBuilder().(*_BACnetConstructedDataDeviceMaxInfoFramesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkPortMaxInfoFrames() interface {
	BACnetConstructedDataNetworkPortMaxInfoFramesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkPortMaxInfoFramesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkPortMaxInfoFramesBuilder().(*_BACnetConstructedDataNetworkPortMaxInfoFramesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxInfoFrames() interface {
	BACnetConstructedDataMaxInfoFramesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxInfoFramesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxInfoFramesBuilder().(*_BACnetConstructedDataMaxInfoFramesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDeviceMaxMaster() interface {
	BACnetConstructedDataDeviceMaxMasterBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDeviceMaxMasterBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDeviceMaxMasterBuilder().(*_BACnetConstructedDataDeviceMaxMasterBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkPortMaxMaster() interface {
	BACnetConstructedDataNetworkPortMaxMasterBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkPortMaxMasterBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkPortMaxMasterBuilder().(*_BACnetConstructedDataNetworkPortMaxMasterBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxMaster() interface {
	BACnetConstructedDataMaxMasterBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxMasterBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxMasterBuilder().(*_BACnetConstructedDataMaxMasterBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorMaxPresValue() interface {
	BACnetConstructedDataAccumulatorMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorMaxPresValueBuilder().(*_BACnetConstructedDataAccumulatorMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogInputMaxPresValue() interface {
	BACnetConstructedDataAnalogInputMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogInputMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogInputMaxPresValueBuilder().(*_BACnetConstructedDataAnalogInputMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogOutputMaxPresValue() interface {
	BACnetConstructedDataAnalogOutputMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogOutputMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogOutputMaxPresValueBuilder().(*_BACnetConstructedDataAnalogOutputMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogValueMaxPresValue() interface {
	BACnetConstructedDataAnalogValueMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogValueMaxPresValueBuilder().(*_BACnetConstructedDataAnalogValueMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueMaxPresValue() interface {
	BACnetConstructedDataLargeAnalogValueMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueMaxPresValueBuilder().(*_BACnetConstructedDataLargeAnalogValueMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueMaxPresValue() interface {
	BACnetConstructedDataIntegerValueMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueMaxPresValueBuilder().(*_BACnetConstructedDataIntegerValueMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueMaxPresValue() interface {
	BACnetConstructedDataPositiveIntegerValueMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueMaxPresValueBuilder().(*_BACnetConstructedDataPositiveIntegerValueMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerMaxPresValue() interface {
	BACnetConstructedDataTimerMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerMaxPresValueBuilder().(*_BACnetConstructedDataTimerMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxPresValue() interface {
	BACnetConstructedDataMaxPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxPresValueBuilder().(*_BACnetConstructedDataMaxPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaxSegmentsAccepted() interface {
	BACnetConstructedDataMaxSegmentsAcceptedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaxSegmentsAcceptedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaxSegmentsAcceptedBuilder().(*_BACnetConstructedDataMaxSegmentsAcceptedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaximumOutput() interface {
	BACnetConstructedDataMaximumOutputBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaximumOutputBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaximumOutputBuilder().(*_BACnetConstructedDataMaximumOutputBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaximumValue() interface {
	BACnetConstructedDataMaximumValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaximumValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaximumValueBuilder().(*_BACnetConstructedDataMaximumValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMaximumValueTimestamp() interface {
	BACnetConstructedDataMaximumValueTimestampBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMaximumValueTimestampBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMaximumValueTimestampBuilder().(*_BACnetConstructedDataMaximumValueTimestampBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMemberOf() interface {
	BACnetConstructedDataMemberOfBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMemberOfBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMemberOfBuilder().(*_BACnetConstructedDataMemberOfBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMemberStatusFlags() interface {
	BACnetConstructedDataMemberStatusFlagsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMemberStatusFlagsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMemberStatusFlagsBuilder().(*_BACnetConstructedDataMemberStatusFlagsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMembers() interface {
	BACnetConstructedDataMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMembersBuilder().(*_BACnetConstructedDataMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinActualValue() interface {
	BACnetConstructedDataMinActualValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinActualValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinActualValueBuilder().(*_BACnetConstructedDataMinActualValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccumulatorMinPresValue() interface {
	BACnetConstructedDataAccumulatorMinPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccumulatorMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccumulatorMinPresValueBuilder().(*_BACnetConstructedDataAccumulatorMinPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueMinPresValue() interface {
	BACnetConstructedDataIntegerValueMinPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueMinPresValueBuilder().(*_BACnetConstructedDataIntegerValueMinPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueMinPresValue() interface {
	BACnetConstructedDataPositiveIntegerValueMinPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueMinPresValueBuilder().(*_BACnetConstructedDataPositiveIntegerValueMinPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueMinPresValue() interface {
	BACnetConstructedDataLargeAnalogValueMinPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueMinPresValueBuilder().(*_BACnetConstructedDataLargeAnalogValueMinPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerMinPresValue() interface {
	BACnetConstructedDataTimerMinPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerMinPresValueBuilder().(*_BACnetConstructedDataTimerMinPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinPresValue() interface {
	BACnetConstructedDataMinPresValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinPresValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinPresValueBuilder().(*_BACnetConstructedDataMinPresValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinimumOffTime() interface {
	BACnetConstructedDataMinimumOffTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinimumOffTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinimumOffTimeBuilder().(*_BACnetConstructedDataMinimumOffTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinimumOnTime() interface {
	BACnetConstructedDataMinimumOnTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinimumOnTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinimumOnTimeBuilder().(*_BACnetConstructedDataMinimumOnTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinimumOutput() interface {
	BACnetConstructedDataMinimumOutputBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinimumOutputBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinimumOutputBuilder().(*_BACnetConstructedDataMinimumOutputBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinimumValue() interface {
	BACnetConstructedDataMinimumValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinimumValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinimumValueBuilder().(*_BACnetConstructedDataMinimumValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMinimumValueTimestamp() interface {
	BACnetConstructedDataMinimumValueTimestampBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMinimumValueTimestampBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMinimumValueTimestampBuilder().(*_BACnetConstructedDataMinimumValueTimestampBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMode() interface {
	BACnetConstructedDataModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataModeBuilder().(*_BACnetConstructedDataModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataModelName() interface {
	BACnetConstructedDataModelNameBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataModelNameBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataModelNameBuilder().(*_BACnetConstructedDataModelNameBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataModificationDate() interface {
	BACnetConstructedDataModificationDateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataModificationDateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataModificationDateBuilder().(*_BACnetConstructedDataModificationDateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMusterPoint() interface {
	BACnetConstructedDataMusterPointBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMusterPointBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMusterPointBuilder().(*_BACnetConstructedDataMusterPointBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNegativeAccessRules() interface {
	BACnetConstructedDataNegativeAccessRulesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNegativeAccessRulesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNegativeAccessRulesBuilder().(*_BACnetConstructedDataNegativeAccessRulesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkAccessSecurityPolicies() interface {
	BACnetConstructedDataNetworkAccessSecurityPoliciesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkAccessSecurityPoliciesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkAccessSecurityPoliciesBuilder().(*_BACnetConstructedDataNetworkAccessSecurityPoliciesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkInterfaceName() interface {
	BACnetConstructedDataNetworkInterfaceNameBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkInterfaceNameBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkInterfaceNameBuilder().(*_BACnetConstructedDataNetworkInterfaceNameBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkNumber() interface {
	BACnetConstructedDataNetworkNumberBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkNumberBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkNumberBuilder().(*_BACnetConstructedDataNetworkNumberBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkNumberQuality() interface {
	BACnetConstructedDataNetworkNumberQualityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkNumberQualityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkNumberQualityBuilder().(*_BACnetConstructedDataNetworkNumberQualityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNetworkType() interface {
	BACnetConstructedDataNetworkTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNetworkTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNetworkTypeBuilder().(*_BACnetConstructedDataNetworkTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNextStoppingFloor() interface {
	BACnetConstructedDataNextStoppingFloorBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNextStoppingFloorBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNextStoppingFloorBuilder().(*_BACnetConstructedDataNextStoppingFloorBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNodeSubtype() interface {
	BACnetConstructedDataNodeSubtypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNodeSubtypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNodeSubtypeBuilder().(*_BACnetConstructedDataNodeSubtypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNodeType() interface {
	BACnetConstructedDataNodeTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNodeTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNodeTypeBuilder().(*_BACnetConstructedDataNodeTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNotificationClass() interface {
	BACnetConstructedDataNotificationClassBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNotificationClassBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNotificationClassBuilder().(*_BACnetConstructedDataNotificationClassBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNotificationThreshold() interface {
	BACnetConstructedDataNotificationThresholdBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNotificationThresholdBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNotificationThresholdBuilder().(*_BACnetConstructedDataNotificationThresholdBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNotifyType() interface {
	BACnetConstructedDataNotifyTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNotifyTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNotifyTypeBuilder().(*_BACnetConstructedDataNotifyTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNumberOfAPDURetries() interface {
	BACnetConstructedDataNumberOfAPDURetriesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNumberOfAPDURetriesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNumberOfAPDURetriesBuilder().(*_BACnetConstructedDataNumberOfAPDURetriesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNumberOfAuthenticationPolicies() interface {
	BACnetConstructedDataNumberOfAuthenticationPoliciesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNumberOfAuthenticationPoliciesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNumberOfAuthenticationPoliciesBuilder().(*_BACnetConstructedDataNumberOfAuthenticationPoliciesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataNumberOfStates() interface {
	BACnetConstructedDataNumberOfStatesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataNumberOfStatesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataNumberOfStatesBuilder().(*_BACnetConstructedDataNumberOfStatesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataObjectIdentifier() interface {
	BACnetConstructedDataObjectIdentifierBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataObjectIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataObjectIdentifierBuilder().(*_BACnetConstructedDataObjectIdentifierBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataObjectList() interface {
	BACnetConstructedDataObjectListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataObjectListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataObjectListBuilder().(*_BACnetConstructedDataObjectListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataObjectName() interface {
	BACnetConstructedDataObjectNameBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataObjectNameBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataObjectNameBuilder().(*_BACnetConstructedDataObjectNameBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataObjectPropertyReference() interface {
	BACnetConstructedDataObjectPropertyReferenceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataObjectPropertyReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataObjectPropertyReferenceBuilder().(*_BACnetConstructedDataObjectPropertyReferenceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataObjectType() interface {
	BACnetConstructedDataObjectTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataObjectTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataObjectTypeBuilder().(*_BACnetConstructedDataObjectTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyCount() interface {
	BACnetConstructedDataOccupancyCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyCountBuilder().(*_BACnetConstructedDataOccupancyCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyCountAdjust() interface {
	BACnetConstructedDataOccupancyCountAdjustBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyCountAdjustBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyCountAdjustBuilder().(*_BACnetConstructedDataOccupancyCountAdjustBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyCountEnable() interface {
	BACnetConstructedDataOccupancyCountEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyCountEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyCountEnableBuilder().(*_BACnetConstructedDataOccupancyCountEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyLowerLimit() interface {
	BACnetConstructedDataOccupancyLowerLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyLowerLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyLowerLimitBuilder().(*_BACnetConstructedDataOccupancyLowerLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyLowerLimitEnforced() interface {
	BACnetConstructedDataOccupancyLowerLimitEnforcedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyLowerLimitEnforcedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyLowerLimitEnforcedBuilder().(*_BACnetConstructedDataOccupancyLowerLimitEnforcedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyState() interface {
	BACnetConstructedDataOccupancyStateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyStateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyStateBuilder().(*_BACnetConstructedDataOccupancyStateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyUpperLimit() interface {
	BACnetConstructedDataOccupancyUpperLimitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyUpperLimitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyUpperLimitBuilder().(*_BACnetConstructedDataOccupancyUpperLimitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOccupancyUpperLimitEnforced() interface {
	BACnetConstructedDataOccupancyUpperLimitEnforcedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOccupancyUpperLimitEnforcedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOccupancyUpperLimitEnforcedBuilder().(*_BACnetConstructedDataOccupancyUpperLimitEnforcedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOperationDirection() interface {
	BACnetConstructedDataOperationDirectionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOperationDirectionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOperationDirectionBuilder().(*_BACnetConstructedDataOperationDirectionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOperationExpected() interface {
	BACnetConstructedDataOperationExpectedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOperationExpectedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOperationExpectedBuilder().(*_BACnetConstructedDataOperationExpectedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOptional() interface {
	BACnetConstructedDataOptionalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOptionalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOptionalBuilder().(*_BACnetConstructedDataOptionalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOutOfService() interface {
	BACnetConstructedDataOutOfServiceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOutOfServiceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOutOfServiceBuilder().(*_BACnetConstructedDataOutOfServiceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOutputUnits() interface {
	BACnetConstructedDataOutputUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOutputUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOutputUnitsBuilder().(*_BACnetConstructedDataOutputUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPacketReorderTime() interface {
	BACnetConstructedDataPacketReorderTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPacketReorderTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPacketReorderTimeBuilder().(*_BACnetConstructedDataPacketReorderTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPassbackMode() interface {
	BACnetConstructedDataPassbackModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPassbackModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPassbackModeBuilder().(*_BACnetConstructedDataPassbackModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPassbackTimeout() interface {
	BACnetConstructedDataPassbackTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPassbackTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPassbackTimeoutBuilder().(*_BACnetConstructedDataPassbackTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPassengerAlarm() interface {
	BACnetConstructedDataPassengerAlarmBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPassengerAlarmBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPassengerAlarmBuilder().(*_BACnetConstructedDataPassengerAlarmBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPolarity() interface {
	BACnetConstructedDataPolarityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPolarityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPolarityBuilder().(*_BACnetConstructedDataPolarityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPortFilter() interface {
	BACnetConstructedDataPortFilterBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPortFilterBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPortFilterBuilder().(*_BACnetConstructedDataPortFilterBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveAccessRules() interface {
	BACnetConstructedDataPositiveAccessRulesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveAccessRulesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveAccessRulesBuilder().(*_BACnetConstructedDataPositiveAccessRulesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPower() interface {
	BACnetConstructedDataPowerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPowerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPowerBuilder().(*_BACnetConstructedDataPowerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPowerMode() interface {
	BACnetConstructedDataPowerModeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPowerModeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPowerModeBuilder().(*_BACnetConstructedDataPowerModeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPrescale() interface {
	BACnetConstructedDataPrescaleBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPrescaleBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPrescaleBuilder().(*_BACnetConstructedDataPrescaleBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessDoorPresentValue() interface {
	BACnetConstructedDataAccessDoorPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessDoorPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessDoorPresentValueBuilder().(*_BACnetConstructedDataAccessDoorPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAlertEnrollmentPresentValue() interface {
	BACnetConstructedDataAlertEnrollmentPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAlertEnrollmentPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAlertEnrollmentPresentValueBuilder().(*_BACnetConstructedDataAlertEnrollmentPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogInputPresentValue() interface {
	BACnetConstructedDataAnalogInputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogInputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogInputPresentValueBuilder().(*_BACnetConstructedDataAnalogInputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogOutputPresentValue() interface {
	BACnetConstructedDataAnalogOutputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogOutputPresentValueBuilder().(*_BACnetConstructedDataAnalogOutputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogValuePresentValue() interface {
	BACnetConstructedDataAnalogValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogValuePresentValueBuilder().(*_BACnetConstructedDataAnalogValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryInputPresentValue() interface {
	BACnetConstructedDataBinaryInputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryInputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryInputPresentValueBuilder().(*_BACnetConstructedDataBinaryInputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryOutputPresentValue() interface {
	BACnetConstructedDataBinaryOutputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryOutputPresentValueBuilder().(*_BACnetConstructedDataBinaryOutputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryValuePresentValue() interface {
	BACnetConstructedDataBinaryValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryValuePresentValueBuilder().(*_BACnetConstructedDataBinaryValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryLightingOutputPresentValue() interface {
	BACnetConstructedDataBinaryLightingOutputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryLightingOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryLightingOutputPresentValueBuilder().(*_BACnetConstructedDataBinaryLightingOutputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBitStringValuePresentValue() interface {
	BACnetConstructedDataBitStringValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBitStringValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBitStringValuePresentValueBuilder().(*_BACnetConstructedDataBitStringValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCalendarPresentValue() interface {
	BACnetConstructedDataCalendarPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCalendarPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCalendarPresentValueBuilder().(*_BACnetConstructedDataCalendarPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataChannelPresentValue() interface {
	BACnetConstructedDataChannelPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataChannelPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataChannelPresentValueBuilder().(*_BACnetConstructedDataChannelPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCharacterStringValuePresentValue() interface {
	BACnetConstructedDataCharacterStringValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCharacterStringValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCharacterStringValuePresentValueBuilder().(*_BACnetConstructedDataCharacterStringValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentialDataInputPresentValue() interface {
	BACnetConstructedDataCredentialDataInputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialDataInputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialDataInputPresentValueBuilder().(*_BACnetConstructedDataCredentialDataInputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateValuePresentValue() interface {
	BACnetConstructedDataDateValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateValuePresentValueBuilder().(*_BACnetConstructedDataDateValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDatePatternValuePresentValue() interface {
	BACnetConstructedDataDatePatternValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDatePatternValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDatePatternValuePresentValueBuilder().(*_BACnetConstructedDataDatePatternValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateTimeValuePresentValue() interface {
	BACnetConstructedDataDateTimeValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateTimeValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateTimeValuePresentValueBuilder().(*_BACnetConstructedDataDateTimeValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateTimePatternValuePresentValue() interface {
	BACnetConstructedDataDateTimePatternValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateTimePatternValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateTimePatternValuePresentValueBuilder().(*_BACnetConstructedDataDateTimePatternValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValuePresentValue() interface {
	BACnetConstructedDataIntegerValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValuePresentValueBuilder().(*_BACnetConstructedDataIntegerValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValuePresentValue() interface {
	BACnetConstructedDataLargeAnalogValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValuePresentValueBuilder().(*_BACnetConstructedDataLargeAnalogValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingOutputPresentValue() interface {
	BACnetConstructedDataLightingOutputPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingOutputPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingOutputPresentValueBuilder().(*_BACnetConstructedDataLightingOutputPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyPointPresentValue() interface {
	BACnetConstructedDataLifeSafetyPointPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyPointPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyPointPresentValueBuilder().(*_BACnetConstructedDataLifeSafetyPointPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLifeSafetyZonePresentValue() interface {
	BACnetConstructedDataLifeSafetyZonePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLifeSafetyZonePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLifeSafetyZonePresentValueBuilder().(*_BACnetConstructedDataLifeSafetyZonePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoadControlPresentValue() interface {
	BACnetConstructedDataLoadControlPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoadControlPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoadControlPresentValueBuilder().(*_BACnetConstructedDataLoadControlPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLoopPresentValue() interface {
	BACnetConstructedDataLoopPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLoopPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLoopPresentValueBuilder().(*_BACnetConstructedDataLoopPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPulseConverterPresentValue() interface {
	BACnetConstructedDataPulseConverterPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPulseConverterPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPulseConverterPresentValueBuilder().(*_BACnetConstructedDataPulseConverterPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGroupPresentValue() interface {
	BACnetConstructedDataGroupPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGroupPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGroupPresentValueBuilder().(*_BACnetConstructedDataGroupPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataGlobalGroupPresentValue() interface {
	BACnetConstructedDataGlobalGroupPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataGlobalGroupPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataGlobalGroupPresentValueBuilder().(*_BACnetConstructedDataGlobalGroupPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOctetStringValuePresentValue() interface {
	BACnetConstructedDataOctetStringValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOctetStringValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOctetStringValuePresentValueBuilder().(*_BACnetConstructedDataOctetStringValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSchedulePresentValue() interface {
	BACnetConstructedDataSchedulePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSchedulePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSchedulePresentValueBuilder().(*_BACnetConstructedDataSchedulePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeValuePresentValue() interface {
	BACnetConstructedDataTimeValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeValuePresentValueBuilder().(*_BACnetConstructedDataTimeValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimePatternValuePresentValue() interface {
	BACnetConstructedDataTimePatternValuePresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimePatternValuePresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimePatternValuePresentValueBuilder().(*_BACnetConstructedDataTimePatternValuePresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPresentValue() interface {
	BACnetConstructedDataPresentValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPresentValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPresentValueBuilder().(*_BACnetConstructedDataPresentValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPriority() interface {
	BACnetConstructedDataPriorityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPriorityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPriorityBuilder().(*_BACnetConstructedDataPriorityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPriorityArray() interface {
	BACnetConstructedDataPriorityArrayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPriorityArrayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPriorityArrayBuilder().(*_BACnetConstructedDataPriorityArrayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPriorityForWriting() interface {
	BACnetConstructedDataPriorityForWritingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPriorityForWritingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPriorityForWritingBuilder().(*_BACnetConstructedDataPriorityForWritingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProcessIdentifier() interface {
	BACnetConstructedDataProcessIdentifierBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProcessIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProcessIdentifierBuilder().(*_BACnetConstructedDataProcessIdentifierBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProcessIdentifierFilter() interface {
	BACnetConstructedDataProcessIdentifierFilterBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProcessIdentifierFilterBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProcessIdentifierFilterBuilder().(*_BACnetConstructedDataProcessIdentifierFilterBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProfileLocation() interface {
	BACnetConstructedDataProfileLocationBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProfileLocationBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProfileLocationBuilder().(*_BACnetConstructedDataProfileLocationBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProfileName() interface {
	BACnetConstructedDataProfileNameBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProfileNameBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProfileNameBuilder().(*_BACnetConstructedDataProfileNameBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProgramChange() interface {
	BACnetConstructedDataProgramChangeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProgramChangeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProgramChangeBuilder().(*_BACnetConstructedDataProgramChangeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProgramLocation() interface {
	BACnetConstructedDataProgramLocationBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProgramLocationBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProgramLocationBuilder().(*_BACnetConstructedDataProgramLocationBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProgramState() interface {
	BACnetConstructedDataProgramStateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProgramStateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProgramStateBuilder().(*_BACnetConstructedDataProgramStateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPropertyList() interface {
	BACnetConstructedDataPropertyListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPropertyListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPropertyListBuilder().(*_BACnetConstructedDataPropertyListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProportionalConstant() interface {
	BACnetConstructedDataProportionalConstantBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProportionalConstantBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProportionalConstantBuilder().(*_BACnetConstructedDataProportionalConstantBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProportionalConstantUnits() interface {
	BACnetConstructedDataProportionalConstantUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProportionalConstantUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProportionalConstantUnitsBuilder().(*_BACnetConstructedDataProportionalConstantUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProtocolLevel() interface {
	BACnetConstructedDataProtocolLevelBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProtocolLevelBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProtocolLevelBuilder().(*_BACnetConstructedDataProtocolLevelBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProtocolObjectTypesSupported() interface {
	BACnetConstructedDataProtocolObjectTypesSupportedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProtocolObjectTypesSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProtocolObjectTypesSupportedBuilder().(*_BACnetConstructedDataProtocolObjectTypesSupportedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProtocolRevision() interface {
	BACnetConstructedDataProtocolRevisionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProtocolRevisionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProtocolRevisionBuilder().(*_BACnetConstructedDataProtocolRevisionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProtocolServicesSupported() interface {
	BACnetConstructedDataProtocolServicesSupportedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProtocolServicesSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProtocolServicesSupportedBuilder().(*_BACnetConstructedDataProtocolServicesSupportedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataProtocolVersion() interface {
	BACnetConstructedDataProtocolVersionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataProtocolVersionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataProtocolVersionBuilder().(*_BACnetConstructedDataProtocolVersionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPulseRate() interface {
	BACnetConstructedDataPulseRateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPulseRateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPulseRateBuilder().(*_BACnetConstructedDataPulseRateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataReadOnly() interface {
	BACnetConstructedDataReadOnlyBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataReadOnlyBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataReadOnlyBuilder().(*_BACnetConstructedDataReadOnlyBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataReasonForDisable() interface {
	BACnetConstructedDataReasonForDisableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataReasonForDisableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataReasonForDisableBuilder().(*_BACnetConstructedDataReasonForDisableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataReasonForHalt() interface {
	BACnetConstructedDataReasonForHaltBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataReasonForHaltBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataReasonForHaltBuilder().(*_BACnetConstructedDataReasonForHaltBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRecipientList() interface {
	BACnetConstructedDataRecipientListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRecipientListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRecipientListBuilder().(*_BACnetConstructedDataRecipientListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataFileRecordCount() interface {
	BACnetConstructedDataFileRecordCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataFileRecordCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataFileRecordCountBuilder().(*_BACnetConstructedDataFileRecordCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRecordCount() interface {
	BACnetConstructedDataRecordCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRecordCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRecordCountBuilder().(*_BACnetConstructedDataRecordCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRecordsSinceNotification() interface {
	BACnetConstructedDataRecordsSinceNotificationBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRecordsSinceNotificationBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRecordsSinceNotificationBuilder().(*_BACnetConstructedDataRecordsSinceNotificationBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataReferencePort() interface {
	BACnetConstructedDataReferencePortBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataReferencePortBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataReferencePortBuilder().(*_BACnetConstructedDataReferencePortBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRegisteredCarCall() interface {
	BACnetConstructedDataRegisteredCarCallBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRegisteredCarCallBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRegisteredCarCallBuilder().(*_BACnetConstructedDataRegisteredCarCallBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataReliability() interface {
	BACnetConstructedDataReliabilityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataReliabilityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataReliabilityBuilder().(*_BACnetConstructedDataReliabilityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataReliabilityEvaluationInhibit() interface {
	BACnetConstructedDataReliabilityEvaluationInhibitBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataReliabilityEvaluationInhibitBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataReliabilityEvaluationInhibitBuilder().(*_BACnetConstructedDataReliabilityEvaluationInhibitBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAccessDoorRelinquishDefault() interface {
	BACnetConstructedDataAccessDoorRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAccessDoorRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAccessDoorRelinquishDefaultBuilder().(*_BACnetConstructedDataAccessDoorRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogOutputRelinquishDefault() interface {
	BACnetConstructedDataAnalogOutputRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogOutputRelinquishDefaultBuilder().(*_BACnetConstructedDataAnalogOutputRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataAnalogValueRelinquishDefault() interface {
	BACnetConstructedDataAnalogValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataAnalogValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataAnalogValueRelinquishDefaultBuilder().(*_BACnetConstructedDataAnalogValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryOutputRelinquishDefault() interface {
	BACnetConstructedDataBinaryOutputRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryOutputRelinquishDefaultBuilder().(*_BACnetConstructedDataBinaryOutputRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryValueRelinquishDefault() interface {
	BACnetConstructedDataBinaryValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryValueRelinquishDefaultBuilder().(*_BACnetConstructedDataBinaryValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBinaryLightingOutputRelinquishDefault() interface {
	BACnetConstructedDataBinaryLightingOutputRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBinaryLightingOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBinaryLightingOutputRelinquishDefaultBuilder().(*_BACnetConstructedDataBinaryLightingOutputRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataBitStringValueRelinquishDefault() interface {
	BACnetConstructedDataBitStringValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataBitStringValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataBitStringValueRelinquishDefaultBuilder().(*_BACnetConstructedDataBitStringValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCharacterStringValueRelinquishDefault() interface {
	BACnetConstructedDataCharacterStringValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCharacterStringValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCharacterStringValueRelinquishDefaultBuilder().(*_BACnetConstructedDataCharacterStringValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateValueRelinquishDefault() interface {
	BACnetConstructedDataDateValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateValueRelinquishDefaultBuilder().(*_BACnetConstructedDataDateValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDatePatternValueRelinquishDefault() interface {
	BACnetConstructedDataDatePatternValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDatePatternValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDatePatternValueRelinquishDefaultBuilder().(*_BACnetConstructedDataDatePatternValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateTimeValueRelinquishDefault() interface {
	BACnetConstructedDataDateTimeValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateTimeValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateTimeValueRelinquishDefaultBuilder().(*_BACnetConstructedDataDateTimeValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataDateTimePatternValueRelinquishDefault() interface {
	BACnetConstructedDataDateTimePatternValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataDateTimePatternValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataDateTimePatternValueRelinquishDefaultBuilder().(*_BACnetConstructedDataDateTimePatternValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueRelinquishDefault() interface {
	BACnetConstructedDataLargeAnalogValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueRelinquishDefaultBuilder().(*_BACnetConstructedDataLargeAnalogValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingOutputRelinquishDefault() interface {
	BACnetConstructedDataLightingOutputRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingOutputRelinquishDefaultBuilder().(*_BACnetConstructedDataLightingOutputRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimePatternValueRelinquishDefault() interface {
	BACnetConstructedDataTimePatternValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimePatternValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimePatternValueRelinquishDefaultBuilder().(*_BACnetConstructedDataTimePatternValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeValueRelinquishDefault() interface {
	BACnetConstructedDataTimeValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeValueRelinquishDefaultBuilder().(*_BACnetConstructedDataTimeValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueRelinquishDefault() interface {
	BACnetConstructedDataIntegerValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueRelinquishDefaultBuilder().(*_BACnetConstructedDataIntegerValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataOctetStringValueRelinquishDefault() interface {
	BACnetConstructedDataOctetStringValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataOctetStringValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataOctetStringValueRelinquishDefaultBuilder().(*_BACnetConstructedDataOctetStringValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueRelinquishDefault() interface {
	BACnetConstructedDataPositiveIntegerValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueRelinquishDefaultBuilder().(*_BACnetConstructedDataPositiveIntegerValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateOutputRelinquishDefault() interface {
	BACnetConstructedDataMultiStateOutputRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateOutputRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateOutputRelinquishDefaultBuilder().(*_BACnetConstructedDataMultiStateOutputRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataMultiStateValueRelinquishDefault() interface {
	BACnetConstructedDataMultiStateValueRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataMultiStateValueRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataMultiStateValueRelinquishDefaultBuilder().(*_BACnetConstructedDataMultiStateValueRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRelinquishDefault() interface {
	BACnetConstructedDataRelinquishDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRelinquishDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRelinquishDefaultBuilder().(*_BACnetConstructedDataRelinquishDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRepresents() interface {
	BACnetConstructedDataRepresentsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRepresentsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRepresentsBuilder().(*_BACnetConstructedDataRepresentsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRequestedShedLevel() interface {
	BACnetConstructedDataRequestedShedLevelBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRequestedShedLevelBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRequestedShedLevelBuilder().(*_BACnetConstructedDataRequestedShedLevelBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRequestedUpdateInterval() interface {
	BACnetConstructedDataRequestedUpdateIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRequestedUpdateIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRequestedUpdateIntervalBuilder().(*_BACnetConstructedDataRequestedUpdateIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRequired() interface {
	BACnetConstructedDataRequiredBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRequiredBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRequiredBuilder().(*_BACnetConstructedDataRequiredBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLargeAnalogValueResolution() interface {
	BACnetConstructedDataLargeAnalogValueResolutionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLargeAnalogValueResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLargeAnalogValueResolutionBuilder().(*_BACnetConstructedDataLargeAnalogValueResolutionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataIntegerValueResolution() interface {
	BACnetConstructedDataIntegerValueResolutionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataIntegerValueResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataIntegerValueResolutionBuilder().(*_BACnetConstructedDataIntegerValueResolutionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataPositiveIntegerValueResolution() interface {
	BACnetConstructedDataPositiveIntegerValueResolutionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataPositiveIntegerValueResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataPositiveIntegerValueResolutionBuilder().(*_BACnetConstructedDataPositiveIntegerValueResolutionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerResolution() interface {
	BACnetConstructedDataTimerResolutionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerResolutionBuilder().(*_BACnetConstructedDataTimerResolutionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataResolution() interface {
	BACnetConstructedDataResolutionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataResolutionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataResolutionBuilder().(*_BACnetConstructedDataResolutionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRestartNotificationRecipients() interface {
	BACnetConstructedDataRestartNotificationRecipientsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRestartNotificationRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRestartNotificationRecipientsBuilder().(*_BACnetConstructedDataRestartNotificationRecipientsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRestoreCompletionTime() interface {
	BACnetConstructedDataRestoreCompletionTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRestoreCompletionTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRestoreCompletionTimeBuilder().(*_BACnetConstructedDataRestoreCompletionTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRestorePreparationTime() interface {
	BACnetConstructedDataRestorePreparationTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRestorePreparationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRestorePreparationTimeBuilder().(*_BACnetConstructedDataRestorePreparationTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataRoutingTable() interface {
	BACnetConstructedDataRoutingTableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataRoutingTableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataRoutingTableBuilder().(*_BACnetConstructedDataRoutingTableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataScale() interface {
	BACnetConstructedDataScaleBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataScaleBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataScaleBuilder().(*_BACnetConstructedDataScaleBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataScaleFactor() interface {
	BACnetConstructedDataScaleFactorBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataScaleFactorBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataScaleFactorBuilder().(*_BACnetConstructedDataScaleFactorBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataScheduleDefault() interface {
	BACnetConstructedDataScheduleDefaultBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataScheduleDefaultBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataScheduleDefaultBuilder().(*_BACnetConstructedDataScheduleDefaultBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSecuredStatus() interface {
	BACnetConstructedDataSecuredStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSecuredStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSecuredStatusBuilder().(*_BACnetConstructedDataSecuredStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSecurityPDUTimeout() interface {
	BACnetConstructedDataSecurityPDUTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSecurityPDUTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSecurityPDUTimeoutBuilder().(*_BACnetConstructedDataSecurityPDUTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSecurityTimeWindow() interface {
	BACnetConstructedDataSecurityTimeWindowBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSecurityTimeWindowBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSecurityTimeWindowBuilder().(*_BACnetConstructedDataSecurityTimeWindowBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSegmentationSupported() interface {
	BACnetConstructedDataSegmentationSupportedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSegmentationSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSegmentationSupportedBuilder().(*_BACnetConstructedDataSegmentationSupportedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSerialNumber() interface {
	BACnetConstructedDataSerialNumberBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSerialNumberBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSerialNumberBuilder().(*_BACnetConstructedDataSerialNumberBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSetpoint() interface {
	BACnetConstructedDataSetpointBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSetpointBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSetpointBuilder().(*_BACnetConstructedDataSetpointBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSetpointReference() interface {
	BACnetConstructedDataSetpointReferenceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSetpointReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSetpointReferenceBuilder().(*_BACnetConstructedDataSetpointReferenceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSetting() interface {
	BACnetConstructedDataSettingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSettingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSettingBuilder().(*_BACnetConstructedDataSettingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataShedDuration() interface {
	BACnetConstructedDataShedDurationBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataShedDurationBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataShedDurationBuilder().(*_BACnetConstructedDataShedDurationBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataShedLevelDescriptions() interface {
	BACnetConstructedDataShedLevelDescriptionsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataShedLevelDescriptionsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataShedLevelDescriptionsBuilder().(*_BACnetConstructedDataShedLevelDescriptionsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataShedLevels() interface {
	BACnetConstructedDataShedLevelsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataShedLevelsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataShedLevelsBuilder().(*_BACnetConstructedDataShedLevelsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSilenced() interface {
	BACnetConstructedDataSilencedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSilencedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSilencedBuilder().(*_BACnetConstructedDataSilencedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSlaveAddressBinding() interface {
	BACnetConstructedDataSlaveAddressBindingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSlaveAddressBindingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSlaveAddressBindingBuilder().(*_BACnetConstructedDataSlaveAddressBindingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSlaveProxyEnable() interface {
	BACnetConstructedDataSlaveProxyEnableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSlaveProxyEnableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSlaveProxyEnableBuilder().(*_BACnetConstructedDataSlaveProxyEnableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStartTime() interface {
	BACnetConstructedDataStartTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStartTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStartTimeBuilder().(*_BACnetConstructedDataStartTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStateChangeValues() interface {
	BACnetConstructedDataStateChangeValuesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStateChangeValuesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStateChangeValuesBuilder().(*_BACnetConstructedDataStateChangeValuesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStateDescription() interface {
	BACnetConstructedDataStateDescriptionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStateDescriptionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStateDescriptionBuilder().(*_BACnetConstructedDataStateDescriptionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStateText() interface {
	BACnetConstructedDataStateTextBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStateTextBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStateTextBuilder().(*_BACnetConstructedDataStateTextBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStatusFlags() interface {
	BACnetConstructedDataStatusFlagsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStatusFlagsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStatusFlagsBuilder().(*_BACnetConstructedDataStatusFlagsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStopTime() interface {
	BACnetConstructedDataStopTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStopTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStopTimeBuilder().(*_BACnetConstructedDataStopTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStopWhenFull() interface {
	BACnetConstructedDataStopWhenFullBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStopWhenFullBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStopWhenFullBuilder().(*_BACnetConstructedDataStopWhenFullBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStrikeCount() interface {
	BACnetConstructedDataStrikeCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStrikeCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStrikeCountBuilder().(*_BACnetConstructedDataStrikeCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataStructuredObjectList() interface {
	BACnetConstructedDataStructuredObjectListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataStructuredObjectListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataStructuredObjectListBuilder().(*_BACnetConstructedDataStructuredObjectListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSubordinateAnnotations() interface {
	BACnetConstructedDataSubordinateAnnotationsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSubordinateAnnotationsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSubordinateAnnotationsBuilder().(*_BACnetConstructedDataSubordinateAnnotationsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSubordinateList() interface {
	BACnetConstructedDataSubordinateListBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSubordinateListBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSubordinateListBuilder().(*_BACnetConstructedDataSubordinateListBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSubordinateNodeTypes() interface {
	BACnetConstructedDataSubordinateNodeTypesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSubordinateNodeTypesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSubordinateNodeTypesBuilder().(*_BACnetConstructedDataSubordinateNodeTypesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSubordinateRelationships() interface {
	BACnetConstructedDataSubordinateRelationshipsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSubordinateRelationshipsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSubordinateRelationshipsBuilder().(*_BACnetConstructedDataSubordinateRelationshipsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSubordinateTags() interface {
	BACnetConstructedDataSubordinateTagsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSubordinateTagsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSubordinateTagsBuilder().(*_BACnetConstructedDataSubordinateTagsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSubscribedRecipients() interface {
	BACnetConstructedDataSubscribedRecipientsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSubscribedRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSubscribedRecipientsBuilder().(*_BACnetConstructedDataSubscribedRecipientsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSupportedFormatClasses() interface {
	BACnetConstructedDataSupportedFormatClassesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSupportedFormatClassesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSupportedFormatClassesBuilder().(*_BACnetConstructedDataSupportedFormatClassesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSupportedFormats() interface {
	BACnetConstructedDataSupportedFormatsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSupportedFormatsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSupportedFormatsBuilder().(*_BACnetConstructedDataSupportedFormatsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSupportedSecurityAlgorithms() interface {
	BACnetConstructedDataSupportedSecurityAlgorithmsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSupportedSecurityAlgorithmsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSupportedSecurityAlgorithmsBuilder().(*_BACnetConstructedDataSupportedSecurityAlgorithmsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataSystemStatus() interface {
	BACnetConstructedDataSystemStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataSystemStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataSystemStatusBuilder().(*_BACnetConstructedDataSystemStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTags() interface {
	BACnetConstructedDataTagsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTagsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTagsBuilder().(*_BACnetConstructedDataTagsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataThreatAuthority() interface {
	BACnetConstructedDataThreatAuthorityBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataThreatAuthorityBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataThreatAuthorityBuilder().(*_BACnetConstructedDataThreatAuthorityBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataThreatLevel() interface {
	BACnetConstructedDataThreatLevelBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataThreatLevelBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataThreatLevelBuilder().(*_BACnetConstructedDataThreatLevelBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeDelay() interface {
	BACnetConstructedDataTimeDelayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeDelayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeDelayBuilder().(*_BACnetConstructedDataTimeDelayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeDelayNormal() interface {
	BACnetConstructedDataTimeDelayNormalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeDelayNormalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeDelayNormalBuilder().(*_BACnetConstructedDataTimeDelayNormalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeOfActiveTimeReset() interface {
	BACnetConstructedDataTimeOfActiveTimeResetBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeOfActiveTimeResetBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeOfActiveTimeResetBuilder().(*_BACnetConstructedDataTimeOfActiveTimeResetBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeOfDeviceRestart() interface {
	BACnetConstructedDataTimeOfDeviceRestartBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeOfDeviceRestartBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeOfDeviceRestartBuilder().(*_BACnetConstructedDataTimeOfDeviceRestartBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeOfStateCountReset() interface {
	BACnetConstructedDataTimeOfStateCountResetBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeOfStateCountResetBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeOfStateCountResetBuilder().(*_BACnetConstructedDataTimeOfStateCountResetBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeOfStrikeCountReset() interface {
	BACnetConstructedDataTimeOfStrikeCountResetBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeOfStrikeCountResetBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeOfStrikeCountResetBuilder().(*_BACnetConstructedDataTimeOfStrikeCountResetBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeSynchronizationInterval() interface {
	BACnetConstructedDataTimeSynchronizationIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeSynchronizationIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeSynchronizationIntervalBuilder().(*_BACnetConstructedDataTimeSynchronizationIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimeSynchronizationRecipients() interface {
	BACnetConstructedDataTimeSynchronizationRecipientsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimeSynchronizationRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimeSynchronizationRecipientsBuilder().(*_BACnetConstructedDataTimeSynchronizationRecipientsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerRunning() interface {
	BACnetConstructedDataTimerRunningBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerRunningBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerRunningBuilder().(*_BACnetConstructedDataTimerRunningBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTimerState() interface {
	BACnetConstructedDataTimerStateBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTimerStateBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTimerStateBuilder().(*_BACnetConstructedDataTimerStateBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTotalRecordCount() interface {
	BACnetConstructedDataTotalRecordCountBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTotalRecordCountBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTotalRecordCountBuilder().(*_BACnetConstructedDataTotalRecordCountBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTraceFlag() interface {
	BACnetConstructedDataTraceFlagBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTraceFlagBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTraceFlagBuilder().(*_BACnetConstructedDataTraceFlagBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataLightingOutputTrackingValue() interface {
	BACnetConstructedDataLightingOutputTrackingValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataLightingOutputTrackingValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataLightingOutputTrackingValueBuilder().(*_BACnetConstructedDataLightingOutputTrackingValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrackingValue() interface {
	BACnetConstructedDataTrackingValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTrackingValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTrackingValueBuilder().(*_BACnetConstructedDataTrackingValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTransactionNotificationClass() interface {
	BACnetConstructedDataTransactionNotificationClassBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTransactionNotificationClassBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTransactionNotificationClassBuilder().(*_BACnetConstructedDataTransactionNotificationClassBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTransition() interface {
	BACnetConstructedDataTransitionBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTransitionBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTransitionBuilder().(*_BACnetConstructedDataTransitionBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataTrigger() interface {
	BACnetConstructedDataTriggerBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataTriggerBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataTriggerBuilder().(*_BACnetConstructedDataTriggerBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUnits() interface {
	BACnetConstructedDataUnitsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUnitsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUnitsBuilder().(*_BACnetConstructedDataUnitsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUpdateInterval() interface {
	BACnetConstructedDataUpdateIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUpdateIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUpdateIntervalBuilder().(*_BACnetConstructedDataUpdateIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUpdateKeySetTimeout() interface {
	BACnetConstructedDataUpdateKeySetTimeoutBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUpdateKeySetTimeoutBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUpdateKeySetTimeoutBuilder().(*_BACnetConstructedDataUpdateKeySetTimeoutBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataCredentialDataInputUpdateTime() interface {
	BACnetConstructedDataCredentialDataInputUpdateTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataCredentialDataInputUpdateTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataCredentialDataInputUpdateTimeBuilder().(*_BACnetConstructedDataCredentialDataInputUpdateTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUpdateTime() interface {
	BACnetConstructedDataUpdateTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUpdateTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUpdateTimeBuilder().(*_BACnetConstructedDataUpdateTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUserExternalIdentifier() interface {
	BACnetConstructedDataUserExternalIdentifierBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUserExternalIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUserExternalIdentifierBuilder().(*_BACnetConstructedDataUserExternalIdentifierBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUserInformationReference() interface {
	BACnetConstructedDataUserInformationReferenceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUserInformationReferenceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUserInformationReferenceBuilder().(*_BACnetConstructedDataUserInformationReferenceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUserName() interface {
	BACnetConstructedDataUserNameBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUserNameBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUserNameBuilder().(*_BACnetConstructedDataUserNameBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUserType() interface {
	BACnetConstructedDataUserTypeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUserTypeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUserTypeBuilder().(*_BACnetConstructedDataUserTypeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUsesRemaining() interface {
	BACnetConstructedDataUsesRemainingBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUsesRemainingBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUsesRemainingBuilder().(*_BACnetConstructedDataUsesRemainingBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUTCOffset() interface {
	BACnetConstructedDataUTCOffsetBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUTCOffsetBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUTCOffsetBuilder().(*_BACnetConstructedDataUTCOffsetBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUTCTimeSynchronizationRecipients() interface {
	BACnetConstructedDataUTCTimeSynchronizationRecipientsBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUTCTimeSynchronizationRecipientsBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUTCTimeSynchronizationRecipientsBuilder().(*_BACnetConstructedDataUTCTimeSynchronizationRecipientsBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataValidSamples() interface {
	BACnetConstructedDataValidSamplesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataValidSamplesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataValidSamplesBuilder().(*_BACnetConstructedDataValidSamplesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataValueBeforeChange() interface {
	BACnetConstructedDataValueBeforeChangeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataValueBeforeChangeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataValueBeforeChangeBuilder().(*_BACnetConstructedDataValueBeforeChangeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataValueChangeTime() interface {
	BACnetConstructedDataValueChangeTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataValueChangeTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataValueChangeTimeBuilder().(*_BACnetConstructedDataValueChangeTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataValueSet() interface {
	BACnetConstructedDataValueSetBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataValueSetBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataValueSetBuilder().(*_BACnetConstructedDataValueSetBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataValueSource() interface {
	BACnetConstructedDataValueSourceBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataValueSourceBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataValueSourceBuilder().(*_BACnetConstructedDataValueSourceBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataValueSourceArray() interface {
	BACnetConstructedDataValueSourceArrayBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataValueSourceArrayBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataValueSourceArrayBuilder().(*_BACnetConstructedDataValueSourceArrayBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataVarianceValue() interface {
	BACnetConstructedDataVarianceValueBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataVarianceValueBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataVarianceValueBuilder().(*_BACnetConstructedDataVarianceValueBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataVendorIdentifier() interface {
	BACnetConstructedDataVendorIdentifierBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataVendorIdentifierBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataVendorIdentifierBuilder().(*_BACnetConstructedDataVendorIdentifierBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataVendorName() interface {
	BACnetConstructedDataVendorNameBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataVendorNameBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataVendorNameBuilder().(*_BACnetConstructedDataVendorNameBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataVerificationTime() interface {
	BACnetConstructedDataVerificationTimeBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataVerificationTimeBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataVerificationTimeBuilder().(*_BACnetConstructedDataVerificationTimeBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataVirtualMACAddressTable() interface {
	BACnetConstructedDataVirtualMACAddressTableBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataVirtualMACAddressTableBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataVirtualMACAddressTableBuilder().(*_BACnetConstructedDataVirtualMACAddressTableBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataVTClassesSupported() interface {
	BACnetConstructedDataVTClassesSupportedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataVTClassesSupportedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataVTClassesSupportedBuilder().(*_BACnetConstructedDataVTClassesSupportedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataWeeklySchedule() interface {
	BACnetConstructedDataWeeklyScheduleBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataWeeklyScheduleBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataWeeklyScheduleBuilder().(*_BACnetConstructedDataWeeklyScheduleBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataWindowInterval() interface {
	BACnetConstructedDataWindowIntervalBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataWindowIntervalBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataWindowIntervalBuilder().(*_BACnetConstructedDataWindowIntervalBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataWindowSamples() interface {
	BACnetConstructedDataWindowSamplesBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataWindowSamplesBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataWindowSamplesBuilder().(*_BACnetConstructedDataWindowSamplesBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataWriteStatus() interface {
	BACnetConstructedDataWriteStatusBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataWriteStatusBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataWriteStatusBuilder().(*_BACnetConstructedDataWriteStatusBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataZoneFrom() interface {
	BACnetConstructedDataZoneFromBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataZoneFromBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataZoneFromBuilder().(*_BACnetConstructedDataZoneFromBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataZoneMembers() interface {
	BACnetConstructedDataZoneMembersBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataZoneMembersBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataZoneMembersBuilder().(*_BACnetConstructedDataZoneMembersBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataZoneTo() interface {
	BACnetConstructedDataZoneToBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataZoneToBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataZoneToBuilder().(*_BACnetConstructedDataZoneToBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) AsBACnetConstructedDataUnspecified() interface {
	BACnetConstructedDataUnspecifiedBuilder
	Done() BACnetConstructedDataBuilder
} {
	if cb, ok := b.childBuilder.(interface {
		BACnetConstructedDataUnspecifiedBuilder
		Done() BACnetConstructedDataBuilder
	}); ok {
		return cb
	}
	cb := NewBACnetConstructedDataUnspecifiedBuilder().(*_BACnetConstructedDataUnspecifiedBuilder)
	cb.parentBuilder = b
	b.childBuilder = cb
	return cb
}

func (b *_BACnetConstructedDataBuilder) Build() (BACnetConstructedData, error) {
	v, err := b.PartialBuild()
	if err != nil {
		return nil, errors.Wrap(err, "error occurred during partial build")
	}
	if b.childBuilder == nil {
		return nil, errors.New("no child builder present")
	}
	b.childBuilder.setParent(v)
	return b.childBuilder.buildForBACnetConstructedData()
}

func (b *_BACnetConstructedDataBuilder) MustBuild() BACnetConstructedData {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_BACnetConstructedDataBuilder) DeepCopy() any {
	_copy := b.CreateBACnetConstructedDataBuilder().(*_BACnetConstructedDataBuilder)
	_copy.childBuilder = b.childBuilder.DeepCopy().(_BACnetConstructedDataChildBuilder)
	_copy.childBuilder.setParent(_copy)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateBACnetConstructedDataBuilder creates a BACnetConstructedDataBuilder
func (b *_BACnetConstructedData) CreateBACnetConstructedDataBuilder() BACnetConstructedDataBuilder {
	if b == nil {
		return NewBACnetConstructedDataBuilder()
	}
	return &_BACnetConstructedDataBuilder{_BACnetConstructedData: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_BACnetConstructedData) GetOpeningTag() BACnetOpeningTag {
	return m.OpeningTag
}

func (m *_BACnetConstructedData) GetPeekedTagHeader() BACnetTagHeader {
	return m.PeekedTagHeader
}

func (m *_BACnetConstructedData) GetClosingTag() BACnetClosingTag {
	return m.ClosingTag
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (pm *_BACnetConstructedData) GetPeekedTagNumber() uint8 {
	m := pm._SubType
	ctx := context.Background()
	_ = ctx
	return uint8(m.GetPeekedTagHeader().GetActualTagNumber())
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastBACnetConstructedData(structType any) BACnetConstructedData {
	if casted, ok := structType.(BACnetConstructedData); ok {
		return casted
	}
	if casted, ok := structType.(*BACnetConstructedData); ok {
		return *casted
	}
	return nil
}

func (m *_BACnetConstructedData) GetTypeName() string {
	return "BACnetConstructedData"
}

func (m *_BACnetConstructedData) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (openingTag)
	lengthInBits += m.OpeningTag.GetLengthInBits(ctx)

	// A virtual field doesn't have any in- or output.

	// Simple field (closingTag)
	lengthInBits += m.ClosingTag.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_BACnetConstructedData) GetLengthInBytes(ctx context.Context) uint16 {
	return m._SubType.GetLengthInBits(ctx) / 8
}

func BACnetConstructedDataParse[T BACnetConstructedData](ctx context.Context, theBytes []byte, tagNumber uint8, objectTypeArgument BACnetObjectType, propertyIdentifierArgument BACnetPropertyIdentifier, arrayIndexArgument BACnetTagPayloadUnsignedInteger) (T, error) {
	return BACnetConstructedDataParseWithBuffer[T](ctx, utils.NewReadBufferByteBased(theBytes), tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument)
}

func BACnetConstructedDataParseWithBufferProducer[T BACnetConstructedData](tagNumber uint8, objectTypeArgument BACnetObjectType, propertyIdentifierArgument BACnetPropertyIdentifier, arrayIndexArgument BACnetTagPayloadUnsignedInteger) func(ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
		v, err := BACnetConstructedDataParseWithBuffer[T](ctx, readBuffer, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument)
		if err != nil {
			var zero T
			return zero, err
		}
		return v, nil
	}
}

func BACnetConstructedDataParseWithBuffer[T BACnetConstructedData](ctx context.Context, readBuffer utils.ReadBuffer, tagNumber uint8, objectTypeArgument BACnetObjectType, propertyIdentifierArgument BACnetPropertyIdentifier, arrayIndexArgument BACnetTagPayloadUnsignedInteger) (T, error) {
	v, err := (&_BACnetConstructedData{TagNumber: tagNumber, ArrayIndexArgument: arrayIndexArgument}).parse(ctx, readBuffer, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument)
	if err != nil {
		var zero T
		return zero, err
	}
	vc, ok := v.(T)
	if !ok {
		var zero T
		return zero, errors.Errorf("Unexpected type %T. Expected type %T", v, *new(T))
	}
	return vc, nil
}

func (m *_BACnetConstructedData) parse(ctx context.Context, readBuffer utils.ReadBuffer, tagNumber uint8, objectTypeArgument BACnetObjectType, propertyIdentifierArgument BACnetPropertyIdentifier, arrayIndexArgument BACnetTagPayloadUnsignedInteger) (__bACnetConstructedData BACnetConstructedData, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetConstructedData"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetConstructedData")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	openingTag, err := ReadSimpleField[BACnetOpeningTag](ctx, "openingTag", ReadComplex[BACnetOpeningTag](BACnetOpeningTagParseWithBufferProducer((uint8)(tagNumber)), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'openingTag' field"))
	}
	m.OpeningTag = openingTag

	peekedTagHeader, err := ReadPeekField[BACnetTagHeader](ctx, "peekedTagHeader", ReadComplex[BACnetTagHeader](BACnetTagHeaderParseWithBuffer, readBuffer), 0)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'peekedTagHeader' field"))
	}
	m.PeekedTagHeader = peekedTagHeader

	peekedTagNumber, err := ReadVirtualField[uint8](ctx, "peekedTagNumber", (*uint8)(nil), peekedTagHeader.GetActualTagNumber())
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'peekedTagNumber' field"))
	}
	_ = peekedTagNumber

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _child BACnetConstructedData
	switch {
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ABSENTEE_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataAbsenteeLimit
		if _child, err = new(_BACnetConstructedDataAbsenteeLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAbsenteeLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCEPTED_MODES: // BACnetConstructedDataAcceptedModes
		if _child, err = new(_BACnetConstructedDataAcceptedModes).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAcceptedModes for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_ALARM_EVENTS && peekedTagNumber == uint8(9): // BACnetConstructedDataAccessAlarmEvents
		if _child, err = new(_BACnetConstructedDataAccessAlarmEvents).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessAlarmEvents for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_DOORS: // BACnetConstructedDataAccessDoors
		if _child, err = new(_BACnetConstructedDataAccessDoors).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessDoors for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_EVENT && peekedTagNumber == uint8(9): // BACnetConstructedDataAccessEvent
		if _child, err = new(_BACnetConstructedDataAccessEvent).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessEvent for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_EVENT_AUTHENTICATION_FACTOR: // BACnetConstructedDataAccessEventAuthenticationFactor
		if _child, err = new(_BACnetConstructedDataAccessEventAuthenticationFactor).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessEventAuthenticationFactor for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_EVENT_CREDENTIAL: // BACnetConstructedDataAccessEventCredential
		if _child, err = new(_BACnetConstructedDataAccessEventCredential).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessEventCredential for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_EVENT_TAG && peekedTagNumber == uint8(2): // BACnetConstructedDataAccessEventTag
		if _child, err = new(_BACnetConstructedDataAccessEventTag).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessEventTag for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_EVENT_TIME: // BACnetConstructedDataAccessEventTime
		if _child, err = new(_BACnetConstructedDataAccessEventTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessEventTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCESS_TRANSACTION_EVENTS && peekedTagNumber == uint8(9): // BACnetConstructedDataAccessTransactionEvents
		if _child, err = new(_BACnetConstructedDataAccessTransactionEvents).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessTransactionEvents for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCOMPANIMENT: // BACnetConstructedDataAccompaniment
		if _child, err = new(_BACnetConstructedDataAccompaniment).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccompaniment for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACCOMPANIMENT_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataAccompanimentTime
		if _child, err = new(_BACnetConstructedDataAccompanimentTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccompanimentTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACK_REQUIRED && peekedTagNumber == uint8(9): // BACnetConstructedDataAckRequired
		if _child, err = new(_BACnetConstructedDataAckRequired).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAckRequired for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACKED_TRANSITIONS && peekedTagNumber == uint8(9): // BACnetConstructedDataAckedTransitions
		if _child, err = new(_BACnetConstructedDataAckedTransitions).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAckedTransitions for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LOOP && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTION && peekedTagNumber == uint8(9): // BACnetConstructedDataLoopAction
		if _child, err = new(_BACnetConstructedDataLoopAction).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoopAction for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_COMMAND && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTION: // BACnetConstructedDataCommandAction
		if _child, err = new(_BACnetConstructedDataCommandAction).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCommandAction for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTION: // BACnetConstructedDataAction
		if _child, err = new(_BACnetConstructedDataAction).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAction for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTION_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataActionText
		if _child, err = new(_BACnetConstructedDataActionText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActionText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTIVATION_TIME: // BACnetConstructedDataActivationTime
		if _child, err = new(_BACnetConstructedDataActivationTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActivationTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTIVE_AUTHENTICATION_POLICY && peekedTagNumber == uint8(2): // BACnetConstructedDataActiveAuthenticationPolicy
		if _child, err = new(_BACnetConstructedDataActiveAuthenticationPolicy).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActiveAuthenticationPolicy for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTIVE_COV_MULTIPLE_SUBSCRIPTIONS: // BACnetConstructedDataActiveCOVMultipleSubscriptions
		if _child, err = new(_BACnetConstructedDataActiveCOVMultipleSubscriptions).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActiveCOVMultipleSubscriptions for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTIVE_COV_SUBSCRIPTIONS: // BACnetConstructedDataActiveCOVSubscriptions
		if _child, err = new(_BACnetConstructedDataActiveCOVSubscriptions).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActiveCOVSubscriptions for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTIVE_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataActiveText
		if _child, err = new(_BACnetConstructedDataActiveText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActiveText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTIVE_VT_SESSIONS: // BACnetConstructedDataActiveVTSessions
		if _child, err = new(_BACnetConstructedDataActiveVTSessions).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActiveVTSessions for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ACTUAL_SHED_LEVEL: // BACnetConstructedDataActualShedLevel
		if _child, err = new(_BACnetConstructedDataActualShedLevel).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataActualShedLevel for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_ADJUST_VALUE && peekedTagNumber == uint8(3): // BACnetConstructedDataAccessZoneAdjustValue
		if _child, err = new(_BACnetConstructedDataAccessZoneAdjustValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessZoneAdjustValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_PULSE_CONVERTER && propertyIdentifierArgument == BACnetPropertyIdentifier_ADJUST_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataPulseConverterAdjustValue
		if _child, err = new(_BACnetConstructedDataPulseConverterAdjustValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPulseConverterAdjustValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ADJUST_VALUE && peekedTagNumber == uint8(3): // BACnetConstructedDataAdjustValue
		if _child, err = new(_BACnetConstructedDataAdjustValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAdjustValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataAlarmValue
		if _child, err = new(_BACnetConstructedDataAlarmValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAlarmValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_DOOR && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataAccessDoorAlarmValues
		if _child, err = new(_BACnetConstructedDataAccessDoorAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessDoorAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataAccessZoneAlarmValues
		if _child, err = new(_BACnetConstructedDataAccessZoneAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessZoneAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BITSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES && peekedTagNumber == uint8(8): // BACnetConstructedDataBitStringValueAlarmValues
		if _child, err = new(_BACnetConstructedDataBitStringValueAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBitStringValueAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHARACTERSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataCharacterStringValueAlarmValues
		if _child, err = new(_BACnetConstructedDataCharacterStringValueAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCharacterStringValueAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_POINT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataLifeSafetyPointAlarmValues
		if _child, err = new(_BACnetConstructedDataLifeSafetyPointAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyPointAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataLifeSafetyZoneAlarmValues
		if _child, err = new(_BACnetConstructedDataLifeSafetyZoneAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyZoneAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateInputAlarmValues
		if _child, err = new(_BACnetConstructedDataMultiStateInputAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateInputAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateValueAlarmValues
		if _child, err = new(_BACnetConstructedDataMultiStateValueAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateValueAlarmValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMER && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataTimerAlarmValues
		if _child, err = new(_BACnetConstructedDataTimerAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerAlarmValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ALARM_VALUES: // BACnetConstructedDataAlarmValues
		if _child, err = new(_BACnetConstructedDataAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAlarmValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ALIGN_INTERVALS && peekedTagNumber == uint8(1): // BACnetConstructedDataAlignIntervals
		if _child, err = new(_BACnetConstructedDataAlignIntervals).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAlignIntervals for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_CREDENTIAL && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccessCredentialAll
		if _child, err = new(_BACnetConstructedDataAccessCredentialAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessCredentialAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_DOOR && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccessDoorAll
		if _child, err = new(_BACnetConstructedDataAccessDoorAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessDoorAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_POINT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccessPointAll
		if _child, err = new(_BACnetConstructedDataAccessPointAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessPointAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_RIGHTS && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccessRightsAll
		if _child, err = new(_BACnetConstructedDataAccessRightsAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessRightsAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_USER && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccessUserAll
		if _child, err = new(_BACnetConstructedDataAccessUserAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessUserAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccessZoneAll
		if _child, err = new(_BACnetConstructedDataAccessZoneAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessZoneAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAccumulatorAll
		if _child, err = new(_BACnetConstructedDataAccumulatorAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ALERT_ENROLLMENT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAlertEnrollmentAll
		if _child, err = new(_BACnetConstructedDataAlertEnrollmentAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAlertEnrollmentAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAnalogInputAll
		if _child, err = new(_BACnetConstructedDataAnalogInputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogInputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAnalogOutputAll
		if _child, err = new(_BACnetConstructedDataAnalogOutputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogOutputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAnalogValueAll
		if _child, err = new(_BACnetConstructedDataAnalogValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_AVERAGING && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataAveragingAll
		if _child, err = new(_BACnetConstructedDataAveragingAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAveragingAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataBinaryInputAll
		if _child, err = new(_BACnetConstructedDataBinaryInputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryInputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataBinaryLightingOutputAll
		if _child, err = new(_BACnetConstructedDataBinaryLightingOutputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryLightingOutputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataBinaryOutputAll
		if _child, err = new(_BACnetConstructedDataBinaryOutputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryOutputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataBinaryValueAll
		if _child, err = new(_BACnetConstructedDataBinaryValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BITSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataBitstringValueAll
		if _child, err = new(_BACnetConstructedDataBitstringValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBitstringValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CALENDAR && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataCalendarAll
		if _child, err = new(_BACnetConstructedDataCalendarAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCalendarAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHANNEL && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataChannelAll
		if _child, err = new(_BACnetConstructedDataChannelAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChannelAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHARACTERSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataCharacterstringValueAll
		if _child, err = new(_BACnetConstructedDataCharacterstringValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCharacterstringValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_COMMAND && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataCommandAll
		if _child, err = new(_BACnetConstructedDataCommandAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCommandAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CREDENTIAL_DATA_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataCredentialDataInputAll
		if _child, err = new(_BACnetConstructedDataCredentialDataInputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentialDataInputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataDatepatternValueAll
		if _child, err = new(_BACnetConstructedDataDatepatternValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDatepatternValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataDateValueAll
		if _child, err = new(_BACnetConstructedDataDateValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATETIMEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataDatetimepatternValueAll
		if _child, err = new(_BACnetConstructedDataDatetimepatternValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDatetimepatternValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATETIME_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataDatetimeValueAll
		if _child, err = new(_BACnetConstructedDataDatetimeValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDatetimeValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DEVICE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataDeviceAll
		if _child, err = new(_BACnetConstructedDataDeviceAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeviceAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ELEVATOR_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataElevatorGroupAll
		if _child, err = new(_BACnetConstructedDataElevatorGroupAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataElevatorGroupAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ESCALATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataEscalatorAll
		if _child, err = new(_BACnetConstructedDataEscalatorAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEscalatorAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_EVENT_ENROLLMENT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataEventEnrollmentAll
		if _child, err = new(_BACnetConstructedDataEventEnrollmentAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventEnrollmentAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_EVENT_LOG && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataEventLogAll
		if _child, err = new(_BACnetConstructedDataEventLogAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventLogAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_FILE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataFileAll
		if _child, err = new(_BACnetConstructedDataFileAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFileAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_GLOBAL_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataGlobalGroupAll
		if _child, err = new(_BACnetConstructedDataGlobalGroupAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGlobalGroupAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataGroupAll
		if _child, err = new(_BACnetConstructedDataGroupAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGroupAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataIntegerValueAll
		if _child, err = new(_BACnetConstructedDataIntegerValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLargeAnalogValueAll
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_POINT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLifeSafetyPointAll
		if _child, err = new(_BACnetConstructedDataLifeSafetyPointAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyPointAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLifeSafetyZoneAll
		if _child, err = new(_BACnetConstructedDataLifeSafetyZoneAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyZoneAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLiftAll
		if _child, err = new(_BACnetConstructedDataLiftAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLiftAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLightingOutputAll
		if _child, err = new(_BACnetConstructedDataLightingOutputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingOutputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LOAD_CONTROL && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLoadControlAll
		if _child, err = new(_BACnetConstructedDataLoadControlAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoadControlAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LOOP && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataLoopAll
		if _child, err = new(_BACnetConstructedDataLoopAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoopAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataMultiStateInputAll
		if _child, err = new(_BACnetConstructedDataMultiStateInputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateInputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataMultiStateOutputAll
		if _child, err = new(_BACnetConstructedDataMultiStateOutputAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateOutputAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataMultiStateValueAll
		if _child, err = new(_BACnetConstructedDataMultiStateValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_NETWORK_PORT && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataNetworkPortAll
		if _child, err = new(_BACnetConstructedDataNetworkPortAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkPortAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_NETWORK_SECURITY && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataNetworkSecurityAll
		if _child, err = new(_BACnetConstructedDataNetworkSecurityAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkSecurityAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_NOTIFICATION_CLASS && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataNotificationClassAll
		if _child, err = new(_BACnetConstructedDataNotificationClassAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNotificationClassAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_NOTIFICATION_FORWARDER && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataNotificationForwarderAll
		if _child, err = new(_BACnetConstructedDataNotificationForwarderAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNotificationForwarderAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_OCTETSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataOctetstringValueAll
		if _child, err = new(_BACnetConstructedDataOctetstringValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOctetstringValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataPositiveIntegerValueAll
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_PROGRAM && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataProgramAll
		if _child, err = new(_BACnetConstructedDataProgramAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProgramAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_PULSE_CONVERTER && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataPulseConverterAll
		if _child, err = new(_BACnetConstructedDataPulseConverterAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPulseConverterAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_SCHEDULE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataScheduleAll
		if _child, err = new(_BACnetConstructedDataScheduleAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataScheduleAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_STRUCTURED_VIEW && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataStructuredViewAll
		if _child, err = new(_BACnetConstructedDataStructuredViewAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStructuredViewAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataTimepatternValueAll
		if _child, err = new(_BACnetConstructedDataTimepatternValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimepatternValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIME_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataTimeValueAll
		if _child, err = new(_BACnetConstructedDataTimeValueAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeValueAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMER && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataTimerAll
		if _child, err = new(_BACnetConstructedDataTimerAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TREND_LOG && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataTrendLogAll
		if _child, err = new(_BACnetConstructedDataTrendLogAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrendLogAll for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TREND_LOG_MULTIPLE && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL: // BACnetConstructedDataTrendLogMultipleAll
		if _child, err = new(_BACnetConstructedDataTrendLogMultipleAll).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrendLogMultipleAll for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ALL_WRITES_SUCCESSFUL && peekedTagNumber == uint8(1): // BACnetConstructedDataAllWritesSuccessful
		if _child, err = new(_BACnetConstructedDataAllWritesSuccessful).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAllWritesSuccessful for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ALLOW_GROUP_DELAY_INHIBIT && peekedTagNumber == uint8(1): // BACnetConstructedDataAllowGroupDelayInhibit
		if _child, err = new(_BACnetConstructedDataAllowGroupDelayInhibit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAllowGroupDelayInhibit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_APDU_LENGTH && peekedTagNumber == uint8(2): // BACnetConstructedDataAPDULength
		if _child, err = new(_BACnetConstructedDataAPDULength).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAPDULength for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_APDU_SEGMENT_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataAPDUSegmentTimeout
		if _child, err = new(_BACnetConstructedDataAPDUSegmentTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAPDUSegmentTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_APDU_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataAPDUTimeout
		if _child, err = new(_BACnetConstructedDataAPDUTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAPDUTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_APPLICATION_SOFTWARE_VERSION && peekedTagNumber == uint8(7): // BACnetConstructedDataApplicationSoftwareVersion
		if _child, err = new(_BACnetConstructedDataApplicationSoftwareVersion).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataApplicationSoftwareVersion for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ARCHIVE && peekedTagNumber == uint8(1): // BACnetConstructedDataArchive
		if _child, err = new(_BACnetConstructedDataArchive).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataArchive for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ASSIGNED_ACCESS_RIGHTS: // BACnetConstructedDataAssignedAccessRights
		if _child, err = new(_BACnetConstructedDataAssignedAccessRights).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAssignedAccessRights for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ASSIGNED_LANDING_CALLS: // BACnetConstructedDataAssignedLandingCalls
		if _child, err = new(_BACnetConstructedDataAssignedLandingCalls).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAssignedLandingCalls for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ATTEMPTED_SAMPLES && peekedTagNumber == uint8(2): // BACnetConstructedDataAttemptedSamples
		if _child, err = new(_BACnetConstructedDataAttemptedSamples).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAttemptedSamples for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTHENTICATION_FACTORS: // BACnetConstructedDataAuthenticationFactors
		if _child, err = new(_BACnetConstructedDataAuthenticationFactors).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAuthenticationFactors for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTHENTICATION_POLICY_LIST: // BACnetConstructedDataAuthenticationPolicyList
		if _child, err = new(_BACnetConstructedDataAuthenticationPolicyList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAuthenticationPolicyList for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTHENTICATION_POLICY_NAMES && peekedTagNumber == uint8(7): // BACnetConstructedDataAuthenticationPolicyNames
		if _child, err = new(_BACnetConstructedDataAuthenticationPolicyNames).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAuthenticationPolicyNames for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTHENTICATION_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataAuthenticationStatus
		if _child, err = new(_BACnetConstructedDataAuthenticationStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAuthenticationStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTHORIZATION_EXEMPTIONS && peekedTagNumber == uint8(9): // BACnetConstructedDataAuthorizationExemptions
		if _child, err = new(_BACnetConstructedDataAuthorizationExemptions).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAuthorizationExemptions for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTHORIZATION_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataAuthorizationMode
		if _child, err = new(_BACnetConstructedDataAuthorizationMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAuthorizationMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AUTO_SLAVE_DISCOVERY && peekedTagNumber == uint8(1): // BACnetConstructedDataAutoSlaveDiscovery
		if _child, err = new(_BACnetConstructedDataAutoSlaveDiscovery).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAutoSlaveDiscovery for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_AVERAGE_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAverageValue
		if _child, err = new(_BACnetConstructedDataAverageValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAverageValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACKUP_AND_RESTORE_STATE && peekedTagNumber == uint8(9): // BACnetConstructedDataBackupAndRestoreState
		if _child, err = new(_BACnetConstructedDataBackupAndRestoreState).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBackupAndRestoreState for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACKUP_FAILURE_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataBackupFailureTimeout
		if _child, err = new(_BACnetConstructedDataBackupFailureTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBackupFailureTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACKUP_PREPARATION_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataBackupPreparationTime
		if _child, err = new(_BACnetConstructedDataBackupPreparationTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBackupPreparationTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IP_GLOBAL_ADDRESS: // BACnetConstructedDataBACnetIPGlobalAddress
		if _child, err = new(_BACnetConstructedDataBACnetIPGlobalAddress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPGlobalAddress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IP_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataBACnetIPMode
		if _child, err = new(_BACnetConstructedDataBACnetIPMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IP_MULTICAST_ADDRESS && peekedTagNumber == uint8(6): // BACnetConstructedDataBACnetIPMulticastAddress
		if _child, err = new(_BACnetConstructedDataBACnetIPMulticastAddress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPMulticastAddress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IP_NAT_TRAVERSAL && peekedTagNumber == uint8(1): // BACnetConstructedDataBACnetIPNATTraversal
		if _child, err = new(_BACnetConstructedDataBACnetIPNATTraversal).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPNATTraversal for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IP_UDP_PORT && peekedTagNumber == uint8(2): // BACnetConstructedDataBACnetIPUDPPort
		if _child, err = new(_BACnetConstructedDataBACnetIPUDPPort).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPUDPPort for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IPV6_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataBACnetIPv6Mode
		if _child, err = new(_BACnetConstructedDataBACnetIPv6Mode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPv6Mode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IPV6_UDP_PORT && peekedTagNumber == uint8(2): // BACnetConstructedDataBACnetIPv6UDPPort
		if _child, err = new(_BACnetConstructedDataBACnetIPv6UDPPort).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPv6UDPPort for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BACNET_IPV6_MULTICAST_ADDRESS && peekedTagNumber == uint8(6): // BACnetConstructedDataBACnetIPv6MulticastAddress
		if _child, err = new(_BACnetConstructedDataBACnetIPv6MulticastAddress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBACnetIPv6MulticastAddress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BASE_DEVICE_SECURITY_POLICY && peekedTagNumber == uint8(9): // BACnetConstructedDataBaseDeviceSecurityPolicy
		if _child, err = new(_BACnetConstructedDataBaseDeviceSecurityPolicy).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBaseDeviceSecurityPolicy for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BBMD_ACCEPT_FD_REGISTRATIONS && peekedTagNumber == uint8(1): // BACnetConstructedDataBBMDAcceptFDRegistrations
		if _child, err = new(_BACnetConstructedDataBBMDAcceptFDRegistrations).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBBMDAcceptFDRegistrations for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BBMD_BROADCAST_DISTRIBUTION_TABLE: // BACnetConstructedDataBBMDBroadcastDistributionTable
		if _child, err = new(_BACnetConstructedDataBBMDBroadcastDistributionTable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBBMDBroadcastDistributionTable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BBMD_FOREIGN_DEVICE_TABLE: // BACnetConstructedDataBBMDForeignDeviceTable
		if _child, err = new(_BACnetConstructedDataBBMDForeignDeviceTable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBBMDForeignDeviceTable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BELONGS_TO: // BACnetConstructedDataBelongsTo
		if _child, err = new(_BACnetConstructedDataBelongsTo).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBelongsTo for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BIAS && peekedTagNumber == uint8(4): // BACnetConstructedDataBias
		if _child, err = new(_BACnetConstructedDataBias).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBias for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BIT_MASK && peekedTagNumber == uint8(8): // BACnetConstructedDataBitMask
		if _child, err = new(_BACnetConstructedDataBitMask).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBitMask for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BIT_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataBitText
		if _child, err = new(_BACnetConstructedDataBitText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBitText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BLINK_WARN_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataBlinkWarnEnable
		if _child, err = new(_BACnetConstructedDataBlinkWarnEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBlinkWarnEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_BUFFER_SIZE && peekedTagNumber == uint8(2): // BACnetConstructedDataBufferSize
		if _child, err = new(_BACnetConstructedDataBufferSize).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBufferSize for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_ASSIGNED_DIRECTION && peekedTagNumber == uint8(9): // BACnetConstructedDataCarAssignedDirection
		if _child, err = new(_BACnetConstructedDataCarAssignedDirection).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarAssignedDirection for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_DOOR_COMMAND && peekedTagNumber == uint8(9): // BACnetConstructedDataCarDoorCommand
		if _child, err = new(_BACnetConstructedDataCarDoorCommand).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarDoorCommand for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_DOOR_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataCarDoorStatus
		if _child, err = new(_BACnetConstructedDataCarDoorStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarDoorStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_DOOR_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataCarDoorText
		if _child, err = new(_BACnetConstructedDataCarDoorText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarDoorText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_DOOR_ZONE && peekedTagNumber == uint8(1): // BACnetConstructedDataCarDoorZone
		if _child, err = new(_BACnetConstructedDataCarDoorZone).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarDoorZone for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_DRIVE_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataCarDriveStatus
		if _child, err = new(_BACnetConstructedDataCarDriveStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarDriveStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_LOAD && peekedTagNumber == uint8(4): // BACnetConstructedDataCarLoad
		if _child, err = new(_BACnetConstructedDataCarLoad).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarLoad for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_LOAD_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataCarLoadUnits
		if _child, err = new(_BACnetConstructedDataCarLoadUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarLoadUnits for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataCarMode
		if _child, err = new(_BACnetConstructedDataCarMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_MOVING_DIRECTION && peekedTagNumber == uint8(9): // BACnetConstructedDataCarMovingDirection
		if _child, err = new(_BACnetConstructedDataCarMovingDirection).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarMovingDirection for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CAR_POSITION && peekedTagNumber == uint8(2): // BACnetConstructedDataCarPosition
		if _child, err = new(_BACnetConstructedDataCarPosition).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCarPosition for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CHANGE_OF_STATE_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataChangeOfStateCount
		if _child, err = new(_BACnetConstructedDataChangeOfStateCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChangeOfStateCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CHANGE_OF_STATE_TIME: // BACnetConstructedDataChangeOfStateTime
		if _child, err = new(_BACnetConstructedDataChangeOfStateTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChangeOfStateTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CHANGES_PENDING && peekedTagNumber == uint8(1): // BACnetConstructedDataChangesPending
		if _child, err = new(_BACnetConstructedDataChangesPending).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChangesPending for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CHANNEL_NUMBER && peekedTagNumber == uint8(2): // BACnetConstructedDataChannelNumber
		if _child, err = new(_BACnetConstructedDataChannelNumber).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChannelNumber for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CLIENT_COV_INCREMENT: // BACnetConstructedDataClientCOVIncrement
		if _child, err = new(_BACnetConstructedDataClientCOVIncrement).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataClientCOVIncrement for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COMMAND && peekedTagNumber == uint8(9): // BACnetConstructedDataCommand
		if _child, err = new(_BACnetConstructedDataCommand).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCommand for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COMMAND_TIME_ARRAY: // BACnetConstructedDataCommandTimeArray
		if _child, err = new(_BACnetConstructedDataCommandTimeArray).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCommandTimeArray for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CONFIGURATION_FILES && peekedTagNumber == uint8(12): // BACnetConstructedDataConfigurationFiles
		if _child, err = new(_BACnetConstructedDataConfigurationFiles).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataConfigurationFiles for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CONTROL_GROUPS && peekedTagNumber == uint8(2): // BACnetConstructedDataControlGroups
		if _child, err = new(_BACnetConstructedDataControlGroups).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataControlGroups for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CONTROLLED_VARIABLE_REFERENCE: // BACnetConstructedDataControlledVariableReference
		if _child, err = new(_BACnetConstructedDataControlledVariableReference).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataControlledVariableReference for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CONTROLLED_VARIABLE_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataControlledVariableUnits
		if _child, err = new(_BACnetConstructedDataControlledVariableUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataControlledVariableUnits for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CONTROLLED_VARIABLE_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataControlledVariableValue
		if _child, err = new(_BACnetConstructedDataControlledVariableValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataControlledVariableValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataCount
		if _child, err = new(_BACnetConstructedDataCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COUNT_BEFORE_CHANGE && peekedTagNumber == uint8(2): // BACnetConstructedDataCountBeforeChange
		if _child, err = new(_BACnetConstructedDataCountBeforeChange).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCountBeforeChange for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COUNT_CHANGE_TIME: // BACnetConstructedDataCountChangeTime
		if _child, err = new(_BACnetConstructedDataCountChangeTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCountChangeTime for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_COV_INCREMENT && peekedTagNumber == uint8(2): // BACnetConstructedDataIntegerValueCOVIncrement
		if _child, err = new(_BACnetConstructedDataIntegerValueCOVIncrement).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueCOVIncrement for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_COV_INCREMENT && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueCOVIncrement
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueCOVIncrement).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueCOVIncrement for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_COV_INCREMENT && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueCOVIncrement
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueCOVIncrement).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueCOVIncrement for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COV_INCREMENT && peekedTagNumber == uint8(4): // BACnetConstructedDataCOVIncrement
		if _child, err = new(_BACnetConstructedDataCOVIncrement).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCOVIncrement for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COV_PERIOD && peekedTagNumber == uint8(2): // BACnetConstructedDataCOVPeriod
		if _child, err = new(_BACnetConstructedDataCOVPeriod).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCOVPeriod for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COV_RESUBSCRIPTION_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataCOVResubscriptionInterval
		if _child, err = new(_BACnetConstructedDataCOVResubscriptionInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCOVResubscriptionInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COVU_PERIOD && peekedTagNumber == uint8(2): // BACnetConstructedDataCOVUPeriod
		if _child, err = new(_BACnetConstructedDataCOVUPeriod).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCOVUPeriod for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_COVU_RECIPIENTS: // BACnetConstructedDataCOVURecipients
		if _child, err = new(_BACnetConstructedDataCOVURecipients).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCOVURecipients for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CREDENTIAL_DISABLE && peekedTagNumber == uint8(9): // BACnetConstructedDataCredentialDisable
		if _child, err = new(_BACnetConstructedDataCredentialDisable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentialDisable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CREDENTIAL_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataCredentialStatus
		if _child, err = new(_BACnetConstructedDataCredentialStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentialStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CREDENTIALS: // BACnetConstructedDataCredentials
		if _child, err = new(_BACnetConstructedDataCredentials).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentials for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CREDENTIALS_IN_ZONE: // BACnetConstructedDataCredentialsInZone
		if _child, err = new(_BACnetConstructedDataCredentialsInZone).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentialsInZone for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_CURRENT_COMMAND_PRIORITY: // BACnetConstructedDataCurrentCommandPriority
		if _child, err = new(_BACnetConstructedDataCurrentCommandPriority).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCurrentCommandPriority for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DATABASE_REVISION && peekedTagNumber == uint8(2): // BACnetConstructedDataDatabaseRevision
		if _child, err = new(_BACnetConstructedDataDatabaseRevision).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDatabaseRevision for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DATE_LIST: // BACnetConstructedDataDateList
		if _child, err = new(_BACnetConstructedDataDateList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateList for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DAYLIGHT_SAVINGS_STATUS && peekedTagNumber == uint8(1): // BACnetConstructedDataDaylightSavingsStatus
		if _child, err = new(_BACnetConstructedDataDaylightSavingsStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDaylightSavingsStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DAYS_REMAINING && peekedTagNumber == uint8(3): // BACnetConstructedDataDaysRemaining
		if _child, err = new(_BACnetConstructedDataDaysRemaining).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDaysRemaining for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_DEADBAND && peekedTagNumber == uint8(2): // BACnetConstructedDataIntegerValueDeadband
		if _child, err = new(_BACnetConstructedDataIntegerValueDeadband).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueDeadband for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_DEADBAND && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueDeadband
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueDeadband).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueDeadband for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_DEADBAND && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueDeadband
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueDeadband).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueDeadband for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEADBAND && peekedTagNumber == uint8(4): // BACnetConstructedDataDeadband
		if _child, err = new(_BACnetConstructedDataDeadband).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeadband for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEFAULT_FADE_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataDefaultFadeTime
		if _child, err = new(_BACnetConstructedDataDefaultFadeTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDefaultFadeTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEFAULT_RAMP_RATE && peekedTagNumber == uint8(4): // BACnetConstructedDataDefaultRampRate
		if _child, err = new(_BACnetConstructedDataDefaultRampRate).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDefaultRampRate for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEFAULT_STEP_INCREMENT && peekedTagNumber == uint8(4): // BACnetConstructedDataDefaultStepIncrement
		if _child, err = new(_BACnetConstructedDataDefaultStepIncrement).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDefaultStepIncrement for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEFAULT_SUBORDINATE_RELATIONSHIP && peekedTagNumber == uint8(9): // BACnetConstructedDataDefaultSubordinateRelationship
		if _child, err = new(_BACnetConstructedDataDefaultSubordinateRelationship).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDefaultSubordinateRelationship for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEFAULT_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataDefaultTimeout
		if _child, err = new(_BACnetConstructedDataDefaultTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDefaultTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEPLOYED_PROFILE_LOCATION && peekedTagNumber == uint8(7): // BACnetConstructedDataDeployedProfileLocation
		if _child, err = new(_BACnetConstructedDataDeployedProfileLocation).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeployedProfileLocation for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DERIVATIVE_CONSTANT && peekedTagNumber == uint8(4): // BACnetConstructedDataDerivativeConstant
		if _child, err = new(_BACnetConstructedDataDerivativeConstant).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDerivativeConstant for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DERIVATIVE_CONSTANT_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataDerivativeConstantUnits
		if _child, err = new(_BACnetConstructedDataDerivativeConstantUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDerivativeConstantUnits for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DESCRIPTION && peekedTagNumber == uint8(7): // BACnetConstructedDataDescription
		if _child, err = new(_BACnetConstructedDataDescription).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDescription for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DESCRIPTION_OF_HALT && peekedTagNumber == uint8(7): // BACnetConstructedDataDescriptionOfHalt
		if _child, err = new(_BACnetConstructedDataDescriptionOfHalt).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDescriptionOfHalt for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEVICE_ADDRESS_BINDING: // BACnetConstructedDataDeviceAddressBinding
		if _child, err = new(_BACnetConstructedDataDeviceAddressBinding).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeviceAddressBinding for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DEVICE_TYPE && peekedTagNumber == uint8(7): // BACnetConstructedDataDeviceType
		if _child, err = new(_BACnetConstructedDataDeviceType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeviceType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DIRECT_READING && peekedTagNumber == uint8(4): // BACnetConstructedDataDirectReading
		if _child, err = new(_BACnetConstructedDataDirectReading).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDirectReading for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DISTRIBUTION_KEY_REVISION && peekedTagNumber == uint8(2): // BACnetConstructedDataDistributionKeyRevision
		if _child, err = new(_BACnetConstructedDataDistributionKeyRevision).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDistributionKeyRevision for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DO_NOT_HIDE && peekedTagNumber == uint8(1): // BACnetConstructedDataDoNotHide
		if _child, err = new(_BACnetConstructedDataDoNotHide).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoNotHide for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_ALARM_STATE && peekedTagNumber == uint8(9): // BACnetConstructedDataDoorAlarmState
		if _child, err = new(_BACnetConstructedDataDoorAlarmState).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorAlarmState for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_EXTENDED_PULSE_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataDoorExtendedPulseTime
		if _child, err = new(_BACnetConstructedDataDoorExtendedPulseTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorExtendedPulseTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_MEMBERS: // BACnetConstructedDataDoorMembers
		if _child, err = new(_BACnetConstructedDataDoorMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorMembers for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_OPEN_TOO_LONG_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataDoorOpenTooLongTime
		if _child, err = new(_BACnetConstructedDataDoorOpenTooLongTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorOpenTooLongTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_PULSE_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataDoorPulseTime
		if _child, err = new(_BACnetConstructedDataDoorPulseTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorPulseTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataDoorStatus
		if _child, err = new(_BACnetConstructedDataDoorStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DOOR_UNLOCK_DELAY_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataDoorUnlockDelayTime
		if _child, err = new(_BACnetConstructedDataDoorUnlockDelayTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDoorUnlockDelayTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_DUTY_WINDOW && peekedTagNumber == uint8(2): // BACnetConstructedDataDutyWindow
		if _child, err = new(_BACnetConstructedDataDutyWindow).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDutyWindow for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EFFECTIVE_PERIOD: // BACnetConstructedDataEffectivePeriod
		if _child, err = new(_BACnetConstructedDataEffectivePeriod).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEffectivePeriod for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EGRESS_ACTIVE && peekedTagNumber == uint8(1): // BACnetConstructedDataEgressActive
		if _child, err = new(_BACnetConstructedDataEgressActive).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEgressActive for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EGRESS_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataEgressTime
		if _child, err = new(_BACnetConstructedDataEgressTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEgressTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ELAPSED_ACTIVE_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataElapsedActiveTime
		if _child, err = new(_BACnetConstructedDataElapsedActiveTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataElapsedActiveTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ELEVATOR_GROUP && peekedTagNumber == uint8(12): // BACnetConstructedDataElevatorGroup
		if _child, err = new(_BACnetConstructedDataElevatorGroup).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataElevatorGroup for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataEnable
		if _child, err = new(_BACnetConstructedDataEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ENERGY_METER && peekedTagNumber == uint8(4): // BACnetConstructedDataEnergyMeter
		if _child, err = new(_BACnetConstructedDataEnergyMeter).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEnergyMeter for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ENERGY_METER_REF: // BACnetConstructedDataEnergyMeterRef
		if _child, err = new(_BACnetConstructedDataEnergyMeterRef).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEnergyMeterRef for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ENTRY_POINTS: // BACnetConstructedDataEntryPoints
		if _child, err = new(_BACnetConstructedDataEntryPoints).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEntryPoints for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ERROR_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataErrorLimit
		if _child, err = new(_BACnetConstructedDataErrorLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataErrorLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ESCALATOR_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataEscalatorMode
		if _child, err = new(_BACnetConstructedDataEscalatorMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEscalatorMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_ALGORITHM_INHIBIT && peekedTagNumber == uint8(1): // BACnetConstructedDataEventAlgorithmInhibit
		if _child, err = new(_BACnetConstructedDataEventAlgorithmInhibit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventAlgorithmInhibit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_ALGORITHM_INHIBIT_REF: // BACnetConstructedDataEventAlgorithmInhibitRef
		if _child, err = new(_BACnetConstructedDataEventAlgorithmInhibitRef).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventAlgorithmInhibitRef for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_DETECTION_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataEventDetectionEnable
		if _child, err = new(_BACnetConstructedDataEventDetectionEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventDetectionEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_ENABLE && peekedTagNumber == uint8(8): // BACnetConstructedDataEventEnable
		if _child, err = new(_BACnetConstructedDataEventEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_MESSAGE_TEXTS: // BACnetConstructedDataEventMessageTexts
		if _child, err = new(_BACnetConstructedDataEventMessageTexts).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventMessageTexts for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_MESSAGE_TEXTS_CONFIG: // BACnetConstructedDataEventMessageTextsConfig
		if _child, err = new(_BACnetConstructedDataEventMessageTextsConfig).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventMessageTextsConfig for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_PARAMETERS: // BACnetConstructedDataEventParameters
		if _child, err = new(_BACnetConstructedDataEventParameters).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventParameters for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_STATE && peekedTagNumber == uint8(9): // BACnetConstructedDataEventState
		if _child, err = new(_BACnetConstructedDataEventState).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventState for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_TIME_STAMPS: // BACnetConstructedDataEventTimeStamps
		if _child, err = new(_BACnetConstructedDataEventTimeStamps).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventTimeStamps for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EVENT_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataEventType
		if _child, err = new(_BACnetConstructedDataEventType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EXCEPTION_SCHEDULE: // BACnetConstructedDataExceptionSchedule
		if _child, err = new(_BACnetConstructedDataExceptionSchedule).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataExceptionSchedule for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EXECUTION_DELAY && peekedTagNumber == uint8(2): // BACnetConstructedDataExecutionDelay
		if _child, err = new(_BACnetConstructedDataExecutionDelay).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataExecutionDelay for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EXIT_POINTS: // BACnetConstructedDataExitPoints
		if _child, err = new(_BACnetConstructedDataExitPoints).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataExitPoints for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EXPECTED_SHED_LEVEL: // BACnetConstructedDataExpectedShedLevel
		if _child, err = new(_BACnetConstructedDataExpectedShedLevel).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataExpectedShedLevel for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EXPIRATION_TIME: // BACnetConstructedDataExpirationTime
		if _child, err = new(_BACnetConstructedDataExpirationTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataExpirationTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_EXTENDED_TIME_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataExtendedTimeEnable
		if _child, err = new(_BACnetConstructedDataExtendedTimeEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataExtendedTimeEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAILED_ATTEMPT_EVENTS: // BACnetConstructedDataFailedAttemptEvents
		if _child, err = new(_BACnetConstructedDataFailedAttemptEvents).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFailedAttemptEvents for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAILED_ATTEMPTS && peekedTagNumber == uint8(2): // BACnetConstructedDataFailedAttempts
		if _child, err = new(_BACnetConstructedDataFailedAttempts).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFailedAttempts for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAILED_ATTEMPTS_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataFailedAttemptsTime
		if _child, err = new(_BACnetConstructedDataFailedAttemptsTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFailedAttemptsTime for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataAccumulatorFaultHighLimit
		if _child, err = new(_BACnetConstructedDataAccumulatorFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogInputFaultHighLimit
		if _child, err = new(_BACnetConstructedDataAnalogInputFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogInputFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogValueFaultHighLimit
		if _child, err = new(_BACnetConstructedDataAnalogValueFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogValueFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueFaultHighLimit
		if _child, err = new(_BACnetConstructedDataIntegerValueFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueFaultHighLimit
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueFaultHighLimit
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_HIGH_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataFaultHighLimit
		if _child, err = new(_BACnetConstructedDataFaultHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFaultHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataAccumulatorFaultLowLimit
		if _child, err = new(_BACnetConstructedDataAccumulatorFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogInputFaultLowLimit
		if _child, err = new(_BACnetConstructedDataAnalogInputFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogInputFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogValueFaultLowLimit
		if _child, err = new(_BACnetConstructedDataAnalogValueFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogValueFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueFaultLowLimit
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueFaultLowLimit
		if _child, err = new(_BACnetConstructedDataIntegerValueFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueFaultLowLimit
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_LOW_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataFaultLowLimit
		if _child, err = new(_BACnetConstructedDataFaultLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFaultLowLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_PARAMETERS: // BACnetConstructedDataFaultParameters
		if _child, err = new(_BACnetConstructedDataFaultParameters).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFaultParameters for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ESCALATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_SIGNALS: // BACnetConstructedDataEscalatorFaultSignals
		if _child, err = new(_BACnetConstructedDataEscalatorFaultSignals).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEscalatorFaultSignals for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFT && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_SIGNALS: // BACnetConstructedDataLiftFaultSignals
		if _child, err = new(_BACnetConstructedDataLiftFaultSignals).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLiftFaultSignals for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_SIGNALS: // BACnetConstructedDataFaultSignals
		if _child, err = new(_BACnetConstructedDataFaultSignals).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFaultSignals for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataFaultType
		if _child, err = new(_BACnetConstructedDataFaultType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFaultType for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_DOOR && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES: // BACnetConstructedDataAccessDoorFaultValues
		if _child, err = new(_BACnetConstructedDataAccessDoorFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessDoorFaultValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHARACTERSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES: // BACnetConstructedDataCharacterStringValueFaultValues
		if _child, err = new(_BACnetConstructedDataCharacterStringValueFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCharacterStringValueFaultValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_POINT && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES: // BACnetConstructedDataLifeSafetyPointFaultValues
		if _child, err = new(_BACnetConstructedDataLifeSafetyPointFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyPointFaultValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES: // BACnetConstructedDataLifeSafetyZoneFaultValues
		if _child, err = new(_BACnetConstructedDataLifeSafetyZoneFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyZoneFaultValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateInputFaultValues
		if _child, err = new(_BACnetConstructedDataMultiStateInputFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateInputFaultValues for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateValueFaultValues
		if _child, err = new(_BACnetConstructedDataMultiStateValueFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateValueFaultValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FAULT_VALUES: // BACnetConstructedDataFaultValues
		if _child, err = new(_BACnetConstructedDataFaultValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFaultValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FD_BBMD_ADDRESS: // BACnetConstructedDataFDBBMDAddress
		if _child, err = new(_BACnetConstructedDataFDBBMDAddress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFDBBMDAddress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FD_SUBSCRIPTION_LIFETIME && peekedTagNumber == uint8(2): // BACnetConstructedDataFDSubscriptionLifetime
		if _child, err = new(_BACnetConstructedDataFDSubscriptionLifetime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFDSubscriptionLifetime for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FEEDBACK_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryLightingOutputFeedbackValue
		if _child, err = new(_BACnetConstructedDataBinaryLightingOutputFeedbackValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryLightingOutputFeedbackValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FEEDBACK_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryOutputFeedbackValue
		if _child, err = new(_BACnetConstructedDataBinaryOutputFeedbackValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryOutputFeedbackValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FEEDBACK_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataLightingOutputFeedbackValue
		if _child, err = new(_BACnetConstructedDataLightingOutputFeedbackValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingOutputFeedbackValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_FEEDBACK_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateOutputFeedbackValue
		if _child, err = new(_BACnetConstructedDataMultiStateOutputFeedbackValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateOutputFeedbackValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FILE_ACCESS_METHOD && peekedTagNumber == uint8(9): // BACnetConstructedDataFileAccessMethod
		if _child, err = new(_BACnetConstructedDataFileAccessMethod).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFileAccessMethod for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FILE_SIZE && peekedTagNumber == uint8(2): // BACnetConstructedDataFileSize
		if _child, err = new(_BACnetConstructedDataFileSize).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFileSize for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FILE_TYPE && peekedTagNumber == uint8(7): // BACnetConstructedDataFileType
		if _child, err = new(_BACnetConstructedDataFileType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFileType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FIRMWARE_REVISION && peekedTagNumber == uint8(7): // BACnetConstructedDataFirmwareRevision
		if _child, err = new(_BACnetConstructedDataFirmwareRevision).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFirmwareRevision for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FLOOR_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataFloorText
		if _child, err = new(_BACnetConstructedDataFloorText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFloorText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_FULL_DUTY_BASELINE && peekedTagNumber == uint8(4): // BACnetConstructedDataFullDutyBaseline
		if _child, err = new(_BACnetConstructedDataFullDutyBaseline).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFullDutyBaseline for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_GLOBAL_IDENTIFIER && peekedTagNumber == uint8(2): // BACnetConstructedDataGlobalIdentifier
		if _child, err = new(_BACnetConstructedDataGlobalIdentifier).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGlobalIdentifier for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_GROUP_ID && peekedTagNumber == uint8(2): // BACnetConstructedDataGroupID
		if _child, err = new(_BACnetConstructedDataGroupID).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGroupID for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_GROUP_MEMBER_NAMES && peekedTagNumber == uint8(7): // BACnetConstructedDataGroupMemberNames
		if _child, err = new(_BACnetConstructedDataGroupMemberNames).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGroupMemberNames for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_GLOBAL_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_GROUP_MEMBERS: // BACnetConstructedDataGlobalGroupGroupMembers
		if _child, err = new(_BACnetConstructedDataGlobalGroupGroupMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGlobalGroupGroupMembers for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ELEVATOR_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_GROUP_MEMBERS && peekedTagNumber == uint8(12): // BACnetConstructedDataElevatorGroupGroupMembers
		if _child, err = new(_BACnetConstructedDataElevatorGroupGroupMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataElevatorGroupGroupMembers for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_GROUP_MEMBERS && peekedTagNumber == uint8(12): // BACnetConstructedDataGroupMembers
		if _child, err = new(_BACnetConstructedDataGroupMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGroupMembers for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_GROUP_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataGroupMode
		if _child, err = new(_BACnetConstructedDataGroupMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGroupMode for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_HIGH_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataAccumulatorHighLimit
		if _child, err = new(_BACnetConstructedDataAccumulatorHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_HIGH_LIMIT && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueHighLimit
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_HIGH_LIMIT && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueHighLimit
		if _child, err = new(_BACnetConstructedDataIntegerValueHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueHighLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_HIGH_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueHighLimit
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueHighLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_HIGH_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataHighLimit
		if _child, err = new(_BACnetConstructedDataHighLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataHighLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_HIGHER_DECK && peekedTagNumber == uint8(12): // BACnetConstructedDataHigherDeck
		if _child, err = new(_BACnetConstructedDataHigherDeck).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataHigherDeck for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IN_PROCESS && peekedTagNumber == uint8(1): // BACnetConstructedDataInProcess
		if _child, err = new(_BACnetConstructedDataInProcess).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInProcess for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IN_PROGRESS && peekedTagNumber == uint8(9): // BACnetConstructedDataInProgress
		if _child, err = new(_BACnetConstructedDataInProgress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInProgress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INACTIVE_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataInactiveText
		if _child, err = new(_BACnetConstructedDataInactiveText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInactiveText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INITIAL_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataInitialTimeout
		if _child, err = new(_BACnetConstructedDataInitialTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInitialTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INPUT_REFERENCE: // BACnetConstructedDataInputReference
		if _child, err = new(_BACnetConstructedDataInputReference).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInputReference for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INSTALLATION_ID && peekedTagNumber == uint8(2): // BACnetConstructedDataInstallationID
		if _child, err = new(_BACnetConstructedDataInstallationID).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInstallationID for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INSTANCE_OF && peekedTagNumber == uint8(7): // BACnetConstructedDataInstanceOf
		if _child, err = new(_BACnetConstructedDataInstanceOf).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInstanceOf for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INSTANTANEOUS_POWER && peekedTagNumber == uint8(4): // BACnetConstructedDataInstantaneousPower
		if _child, err = new(_BACnetConstructedDataInstantaneousPower).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataInstantaneousPower for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INTEGRAL_CONSTANT && peekedTagNumber == uint8(4): // BACnetConstructedDataIntegralConstant
		if _child, err = new(_BACnetConstructedDataIntegralConstant).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegralConstant for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INTEGRAL_CONSTANT_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataIntegralConstantUnits
		if _child, err = new(_BACnetConstructedDataIntegralConstantUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegralConstantUnits for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERFACE_VALUE: // BACnetConstructedDataAnalogInputInterfaceValue
		if _child, err = new(_BACnetConstructedDataAnalogInputInterfaceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogInputInterfaceValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERFACE_VALUE: // BACnetConstructedDataAnalogOutputInterfaceValue
		if _child, err = new(_BACnetConstructedDataAnalogOutputInterfaceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogOutputInterfaceValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERFACE_VALUE: // BACnetConstructedDataBinaryInputInterfaceValue
		if _child, err = new(_BACnetConstructedDataBinaryInputInterfaceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryInputInterfaceValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERFACE_VALUE: // BACnetConstructedDataBinaryOutputInterfaceValue
		if _child, err = new(_BACnetConstructedDataBinaryOutputInterfaceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryOutputInterfaceValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERFACE_VALUE: // BACnetConstructedDataMultiStateInputInterfaceValue
		if _child, err = new(_BACnetConstructedDataMultiStateInputInterfaceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateInputInterfaceValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERFACE_VALUE: // BACnetConstructedDataMultiStateOutputInterfaceValue
		if _child, err = new(_BACnetConstructedDataMultiStateOutputInterfaceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateOutputInterfaceValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_INTERVAL_OFFSET && peekedTagNumber == uint8(2): // BACnetConstructedDataIntervalOffset
		if _child, err = new(_BACnetConstructedDataIntervalOffset).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntervalOffset for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_ADDRESS && peekedTagNumber == uint8(6): // BACnetConstructedDataIPAddress
		if _child, err = new(_BACnetConstructedDataIPAddress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPAddress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_DEFAULT_GATEWAY && peekedTagNumber == uint8(6): // BACnetConstructedDataIPDefaultGateway
		if _child, err = new(_BACnetConstructedDataIPDefaultGateway).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPDefaultGateway for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_DHCP_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataIPDHCPEnable
		if _child, err = new(_BACnetConstructedDataIPDHCPEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPDHCPEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_DHCP_LEASE_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataIPDHCPLeaseTime
		if _child, err = new(_BACnetConstructedDataIPDHCPLeaseTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPDHCPLeaseTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_DHCP_LEASE_TIME_REMAINING && peekedTagNumber == uint8(2): // BACnetConstructedDataIPDHCPLeaseTimeRemaining
		if _child, err = new(_BACnetConstructedDataIPDHCPLeaseTimeRemaining).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPDHCPLeaseTimeRemaining for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_DHCP_SERVER && peekedTagNumber == uint8(6): // BACnetConstructedDataIPDHCPServer
		if _child, err = new(_BACnetConstructedDataIPDHCPServer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPDHCPServer for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_DNS_SERVER && peekedTagNumber == uint8(6): // BACnetConstructedDataIPDNSServer
		if _child, err = new(_BACnetConstructedDataIPDNSServer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPDNSServer for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IP_SUBNET_MASK && peekedTagNumber == uint8(6): // BACnetConstructedDataIPSubnetMask
		if _child, err = new(_BACnetConstructedDataIPSubnetMask).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPSubnetMask for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_ADDRESS && peekedTagNumber == uint8(6): // BACnetConstructedDataIPv6Address
		if _child, err = new(_BACnetConstructedDataIPv6Address).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6Address for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_AUTO_ADDRESSING_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataIPv6AutoAddressingEnable
		if _child, err = new(_BACnetConstructedDataIPv6AutoAddressingEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6AutoAddressingEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_DEFAULT_GATEWAY && peekedTagNumber == uint8(6): // BACnetConstructedDataIPv6DefaultGateway
		if _child, err = new(_BACnetConstructedDataIPv6DefaultGateway).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6DefaultGateway for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_DHCP_LEASE_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataIPv6DHCPLeaseTime
		if _child, err = new(_BACnetConstructedDataIPv6DHCPLeaseTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6DHCPLeaseTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_DHCP_LEASE_TIME_REMAINING && peekedTagNumber == uint8(2): // BACnetConstructedDataIPv6DHCPLeaseTimeRemaining
		if _child, err = new(_BACnetConstructedDataIPv6DHCPLeaseTimeRemaining).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6DHCPLeaseTimeRemaining for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_DHCP_SERVER && peekedTagNumber == uint8(6): // BACnetConstructedDataIPv6DHCPServer
		if _child, err = new(_BACnetConstructedDataIPv6DHCPServer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6DHCPServer for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_DNS_SERVER && peekedTagNumber == uint8(6): // BACnetConstructedDataIPv6DNSServer
		if _child, err = new(_BACnetConstructedDataIPv6DNSServer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6DNSServer for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_PREFIX_LENGTH && peekedTagNumber == uint8(2): // BACnetConstructedDataIPv6PrefixLength
		if _child, err = new(_BACnetConstructedDataIPv6PrefixLength).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6PrefixLength for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IPV6_ZONE_INDEX && peekedTagNumber == uint8(7): // BACnetConstructedDataIPv6ZoneIndex
		if _child, err = new(_BACnetConstructedDataIPv6ZoneIndex).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIPv6ZoneIndex for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_IS_UTC && peekedTagNumber == uint8(1): // BACnetConstructedDataIsUTC
		if _child, err = new(_BACnetConstructedDataIsUTC).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIsUTC for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_KEY_SETS: // BACnetConstructedDataKeySets
		if _child, err = new(_BACnetConstructedDataKeySets).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataKeySets for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LANDING_CALL_CONTROL: // BACnetConstructedDataLandingCallControl
		if _child, err = new(_BACnetConstructedDataLandingCallControl).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLandingCallControl for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LANDING_CALLS: // BACnetConstructedDataLandingCalls
		if _child, err = new(_BACnetConstructedDataLandingCalls).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLandingCalls for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LANDING_DOOR_STATUS: // BACnetConstructedDataLandingDoorStatus
		if _child, err = new(_BACnetConstructedDataLandingDoorStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLandingDoorStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_ACCESS_EVENT && peekedTagNumber == uint8(9): // BACnetConstructedDataLastAccessEvent
		if _child, err = new(_BACnetConstructedDataLastAccessEvent).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastAccessEvent for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_ACCESS_POINT: // BACnetConstructedDataLastAccessPoint
		if _child, err = new(_BACnetConstructedDataLastAccessPoint).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastAccessPoint for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_COMMAND_TIME: // BACnetConstructedDataLastCommandTime
		if _child, err = new(_BACnetConstructedDataLastCommandTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastCommandTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_CREDENTIAL_ADDED: // BACnetConstructedDataLastCredentialAdded
		if _child, err = new(_BACnetConstructedDataLastCredentialAdded).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastCredentialAdded for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_CREDENTIAL_ADDED_TIME: // BACnetConstructedDataLastCredentialAddedTime
		if _child, err = new(_BACnetConstructedDataLastCredentialAddedTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastCredentialAddedTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_CREDENTIAL_REMOVED: // BACnetConstructedDataLastCredentialRemoved
		if _child, err = new(_BACnetConstructedDataLastCredentialRemoved).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastCredentialRemoved for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_CREDENTIAL_REMOVED_TIME: // BACnetConstructedDataLastCredentialRemovedTime
		if _child, err = new(_BACnetConstructedDataLastCredentialRemovedTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastCredentialRemovedTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_KEY_SERVER: // BACnetConstructedDataLastKeyServer
		if _child, err = new(_BACnetConstructedDataLastKeyServer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastKeyServer for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_NOTIFY_RECORD && peekedTagNumber == uint8(2): // BACnetConstructedDataLastNotifyRecord
		if _child, err = new(_BACnetConstructedDataLastNotifyRecord).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastNotifyRecord for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_PRIORITY && peekedTagNumber == uint8(2): // BACnetConstructedDataLastPriority
		if _child, err = new(_BACnetConstructedDataLastPriority).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastPriority for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_RESTART_REASON && peekedTagNumber == uint8(9): // BACnetConstructedDataLastRestartReason
		if _child, err = new(_BACnetConstructedDataLastRestartReason).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastRestartReason for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_RESTORE_TIME: // BACnetConstructedDataLastRestoreTime
		if _child, err = new(_BACnetConstructedDataLastRestoreTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastRestoreTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_STATE_CHANGE && peekedTagNumber == uint8(9): // BACnetConstructedDataLastStateChange
		if _child, err = new(_BACnetConstructedDataLastStateChange).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastStateChange for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LAST_USE_TIME: // BACnetConstructedDataLastUseTime
		if _child, err = new(_BACnetConstructedDataLastUseTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLastUseTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIFE_SAFETY_ALARM_VALUES && peekedTagNumber == uint8(9): // BACnetConstructedDataLifeSafetyAlarmValues
		if _child, err = new(_BACnetConstructedDataLifeSafetyAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyAlarmValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIGHTING_COMMAND: // BACnetConstructedDataLightingCommand
		if _child, err = new(_BACnetConstructedDataLightingCommand).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingCommand for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIGHTING_COMMAND_DEFAULT_PRIORITY && peekedTagNumber == uint8(2): // BACnetConstructedDataLightingCommandDefaultPriority
		if _child, err = new(_BACnetConstructedDataLightingCommandDefaultPriority).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingCommandDefaultPriority for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIMIT_ENABLE && peekedTagNumber == uint8(8): // BACnetConstructedDataLimitEnable
		if _child, err = new(_BACnetConstructedDataLimitEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLimitEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIMIT_MONITORING_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataLimitMonitoringInterval
		if _child, err = new(_BACnetConstructedDataLimitMonitoringInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLimitMonitoringInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LINK_SPEED && peekedTagNumber == uint8(4): // BACnetConstructedDataLinkSpeed
		if _child, err = new(_BACnetConstructedDataLinkSpeed).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLinkSpeed for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LINK_SPEED_AUTONEGOTIATE && peekedTagNumber == uint8(1): // BACnetConstructedDataLinkSpeedAutonegotiate
		if _child, err = new(_BACnetConstructedDataLinkSpeedAutonegotiate).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLinkSpeedAutonegotiate for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LINK_SPEEDS && peekedTagNumber == uint8(4): // BACnetConstructedDataLinkSpeeds
		if _child, err = new(_BACnetConstructedDataLinkSpeeds).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLinkSpeeds for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIST_OF_GROUP_MEMBERS: // BACnetConstructedDataListOfGroupMembers
		if _child, err = new(_BACnetConstructedDataListOfGroupMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataListOfGroupMembers for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHANNEL && propertyIdentifierArgument == BACnetPropertyIdentifier_LIST_OF_OBJECT_PROPERTY_REFERENCES: // BACnetConstructedDataChannelListOfObjectPropertyReferences
		if _child, err = new(_BACnetConstructedDataChannelListOfObjectPropertyReferences).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChannelListOfObjectPropertyReferences for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LIST_OF_OBJECT_PROPERTY_REFERENCES: // BACnetConstructedDataListOfObjectPropertyReferences
		if _child, err = new(_BACnetConstructedDataListOfObjectPropertyReferences).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataListOfObjectPropertyReferences for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCAL_DATE && peekedTagNumber == uint8(10): // BACnetConstructedDataLocalDate
		if _child, err = new(_BACnetConstructedDataLocalDate).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLocalDate for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCAL_FORWARDING_ONLY && peekedTagNumber == uint8(1): // BACnetConstructedDataLocalForwardingOnly
		if _child, err = new(_BACnetConstructedDataLocalForwardingOnly).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLocalForwardingOnly for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCAL_TIME && peekedTagNumber == uint8(11): // BACnetConstructedDataLocalTime
		if _child, err = new(_BACnetConstructedDataLocalTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLocalTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCATION && peekedTagNumber == uint8(7): // BACnetConstructedDataLocation
		if _child, err = new(_BACnetConstructedDataLocation).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLocation for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCK_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataLockStatus
		if _child, err = new(_BACnetConstructedDataLockStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLockStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCKOUT && peekedTagNumber == uint8(1): // BACnetConstructedDataLockout
		if _child, err = new(_BACnetConstructedDataLockout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLockout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOCKOUT_RELINQUISH_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataLockoutRelinquishTime
		if _child, err = new(_BACnetConstructedDataLockoutRelinquishTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLockoutRelinquishTime for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_EVENT_LOG && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_BUFFER: // BACnetConstructedDataEventLogLogBuffer
		if _child, err = new(_BACnetConstructedDataEventLogLogBuffer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataEventLogLogBuffer for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TREND_LOG && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_BUFFER: // BACnetConstructedDataTrendLogLogBuffer
		if _child, err = new(_BACnetConstructedDataTrendLogLogBuffer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrendLogLogBuffer for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TREND_LOG_MULTIPLE && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_BUFFER: // BACnetConstructedDataTrendLogMultipleLogBuffer
		if _child, err = new(_BACnetConstructedDataTrendLogMultipleLogBuffer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrendLogMultipleLogBuffer for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_BUFFER: // BACnetConstructedDataLogBuffer
		if _child, err = new(_BACnetConstructedDataLogBuffer).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLogBuffer for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TREND_LOG && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_DEVICE_OBJECT_PROPERTY: // BACnetConstructedDataTrendLogLogDeviceObjectProperty
		if _child, err = new(_BACnetConstructedDataTrendLogLogDeviceObjectProperty).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrendLogLogDeviceObjectProperty for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TREND_LOG_MULTIPLE && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_DEVICE_OBJECT_PROPERTY: // BACnetConstructedDataTrendLogMultipleLogDeviceObjectProperty
		if _child, err = new(_BACnetConstructedDataTrendLogMultipleLogDeviceObjectProperty).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrendLogMultipleLogDeviceObjectProperty for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_DEVICE_OBJECT_PROPERTY: // BACnetConstructedDataLogDeviceObjectProperty
		if _child, err = new(_BACnetConstructedDataLogDeviceObjectProperty).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLogDeviceObjectProperty for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOG_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataLogInterval
		if _child, err = new(_BACnetConstructedDataLogInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLogInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOGGING_OBJECT && peekedTagNumber == uint8(12): // BACnetConstructedDataLoggingObject
		if _child, err = new(_BACnetConstructedDataLoggingObject).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoggingObject for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOGGING_RECORD: // BACnetConstructedDataLoggingRecord
		if _child, err = new(_BACnetConstructedDataLoggingRecord).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoggingRecord for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOGGING_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataLoggingType
		if _child, err = new(_BACnetConstructedDataLoggingType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoggingType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOW_DIFF_LIMIT: // BACnetConstructedDataLowDiffLimit
		if _child, err = new(_BACnetConstructedDataLowDiffLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLowDiffLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_LOW_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataAccumulatorLowLimit
		if _child, err = new(_BACnetConstructedDataAccumulatorLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_LOW_LIMIT && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueLowLimit
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_LOW_LIMIT && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueLowLimit
		if _child, err = new(_BACnetConstructedDataIntegerValueLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueLowLimit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_LOW_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueLowLimit
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueLowLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOW_LIMIT && peekedTagNumber == uint8(4): // BACnetConstructedDataLowLimit
		if _child, err = new(_BACnetConstructedDataLowLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLowLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_LOWER_DECK && peekedTagNumber == uint8(12): // BACnetConstructedDataLowerDeck
		if _child, err = new(_BACnetConstructedDataLowerDeck).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLowerDeck for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAC_ADDRESS && peekedTagNumber == uint8(6): // BACnetConstructedDataMACAddress
		if _child, err = new(_BACnetConstructedDataMACAddress).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMACAddress for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MACHINE_ROOM_ID && peekedTagNumber == uint8(12): // BACnetConstructedDataMachineRoomID
		if _child, err = new(_BACnetConstructedDataMachineRoomID).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMachineRoomID for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAINTENANCE_REQUIRED && peekedTagNumber == uint8(1): // BACnetConstructedDataLifeSafetyZoneMaintenanceRequired
		if _child, err = new(_BACnetConstructedDataLifeSafetyZoneMaintenanceRequired).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyZoneMaintenanceRequired for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAINTENANCE_REQUIRED && peekedTagNumber == uint8(9): // BACnetConstructedDataMaintenanceRequired
		if _child, err = new(_BACnetConstructedDataMaintenanceRequired).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaintenanceRequired for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAKING_CAR_CALL: // BACnetConstructedDataMakingCarCall
		if _child, err = new(_BACnetConstructedDataMakingCarCall).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMakingCarCall for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MANIPULATED_VARIABLE_REFERENCE: // BACnetConstructedDataManipulatedVariableReference
		if _child, err = new(_BACnetConstructedDataManipulatedVariableReference).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataManipulatedVariableReference for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MANUAL_SLAVE_ADDRESS_BINDING: // BACnetConstructedDataManualSlaveAddressBinding
		if _child, err = new(_BACnetConstructedDataManualSlaveAddressBinding).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataManualSlaveAddressBinding for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MASKED_ALARM_VALUES && peekedTagNumber == uint8(9): // BACnetConstructedDataMaskedAlarmValues
		if _child, err = new(_BACnetConstructedDataMaskedAlarmValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaskedAlarmValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_ACTUAL_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataMaxActualValue
		if _child, err = new(_BACnetConstructedDataMaxActualValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxActualValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_APDU_LENGTH_ACCEPTED && peekedTagNumber == uint8(2): // BACnetConstructedDataMaxAPDULengthAccepted
		if _child, err = new(_BACnetConstructedDataMaxAPDULengthAccepted).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxAPDULengthAccepted for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_FAILED_ATTEMPTS && peekedTagNumber == uint8(2): // BACnetConstructedDataMaxFailedAttempts
		if _child, err = new(_BACnetConstructedDataMaxFailedAttempts).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxFailedAttempts for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DEVICE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_INFO_FRAMES && peekedTagNumber == uint8(2): // BACnetConstructedDataDeviceMaxInfoFrames
		if _child, err = new(_BACnetConstructedDataDeviceMaxInfoFrames).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeviceMaxInfoFrames for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_NETWORK_PORT && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_INFO_FRAMES && peekedTagNumber == uint8(2): // BACnetConstructedDataNetworkPortMaxInfoFrames
		if _child, err = new(_BACnetConstructedDataNetworkPortMaxInfoFrames).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkPortMaxInfoFrames for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_INFO_FRAMES && peekedTagNumber == uint8(2): // BACnetConstructedDataMaxInfoFrames
		if _child, err = new(_BACnetConstructedDataMaxInfoFrames).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxInfoFrames for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DEVICE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_MASTER && peekedTagNumber == uint8(2): // BACnetConstructedDataDeviceMaxMaster
		if _child, err = new(_BACnetConstructedDataDeviceMaxMaster).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDeviceMaxMaster for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_NETWORK_PORT && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_MASTER && peekedTagNumber == uint8(2): // BACnetConstructedDataNetworkPortMaxMaster
		if _child, err = new(_BACnetConstructedDataNetworkPortMaxMaster).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkPortMaxMaster for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_MASTER && peekedTagNumber == uint8(2): // BACnetConstructedDataMaxMaster
		if _child, err = new(_BACnetConstructedDataMaxMaster).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxMaster for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataAccumulatorMaxPresValue
		if _child, err = new(_BACnetConstructedDataAccumulatorMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogInputMaxPresValue
		if _child, err = new(_BACnetConstructedDataAnalogInputMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogInputMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogOutputMaxPresValue
		if _child, err = new(_BACnetConstructedDataAnalogOutputMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogOutputMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogValueMaxPresValue
		if _child, err = new(_BACnetConstructedDataAnalogValueMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogValueMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueMaxPresValue
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueMaxPresValue
		if _child, err = new(_BACnetConstructedDataIntegerValueMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueMaxPresValue
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueMaxPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMER && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataTimerMaxPresValue
		if _child, err = new(_BACnetConstructedDataTimerMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerMaxPresValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_PRES_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataMaxPresValue
		if _child, err = new(_BACnetConstructedDataMaxPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxPresValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAX_SEGMENTS_ACCEPTED && peekedTagNumber == uint8(2): // BACnetConstructedDataMaxSegmentsAccepted
		if _child, err = new(_BACnetConstructedDataMaxSegmentsAccepted).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaxSegmentsAccepted for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAXIMUM_OUTPUT && peekedTagNumber == uint8(4): // BACnetConstructedDataMaximumOutput
		if _child, err = new(_BACnetConstructedDataMaximumOutput).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaximumOutput for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAXIMUM_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataMaximumValue
		if _child, err = new(_BACnetConstructedDataMaximumValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaximumValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MAXIMUM_VALUE_TIMESTAMP: // BACnetConstructedDataMaximumValueTimestamp
		if _child, err = new(_BACnetConstructedDataMaximumValueTimestamp).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMaximumValueTimestamp for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MEMBER_OF: // BACnetConstructedDataMemberOf
		if _child, err = new(_BACnetConstructedDataMemberOf).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMemberOf for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MEMBER_STATUS_FLAGS && peekedTagNumber == uint8(8): // BACnetConstructedDataMemberStatusFlags
		if _child, err = new(_BACnetConstructedDataMemberStatusFlags).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMemberStatusFlags for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MEMBERS: // BACnetConstructedDataMembers
		if _child, err = new(_BACnetConstructedDataMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMembers for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_ACTUAL_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataMinActualValue
		if _child, err = new(_BACnetConstructedDataMinActualValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinActualValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCUMULATOR && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_PRES_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataAccumulatorMinPresValue
		if _child, err = new(_BACnetConstructedDataAccumulatorMinPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccumulatorMinPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_PRES_VALUE && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueMinPresValue
		if _child, err = new(_BACnetConstructedDataIntegerValueMinPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueMinPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_PRES_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueMinPresValue
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueMinPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueMinPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_PRES_VALUE && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueMinPresValue
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueMinPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueMinPresValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMER && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_PRES_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataTimerMinPresValue
		if _child, err = new(_BACnetConstructedDataTimerMinPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerMinPresValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MIN_PRES_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataMinPresValue
		if _child, err = new(_BACnetConstructedDataMinPresValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinPresValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MINIMUM_OFF_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataMinimumOffTime
		if _child, err = new(_BACnetConstructedDataMinimumOffTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinimumOffTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MINIMUM_ON_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataMinimumOnTime
		if _child, err = new(_BACnetConstructedDataMinimumOnTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinimumOnTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MINIMUM_OUTPUT && peekedTagNumber == uint8(4): // BACnetConstructedDataMinimumOutput
		if _child, err = new(_BACnetConstructedDataMinimumOutput).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinimumOutput for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MINIMUM_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataMinimumValue
		if _child, err = new(_BACnetConstructedDataMinimumValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinimumValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MINIMUM_VALUE_TIMESTAMP: // BACnetConstructedDataMinimumValueTimestamp
		if _child, err = new(_BACnetConstructedDataMinimumValueTimestamp).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMinimumValueTimestamp for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MODE && peekedTagNumber == uint8(9): // BACnetConstructedDataMode
		if _child, err = new(_BACnetConstructedDataMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MODEL_NAME && peekedTagNumber == uint8(7): // BACnetConstructedDataModelName
		if _child, err = new(_BACnetConstructedDataModelName).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataModelName for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MODIFICATION_DATE: // BACnetConstructedDataModificationDate
		if _child, err = new(_BACnetConstructedDataModificationDate).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataModificationDate for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_MUSTER_POINT && peekedTagNumber == uint8(1): // BACnetConstructedDataMusterPoint
		if _child, err = new(_BACnetConstructedDataMusterPoint).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMusterPoint for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NEGATIVE_ACCESS_RULES: // BACnetConstructedDataNegativeAccessRules
		if _child, err = new(_BACnetConstructedDataNegativeAccessRules).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNegativeAccessRules for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NETWORK_ACCESS_SECURITY_POLICIES: // BACnetConstructedDataNetworkAccessSecurityPolicies
		if _child, err = new(_BACnetConstructedDataNetworkAccessSecurityPolicies).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkAccessSecurityPolicies for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NETWORK_INTERFACE_NAME && peekedTagNumber == uint8(7): // BACnetConstructedDataNetworkInterfaceName
		if _child, err = new(_BACnetConstructedDataNetworkInterfaceName).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkInterfaceName for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NETWORK_NUMBER && peekedTagNumber == uint8(2): // BACnetConstructedDataNetworkNumber
		if _child, err = new(_BACnetConstructedDataNetworkNumber).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkNumber for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NETWORK_NUMBER_QUALITY && peekedTagNumber == uint8(9): // BACnetConstructedDataNetworkNumberQuality
		if _child, err = new(_BACnetConstructedDataNetworkNumberQuality).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkNumberQuality for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NETWORK_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataNetworkType
		if _child, err = new(_BACnetConstructedDataNetworkType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNetworkType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NEXT_STOPPING_FLOOR && peekedTagNumber == uint8(2): // BACnetConstructedDataNextStoppingFloor
		if _child, err = new(_BACnetConstructedDataNextStoppingFloor).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNextStoppingFloor for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NODE_SUBTYPE && peekedTagNumber == uint8(7): // BACnetConstructedDataNodeSubtype
		if _child, err = new(_BACnetConstructedDataNodeSubtype).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNodeSubtype for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NODE_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataNodeType
		if _child, err = new(_BACnetConstructedDataNodeType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNodeType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NOTIFICATION_CLASS && peekedTagNumber == uint8(2): // BACnetConstructedDataNotificationClass
		if _child, err = new(_BACnetConstructedDataNotificationClass).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNotificationClass for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NOTIFICATION_THRESHOLD && peekedTagNumber == uint8(2): // BACnetConstructedDataNotificationThreshold
		if _child, err = new(_BACnetConstructedDataNotificationThreshold).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNotificationThreshold for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NOTIFY_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataNotifyType
		if _child, err = new(_BACnetConstructedDataNotifyType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNotifyType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NUMBER_OF_APDU_RETRIES && peekedTagNumber == uint8(2): // BACnetConstructedDataNumberOfAPDURetries
		if _child, err = new(_BACnetConstructedDataNumberOfAPDURetries).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNumberOfAPDURetries for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NUMBER_OF_AUTHENTICATION_POLICIES && peekedTagNumber == uint8(2): // BACnetConstructedDataNumberOfAuthenticationPolicies
		if _child, err = new(_BACnetConstructedDataNumberOfAuthenticationPolicies).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNumberOfAuthenticationPolicies for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_NUMBER_OF_STATES && peekedTagNumber == uint8(2): // BACnetConstructedDataNumberOfStates
		if _child, err = new(_BACnetConstructedDataNumberOfStates).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataNumberOfStates for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OBJECT_IDENTIFIER && peekedTagNumber == uint8(12): // BACnetConstructedDataObjectIdentifier
		if _child, err = new(_BACnetConstructedDataObjectIdentifier).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataObjectIdentifier for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OBJECT_LIST: // BACnetConstructedDataObjectList
		if _child, err = new(_BACnetConstructedDataObjectList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataObjectList for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OBJECT_NAME && peekedTagNumber == uint8(7): // BACnetConstructedDataObjectName
		if _child, err = new(_BACnetConstructedDataObjectName).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataObjectName for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OBJECT_PROPERTY_REFERENCE: // BACnetConstructedDataObjectPropertyReference
		if _child, err = new(_BACnetConstructedDataObjectPropertyReference).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataObjectPropertyReference for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OBJECT_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataObjectType
		if _child, err = new(_BACnetConstructedDataObjectType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataObjectType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataOccupancyCount
		if _child, err = new(_BACnetConstructedDataOccupancyCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_COUNT_ADJUST && peekedTagNumber == uint8(1): // BACnetConstructedDataOccupancyCountAdjust
		if _child, err = new(_BACnetConstructedDataOccupancyCountAdjust).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyCountAdjust for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_COUNT_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataOccupancyCountEnable
		if _child, err = new(_BACnetConstructedDataOccupancyCountEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyCountEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_LOWER_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataOccupancyLowerLimit
		if _child, err = new(_BACnetConstructedDataOccupancyLowerLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyLowerLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_LOWER_LIMIT_ENFORCED && peekedTagNumber == uint8(1): // BACnetConstructedDataOccupancyLowerLimitEnforced
		if _child, err = new(_BACnetConstructedDataOccupancyLowerLimitEnforced).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyLowerLimitEnforced for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_STATE && peekedTagNumber == uint8(9): // BACnetConstructedDataOccupancyState
		if _child, err = new(_BACnetConstructedDataOccupancyState).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyState for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_UPPER_LIMIT && peekedTagNumber == uint8(2): // BACnetConstructedDataOccupancyUpperLimit
		if _child, err = new(_BACnetConstructedDataOccupancyUpperLimit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyUpperLimit for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OCCUPANCY_UPPER_LIMIT_ENFORCED && peekedTagNumber == uint8(1): // BACnetConstructedDataOccupancyUpperLimitEnforced
		if _child, err = new(_BACnetConstructedDataOccupancyUpperLimitEnforced).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOccupancyUpperLimitEnforced for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OPERATION_DIRECTION && peekedTagNumber == uint8(9): // BACnetConstructedDataOperationDirection
		if _child, err = new(_BACnetConstructedDataOperationDirection).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOperationDirection for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OPERATION_EXPECTED && peekedTagNumber == uint8(9): // BACnetConstructedDataOperationExpected
		if _child, err = new(_BACnetConstructedDataOperationExpected).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOperationExpected for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OPTIONAL: // BACnetConstructedDataOptional
		if _child, err = new(_BACnetConstructedDataOptional).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOptional for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OUT_OF_SERVICE && peekedTagNumber == uint8(1): // BACnetConstructedDataOutOfService
		if _child, err = new(_BACnetConstructedDataOutOfService).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOutOfService for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_OUTPUT_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataOutputUnits
		if _child, err = new(_BACnetConstructedDataOutputUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOutputUnits for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PACKET_REORDER_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataPacketReorderTime
		if _child, err = new(_BACnetConstructedDataPacketReorderTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPacketReorderTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PASSBACK_MODE: // BACnetConstructedDataPassbackMode
		if _child, err = new(_BACnetConstructedDataPassbackMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPassbackMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PASSBACK_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataPassbackTimeout
		if _child, err = new(_BACnetConstructedDataPassbackTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPassbackTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PASSENGER_ALARM && peekedTagNumber == uint8(1): // BACnetConstructedDataPassengerAlarm
		if _child, err = new(_BACnetConstructedDataPassengerAlarm).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPassengerAlarm for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_POLARITY && peekedTagNumber == uint8(9): // BACnetConstructedDataPolarity
		if _child, err = new(_BACnetConstructedDataPolarity).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPolarity for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PORT_FILTER: // BACnetConstructedDataPortFilter
		if _child, err = new(_BACnetConstructedDataPortFilter).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPortFilter for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_POSITIVE_ACCESS_RULES: // BACnetConstructedDataPositiveAccessRules
		if _child, err = new(_BACnetConstructedDataPositiveAccessRules).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveAccessRules for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_POWER && peekedTagNumber == uint8(4): // BACnetConstructedDataPower
		if _child, err = new(_BACnetConstructedDataPower).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPower for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_POWER_MODE && peekedTagNumber == uint8(1): // BACnetConstructedDataPowerMode
		if _child, err = new(_BACnetConstructedDataPowerMode).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPowerMode for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESCALE: // BACnetConstructedDataPrescale
		if _child, err = new(_BACnetConstructedDataPrescale).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPrescale for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_DOOR && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataAccessDoorPresentValue
		if _child, err = new(_BACnetConstructedDataAccessDoorPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessDoorPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ALERT_ENROLLMENT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(12): // BACnetConstructedDataAlertEnrollmentPresentValue
		if _child, err = new(_BACnetConstructedDataAlertEnrollmentPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAlertEnrollmentPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogInputPresentValue
		if _child, err = new(_BACnetConstructedDataAnalogInputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogInputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogOutputPresentValue
		if _child, err = new(_BACnetConstructedDataAnalogOutputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogOutputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogValuePresentValue
		if _child, err = new(_BACnetConstructedDataAnalogValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryInputPresentValue
		if _child, err = new(_BACnetConstructedDataBinaryInputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryInputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryOutputPresentValue
		if _child, err = new(_BACnetConstructedDataBinaryOutputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryOutputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryValuePresentValue
		if _child, err = new(_BACnetConstructedDataBinaryValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryLightingOutputPresentValue
		if _child, err = new(_BACnetConstructedDataBinaryLightingOutputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryLightingOutputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BITSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(8): // BACnetConstructedDataBitStringValuePresentValue
		if _child, err = new(_BACnetConstructedDataBitStringValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBitStringValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CALENDAR && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(1): // BACnetConstructedDataCalendarPresentValue
		if _child, err = new(_BACnetConstructedDataCalendarPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCalendarPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHANNEL && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE: // BACnetConstructedDataChannelPresentValue
		if _child, err = new(_BACnetConstructedDataChannelPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataChannelPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHARACTERSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(7): // BACnetConstructedDataCharacterStringValuePresentValue
		if _child, err = new(_BACnetConstructedDataCharacterStringValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCharacterStringValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CREDENTIAL_DATA_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE: // BACnetConstructedDataCredentialDataInputPresentValue
		if _child, err = new(_BACnetConstructedDataCredentialDataInputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentialDataInputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(10): // BACnetConstructedDataDateValuePresentValue
		if _child, err = new(_BACnetConstructedDataDateValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(10): // BACnetConstructedDataDatePatternValuePresentValue
		if _child, err = new(_BACnetConstructedDataDatePatternValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDatePatternValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATETIME_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(11): // BACnetConstructedDataDateTimeValuePresentValue
		if _child, err = new(_BACnetConstructedDataDateTimeValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateTimeValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATETIMEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(11): // BACnetConstructedDataDateTimePatternValuePresentValue
		if _child, err = new(_BACnetConstructedDataDateTimePatternValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateTimePatternValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValuePresentValue
		if _child, err = new(_BACnetConstructedDataIntegerValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValuePresentValue
		if _child, err = new(_BACnetConstructedDataLargeAnalogValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataLightingOutputPresentValue
		if _child, err = new(_BACnetConstructedDataLightingOutputPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingOutputPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_POINT && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataLifeSafetyPointPresentValue
		if _child, err = new(_BACnetConstructedDataLifeSafetyPointPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyPointPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIFE_SAFETY_ZONE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataLifeSafetyZonePresentValue
		if _child, err = new(_BACnetConstructedDataLifeSafetyZonePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLifeSafetyZonePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LOAD_CONTROL && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataLoadControlPresentValue
		if _child, err = new(_BACnetConstructedDataLoadControlPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoadControlPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LOOP && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataLoopPresentValue
		if _child, err = new(_BACnetConstructedDataLoopPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLoopPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_PULSE_CONVERTER && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataPulseConverterPresentValue
		if _child, err = new(_BACnetConstructedDataPulseConverterPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPulseConverterPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE: // BACnetConstructedDataGroupPresentValue
		if _child, err = new(_BACnetConstructedDataGroupPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGroupPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_GLOBAL_GROUP && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE: // BACnetConstructedDataGlobalGroupPresentValue
		if _child, err = new(_BACnetConstructedDataGlobalGroupPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataGlobalGroupPresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_OCTETSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(6): // BACnetConstructedDataOctetStringValuePresentValue
		if _child, err = new(_BACnetConstructedDataOctetStringValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOctetStringValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_SCHEDULE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE: // BACnetConstructedDataSchedulePresentValue
		if _child, err = new(_BACnetConstructedDataSchedulePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSchedulePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIME_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(11): // BACnetConstructedDataTimeValuePresentValue
		if _child, err = new(_BACnetConstructedDataTimeValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeValuePresentValue for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(11): // BACnetConstructedDataTimePatternValuePresentValue
		if _child, err = new(_BACnetConstructedDataTimePatternValuePresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimePatternValuePresentValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PRESENT_VALUE && peekedTagNumber == uint8(2): // BACnetConstructedDataPresentValue
		if _child, err = new(_BACnetConstructedDataPresentValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPresentValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PRIORITY: // BACnetConstructedDataPriority
		if _child, err = new(_BACnetConstructedDataPriority).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPriority for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PRIORITY_ARRAY: // BACnetConstructedDataPriorityArray
		if _child, err = new(_BACnetConstructedDataPriorityArray).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPriorityArray for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PRIORITY_FOR_WRITING && peekedTagNumber == uint8(2): // BACnetConstructedDataPriorityForWriting
		if _child, err = new(_BACnetConstructedDataPriorityForWriting).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPriorityForWriting for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROCESS_IDENTIFIER && peekedTagNumber == uint8(2): // BACnetConstructedDataProcessIdentifier
		if _child, err = new(_BACnetConstructedDataProcessIdentifier).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProcessIdentifier for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROCESS_IDENTIFIER_FILTER: // BACnetConstructedDataProcessIdentifierFilter
		if _child, err = new(_BACnetConstructedDataProcessIdentifierFilter).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProcessIdentifierFilter for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROFILE_LOCATION && peekedTagNumber == uint8(7): // BACnetConstructedDataProfileLocation
		if _child, err = new(_BACnetConstructedDataProfileLocation).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProfileLocation for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROFILE_NAME && peekedTagNumber == uint8(7): // BACnetConstructedDataProfileName
		if _child, err = new(_BACnetConstructedDataProfileName).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProfileName for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROGRAM_CHANGE && peekedTagNumber == uint8(9): // BACnetConstructedDataProgramChange
		if _child, err = new(_BACnetConstructedDataProgramChange).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProgramChange for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROGRAM_LOCATION && peekedTagNumber == uint8(7): // BACnetConstructedDataProgramLocation
		if _child, err = new(_BACnetConstructedDataProgramLocation).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProgramLocation for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROGRAM_STATE && peekedTagNumber == uint8(9): // BACnetConstructedDataProgramState
		if _child, err = new(_BACnetConstructedDataProgramState).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProgramState for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROPERTY_LIST && peekedTagNumber == uint8(9): // BACnetConstructedDataPropertyList
		if _child, err = new(_BACnetConstructedDataPropertyList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPropertyList for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROPORTIONAL_CONSTANT && peekedTagNumber == uint8(4): // BACnetConstructedDataProportionalConstant
		if _child, err = new(_BACnetConstructedDataProportionalConstant).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProportionalConstant for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROPORTIONAL_CONSTANT_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataProportionalConstantUnits
		if _child, err = new(_BACnetConstructedDataProportionalConstantUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProportionalConstantUnits for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROTOCOL_LEVEL && peekedTagNumber == uint8(9): // BACnetConstructedDataProtocolLevel
		if _child, err = new(_BACnetConstructedDataProtocolLevel).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProtocolLevel for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROTOCOL_OBJECT_TYPES_SUPPORTED && peekedTagNumber == uint8(8): // BACnetConstructedDataProtocolObjectTypesSupported
		if _child, err = new(_BACnetConstructedDataProtocolObjectTypesSupported).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProtocolObjectTypesSupported for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROTOCOL_REVISION && peekedTagNumber == uint8(2): // BACnetConstructedDataProtocolRevision
		if _child, err = new(_BACnetConstructedDataProtocolRevision).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProtocolRevision for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROTOCOL_SERVICES_SUPPORTED && peekedTagNumber == uint8(8): // BACnetConstructedDataProtocolServicesSupported
		if _child, err = new(_BACnetConstructedDataProtocolServicesSupported).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProtocolServicesSupported for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PROTOCOL_VERSION && peekedTagNumber == uint8(2): // BACnetConstructedDataProtocolVersion
		if _child, err = new(_BACnetConstructedDataProtocolVersion).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataProtocolVersion for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_PULSE_RATE && peekedTagNumber == uint8(2): // BACnetConstructedDataPulseRate
		if _child, err = new(_BACnetConstructedDataPulseRate).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPulseRate for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_READ_ONLY && peekedTagNumber == uint8(1): // BACnetConstructedDataReadOnly
		if _child, err = new(_BACnetConstructedDataReadOnly).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataReadOnly for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REASON_FOR_DISABLE && peekedTagNumber == uint8(9): // BACnetConstructedDataReasonForDisable
		if _child, err = new(_BACnetConstructedDataReasonForDisable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataReasonForDisable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REASON_FOR_HALT && peekedTagNumber == uint8(9): // BACnetConstructedDataReasonForHalt
		if _child, err = new(_BACnetConstructedDataReasonForHalt).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataReasonForHalt for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RECIPIENT_LIST: // BACnetConstructedDataRecipientList
		if _child, err = new(_BACnetConstructedDataRecipientList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRecipientList for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_FILE && propertyIdentifierArgument == BACnetPropertyIdentifier_RECORD_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataFileRecordCount
		if _child, err = new(_BACnetConstructedDataFileRecordCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataFileRecordCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RECORD_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataRecordCount
		if _child, err = new(_BACnetConstructedDataRecordCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRecordCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RECORDS_SINCE_NOTIFICATION && peekedTagNumber == uint8(2): // BACnetConstructedDataRecordsSinceNotification
		if _child, err = new(_BACnetConstructedDataRecordsSinceNotification).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRecordsSinceNotification for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REFERENCE_PORT && peekedTagNumber == uint8(2): // BACnetConstructedDataReferencePort
		if _child, err = new(_BACnetConstructedDataReferencePort).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataReferencePort for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REGISTERED_CAR_CALL: // BACnetConstructedDataRegisteredCarCall
		if _child, err = new(_BACnetConstructedDataRegisteredCarCall).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRegisteredCarCall for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RELIABILITY && peekedTagNumber == uint8(9): // BACnetConstructedDataReliability
		if _child, err = new(_BACnetConstructedDataReliability).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataReliability for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RELIABILITY_EVALUATION_INHIBIT && peekedTagNumber == uint8(1): // BACnetConstructedDataReliabilityEvaluationInhibit
		if _child, err = new(_BACnetConstructedDataReliabilityEvaluationInhibit).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataReliabilityEvaluationInhibit for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ACCESS_DOOR && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(9): // BACnetConstructedDataAccessDoorRelinquishDefault
		if _child, err = new(_BACnetConstructedDataAccessDoorRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAccessDoorRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogOutputRelinquishDefault
		if _child, err = new(_BACnetConstructedDataAnalogOutputRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogOutputRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(4): // BACnetConstructedDataAnalogValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataAnalogValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataAnalogValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryOutputRelinquishDefault
		if _child, err = new(_BACnetConstructedDataBinaryOutputRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryOutputRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataBinaryValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BINARY_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(9): // BACnetConstructedDataBinaryLightingOutputRelinquishDefault
		if _child, err = new(_BACnetConstructedDataBinaryLightingOutputRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBinaryLightingOutputRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_BITSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(8): // BACnetConstructedDataBitStringValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataBitStringValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataBitStringValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CHARACTERSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(7): // BACnetConstructedDataCharacterStringValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataCharacterStringValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCharacterStringValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(10): // BACnetConstructedDataDateValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataDateValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(10): // BACnetConstructedDataDatePatternValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataDatePatternValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDatePatternValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATETIME_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT: // BACnetConstructedDataDateTimeValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataDateTimeValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateTimeValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_DATETIMEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT: // BACnetConstructedDataDateTimePatternValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataDateTimePatternValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataDateTimePatternValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(4): // BACnetConstructedDataLightingOutputRelinquishDefault
		if _child, err = new(_BACnetConstructedDataLightingOutputRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingOutputRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMEPATTERN_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(11): // BACnetConstructedDataTimePatternValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataTimePatternValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimePatternValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIME_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(11): // BACnetConstructedDataTimeValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataTimeValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataIntegerValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_OCTETSTRING_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(6): // BACnetConstructedDataOctetStringValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataOctetStringValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataOctetStringValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateOutputRelinquishDefault
		if _child, err = new(_BACnetConstructedDataMultiStateOutputRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateOutputRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_MULTI_STATE_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(2): // BACnetConstructedDataMultiStateValueRelinquishDefault
		if _child, err = new(_BACnetConstructedDataMultiStateValueRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataMultiStateValueRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RELINQUISH_DEFAULT && peekedTagNumber == uint8(2): // BACnetConstructedDataRelinquishDefault
		if _child, err = new(_BACnetConstructedDataRelinquishDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRelinquishDefault for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REPRESENTS: // BACnetConstructedDataRepresents
		if _child, err = new(_BACnetConstructedDataRepresents).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRepresents for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REQUESTED_SHED_LEVEL: // BACnetConstructedDataRequestedShedLevel
		if _child, err = new(_BACnetConstructedDataRequestedShedLevel).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRequestedShedLevel for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REQUESTED_UPDATE_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataRequestedUpdateInterval
		if _child, err = new(_BACnetConstructedDataRequestedUpdateInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRequestedUpdateInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_REQUIRED: // BACnetConstructedDataRequired
		if _child, err = new(_BACnetConstructedDataRequired).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRequired for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LARGE_ANALOG_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RESOLUTION && peekedTagNumber == uint8(5): // BACnetConstructedDataLargeAnalogValueResolution
		if _child, err = new(_BACnetConstructedDataLargeAnalogValueResolution).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLargeAnalogValueResolution for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RESOLUTION && peekedTagNumber == uint8(3): // BACnetConstructedDataIntegerValueResolution
		if _child, err = new(_BACnetConstructedDataIntegerValueResolution).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataIntegerValueResolution for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_POSITIVE_INTEGER_VALUE && propertyIdentifierArgument == BACnetPropertyIdentifier_RESOLUTION && peekedTagNumber == uint8(2): // BACnetConstructedDataPositiveIntegerValueResolution
		if _child, err = new(_BACnetConstructedDataPositiveIntegerValueResolution).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataPositiveIntegerValueResolution for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_TIMER && propertyIdentifierArgument == BACnetPropertyIdentifier_RESOLUTION && peekedTagNumber == uint8(2): // BACnetConstructedDataTimerResolution
		if _child, err = new(_BACnetConstructedDataTimerResolution).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerResolution for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RESOLUTION && peekedTagNumber == uint8(4): // BACnetConstructedDataResolution
		if _child, err = new(_BACnetConstructedDataResolution).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataResolution for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RESTART_NOTIFICATION_RECIPIENTS: // BACnetConstructedDataRestartNotificationRecipients
		if _child, err = new(_BACnetConstructedDataRestartNotificationRecipients).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRestartNotificationRecipients for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RESTORE_COMPLETION_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataRestoreCompletionTime
		if _child, err = new(_BACnetConstructedDataRestoreCompletionTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRestoreCompletionTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_RESTORE_PREPARATION_TIME && peekedTagNumber == uint8(2): // BACnetConstructedDataRestorePreparationTime
		if _child, err = new(_BACnetConstructedDataRestorePreparationTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRestorePreparationTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ROUTING_TABLE: // BACnetConstructedDataRoutingTable
		if _child, err = new(_BACnetConstructedDataRoutingTable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataRoutingTable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SCALE: // BACnetConstructedDataScale
		if _child, err = new(_BACnetConstructedDataScale).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataScale for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SCALE_FACTOR && peekedTagNumber == uint8(4): // BACnetConstructedDataScaleFactor
		if _child, err = new(_BACnetConstructedDataScaleFactor).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataScaleFactor for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SCHEDULE_DEFAULT: // BACnetConstructedDataScheduleDefault
		if _child, err = new(_BACnetConstructedDataScheduleDefault).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataScheduleDefault for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SECURED_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataSecuredStatus
		if _child, err = new(_BACnetConstructedDataSecuredStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSecuredStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SECURITY_PDU_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataSecurityPDUTimeout
		if _child, err = new(_BACnetConstructedDataSecurityPDUTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSecurityPDUTimeout for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SECURITY_TIME_WINDOW && peekedTagNumber == uint8(2): // BACnetConstructedDataSecurityTimeWindow
		if _child, err = new(_BACnetConstructedDataSecurityTimeWindow).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSecurityTimeWindow for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SEGMENTATION_SUPPORTED && peekedTagNumber == uint8(9): // BACnetConstructedDataSegmentationSupported
		if _child, err = new(_BACnetConstructedDataSegmentationSupported).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSegmentationSupported for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SERIAL_NUMBER && peekedTagNumber == uint8(7): // BACnetConstructedDataSerialNumber
		if _child, err = new(_BACnetConstructedDataSerialNumber).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSerialNumber for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SETPOINT && peekedTagNumber == uint8(4): // BACnetConstructedDataSetpoint
		if _child, err = new(_BACnetConstructedDataSetpoint).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSetpoint for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SETPOINT_REFERENCE: // BACnetConstructedDataSetpointReference
		if _child, err = new(_BACnetConstructedDataSetpointReference).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSetpointReference for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SETTING && peekedTagNumber == uint8(2): // BACnetConstructedDataSetting
		if _child, err = new(_BACnetConstructedDataSetting).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSetting for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SHED_DURATION && peekedTagNumber == uint8(2): // BACnetConstructedDataShedDuration
		if _child, err = new(_BACnetConstructedDataShedDuration).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataShedDuration for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SHED_LEVEL_DESCRIPTIONS && peekedTagNumber == uint8(7): // BACnetConstructedDataShedLevelDescriptions
		if _child, err = new(_BACnetConstructedDataShedLevelDescriptions).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataShedLevelDescriptions for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SHED_LEVELS && peekedTagNumber == uint8(2): // BACnetConstructedDataShedLevels
		if _child, err = new(_BACnetConstructedDataShedLevels).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataShedLevels for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SILENCED && peekedTagNumber == uint8(9): // BACnetConstructedDataSilenced
		if _child, err = new(_BACnetConstructedDataSilenced).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSilenced for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SLAVE_ADDRESS_BINDING: // BACnetConstructedDataSlaveAddressBinding
		if _child, err = new(_BACnetConstructedDataSlaveAddressBinding).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSlaveAddressBinding for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SLAVE_PROXY_ENABLE && peekedTagNumber == uint8(1): // BACnetConstructedDataSlaveProxyEnable
		if _child, err = new(_BACnetConstructedDataSlaveProxyEnable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSlaveProxyEnable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_START_TIME: // BACnetConstructedDataStartTime
		if _child, err = new(_BACnetConstructedDataStartTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStartTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STATE_CHANGE_VALUES: // BACnetConstructedDataStateChangeValues
		if _child, err = new(_BACnetConstructedDataStateChangeValues).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStateChangeValues for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STATE_DESCRIPTION && peekedTagNumber == uint8(7): // BACnetConstructedDataStateDescription
		if _child, err = new(_BACnetConstructedDataStateDescription).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStateDescription for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STATE_TEXT && peekedTagNumber == uint8(7): // BACnetConstructedDataStateText
		if _child, err = new(_BACnetConstructedDataStateText).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStateText for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STATUS_FLAGS && peekedTagNumber == uint8(8): // BACnetConstructedDataStatusFlags
		if _child, err = new(_BACnetConstructedDataStatusFlags).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStatusFlags for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STOP_TIME: // BACnetConstructedDataStopTime
		if _child, err = new(_BACnetConstructedDataStopTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStopTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STOP_WHEN_FULL && peekedTagNumber == uint8(1): // BACnetConstructedDataStopWhenFull
		if _child, err = new(_BACnetConstructedDataStopWhenFull).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStopWhenFull for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STRIKE_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataStrikeCount
		if _child, err = new(_BACnetConstructedDataStrikeCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStrikeCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_STRUCTURED_OBJECT_LIST: // BACnetConstructedDataStructuredObjectList
		if _child, err = new(_BACnetConstructedDataStructuredObjectList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataStructuredObjectList for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUBORDINATE_ANNOTATIONS: // BACnetConstructedDataSubordinateAnnotations
		if _child, err = new(_BACnetConstructedDataSubordinateAnnotations).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSubordinateAnnotations for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUBORDINATE_LIST: // BACnetConstructedDataSubordinateList
		if _child, err = new(_BACnetConstructedDataSubordinateList).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSubordinateList for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUBORDINATE_NODE_TYPES && peekedTagNumber == uint8(9): // BACnetConstructedDataSubordinateNodeTypes
		if _child, err = new(_BACnetConstructedDataSubordinateNodeTypes).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSubordinateNodeTypes for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUBORDINATE_RELATIONSHIPS && peekedTagNumber == uint8(9): // BACnetConstructedDataSubordinateRelationships
		if _child, err = new(_BACnetConstructedDataSubordinateRelationships).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSubordinateRelationships for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUBORDINATE_TAGS: // BACnetConstructedDataSubordinateTags
		if _child, err = new(_BACnetConstructedDataSubordinateTags).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSubordinateTags for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUBSCRIBED_RECIPIENTS: // BACnetConstructedDataSubscribedRecipients
		if _child, err = new(_BACnetConstructedDataSubscribedRecipients).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSubscribedRecipients for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUPPORTED_FORMAT_CLASSES: // BACnetConstructedDataSupportedFormatClasses
		if _child, err = new(_BACnetConstructedDataSupportedFormatClasses).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSupportedFormatClasses for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUPPORTED_FORMATS: // BACnetConstructedDataSupportedFormats
		if _child, err = new(_BACnetConstructedDataSupportedFormats).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSupportedFormats for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SUPPORTED_SECURITY_ALGORITHMS: // BACnetConstructedDataSupportedSecurityAlgorithms
		if _child, err = new(_BACnetConstructedDataSupportedSecurityAlgorithms).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSupportedSecurityAlgorithms for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_SYSTEM_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataSystemStatus
		if _child, err = new(_BACnetConstructedDataSystemStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataSystemStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TAGS: // BACnetConstructedDataTags
		if _child, err = new(_BACnetConstructedDataTags).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTags for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_THREAT_AUTHORITY: // BACnetConstructedDataThreatAuthority
		if _child, err = new(_BACnetConstructedDataThreatAuthority).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataThreatAuthority for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_THREAT_LEVEL: // BACnetConstructedDataThreatLevel
		if _child, err = new(_BACnetConstructedDataThreatLevel).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataThreatLevel for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_DELAY && peekedTagNumber == uint8(2): // BACnetConstructedDataTimeDelay
		if _child, err = new(_BACnetConstructedDataTimeDelay).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeDelay for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_DELAY_NORMAL && peekedTagNumber == uint8(2): // BACnetConstructedDataTimeDelayNormal
		if _child, err = new(_BACnetConstructedDataTimeDelayNormal).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeDelayNormal for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_OF_ACTIVE_TIME_RESET: // BACnetConstructedDataTimeOfActiveTimeReset
		if _child, err = new(_BACnetConstructedDataTimeOfActiveTimeReset).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeOfActiveTimeReset for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_OF_DEVICE_RESTART: // BACnetConstructedDataTimeOfDeviceRestart
		if _child, err = new(_BACnetConstructedDataTimeOfDeviceRestart).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeOfDeviceRestart for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_OF_STATE_COUNT_RESET: // BACnetConstructedDataTimeOfStateCountReset
		if _child, err = new(_BACnetConstructedDataTimeOfStateCountReset).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeOfStateCountReset for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_OF_STRIKE_COUNT_RESET: // BACnetConstructedDataTimeOfStrikeCountReset
		if _child, err = new(_BACnetConstructedDataTimeOfStrikeCountReset).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeOfStrikeCountReset for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_SYNCHRONIZATION_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataTimeSynchronizationInterval
		if _child, err = new(_BACnetConstructedDataTimeSynchronizationInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeSynchronizationInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIME_SYNCHRONIZATION_RECIPIENTS: // BACnetConstructedDataTimeSynchronizationRecipients
		if _child, err = new(_BACnetConstructedDataTimeSynchronizationRecipients).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimeSynchronizationRecipients for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIMER_RUNNING && peekedTagNumber == uint8(1): // BACnetConstructedDataTimerRunning
		if _child, err = new(_BACnetConstructedDataTimerRunning).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerRunning for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TIMER_STATE && peekedTagNumber == uint8(9): // BACnetConstructedDataTimerState
		if _child, err = new(_BACnetConstructedDataTimerState).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTimerState for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TOTAL_RECORD_COUNT && peekedTagNumber == uint8(2): // BACnetConstructedDataTotalRecordCount
		if _child, err = new(_BACnetConstructedDataTotalRecordCount).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTotalRecordCount for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TRACE_FLAG && peekedTagNumber == uint8(1): // BACnetConstructedDataTraceFlag
		if _child, err = new(_BACnetConstructedDataTraceFlag).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTraceFlag for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_LIGHTING_OUTPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_TRACKING_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataLightingOutputTrackingValue
		if _child, err = new(_BACnetConstructedDataLightingOutputTrackingValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataLightingOutputTrackingValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TRACKING_VALUE && peekedTagNumber == uint8(9): // BACnetConstructedDataTrackingValue
		if _child, err = new(_BACnetConstructedDataTrackingValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrackingValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TRANSACTION_NOTIFICATION_CLASS && peekedTagNumber == uint8(2): // BACnetConstructedDataTransactionNotificationClass
		if _child, err = new(_BACnetConstructedDataTransactionNotificationClass).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTransactionNotificationClass for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TRANSITION && peekedTagNumber == uint8(9): // BACnetConstructedDataTransition
		if _child, err = new(_BACnetConstructedDataTransition).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTransition for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_TRIGGER && peekedTagNumber == uint8(1): // BACnetConstructedDataTrigger
		if _child, err = new(_BACnetConstructedDataTrigger).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataTrigger for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_UNITS && peekedTagNumber == uint8(9): // BACnetConstructedDataUnits
		if _child, err = new(_BACnetConstructedDataUnits).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUnits for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_UPDATE_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataUpdateInterval
		if _child, err = new(_BACnetConstructedDataUpdateInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUpdateInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_UPDATE_KEY_SET_TIMEOUT && peekedTagNumber == uint8(2): // BACnetConstructedDataUpdateKeySetTimeout
		if _child, err = new(_BACnetConstructedDataUpdateKeySetTimeout).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUpdateKeySetTimeout for type-switch of BACnetConstructedData")
		}
	case objectTypeArgument == BACnetObjectType_CREDENTIAL_DATA_INPUT && propertyIdentifierArgument == BACnetPropertyIdentifier_UPDATE_TIME: // BACnetConstructedDataCredentialDataInputUpdateTime
		if _child, err = new(_BACnetConstructedDataCredentialDataInputUpdateTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataCredentialDataInputUpdateTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_UPDATE_TIME: // BACnetConstructedDataUpdateTime
		if _child, err = new(_BACnetConstructedDataUpdateTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUpdateTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_USER_EXTERNAL_IDENTIFIER && peekedTagNumber == uint8(7): // BACnetConstructedDataUserExternalIdentifier
		if _child, err = new(_BACnetConstructedDataUserExternalIdentifier).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUserExternalIdentifier for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_USER_INFORMATION_REFERENCE && peekedTagNumber == uint8(7): // BACnetConstructedDataUserInformationReference
		if _child, err = new(_BACnetConstructedDataUserInformationReference).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUserInformationReference for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_USER_NAME && peekedTagNumber == uint8(7): // BACnetConstructedDataUserName
		if _child, err = new(_BACnetConstructedDataUserName).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUserName for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_USER_TYPE && peekedTagNumber == uint8(9): // BACnetConstructedDataUserType
		if _child, err = new(_BACnetConstructedDataUserType).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUserType for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_USES_REMAINING && peekedTagNumber == uint8(3): // BACnetConstructedDataUsesRemaining
		if _child, err = new(_BACnetConstructedDataUsesRemaining).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUsesRemaining for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_UTC_OFFSET && peekedTagNumber == uint8(3): // BACnetConstructedDataUTCOffset
		if _child, err = new(_BACnetConstructedDataUTCOffset).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUTCOffset for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_UTC_TIME_SYNCHRONIZATION_RECIPIENTS: // BACnetConstructedDataUTCTimeSynchronizationRecipients
		if _child, err = new(_BACnetConstructedDataUTCTimeSynchronizationRecipients).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUTCTimeSynchronizationRecipients for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VALID_SAMPLES && peekedTagNumber == uint8(2): // BACnetConstructedDataValidSamples
		if _child, err = new(_BACnetConstructedDataValidSamples).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataValidSamples for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VALUE_BEFORE_CHANGE && peekedTagNumber == uint8(2): // BACnetConstructedDataValueBeforeChange
		if _child, err = new(_BACnetConstructedDataValueBeforeChange).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataValueBeforeChange for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VALUE_CHANGE_TIME: // BACnetConstructedDataValueChangeTime
		if _child, err = new(_BACnetConstructedDataValueChangeTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataValueChangeTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VALUE_SET && peekedTagNumber == uint8(2): // BACnetConstructedDataValueSet
		if _child, err = new(_BACnetConstructedDataValueSet).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataValueSet for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VALUE_SOURCE: // BACnetConstructedDataValueSource
		if _child, err = new(_BACnetConstructedDataValueSource).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataValueSource for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VALUE_SOURCE_ARRAY: // BACnetConstructedDataValueSourceArray
		if _child, err = new(_BACnetConstructedDataValueSourceArray).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataValueSourceArray for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VARIANCE_VALUE && peekedTagNumber == uint8(4): // BACnetConstructedDataVarianceValue
		if _child, err = new(_BACnetConstructedDataVarianceValue).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataVarianceValue for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VENDOR_IDENTIFIER && peekedTagNumber == uint8(2): // BACnetConstructedDataVendorIdentifier
		if _child, err = new(_BACnetConstructedDataVendorIdentifier).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataVendorIdentifier for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VENDOR_NAME && peekedTagNumber == uint8(7): // BACnetConstructedDataVendorName
		if _child, err = new(_BACnetConstructedDataVendorName).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataVendorName for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VERIFICATION_TIME && peekedTagNumber == uint8(3): // BACnetConstructedDataVerificationTime
		if _child, err = new(_BACnetConstructedDataVerificationTime).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataVerificationTime for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VIRTUAL_MAC_ADDRESS_TABLE: // BACnetConstructedDataVirtualMACAddressTable
		if _child, err = new(_BACnetConstructedDataVirtualMACAddressTable).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataVirtualMACAddressTable for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_VT_CLASSES_SUPPORTED && peekedTagNumber == uint8(9): // BACnetConstructedDataVTClassesSupported
		if _child, err = new(_BACnetConstructedDataVTClassesSupported).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataVTClassesSupported for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_WEEKLY_SCHEDULE: // BACnetConstructedDataWeeklySchedule
		if _child, err = new(_BACnetConstructedDataWeeklySchedule).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataWeeklySchedule for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_WINDOW_INTERVAL && peekedTagNumber == uint8(2): // BACnetConstructedDataWindowInterval
		if _child, err = new(_BACnetConstructedDataWindowInterval).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataWindowInterval for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_WINDOW_SAMPLES && peekedTagNumber == uint8(2): // BACnetConstructedDataWindowSamples
		if _child, err = new(_BACnetConstructedDataWindowSamples).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataWindowSamples for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_WRITE_STATUS && peekedTagNumber == uint8(9): // BACnetConstructedDataWriteStatus
		if _child, err = new(_BACnetConstructedDataWriteStatus).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataWriteStatus for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ZONE_FROM: // BACnetConstructedDataZoneFrom
		if _child, err = new(_BACnetConstructedDataZoneFrom).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataZoneFrom for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ZONE_MEMBERS: // BACnetConstructedDataZoneMembers
		if _child, err = new(_BACnetConstructedDataZoneMembers).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataZoneMembers for type-switch of BACnetConstructedData")
		}
	case 0 == 0 && propertyIdentifierArgument == BACnetPropertyIdentifier_ZONE_TO: // BACnetConstructedDataZoneTo
		if _child, err = new(_BACnetConstructedDataZoneTo).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataZoneTo for type-switch of BACnetConstructedData")
		}
	case 0 == 0: // BACnetConstructedDataUnspecified
		if _child, err = new(_BACnetConstructedDataUnspecified).parse(ctx, readBuffer, m, tagNumber, objectTypeArgument, propertyIdentifierArgument, arrayIndexArgument); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type BACnetConstructedDataUnspecified for type-switch of BACnetConstructedData")
		}
	default:
		return nil, errors.Errorf("Unmapped type for parameters [objectTypeArgument=%v, propertyIdentifierArgument=%v, peekedTagNumber=%v]", objectTypeArgument, propertyIdentifierArgument, peekedTagNumber)
	}

	closingTag, err := ReadSimpleField[BACnetClosingTag](ctx, "closingTag", ReadComplex[BACnetClosingTag](BACnetClosingTagParseWithBufferProducer((uint8)(tagNumber)), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'closingTag' field"))
	}
	m.ClosingTag = closingTag

	if closeErr := readBuffer.CloseContext("BACnetConstructedData"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetConstructedData")
	}

	return _child, nil
}

func (pm *_BACnetConstructedData) serializeParent(ctx context.Context, writeBuffer utils.WriteBuffer, child BACnetConstructedData, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("BACnetConstructedData"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BACnetConstructedData")
	}

	if err := WriteSimpleField[BACnetOpeningTag](ctx, "openingTag", m.GetOpeningTag(), WriteComplex[BACnetOpeningTag](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'openingTag' field")
	}
	// Virtual field
	peekedTagNumber := m.GetPeekedTagNumber()
	_ = peekedTagNumber
	if _peekedTagNumberErr := writeBuffer.WriteVirtual(ctx, "peekedTagNumber", m.GetPeekedTagNumber()); _peekedTagNumberErr != nil {
		return errors.Wrap(_peekedTagNumberErr, "Error serializing 'peekedTagNumber' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if err := WriteSimpleField[BACnetClosingTag](ctx, "closingTag", m.GetClosingTag(), WriteComplex[BACnetClosingTag](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'closingTag' field")
	}

	if popErr := writeBuffer.PopContext("BACnetConstructedData"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BACnetConstructedData")
	}
	return nil
}

////
// Arguments Getter

func (m *_BACnetConstructedData) GetTagNumber() uint8 {
	return m.TagNumber
}
func (m *_BACnetConstructedData) GetArrayIndexArgument() BACnetTagPayloadUnsignedInteger {
	return m.ArrayIndexArgument
}

//
////

func (m *_BACnetConstructedData) IsBACnetConstructedData() {}

func (m *_BACnetConstructedData) DeepCopy() any {
	return m.deepCopy()
}

func (m *_BACnetConstructedData) deepCopy() *_BACnetConstructedData {
	if m == nil {
		return nil
	}
	_BACnetConstructedDataCopy := &_BACnetConstructedData{
		nil, // will be set by child
		m.OpeningTag.DeepCopy().(BACnetOpeningTag),
		m.PeekedTagHeader.DeepCopy().(BACnetTagHeader),
		m.ClosingTag.DeepCopy().(BACnetClosingTag),
		m.TagNumber,
		m.ArrayIndexArgument,
	}
	return _BACnetConstructedDataCopy
}
