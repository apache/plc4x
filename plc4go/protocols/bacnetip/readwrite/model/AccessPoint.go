/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AccessPoint is the corresponding interface of AccessPoint
type AccessPoint interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetEventState returns EventState (property field)
	GetEventState() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetOutOfService returns OutOfService (property field)
	GetOutOfService() ReadableProperty
	// GetAuthenticationStatus returns AuthenticationStatus (property field)
	GetAuthenticationStatus() ReadableProperty
	// GetActiveAuthenticationPolicy returns ActiveAuthenticationPolicy (property field)
	GetActiveAuthenticationPolicy() ReadableProperty
	// GetNumberOfAuthenticationPolicies returns NumberOfAuthenticationPolicies (property field)
	GetNumberOfAuthenticationPolicies() ReadableProperty
	// GetAuthenticationPolicyList returns AuthenticationPolicyList (property field)
	GetAuthenticationPolicyList() OptionalProperty
	// GetAuthenticationPolicyNames returns AuthenticationPolicyNames (property field)
	GetAuthenticationPolicyNames() OptionalProperty
	// GetAuthorizationMode returns AuthorizationMode (property field)
	GetAuthorizationMode() ReadableProperty
	// GetVerificationTime returns VerificationTime (property field)
	GetVerificationTime() OptionalProperty
	// GetLockout returns Lockout (property field)
	GetLockout() OptionalProperty
	// GetLockoutRelinquishTime returns LockoutRelinquishTime (property field)
	GetLockoutRelinquishTime() OptionalProperty
	// GetFailedAttempts returns FailedAttempts (property field)
	GetFailedAttempts() OptionalProperty
	// GetFailedAttemptEvents returns FailedAttemptEvents (property field)
	GetFailedAttemptEvents() OptionalProperty
	// GetMaxFailedAttempts returns MaxFailedAttempts (property field)
	GetMaxFailedAttempts() OptionalProperty
	// GetFailedAttemptsTime returns FailedAttemptsTime (property field)
	GetFailedAttemptsTime() OptionalProperty
	// GetThreatLevel returns ThreatLevel (property field)
	GetThreatLevel() OptionalProperty
	// GetOccupancyUpperLimitEnforced returns OccupancyUpperLimitEnforced (property field)
	GetOccupancyUpperLimitEnforced() OptionalProperty
	// GetOccupancyLowerLimitEnforced returns OccupancyLowerLimitEnforced (property field)
	GetOccupancyLowerLimitEnforced() OptionalProperty
	// GetOccupancyCountAdjust returns OccupancyCountAdjust (property field)
	GetOccupancyCountAdjust() OptionalProperty
	// GetAccompanimentTime returns AccompanimentTime (property field)
	GetAccompanimentTime() OptionalProperty
	// GetAccessEvent returns AccessEvent (property field)
	GetAccessEvent() ReadableProperty
	// GetAccessEventTag returns AccessEventTag (property field)
	GetAccessEventTag() ReadableProperty
	// GetAccessEventTime returns AccessEventTime (property field)
	GetAccessEventTime() ReadableProperty
	// GetAccessEventCredential returns AccessEventCredential (property field)
	GetAccessEventCredential() ReadableProperty
	// GetAccessEventAuthenticationFactor returns AccessEventAuthenticationFactor (property field)
	GetAccessEventAuthenticationFactor() OptionalProperty
	// GetAccessDoors returns AccessDoors (property field)
	GetAccessDoors() ReadableProperty
	// GetPriorityForWriting returns PriorityForWriting (property field)
	GetPriorityForWriting() ReadableProperty
	// GetMusterPoint returns MusterPoint (property field)
	GetMusterPoint() OptionalProperty
	// GetZoneTo returns ZoneTo (property field)
	GetZoneTo() OptionalProperty
	// GetZoneFrom returns ZoneFrom (property field)
	GetZoneFrom() OptionalProperty
	// GetNotificationClass returns NotificationClass (property field)
	GetNotificationClass() OptionalProperty
	// GetTransactionNotificationClass returns TransactionNotificationClass (property field)
	GetTransactionNotificationClass() OptionalProperty
	// GetAccessAlarmEvents returns AccessAlarmEvents (property field)
	GetAccessAlarmEvents() OptionalProperty
	// GetAccessTransactionEvents returns AccessTransactionEvents (property field)
	GetAccessTransactionEvents() OptionalProperty
	// GetEventEnable returns EventEnable (property field)
	GetEventEnable() OptionalProperty
	// GetAckedTransitions returns AckedTransitions (property field)
	GetAckedTransitions() OptionalProperty
	// GetNotifyType returns NotifyType (property field)
	GetNotifyType() OptionalProperty
	// GetEventTimeStamps returns EventTimeStamps (property field)
	GetEventTimeStamps() OptionalProperty
	// GetEventMessageTexts returns EventMessageTexts (property field)
	GetEventMessageTexts() OptionalProperty
	// GetEventMessageTextsConfig returns EventMessageTextsConfig (property field)
	GetEventMessageTextsConfig() OptionalProperty
	// GetEventDetectionEnable returns EventDetectionEnable (property field)
	GetEventDetectionEnable() OptionalProperty
	// GetEventAlgorithmInhibitRef returns EventAlgorithmInhibitRef (property field)
	GetEventAlgorithmInhibitRef() OptionalProperty
	// GetEventAlgorithmInhibit returns EventAlgorithmInhibit (property field)
	GetEventAlgorithmInhibit() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAccessPoint is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAccessPoint()
	// CreateBuilder creates a AccessPointBuilder
	CreateAccessPointBuilder() AccessPointBuilder
}

// _AccessPoint is the data-structure of this message
type _AccessPoint struct {
	ObjectIdentifier                ReadableProperty
	ObjectName                      ReadableProperty
	ObjectType                      ReadableProperty
	Description                     OptionalProperty
	StatusFlags                     ReadableProperty
	EventState                      ReadableProperty
	Reliability                     ReadableProperty
	OutOfService                    ReadableProperty
	AuthenticationStatus            ReadableProperty
	ActiveAuthenticationPolicy      ReadableProperty
	NumberOfAuthenticationPolicies  ReadableProperty
	AuthenticationPolicyList        OptionalProperty
	AuthenticationPolicyNames       OptionalProperty
	AuthorizationMode               ReadableProperty
	VerificationTime                OptionalProperty
	Lockout                         OptionalProperty
	LockoutRelinquishTime           OptionalProperty
	FailedAttempts                  OptionalProperty
	FailedAttemptEvents             OptionalProperty
	MaxFailedAttempts               OptionalProperty
	FailedAttemptsTime              OptionalProperty
	ThreatLevel                     OptionalProperty
	OccupancyUpperLimitEnforced     OptionalProperty
	OccupancyLowerLimitEnforced     OptionalProperty
	OccupancyCountAdjust            OptionalProperty
	AccompanimentTime               OptionalProperty
	AccessEvent                     ReadableProperty
	AccessEventTag                  ReadableProperty
	AccessEventTime                 ReadableProperty
	AccessEventCredential           ReadableProperty
	AccessEventAuthenticationFactor OptionalProperty
	AccessDoors                     ReadableProperty
	PriorityForWriting              ReadableProperty
	MusterPoint                     OptionalProperty
	ZoneTo                          OptionalProperty
	ZoneFrom                        OptionalProperty
	NotificationClass               OptionalProperty
	TransactionNotificationClass    OptionalProperty
	AccessAlarmEvents               OptionalProperty
	AccessTransactionEvents         OptionalProperty
	EventEnable                     OptionalProperty
	AckedTransitions                OptionalProperty
	NotifyType                      OptionalProperty
	EventTimeStamps                 OptionalProperty
	EventMessageTexts               OptionalProperty
	EventMessageTextsConfig         OptionalProperty
	EventDetectionEnable            OptionalProperty
	EventAlgorithmInhibitRef        OptionalProperty
	EventAlgorithmInhibit           OptionalProperty
	ReliabilityEvaluationInhibit    OptionalProperty
	PropertyList                    ReadableProperty
	Tags                            OptionalProperty
	ProfileLocation                 OptionalProperty
	ProfileName                     OptionalProperty
}

var _ AccessPoint = (*_AccessPoint)(nil)

// NewAccessPoint factory function for _AccessPoint
func NewAccessPoint(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, authenticationStatus ReadableProperty, activeAuthenticationPolicy ReadableProperty, numberOfAuthenticationPolicies ReadableProperty, authenticationPolicyList OptionalProperty, authenticationPolicyNames OptionalProperty, authorizationMode ReadableProperty, verificationTime OptionalProperty, lockout OptionalProperty, lockoutRelinquishTime OptionalProperty, failedAttempts OptionalProperty, failedAttemptEvents OptionalProperty, maxFailedAttempts OptionalProperty, failedAttemptsTime OptionalProperty, threatLevel OptionalProperty, occupancyUpperLimitEnforced OptionalProperty, occupancyLowerLimitEnforced OptionalProperty, occupancyCountAdjust OptionalProperty, accompanimentTime OptionalProperty, accessEvent ReadableProperty, accessEventTag ReadableProperty, accessEventTime ReadableProperty, accessEventCredential ReadableProperty, accessEventAuthenticationFactor OptionalProperty, accessDoors ReadableProperty, priorityForWriting ReadableProperty, musterPoint OptionalProperty, zoneTo OptionalProperty, zoneFrom OptionalProperty, notificationClass OptionalProperty, transactionNotificationClass OptionalProperty, accessAlarmEvents OptionalProperty, accessTransactionEvents OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_AccessPoint {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for AccessPoint must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for AccessPoint must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for AccessPoint must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for AccessPoint must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for AccessPoint must not be nil")
	}
	if eventState == nil {
		panic("eventState of type ReadableProperty for AccessPoint must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for AccessPoint must not be nil")
	}
	if outOfService == nil {
		panic("outOfService of type ReadableProperty for AccessPoint must not be nil")
	}
	if authenticationStatus == nil {
		panic("authenticationStatus of type ReadableProperty for AccessPoint must not be nil")
	}
	if activeAuthenticationPolicy == nil {
		panic("activeAuthenticationPolicy of type ReadableProperty for AccessPoint must not be nil")
	}
	if numberOfAuthenticationPolicies == nil {
		panic("numberOfAuthenticationPolicies of type ReadableProperty for AccessPoint must not be nil")
	}
	if authenticationPolicyList == nil {
		panic("authenticationPolicyList of type OptionalProperty for AccessPoint must not be nil")
	}
	if authenticationPolicyNames == nil {
		panic("authenticationPolicyNames of type OptionalProperty for AccessPoint must not be nil")
	}
	if authorizationMode == nil {
		panic("authorizationMode of type ReadableProperty for AccessPoint must not be nil")
	}
	if verificationTime == nil {
		panic("verificationTime of type OptionalProperty for AccessPoint must not be nil")
	}
	if lockout == nil {
		panic("lockout of type OptionalProperty for AccessPoint must not be nil")
	}
	if lockoutRelinquishTime == nil {
		panic("lockoutRelinquishTime of type OptionalProperty for AccessPoint must not be nil")
	}
	if failedAttempts == nil {
		panic("failedAttempts of type OptionalProperty for AccessPoint must not be nil")
	}
	if failedAttemptEvents == nil {
		panic("failedAttemptEvents of type OptionalProperty for AccessPoint must not be nil")
	}
	if maxFailedAttempts == nil {
		panic("maxFailedAttempts of type OptionalProperty for AccessPoint must not be nil")
	}
	if failedAttemptsTime == nil {
		panic("failedAttemptsTime of type OptionalProperty for AccessPoint must not be nil")
	}
	if threatLevel == nil {
		panic("threatLevel of type OptionalProperty for AccessPoint must not be nil")
	}
	if occupancyUpperLimitEnforced == nil {
		panic("occupancyUpperLimitEnforced of type OptionalProperty for AccessPoint must not be nil")
	}
	if occupancyLowerLimitEnforced == nil {
		panic("occupancyLowerLimitEnforced of type OptionalProperty for AccessPoint must not be nil")
	}
	if occupancyCountAdjust == nil {
		panic("occupancyCountAdjust of type OptionalProperty for AccessPoint must not be nil")
	}
	if accompanimentTime == nil {
		panic("accompanimentTime of type OptionalProperty for AccessPoint must not be nil")
	}
	if accessEvent == nil {
		panic("accessEvent of type ReadableProperty for AccessPoint must not be nil")
	}
	if accessEventTag == nil {
		panic("accessEventTag of type ReadableProperty for AccessPoint must not be nil")
	}
	if accessEventTime == nil {
		panic("accessEventTime of type ReadableProperty for AccessPoint must not be nil")
	}
	if accessEventCredential == nil {
		panic("accessEventCredential of type ReadableProperty for AccessPoint must not be nil")
	}
	if accessEventAuthenticationFactor == nil {
		panic("accessEventAuthenticationFactor of type OptionalProperty for AccessPoint must not be nil")
	}
	if accessDoors == nil {
		panic("accessDoors of type ReadableProperty for AccessPoint must not be nil")
	}
	if priorityForWriting == nil {
		panic("priorityForWriting of type ReadableProperty for AccessPoint must not be nil")
	}
	if musterPoint == nil {
		panic("musterPoint of type OptionalProperty for AccessPoint must not be nil")
	}
	if zoneTo == nil {
		panic("zoneTo of type OptionalProperty for AccessPoint must not be nil")
	}
	if zoneFrom == nil {
		panic("zoneFrom of type OptionalProperty for AccessPoint must not be nil")
	}
	if notificationClass == nil {
		panic("notificationClass of type OptionalProperty for AccessPoint must not be nil")
	}
	if transactionNotificationClass == nil {
		panic("transactionNotificationClass of type OptionalProperty for AccessPoint must not be nil")
	}
	if accessAlarmEvents == nil {
		panic("accessAlarmEvents of type OptionalProperty for AccessPoint must not be nil")
	}
	if accessTransactionEvents == nil {
		panic("accessTransactionEvents of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventEnable == nil {
		panic("eventEnable of type OptionalProperty for AccessPoint must not be nil")
	}
	if ackedTransitions == nil {
		panic("ackedTransitions of type OptionalProperty for AccessPoint must not be nil")
	}
	if notifyType == nil {
		panic("notifyType of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventTimeStamps == nil {
		panic("eventTimeStamps of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventMessageTexts == nil {
		panic("eventMessageTexts of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventMessageTextsConfig == nil {
		panic("eventMessageTextsConfig of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventDetectionEnable == nil {
		panic("eventDetectionEnable of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventAlgorithmInhibitRef == nil {
		panic("eventAlgorithmInhibitRef of type OptionalProperty for AccessPoint must not be nil")
	}
	if eventAlgorithmInhibit == nil {
		panic("eventAlgorithmInhibit of type OptionalProperty for AccessPoint must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for AccessPoint must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for AccessPoint must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for AccessPoint must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for AccessPoint must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for AccessPoint must not be nil")
	}
	return &_AccessPoint{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, StatusFlags: statusFlags, EventState: eventState, Reliability: reliability, OutOfService: outOfService, AuthenticationStatus: authenticationStatus, ActiveAuthenticationPolicy: activeAuthenticationPolicy, NumberOfAuthenticationPolicies: numberOfAuthenticationPolicies, AuthenticationPolicyList: authenticationPolicyList, AuthenticationPolicyNames: authenticationPolicyNames, AuthorizationMode: authorizationMode, VerificationTime: verificationTime, Lockout: lockout, LockoutRelinquishTime: lockoutRelinquishTime, FailedAttempts: failedAttempts, FailedAttemptEvents: failedAttemptEvents, MaxFailedAttempts: maxFailedAttempts, FailedAttemptsTime: failedAttemptsTime, ThreatLevel: threatLevel, OccupancyUpperLimitEnforced: occupancyUpperLimitEnforced, OccupancyLowerLimitEnforced: occupancyLowerLimitEnforced, OccupancyCountAdjust: occupancyCountAdjust, AccompanimentTime: accompanimentTime, AccessEvent: accessEvent, AccessEventTag: accessEventTag, AccessEventTime: accessEventTime, AccessEventCredential: accessEventCredential, AccessEventAuthenticationFactor: accessEventAuthenticationFactor, AccessDoors: accessDoors, PriorityForWriting: priorityForWriting, MusterPoint: musterPoint, ZoneTo: zoneTo, ZoneFrom: zoneFrom, NotificationClass: notificationClass, TransactionNotificationClass: transactionNotificationClass, AccessAlarmEvents: accessAlarmEvents, AccessTransactionEvents: accessTransactionEvents, EventEnable: eventEnable, AckedTransitions: ackedTransitions, NotifyType: notifyType, EventTimeStamps: eventTimeStamps, EventMessageTexts: eventMessageTexts, EventMessageTextsConfig: eventMessageTextsConfig, EventDetectionEnable: eventDetectionEnable, EventAlgorithmInhibitRef: eventAlgorithmInhibitRef, EventAlgorithmInhibit: eventAlgorithmInhibit, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AccessPointBuilder is a builder for AccessPoint
type AccessPointBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, authenticationStatus ReadableProperty, activeAuthenticationPolicy ReadableProperty, numberOfAuthenticationPolicies ReadableProperty, authenticationPolicyList OptionalProperty, authenticationPolicyNames OptionalProperty, authorizationMode ReadableProperty, verificationTime OptionalProperty, lockout OptionalProperty, lockoutRelinquishTime OptionalProperty, failedAttempts OptionalProperty, failedAttemptEvents OptionalProperty, maxFailedAttempts OptionalProperty, failedAttemptsTime OptionalProperty, threatLevel OptionalProperty, occupancyUpperLimitEnforced OptionalProperty, occupancyLowerLimitEnforced OptionalProperty, occupancyCountAdjust OptionalProperty, accompanimentTime OptionalProperty, accessEvent ReadableProperty, accessEventTag ReadableProperty, accessEventTime ReadableProperty, accessEventCredential ReadableProperty, accessEventAuthenticationFactor OptionalProperty, accessDoors ReadableProperty, priorityForWriting ReadableProperty, musterPoint OptionalProperty, zoneTo OptionalProperty, zoneFrom OptionalProperty, notificationClass OptionalProperty, transactionNotificationClass OptionalProperty, accessAlarmEvents OptionalProperty, accessTransactionEvents OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessPointBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AccessPointBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AccessPointBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AccessPointBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AccessPointBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) AccessPointBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithEventState adds EventState (property field)
	WithEventState(ReadableProperty) AccessPointBuilder
	// WithEventStateBuilder adds EventState (property field) which is build by the builder
	WithEventStateBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) AccessPointBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithOutOfService adds OutOfService (property field)
	WithOutOfService(ReadableProperty) AccessPointBuilder
	// WithOutOfServiceBuilder adds OutOfService (property field) which is build by the builder
	WithOutOfServiceBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithAuthenticationStatus adds AuthenticationStatus (property field)
	WithAuthenticationStatus(ReadableProperty) AccessPointBuilder
	// WithAuthenticationStatusBuilder adds AuthenticationStatus (property field) which is build by the builder
	WithAuthenticationStatusBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithActiveAuthenticationPolicy adds ActiveAuthenticationPolicy (property field)
	WithActiveAuthenticationPolicy(ReadableProperty) AccessPointBuilder
	// WithActiveAuthenticationPolicyBuilder adds ActiveAuthenticationPolicy (property field) which is build by the builder
	WithActiveAuthenticationPolicyBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithNumberOfAuthenticationPolicies adds NumberOfAuthenticationPolicies (property field)
	WithNumberOfAuthenticationPolicies(ReadableProperty) AccessPointBuilder
	// WithNumberOfAuthenticationPoliciesBuilder adds NumberOfAuthenticationPolicies (property field) which is build by the builder
	WithNumberOfAuthenticationPoliciesBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithAuthenticationPolicyList adds AuthenticationPolicyList (property field)
	WithAuthenticationPolicyList(OptionalProperty) AccessPointBuilder
	// WithAuthenticationPolicyListBuilder adds AuthenticationPolicyList (property field) which is build by the builder
	WithAuthenticationPolicyListBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAuthenticationPolicyNames adds AuthenticationPolicyNames (property field)
	WithAuthenticationPolicyNames(OptionalProperty) AccessPointBuilder
	// WithAuthenticationPolicyNamesBuilder adds AuthenticationPolicyNames (property field) which is build by the builder
	WithAuthenticationPolicyNamesBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAuthorizationMode adds AuthorizationMode (property field)
	WithAuthorizationMode(ReadableProperty) AccessPointBuilder
	// WithAuthorizationModeBuilder adds AuthorizationMode (property field) which is build by the builder
	WithAuthorizationModeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithVerificationTime adds VerificationTime (property field)
	WithVerificationTime(OptionalProperty) AccessPointBuilder
	// WithVerificationTimeBuilder adds VerificationTime (property field) which is build by the builder
	WithVerificationTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithLockout adds Lockout (property field)
	WithLockout(OptionalProperty) AccessPointBuilder
	// WithLockoutBuilder adds Lockout (property field) which is build by the builder
	WithLockoutBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithLockoutRelinquishTime adds LockoutRelinquishTime (property field)
	WithLockoutRelinquishTime(OptionalProperty) AccessPointBuilder
	// WithLockoutRelinquishTimeBuilder adds LockoutRelinquishTime (property field) which is build by the builder
	WithLockoutRelinquishTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithFailedAttempts adds FailedAttempts (property field)
	WithFailedAttempts(OptionalProperty) AccessPointBuilder
	// WithFailedAttemptsBuilder adds FailedAttempts (property field) which is build by the builder
	WithFailedAttemptsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithFailedAttemptEvents adds FailedAttemptEvents (property field)
	WithFailedAttemptEvents(OptionalProperty) AccessPointBuilder
	// WithFailedAttemptEventsBuilder adds FailedAttemptEvents (property field) which is build by the builder
	WithFailedAttemptEventsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithMaxFailedAttempts adds MaxFailedAttempts (property field)
	WithMaxFailedAttempts(OptionalProperty) AccessPointBuilder
	// WithMaxFailedAttemptsBuilder adds MaxFailedAttempts (property field) which is build by the builder
	WithMaxFailedAttemptsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithFailedAttemptsTime adds FailedAttemptsTime (property field)
	WithFailedAttemptsTime(OptionalProperty) AccessPointBuilder
	// WithFailedAttemptsTimeBuilder adds FailedAttemptsTime (property field) which is build by the builder
	WithFailedAttemptsTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithThreatLevel adds ThreatLevel (property field)
	WithThreatLevel(OptionalProperty) AccessPointBuilder
	// WithThreatLevelBuilder adds ThreatLevel (property field) which is build by the builder
	WithThreatLevelBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithOccupancyUpperLimitEnforced adds OccupancyUpperLimitEnforced (property field)
	WithOccupancyUpperLimitEnforced(OptionalProperty) AccessPointBuilder
	// WithOccupancyUpperLimitEnforcedBuilder adds OccupancyUpperLimitEnforced (property field) which is build by the builder
	WithOccupancyUpperLimitEnforcedBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithOccupancyLowerLimitEnforced adds OccupancyLowerLimitEnforced (property field)
	WithOccupancyLowerLimitEnforced(OptionalProperty) AccessPointBuilder
	// WithOccupancyLowerLimitEnforcedBuilder adds OccupancyLowerLimitEnforced (property field) which is build by the builder
	WithOccupancyLowerLimitEnforcedBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithOccupancyCountAdjust adds OccupancyCountAdjust (property field)
	WithOccupancyCountAdjust(OptionalProperty) AccessPointBuilder
	// WithOccupancyCountAdjustBuilder adds OccupancyCountAdjust (property field) which is build by the builder
	WithOccupancyCountAdjustBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAccompanimentTime adds AccompanimentTime (property field)
	WithAccompanimentTime(OptionalProperty) AccessPointBuilder
	// WithAccompanimentTimeBuilder adds AccompanimentTime (property field) which is build by the builder
	WithAccompanimentTimeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAccessEvent adds AccessEvent (property field)
	WithAccessEvent(ReadableProperty) AccessPointBuilder
	// WithAccessEventBuilder adds AccessEvent (property field) which is build by the builder
	WithAccessEventBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithAccessEventTag adds AccessEventTag (property field)
	WithAccessEventTag(ReadableProperty) AccessPointBuilder
	// WithAccessEventTagBuilder adds AccessEventTag (property field) which is build by the builder
	WithAccessEventTagBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithAccessEventTime adds AccessEventTime (property field)
	WithAccessEventTime(ReadableProperty) AccessPointBuilder
	// WithAccessEventTimeBuilder adds AccessEventTime (property field) which is build by the builder
	WithAccessEventTimeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithAccessEventCredential adds AccessEventCredential (property field)
	WithAccessEventCredential(ReadableProperty) AccessPointBuilder
	// WithAccessEventCredentialBuilder adds AccessEventCredential (property field) which is build by the builder
	WithAccessEventCredentialBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithAccessEventAuthenticationFactor adds AccessEventAuthenticationFactor (property field)
	WithAccessEventAuthenticationFactor(OptionalProperty) AccessPointBuilder
	// WithAccessEventAuthenticationFactorBuilder adds AccessEventAuthenticationFactor (property field) which is build by the builder
	WithAccessEventAuthenticationFactorBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAccessDoors adds AccessDoors (property field)
	WithAccessDoors(ReadableProperty) AccessPointBuilder
	// WithAccessDoorsBuilder adds AccessDoors (property field) which is build by the builder
	WithAccessDoorsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithPriorityForWriting adds PriorityForWriting (property field)
	WithPriorityForWriting(ReadableProperty) AccessPointBuilder
	// WithPriorityForWritingBuilder adds PriorityForWriting (property field) which is build by the builder
	WithPriorityForWritingBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithMusterPoint adds MusterPoint (property field)
	WithMusterPoint(OptionalProperty) AccessPointBuilder
	// WithMusterPointBuilder adds MusterPoint (property field) which is build by the builder
	WithMusterPointBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithZoneTo adds ZoneTo (property field)
	WithZoneTo(OptionalProperty) AccessPointBuilder
	// WithZoneToBuilder adds ZoneTo (property field) which is build by the builder
	WithZoneToBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithZoneFrom adds ZoneFrom (property field)
	WithZoneFrom(OptionalProperty) AccessPointBuilder
	// WithZoneFromBuilder adds ZoneFrom (property field) which is build by the builder
	WithZoneFromBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithNotificationClass adds NotificationClass (property field)
	WithNotificationClass(OptionalProperty) AccessPointBuilder
	// WithNotificationClassBuilder adds NotificationClass (property field) which is build by the builder
	WithNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithTransactionNotificationClass adds TransactionNotificationClass (property field)
	WithTransactionNotificationClass(OptionalProperty) AccessPointBuilder
	// WithTransactionNotificationClassBuilder adds TransactionNotificationClass (property field) which is build by the builder
	WithTransactionNotificationClassBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAccessAlarmEvents adds AccessAlarmEvents (property field)
	WithAccessAlarmEvents(OptionalProperty) AccessPointBuilder
	// WithAccessAlarmEventsBuilder adds AccessAlarmEvents (property field) which is build by the builder
	WithAccessAlarmEventsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAccessTransactionEvents adds AccessTransactionEvents (property field)
	WithAccessTransactionEvents(OptionalProperty) AccessPointBuilder
	// WithAccessTransactionEventsBuilder adds AccessTransactionEvents (property field) which is build by the builder
	WithAccessTransactionEventsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventEnable adds EventEnable (property field)
	WithEventEnable(OptionalProperty) AccessPointBuilder
	// WithEventEnableBuilder adds EventEnable (property field) which is build by the builder
	WithEventEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithAckedTransitions adds AckedTransitions (property field)
	WithAckedTransitions(OptionalProperty) AccessPointBuilder
	// WithAckedTransitionsBuilder adds AckedTransitions (property field) which is build by the builder
	WithAckedTransitionsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithNotifyType adds NotifyType (property field)
	WithNotifyType(OptionalProperty) AccessPointBuilder
	// WithNotifyTypeBuilder adds NotifyType (property field) which is build by the builder
	WithNotifyTypeBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventTimeStamps adds EventTimeStamps (property field)
	WithEventTimeStamps(OptionalProperty) AccessPointBuilder
	// WithEventTimeStampsBuilder adds EventTimeStamps (property field) which is build by the builder
	WithEventTimeStampsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventMessageTexts adds EventMessageTexts (property field)
	WithEventMessageTexts(OptionalProperty) AccessPointBuilder
	// WithEventMessageTextsBuilder adds EventMessageTexts (property field) which is build by the builder
	WithEventMessageTextsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventMessageTextsConfig adds EventMessageTextsConfig (property field)
	WithEventMessageTextsConfig(OptionalProperty) AccessPointBuilder
	// WithEventMessageTextsConfigBuilder adds EventMessageTextsConfig (property field) which is build by the builder
	WithEventMessageTextsConfigBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventDetectionEnable adds EventDetectionEnable (property field)
	WithEventDetectionEnable(OptionalProperty) AccessPointBuilder
	// WithEventDetectionEnableBuilder adds EventDetectionEnable (property field) which is build by the builder
	WithEventDetectionEnableBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventAlgorithmInhibitRef adds EventAlgorithmInhibitRef (property field)
	WithEventAlgorithmInhibitRef(OptionalProperty) AccessPointBuilder
	// WithEventAlgorithmInhibitRefBuilder adds EventAlgorithmInhibitRef (property field) which is build by the builder
	WithEventAlgorithmInhibitRefBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithEventAlgorithmInhibit adds EventAlgorithmInhibit (property field)
	WithEventAlgorithmInhibit(OptionalProperty) AccessPointBuilder
	// WithEventAlgorithmInhibitBuilder adds EventAlgorithmInhibit (property field) which is build by the builder
	WithEventAlgorithmInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) AccessPointBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AccessPointBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AccessPointBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AccessPointBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AccessPointBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder
	// Build builds the AccessPoint or returns an error if something is wrong
	Build() (AccessPoint, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() AccessPoint
}

// NewAccessPointBuilder() creates a AccessPointBuilder
func NewAccessPointBuilder() AccessPointBuilder {
	return &_AccessPointBuilder{_AccessPoint: new(_AccessPoint)}
}

type _AccessPointBuilder struct {
	*_AccessPoint

	err *utils.MultiError
}

var _ (AccessPointBuilder) = (*_AccessPointBuilder)(nil)

func (b *_AccessPointBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, statusFlags ReadableProperty, eventState ReadableProperty, reliability ReadableProperty, outOfService ReadableProperty, authenticationStatus ReadableProperty, activeAuthenticationPolicy ReadableProperty, numberOfAuthenticationPolicies ReadableProperty, authenticationPolicyList OptionalProperty, authenticationPolicyNames OptionalProperty, authorizationMode ReadableProperty, verificationTime OptionalProperty, lockout OptionalProperty, lockoutRelinquishTime OptionalProperty, failedAttempts OptionalProperty, failedAttemptEvents OptionalProperty, maxFailedAttempts OptionalProperty, failedAttemptsTime OptionalProperty, threatLevel OptionalProperty, occupancyUpperLimitEnforced OptionalProperty, occupancyLowerLimitEnforced OptionalProperty, occupancyCountAdjust OptionalProperty, accompanimentTime OptionalProperty, accessEvent ReadableProperty, accessEventTag ReadableProperty, accessEventTime ReadableProperty, accessEventCredential ReadableProperty, accessEventAuthenticationFactor OptionalProperty, accessDoors ReadableProperty, priorityForWriting ReadableProperty, musterPoint OptionalProperty, zoneTo OptionalProperty, zoneFrom OptionalProperty, notificationClass OptionalProperty, transactionNotificationClass OptionalProperty, accessAlarmEvents OptionalProperty, accessTransactionEvents OptionalProperty, eventEnable OptionalProperty, ackedTransitions OptionalProperty, notifyType OptionalProperty, eventTimeStamps OptionalProperty, eventMessageTexts OptionalProperty, eventMessageTextsConfig OptionalProperty, eventDetectionEnable OptionalProperty, eventAlgorithmInhibitRef OptionalProperty, eventAlgorithmInhibit OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessPointBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithStatusFlags(statusFlags).WithEventState(eventState).WithReliability(reliability).WithOutOfService(outOfService).WithAuthenticationStatus(authenticationStatus).WithActiveAuthenticationPolicy(activeAuthenticationPolicy).WithNumberOfAuthenticationPolicies(numberOfAuthenticationPolicies).WithAuthenticationPolicyList(authenticationPolicyList).WithAuthenticationPolicyNames(authenticationPolicyNames).WithAuthorizationMode(authorizationMode).WithVerificationTime(verificationTime).WithLockout(lockout).WithLockoutRelinquishTime(lockoutRelinquishTime).WithFailedAttempts(failedAttempts).WithFailedAttemptEvents(failedAttemptEvents).WithMaxFailedAttempts(maxFailedAttempts).WithFailedAttemptsTime(failedAttemptsTime).WithThreatLevel(threatLevel).WithOccupancyUpperLimitEnforced(occupancyUpperLimitEnforced).WithOccupancyLowerLimitEnforced(occupancyLowerLimitEnforced).WithOccupancyCountAdjust(occupancyCountAdjust).WithAccompanimentTime(accompanimentTime).WithAccessEvent(accessEvent).WithAccessEventTag(accessEventTag).WithAccessEventTime(accessEventTime).WithAccessEventCredential(accessEventCredential).WithAccessEventAuthenticationFactor(accessEventAuthenticationFactor).WithAccessDoors(accessDoors).WithPriorityForWriting(priorityForWriting).WithMusterPoint(musterPoint).WithZoneTo(zoneTo).WithZoneFrom(zoneFrom).WithNotificationClass(notificationClass).WithTransactionNotificationClass(transactionNotificationClass).WithAccessAlarmEvents(accessAlarmEvents).WithAccessTransactionEvents(accessTransactionEvents).WithEventEnable(eventEnable).WithAckedTransitions(ackedTransitions).WithNotifyType(notifyType).WithEventTimeStamps(eventTimeStamps).WithEventMessageTexts(eventMessageTexts).WithEventMessageTextsConfig(eventMessageTextsConfig).WithEventDetectionEnable(eventDetectionEnable).WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef).WithEventAlgorithmInhibit(eventAlgorithmInhibit).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AccessPointBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AccessPointBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AccessPointBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithObjectName(objectName ReadableProperty) AccessPointBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AccessPointBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithObjectType(objectType ReadableProperty) AccessPointBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AccessPointBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithDescription(description OptionalProperty) AccessPointBuilder {
	b.Description = description
	return b
}

func (b *_AccessPointBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithStatusFlags(statusFlags ReadableProperty) AccessPointBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_AccessPointBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventState(eventState ReadableProperty) AccessPointBuilder {
	b.EventState = eventState
	return b
}

func (b *_AccessPointBuilder) WithEventStateBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventState.CreateReadablePropertyBuilder())
	var err error
	b.EventState, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithReliability(reliability ReadableProperty) AccessPointBuilder {
	b.Reliability = reliability
	return b
}

func (b *_AccessPointBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithOutOfService(outOfService ReadableProperty) AccessPointBuilder {
	b.OutOfService = outOfService
	return b
}

func (b *_AccessPointBuilder) WithOutOfServiceBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.OutOfService.CreateReadablePropertyBuilder())
	var err error
	b.OutOfService, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAuthenticationStatus(authenticationStatus ReadableProperty) AccessPointBuilder {
	b.AuthenticationStatus = authenticationStatus
	return b
}

func (b *_AccessPointBuilder) WithAuthenticationStatusBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AuthenticationStatus.CreateReadablePropertyBuilder())
	var err error
	b.AuthenticationStatus, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithActiveAuthenticationPolicy(activeAuthenticationPolicy ReadableProperty) AccessPointBuilder {
	b.ActiveAuthenticationPolicy = activeAuthenticationPolicy
	return b
}

func (b *_AccessPointBuilder) WithActiveAuthenticationPolicyBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ActiveAuthenticationPolicy.CreateReadablePropertyBuilder())
	var err error
	b.ActiveAuthenticationPolicy, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithNumberOfAuthenticationPolicies(numberOfAuthenticationPolicies ReadableProperty) AccessPointBuilder {
	b.NumberOfAuthenticationPolicies = numberOfAuthenticationPolicies
	return b
}

func (b *_AccessPointBuilder) WithNumberOfAuthenticationPoliciesBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.NumberOfAuthenticationPolicies.CreateReadablePropertyBuilder())
	var err error
	b.NumberOfAuthenticationPolicies, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAuthenticationPolicyList(authenticationPolicyList OptionalProperty) AccessPointBuilder {
	b.AuthenticationPolicyList = authenticationPolicyList
	return b
}

func (b *_AccessPointBuilder) WithAuthenticationPolicyListBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AuthenticationPolicyList.CreateOptionalPropertyBuilder())
	var err error
	b.AuthenticationPolicyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAuthenticationPolicyNames(authenticationPolicyNames OptionalProperty) AccessPointBuilder {
	b.AuthenticationPolicyNames = authenticationPolicyNames
	return b
}

func (b *_AccessPointBuilder) WithAuthenticationPolicyNamesBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AuthenticationPolicyNames.CreateOptionalPropertyBuilder())
	var err error
	b.AuthenticationPolicyNames, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAuthorizationMode(authorizationMode ReadableProperty) AccessPointBuilder {
	b.AuthorizationMode = authorizationMode
	return b
}

func (b *_AccessPointBuilder) WithAuthorizationModeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AuthorizationMode.CreateReadablePropertyBuilder())
	var err error
	b.AuthorizationMode, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithVerificationTime(verificationTime OptionalProperty) AccessPointBuilder {
	b.VerificationTime = verificationTime
	return b
}

func (b *_AccessPointBuilder) WithVerificationTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.VerificationTime.CreateOptionalPropertyBuilder())
	var err error
	b.VerificationTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithLockout(lockout OptionalProperty) AccessPointBuilder {
	b.Lockout = lockout
	return b
}

func (b *_AccessPointBuilder) WithLockoutBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.Lockout.CreateOptionalPropertyBuilder())
	var err error
	b.Lockout, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithLockoutRelinquishTime(lockoutRelinquishTime OptionalProperty) AccessPointBuilder {
	b.LockoutRelinquishTime = lockoutRelinquishTime
	return b
}

func (b *_AccessPointBuilder) WithLockoutRelinquishTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.LockoutRelinquishTime.CreateOptionalPropertyBuilder())
	var err error
	b.LockoutRelinquishTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithFailedAttempts(failedAttempts OptionalProperty) AccessPointBuilder {
	b.FailedAttempts = failedAttempts
	return b
}

func (b *_AccessPointBuilder) WithFailedAttemptsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.FailedAttempts.CreateOptionalPropertyBuilder())
	var err error
	b.FailedAttempts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithFailedAttemptEvents(failedAttemptEvents OptionalProperty) AccessPointBuilder {
	b.FailedAttemptEvents = failedAttemptEvents
	return b
}

func (b *_AccessPointBuilder) WithFailedAttemptEventsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.FailedAttemptEvents.CreateOptionalPropertyBuilder())
	var err error
	b.FailedAttemptEvents, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithMaxFailedAttempts(maxFailedAttempts OptionalProperty) AccessPointBuilder {
	b.MaxFailedAttempts = maxFailedAttempts
	return b
}

func (b *_AccessPointBuilder) WithMaxFailedAttemptsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.MaxFailedAttempts.CreateOptionalPropertyBuilder())
	var err error
	b.MaxFailedAttempts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithFailedAttemptsTime(failedAttemptsTime OptionalProperty) AccessPointBuilder {
	b.FailedAttemptsTime = failedAttemptsTime
	return b
}

func (b *_AccessPointBuilder) WithFailedAttemptsTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.FailedAttemptsTime.CreateOptionalPropertyBuilder())
	var err error
	b.FailedAttemptsTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithThreatLevel(threatLevel OptionalProperty) AccessPointBuilder {
	b.ThreatLevel = threatLevel
	return b
}

func (b *_AccessPointBuilder) WithThreatLevelBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ThreatLevel.CreateOptionalPropertyBuilder())
	var err error
	b.ThreatLevel, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithOccupancyUpperLimitEnforced(occupancyUpperLimitEnforced OptionalProperty) AccessPointBuilder {
	b.OccupancyUpperLimitEnforced = occupancyUpperLimitEnforced
	return b
}

func (b *_AccessPointBuilder) WithOccupancyUpperLimitEnforcedBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.OccupancyUpperLimitEnforced.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyUpperLimitEnforced, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithOccupancyLowerLimitEnforced(occupancyLowerLimitEnforced OptionalProperty) AccessPointBuilder {
	b.OccupancyLowerLimitEnforced = occupancyLowerLimitEnforced
	return b
}

func (b *_AccessPointBuilder) WithOccupancyLowerLimitEnforcedBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.OccupancyLowerLimitEnforced.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyLowerLimitEnforced, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithOccupancyCountAdjust(occupancyCountAdjust OptionalProperty) AccessPointBuilder {
	b.OccupancyCountAdjust = occupancyCountAdjust
	return b
}

func (b *_AccessPointBuilder) WithOccupancyCountAdjustBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.OccupancyCountAdjust.CreateOptionalPropertyBuilder())
	var err error
	b.OccupancyCountAdjust, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccompanimentTime(accompanimentTime OptionalProperty) AccessPointBuilder {
	b.AccompanimentTime = accompanimentTime
	return b
}

func (b *_AccessPointBuilder) WithAccompanimentTimeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccompanimentTime.CreateOptionalPropertyBuilder())
	var err error
	b.AccompanimentTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessEvent(accessEvent ReadableProperty) AccessPointBuilder {
	b.AccessEvent = accessEvent
	return b
}

func (b *_AccessPointBuilder) WithAccessEventBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessEvent.CreateReadablePropertyBuilder())
	var err error
	b.AccessEvent, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessEventTag(accessEventTag ReadableProperty) AccessPointBuilder {
	b.AccessEventTag = accessEventTag
	return b
}

func (b *_AccessPointBuilder) WithAccessEventTagBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessEventTag.CreateReadablePropertyBuilder())
	var err error
	b.AccessEventTag, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessEventTime(accessEventTime ReadableProperty) AccessPointBuilder {
	b.AccessEventTime = accessEventTime
	return b
}

func (b *_AccessPointBuilder) WithAccessEventTimeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessEventTime.CreateReadablePropertyBuilder())
	var err error
	b.AccessEventTime, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessEventCredential(accessEventCredential ReadableProperty) AccessPointBuilder {
	b.AccessEventCredential = accessEventCredential
	return b
}

func (b *_AccessPointBuilder) WithAccessEventCredentialBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessEventCredential.CreateReadablePropertyBuilder())
	var err error
	b.AccessEventCredential, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessEventAuthenticationFactor(accessEventAuthenticationFactor OptionalProperty) AccessPointBuilder {
	b.AccessEventAuthenticationFactor = accessEventAuthenticationFactor
	return b
}

func (b *_AccessPointBuilder) WithAccessEventAuthenticationFactorBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessEventAuthenticationFactor.CreateOptionalPropertyBuilder())
	var err error
	b.AccessEventAuthenticationFactor, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessDoors(accessDoors ReadableProperty) AccessPointBuilder {
	b.AccessDoors = accessDoors
	return b
}

func (b *_AccessPointBuilder) WithAccessDoorsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessDoors.CreateReadablePropertyBuilder())
	var err error
	b.AccessDoors, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithPriorityForWriting(priorityForWriting ReadableProperty) AccessPointBuilder {
	b.PriorityForWriting = priorityForWriting
	return b
}

func (b *_AccessPointBuilder) WithPriorityForWritingBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.PriorityForWriting.CreateReadablePropertyBuilder())
	var err error
	b.PriorityForWriting, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithMusterPoint(musterPoint OptionalProperty) AccessPointBuilder {
	b.MusterPoint = musterPoint
	return b
}

func (b *_AccessPointBuilder) WithMusterPointBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.MusterPoint.CreateOptionalPropertyBuilder())
	var err error
	b.MusterPoint, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithZoneTo(zoneTo OptionalProperty) AccessPointBuilder {
	b.ZoneTo = zoneTo
	return b
}

func (b *_AccessPointBuilder) WithZoneToBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ZoneTo.CreateOptionalPropertyBuilder())
	var err error
	b.ZoneTo, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithZoneFrom(zoneFrom OptionalProperty) AccessPointBuilder {
	b.ZoneFrom = zoneFrom
	return b
}

func (b *_AccessPointBuilder) WithZoneFromBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ZoneFrom.CreateOptionalPropertyBuilder())
	var err error
	b.ZoneFrom, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithNotificationClass(notificationClass OptionalProperty) AccessPointBuilder {
	b.NotificationClass = notificationClass
	return b
}

func (b *_AccessPointBuilder) WithNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.NotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.NotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithTransactionNotificationClass(transactionNotificationClass OptionalProperty) AccessPointBuilder {
	b.TransactionNotificationClass = transactionNotificationClass
	return b
}

func (b *_AccessPointBuilder) WithTransactionNotificationClassBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.TransactionNotificationClass.CreateOptionalPropertyBuilder())
	var err error
	b.TransactionNotificationClass, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessAlarmEvents(accessAlarmEvents OptionalProperty) AccessPointBuilder {
	b.AccessAlarmEvents = accessAlarmEvents
	return b
}

func (b *_AccessPointBuilder) WithAccessAlarmEventsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessAlarmEvents.CreateOptionalPropertyBuilder())
	var err error
	b.AccessAlarmEvents, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAccessTransactionEvents(accessTransactionEvents OptionalProperty) AccessPointBuilder {
	b.AccessTransactionEvents = accessTransactionEvents
	return b
}

func (b *_AccessPointBuilder) WithAccessTransactionEventsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AccessTransactionEvents.CreateOptionalPropertyBuilder())
	var err error
	b.AccessTransactionEvents, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventEnable(eventEnable OptionalProperty) AccessPointBuilder {
	b.EventEnable = eventEnable
	return b
}

func (b *_AccessPointBuilder) WithEventEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithAckedTransitions(ackedTransitions OptionalProperty) AccessPointBuilder {
	b.AckedTransitions = ackedTransitions
	return b
}

func (b *_AccessPointBuilder) WithAckedTransitionsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.AckedTransitions.CreateOptionalPropertyBuilder())
	var err error
	b.AckedTransitions, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithNotifyType(notifyType OptionalProperty) AccessPointBuilder {
	b.NotifyType = notifyType
	return b
}

func (b *_AccessPointBuilder) WithNotifyTypeBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.NotifyType.CreateOptionalPropertyBuilder())
	var err error
	b.NotifyType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventTimeStamps(eventTimeStamps OptionalProperty) AccessPointBuilder {
	b.EventTimeStamps = eventTimeStamps
	return b
}

func (b *_AccessPointBuilder) WithEventTimeStampsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventTimeStamps.CreateOptionalPropertyBuilder())
	var err error
	b.EventTimeStamps, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventMessageTexts(eventMessageTexts OptionalProperty) AccessPointBuilder {
	b.EventMessageTexts = eventMessageTexts
	return b
}

func (b *_AccessPointBuilder) WithEventMessageTextsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventMessageTexts.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTexts, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventMessageTextsConfig(eventMessageTextsConfig OptionalProperty) AccessPointBuilder {
	b.EventMessageTextsConfig = eventMessageTextsConfig
	return b
}

func (b *_AccessPointBuilder) WithEventMessageTextsConfigBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventMessageTextsConfig.CreateOptionalPropertyBuilder())
	var err error
	b.EventMessageTextsConfig, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventDetectionEnable(eventDetectionEnable OptionalProperty) AccessPointBuilder {
	b.EventDetectionEnable = eventDetectionEnable
	return b
}

func (b *_AccessPointBuilder) WithEventDetectionEnableBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventDetectionEnable.CreateOptionalPropertyBuilder())
	var err error
	b.EventDetectionEnable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventAlgorithmInhibitRef(eventAlgorithmInhibitRef OptionalProperty) AccessPointBuilder {
	b.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef
	return b
}

func (b *_AccessPointBuilder) WithEventAlgorithmInhibitRefBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibitRef.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibitRef, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithEventAlgorithmInhibit(eventAlgorithmInhibit OptionalProperty) AccessPointBuilder {
	b.EventAlgorithmInhibit = eventAlgorithmInhibit
	return b
}

func (b *_AccessPointBuilder) WithEventAlgorithmInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.EventAlgorithmInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.EventAlgorithmInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) AccessPointBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_AccessPointBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithPropertyList(propertyList ReadableProperty) AccessPointBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AccessPointBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithTags(tags OptionalProperty) AccessPointBuilder {
	b.Tags = tags
	return b
}

func (b *_AccessPointBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithProfileLocation(profileLocation OptionalProperty) AccessPointBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AccessPointBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) WithProfileName(profileName OptionalProperty) AccessPointBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AccessPointBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessPointBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessPointBuilder) Build() (AccessPoint, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.EventState == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventState' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.OutOfService == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'outOfService' not set"))
	}
	if b.AuthenticationStatus == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'authenticationStatus' not set"))
	}
	if b.ActiveAuthenticationPolicy == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'activeAuthenticationPolicy' not set"))
	}
	if b.NumberOfAuthenticationPolicies == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'numberOfAuthenticationPolicies' not set"))
	}
	if b.AuthenticationPolicyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'authenticationPolicyList' not set"))
	}
	if b.AuthenticationPolicyNames == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'authenticationPolicyNames' not set"))
	}
	if b.AuthorizationMode == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'authorizationMode' not set"))
	}
	if b.VerificationTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'verificationTime' not set"))
	}
	if b.Lockout == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lockout' not set"))
	}
	if b.LockoutRelinquishTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'lockoutRelinquishTime' not set"))
	}
	if b.FailedAttempts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'failedAttempts' not set"))
	}
	if b.FailedAttemptEvents == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'failedAttemptEvents' not set"))
	}
	if b.MaxFailedAttempts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'maxFailedAttempts' not set"))
	}
	if b.FailedAttemptsTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'failedAttemptsTime' not set"))
	}
	if b.ThreatLevel == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'threatLevel' not set"))
	}
	if b.OccupancyUpperLimitEnforced == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyUpperLimitEnforced' not set"))
	}
	if b.OccupancyLowerLimitEnforced == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyLowerLimitEnforced' not set"))
	}
	if b.OccupancyCountAdjust == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'occupancyCountAdjust' not set"))
	}
	if b.AccompanimentTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accompanimentTime' not set"))
	}
	if b.AccessEvent == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessEvent' not set"))
	}
	if b.AccessEventTag == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessEventTag' not set"))
	}
	if b.AccessEventTime == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessEventTime' not set"))
	}
	if b.AccessEventCredential == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessEventCredential' not set"))
	}
	if b.AccessEventAuthenticationFactor == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessEventAuthenticationFactor' not set"))
	}
	if b.AccessDoors == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessDoors' not set"))
	}
	if b.PriorityForWriting == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'priorityForWriting' not set"))
	}
	if b.MusterPoint == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'musterPoint' not set"))
	}
	if b.ZoneTo == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'zoneTo' not set"))
	}
	if b.ZoneFrom == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'zoneFrom' not set"))
	}
	if b.NotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notificationClass' not set"))
	}
	if b.TransactionNotificationClass == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'transactionNotificationClass' not set"))
	}
	if b.AccessAlarmEvents == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessAlarmEvents' not set"))
	}
	if b.AccessTransactionEvents == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accessTransactionEvents' not set"))
	}
	if b.EventEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventEnable' not set"))
	}
	if b.AckedTransitions == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'ackedTransitions' not set"))
	}
	if b.NotifyType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'notifyType' not set"))
	}
	if b.EventTimeStamps == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventTimeStamps' not set"))
	}
	if b.EventMessageTexts == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTexts' not set"))
	}
	if b.EventMessageTextsConfig == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventMessageTextsConfig' not set"))
	}
	if b.EventDetectionEnable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventDetectionEnable' not set"))
	}
	if b.EventAlgorithmInhibitRef == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibitRef' not set"))
	}
	if b.EventAlgorithmInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'eventAlgorithmInhibit' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._AccessPoint.deepCopy(), nil
}

func (b *_AccessPointBuilder) MustBuild() AccessPoint {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AccessPointBuilder) DeepCopy() any {
	_copy := b.CreateAccessPointBuilder().(*_AccessPointBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAccessPointBuilder creates a AccessPointBuilder
func (b *_AccessPoint) CreateAccessPointBuilder() AccessPointBuilder {
	if b == nil {
		return NewAccessPointBuilder()
	}
	return &_AccessPointBuilder{_AccessPoint: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AccessPoint) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_AccessPoint) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_AccessPoint) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_AccessPoint) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_AccessPoint) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_AccessPoint) GetEventState() ReadableProperty {
	return m.EventState
}

func (m *_AccessPoint) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_AccessPoint) GetOutOfService() ReadableProperty {
	return m.OutOfService
}

func (m *_AccessPoint) GetAuthenticationStatus() ReadableProperty {
	return m.AuthenticationStatus
}

func (m *_AccessPoint) GetActiveAuthenticationPolicy() ReadableProperty {
	return m.ActiveAuthenticationPolicy
}

func (m *_AccessPoint) GetNumberOfAuthenticationPolicies() ReadableProperty {
	return m.NumberOfAuthenticationPolicies
}

func (m *_AccessPoint) GetAuthenticationPolicyList() OptionalProperty {
	return m.AuthenticationPolicyList
}

func (m *_AccessPoint) GetAuthenticationPolicyNames() OptionalProperty {
	return m.AuthenticationPolicyNames
}

func (m *_AccessPoint) GetAuthorizationMode() ReadableProperty {
	return m.AuthorizationMode
}

func (m *_AccessPoint) GetVerificationTime() OptionalProperty {
	return m.VerificationTime
}

func (m *_AccessPoint) GetLockout() OptionalProperty {
	return m.Lockout
}

func (m *_AccessPoint) GetLockoutRelinquishTime() OptionalProperty {
	return m.LockoutRelinquishTime
}

func (m *_AccessPoint) GetFailedAttempts() OptionalProperty {
	return m.FailedAttempts
}

func (m *_AccessPoint) GetFailedAttemptEvents() OptionalProperty {
	return m.FailedAttemptEvents
}

func (m *_AccessPoint) GetMaxFailedAttempts() OptionalProperty {
	return m.MaxFailedAttempts
}

func (m *_AccessPoint) GetFailedAttemptsTime() OptionalProperty {
	return m.FailedAttemptsTime
}

func (m *_AccessPoint) GetThreatLevel() OptionalProperty {
	return m.ThreatLevel
}

func (m *_AccessPoint) GetOccupancyUpperLimitEnforced() OptionalProperty {
	return m.OccupancyUpperLimitEnforced
}

func (m *_AccessPoint) GetOccupancyLowerLimitEnforced() OptionalProperty {
	return m.OccupancyLowerLimitEnforced
}

func (m *_AccessPoint) GetOccupancyCountAdjust() OptionalProperty {
	return m.OccupancyCountAdjust
}

func (m *_AccessPoint) GetAccompanimentTime() OptionalProperty {
	return m.AccompanimentTime
}

func (m *_AccessPoint) GetAccessEvent() ReadableProperty {
	return m.AccessEvent
}

func (m *_AccessPoint) GetAccessEventTag() ReadableProperty {
	return m.AccessEventTag
}

func (m *_AccessPoint) GetAccessEventTime() ReadableProperty {
	return m.AccessEventTime
}

func (m *_AccessPoint) GetAccessEventCredential() ReadableProperty {
	return m.AccessEventCredential
}

func (m *_AccessPoint) GetAccessEventAuthenticationFactor() OptionalProperty {
	return m.AccessEventAuthenticationFactor
}

func (m *_AccessPoint) GetAccessDoors() ReadableProperty {
	return m.AccessDoors
}

func (m *_AccessPoint) GetPriorityForWriting() ReadableProperty {
	return m.PriorityForWriting
}

func (m *_AccessPoint) GetMusterPoint() OptionalProperty {
	return m.MusterPoint
}

func (m *_AccessPoint) GetZoneTo() OptionalProperty {
	return m.ZoneTo
}

func (m *_AccessPoint) GetZoneFrom() OptionalProperty {
	return m.ZoneFrom
}

func (m *_AccessPoint) GetNotificationClass() OptionalProperty {
	return m.NotificationClass
}

func (m *_AccessPoint) GetTransactionNotificationClass() OptionalProperty {
	return m.TransactionNotificationClass
}

func (m *_AccessPoint) GetAccessAlarmEvents() OptionalProperty {
	return m.AccessAlarmEvents
}

func (m *_AccessPoint) GetAccessTransactionEvents() OptionalProperty {
	return m.AccessTransactionEvents
}

func (m *_AccessPoint) GetEventEnable() OptionalProperty {
	return m.EventEnable
}

func (m *_AccessPoint) GetAckedTransitions() OptionalProperty {
	return m.AckedTransitions
}

func (m *_AccessPoint) GetNotifyType() OptionalProperty {
	return m.NotifyType
}

func (m *_AccessPoint) GetEventTimeStamps() OptionalProperty {
	return m.EventTimeStamps
}

func (m *_AccessPoint) GetEventMessageTexts() OptionalProperty {
	return m.EventMessageTexts
}

func (m *_AccessPoint) GetEventMessageTextsConfig() OptionalProperty {
	return m.EventMessageTextsConfig
}

func (m *_AccessPoint) GetEventDetectionEnable() OptionalProperty {
	return m.EventDetectionEnable
}

func (m *_AccessPoint) GetEventAlgorithmInhibitRef() OptionalProperty {
	return m.EventAlgorithmInhibitRef
}

func (m *_AccessPoint) GetEventAlgorithmInhibit() OptionalProperty {
	return m.EventAlgorithmInhibit
}

func (m *_AccessPoint) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_AccessPoint) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_AccessPoint) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_AccessPoint) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_AccessPoint) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAccessPoint(structType any) AccessPoint {
	if casted, ok := structType.(AccessPoint); ok {
		return casted
	}
	if casted, ok := structType.(*AccessPoint); ok {
		return *casted
	}
	return nil
}

func (m *_AccessPoint) GetTypeName() string {
	return "AccessPoint"
}

func (m *_AccessPoint) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (eventState)
	lengthInBits += m.EventState.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (outOfService)
	lengthInBits += m.OutOfService.GetLengthInBits(ctx)

	// Simple field (authenticationStatus)
	lengthInBits += m.AuthenticationStatus.GetLengthInBits(ctx)

	// Simple field (activeAuthenticationPolicy)
	lengthInBits += m.ActiveAuthenticationPolicy.GetLengthInBits(ctx)

	// Simple field (numberOfAuthenticationPolicies)
	lengthInBits += m.NumberOfAuthenticationPolicies.GetLengthInBits(ctx)

	// Simple field (authenticationPolicyList)
	lengthInBits += m.AuthenticationPolicyList.GetLengthInBits(ctx)

	// Simple field (authenticationPolicyNames)
	lengthInBits += m.AuthenticationPolicyNames.GetLengthInBits(ctx)

	// Simple field (authorizationMode)
	lengthInBits += m.AuthorizationMode.GetLengthInBits(ctx)

	// Simple field (verificationTime)
	lengthInBits += m.VerificationTime.GetLengthInBits(ctx)

	// Simple field (lockout)
	lengthInBits += m.Lockout.GetLengthInBits(ctx)

	// Simple field (lockoutRelinquishTime)
	lengthInBits += m.LockoutRelinquishTime.GetLengthInBits(ctx)

	// Simple field (failedAttempts)
	lengthInBits += m.FailedAttempts.GetLengthInBits(ctx)

	// Simple field (failedAttemptEvents)
	lengthInBits += m.FailedAttemptEvents.GetLengthInBits(ctx)

	// Simple field (maxFailedAttempts)
	lengthInBits += m.MaxFailedAttempts.GetLengthInBits(ctx)

	// Simple field (failedAttemptsTime)
	lengthInBits += m.FailedAttemptsTime.GetLengthInBits(ctx)

	// Simple field (threatLevel)
	lengthInBits += m.ThreatLevel.GetLengthInBits(ctx)

	// Simple field (occupancyUpperLimitEnforced)
	lengthInBits += m.OccupancyUpperLimitEnforced.GetLengthInBits(ctx)

	// Simple field (occupancyLowerLimitEnforced)
	lengthInBits += m.OccupancyLowerLimitEnforced.GetLengthInBits(ctx)

	// Simple field (occupancyCountAdjust)
	lengthInBits += m.OccupancyCountAdjust.GetLengthInBits(ctx)

	// Simple field (accompanimentTime)
	lengthInBits += m.AccompanimentTime.GetLengthInBits(ctx)

	// Simple field (accessEvent)
	lengthInBits += m.AccessEvent.GetLengthInBits(ctx)

	// Simple field (accessEventTag)
	lengthInBits += m.AccessEventTag.GetLengthInBits(ctx)

	// Simple field (accessEventTime)
	lengthInBits += m.AccessEventTime.GetLengthInBits(ctx)

	// Simple field (accessEventCredential)
	lengthInBits += m.AccessEventCredential.GetLengthInBits(ctx)

	// Simple field (accessEventAuthenticationFactor)
	lengthInBits += m.AccessEventAuthenticationFactor.GetLengthInBits(ctx)

	// Simple field (accessDoors)
	lengthInBits += m.AccessDoors.GetLengthInBits(ctx)

	// Simple field (priorityForWriting)
	lengthInBits += m.PriorityForWriting.GetLengthInBits(ctx)

	// Simple field (musterPoint)
	lengthInBits += m.MusterPoint.GetLengthInBits(ctx)

	// Simple field (zoneTo)
	lengthInBits += m.ZoneTo.GetLengthInBits(ctx)

	// Simple field (zoneFrom)
	lengthInBits += m.ZoneFrom.GetLengthInBits(ctx)

	// Simple field (notificationClass)
	lengthInBits += m.NotificationClass.GetLengthInBits(ctx)

	// Simple field (transactionNotificationClass)
	lengthInBits += m.TransactionNotificationClass.GetLengthInBits(ctx)

	// Simple field (accessAlarmEvents)
	lengthInBits += m.AccessAlarmEvents.GetLengthInBits(ctx)

	// Simple field (accessTransactionEvents)
	lengthInBits += m.AccessTransactionEvents.GetLengthInBits(ctx)

	// Simple field (eventEnable)
	lengthInBits += m.EventEnable.GetLengthInBits(ctx)

	// Simple field (ackedTransitions)
	lengthInBits += m.AckedTransitions.GetLengthInBits(ctx)

	// Simple field (notifyType)
	lengthInBits += m.NotifyType.GetLengthInBits(ctx)

	// Simple field (eventTimeStamps)
	lengthInBits += m.EventTimeStamps.GetLengthInBits(ctx)

	// Simple field (eventMessageTexts)
	lengthInBits += m.EventMessageTexts.GetLengthInBits(ctx)

	// Simple field (eventMessageTextsConfig)
	lengthInBits += m.EventMessageTextsConfig.GetLengthInBits(ctx)

	// Simple field (eventDetectionEnable)
	lengthInBits += m.EventDetectionEnable.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibitRef)
	lengthInBits += m.EventAlgorithmInhibitRef.GetLengthInBits(ctx)

	// Simple field (eventAlgorithmInhibit)
	lengthInBits += m.EventAlgorithmInhibit.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AccessPoint) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AccessPointParse(ctx context.Context, theBytes []byte) (AccessPoint, error) {
	return AccessPointParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AccessPointParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessPoint, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessPoint, error) {
		return AccessPointParseWithBuffer(ctx, readBuffer)
	}
}

func AccessPointParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (AccessPoint, error) {
	v, err := (&_AccessPoint{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_AccessPoint) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__accessPoint AccessPoint, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AccessPoint"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AccessPoint")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	eventState, err := ReadSimpleField[ReadableProperty](ctx, "eventState", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetEventState")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventState' field"))
	}
	m.EventState = eventState

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	outOfService, err := ReadSimpleField[ReadableProperty](ctx, "outOfService", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'outOfService' field"))
	}
	m.OutOfService = outOfService

	authenticationStatus, err := ReadSimpleField[ReadableProperty](ctx, "authenticationStatus", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAuthenticationStatus")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'authenticationStatus' field"))
	}
	m.AuthenticationStatus = authenticationStatus

	activeAuthenticationPolicy, err := ReadSimpleField[ReadableProperty](ctx, "activeAuthenticationPolicy", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'activeAuthenticationPolicy' field"))
	}
	m.ActiveAuthenticationPolicy = activeAuthenticationPolicy

	numberOfAuthenticationPolicies, err := ReadSimpleField[ReadableProperty](ctx, "numberOfAuthenticationPolicies", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'numberOfAuthenticationPolicies' field"))
	}
	m.NumberOfAuthenticationPolicies = numberOfAuthenticationPolicies

	authenticationPolicyList, err := ReadSimpleField[OptionalProperty](ctx, "authenticationPolicyList", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetAuthenticationPolicy")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'authenticationPolicyList' field"))
	}
	m.AuthenticationPolicyList = authenticationPolicyList

	authenticationPolicyNames, err := ReadSimpleField[OptionalProperty](ctx, "authenticationPolicyNames", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'authenticationPolicyNames' field"))
	}
	m.AuthenticationPolicyNames = authenticationPolicyNames

	authorizationMode, err := ReadSimpleField[ReadableProperty](ctx, "authorizationMode", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAuthorizationMode")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'authorizationMode' field"))
	}
	m.AuthorizationMode = authorizationMode

	verificationTime, err := ReadSimpleField[OptionalProperty](ctx, "verificationTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'verificationTime' field"))
	}
	m.VerificationTime = verificationTime

	lockout, err := ReadSimpleField[OptionalProperty](ctx, "lockout", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lockout' field"))
	}
	m.Lockout = lockout

	lockoutRelinquishTime, err := ReadSimpleField[OptionalProperty](ctx, "lockoutRelinquishTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lockoutRelinquishTime' field"))
	}
	m.LockoutRelinquishTime = lockoutRelinquishTime

	failedAttempts, err := ReadSimpleField[OptionalProperty](ctx, "failedAttempts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'failedAttempts' field"))
	}
	m.FailedAttempts = failedAttempts

	failedAttemptEvents, err := ReadSimpleField[OptionalProperty](ctx, "failedAttemptEvents", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAccessEvent")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'failedAttemptEvents' field"))
	}
	m.FailedAttemptEvents = failedAttemptEvents

	maxFailedAttempts, err := ReadSimpleField[OptionalProperty](ctx, "maxFailedAttempts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'maxFailedAttempts' field"))
	}
	m.MaxFailedAttempts = maxFailedAttempts

	failedAttemptsTime, err := ReadSimpleField[OptionalProperty](ctx, "failedAttemptsTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'failedAttemptsTime' field"))
	}
	m.FailedAttemptsTime = failedAttemptsTime

	threatLevel, err := ReadSimpleField[OptionalProperty](ctx, "threatLevel", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetAccessThreatLevel")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'threatLevel' field"))
	}
	m.ThreatLevel = threatLevel

	occupancyUpperLimitEnforced, err := ReadSimpleField[OptionalProperty](ctx, "occupancyUpperLimitEnforced", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyUpperLimitEnforced' field"))
	}
	m.OccupancyUpperLimitEnforced = occupancyUpperLimitEnforced

	occupancyLowerLimitEnforced, err := ReadSimpleField[OptionalProperty](ctx, "occupancyLowerLimitEnforced", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyLowerLimitEnforced' field"))
	}
	m.OccupancyLowerLimitEnforced = occupancyLowerLimitEnforced

	occupancyCountAdjust, err := ReadSimpleField[OptionalProperty](ctx, "occupancyCountAdjust", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'occupancyCountAdjust' field"))
	}
	m.OccupancyCountAdjust = occupancyCountAdjust

	accompanimentTime, err := ReadSimpleField[OptionalProperty](ctx, "accompanimentTime", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accompanimentTime' field"))
	}
	m.AccompanimentTime = accompanimentTime

	accessEvent, err := ReadSimpleField[ReadableProperty](ctx, "accessEvent", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetAccessEvent")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessEvent' field"))
	}
	m.AccessEvent = accessEvent

	accessEventTag, err := ReadSimpleField[ReadableProperty](ctx, "accessEventTag", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessEventTag' field"))
	}
	m.AccessEventTag = accessEventTag

	accessEventTime, err := ReadSimpleField[ReadableProperty](ctx, "accessEventTime", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessEventTime' field"))
	}
	m.AccessEventTime = accessEventTime

	accessEventCredential, err := ReadSimpleField[ReadableProperty](ctx, "accessEventCredential", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessEventCredential' field"))
	}
	m.AccessEventCredential = accessEventCredential

	accessEventAuthenticationFactor, err := ReadSimpleField[OptionalProperty](ctx, "accessEventAuthenticationFactor", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetAuthenticationFactor")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessEventAuthenticationFactor' field"))
	}
	m.AccessEventAuthenticationFactor = accessEventAuthenticationFactor

	accessDoors, err := ReadSimpleField[ReadableProperty](ctx, "accessDoors", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessDoors' field"))
	}
	m.AccessDoors = accessDoors

	priorityForWriting, err := ReadSimpleField[ReadableProperty](ctx, "priorityForWriting", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("Unsigned(1..16)")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'priorityForWriting' field"))
	}
	m.PriorityForWriting = priorityForWriting

	musterPoint, err := ReadSimpleField[OptionalProperty](ctx, "musterPoint", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'musterPoint' field"))
	}
	m.MusterPoint = musterPoint

	zoneTo, err := ReadSimpleField[OptionalProperty](ctx, "zoneTo", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'zoneTo' field"))
	}
	m.ZoneTo = zoneTo

	zoneFrom, err := ReadSimpleField[OptionalProperty](ctx, "zoneFrom", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'zoneFrom' field"))
	}
	m.ZoneFrom = zoneFrom

	notificationClass, err := ReadSimpleField[OptionalProperty](ctx, "notificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notificationClass' field"))
	}
	m.NotificationClass = notificationClass

	transactionNotificationClass, err := ReadSimpleField[OptionalProperty](ctx, "transactionNotificationClass", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("Unsigned")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'transactionNotificationClass' field"))
	}
	m.TransactionNotificationClass = transactionNotificationClass

	accessAlarmEvents, err := ReadSimpleField[OptionalProperty](ctx, "accessAlarmEvents", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAccessEvent")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessAlarmEvents' field"))
	}
	m.AccessAlarmEvents = accessAlarmEvents

	accessTransactionEvents, err := ReadSimpleField[OptionalProperty](ctx, "accessTransactionEvents", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetLIST of BACnetAccessEvent")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accessTransactionEvents' field"))
	}
	m.AccessTransactionEvents = accessTransactionEvents

	eventEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventEnable' field"))
	}
	m.EventEnable = eventEnable

	ackedTransitions, err := ReadSimpleField[OptionalProperty](ctx, "ackedTransitions", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetEventTransitionBits")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'ackedTransitions' field"))
	}
	m.AckedTransitions = ackedTransitions

	notifyType, err := ReadSimpleField[OptionalProperty](ctx, "notifyType", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetNotifyType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'notifyType' field"))
	}
	m.NotifyType = notifyType

	eventTimeStamps, err := ReadSimpleField[OptionalProperty](ctx, "eventTimeStamps", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of BACnetTimeStamp")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventTimeStamps' field"))
	}
	m.EventTimeStamps = eventTimeStamps

	eventMessageTexts, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTexts", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTexts' field"))
	}
	m.EventMessageTexts = eventMessageTexts

	eventMessageTextsConfig, err := ReadSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[3] of CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventMessageTextsConfig' field"))
	}
	m.EventMessageTextsConfig = eventMessageTextsConfig

	eventDetectionEnable, err := ReadSimpleField[OptionalProperty](ctx, "eventDetectionEnable", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventDetectionEnable' field"))
	}
	m.EventDetectionEnable = eventDetectionEnable

	eventAlgorithmInhibitRef, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetObjectPropertyReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibitRef' field"))
	}
	m.EventAlgorithmInhibitRef = eventAlgorithmInhibitRef

	eventAlgorithmInhibit, err := ReadSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'eventAlgorithmInhibit' field"))
	}
	m.EventAlgorithmInhibit = eventAlgorithmInhibit

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("AccessPoint"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AccessPoint")
	}

	return m, nil
}

func (m *_AccessPoint) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AccessPoint) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("AccessPoint"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AccessPoint")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "eventState", m.GetEventState(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventState' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "outOfService", m.GetOutOfService(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'outOfService' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "authenticationStatus", m.GetAuthenticationStatus(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'authenticationStatus' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "activeAuthenticationPolicy", m.GetActiveAuthenticationPolicy(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'activeAuthenticationPolicy' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "numberOfAuthenticationPolicies", m.GetNumberOfAuthenticationPolicies(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'numberOfAuthenticationPolicies' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "authenticationPolicyList", m.GetAuthenticationPolicyList(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'authenticationPolicyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "authenticationPolicyNames", m.GetAuthenticationPolicyNames(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'authenticationPolicyNames' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "authorizationMode", m.GetAuthorizationMode(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'authorizationMode' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "verificationTime", m.GetVerificationTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'verificationTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lockout", m.GetLockout(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lockout' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "lockoutRelinquishTime", m.GetLockoutRelinquishTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'lockoutRelinquishTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "failedAttempts", m.GetFailedAttempts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'failedAttempts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "failedAttemptEvents", m.GetFailedAttemptEvents(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'failedAttemptEvents' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "maxFailedAttempts", m.GetMaxFailedAttempts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'maxFailedAttempts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "failedAttemptsTime", m.GetFailedAttemptsTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'failedAttemptsTime' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "threatLevel", m.GetThreatLevel(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'threatLevel' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyUpperLimitEnforced", m.GetOccupancyUpperLimitEnforced(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyUpperLimitEnforced' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyLowerLimitEnforced", m.GetOccupancyLowerLimitEnforced(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyLowerLimitEnforced' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "occupancyCountAdjust", m.GetOccupancyCountAdjust(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'occupancyCountAdjust' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "accompanimentTime", m.GetAccompanimentTime(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accompanimentTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "accessEvent", m.GetAccessEvent(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessEvent' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "accessEventTag", m.GetAccessEventTag(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessEventTag' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "accessEventTime", m.GetAccessEventTime(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessEventTime' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "accessEventCredential", m.GetAccessEventCredential(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessEventCredential' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "accessEventAuthenticationFactor", m.GetAccessEventAuthenticationFactor(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessEventAuthenticationFactor' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "accessDoors", m.GetAccessDoors(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessDoors' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "priorityForWriting", m.GetPriorityForWriting(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'priorityForWriting' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "musterPoint", m.GetMusterPoint(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'musterPoint' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "zoneTo", m.GetZoneTo(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'zoneTo' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "zoneFrom", m.GetZoneFrom(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'zoneFrom' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notificationClass", m.GetNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "transactionNotificationClass", m.GetTransactionNotificationClass(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'transactionNotificationClass' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "accessAlarmEvents", m.GetAccessAlarmEvents(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessAlarmEvents' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "accessTransactionEvents", m.GetAccessTransactionEvents(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accessTransactionEvents' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventEnable", m.GetEventEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "ackedTransitions", m.GetAckedTransitions(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'ackedTransitions' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "notifyType", m.GetNotifyType(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'notifyType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventTimeStamps", m.GetEventTimeStamps(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventTimeStamps' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTexts", m.GetEventMessageTexts(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTexts' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventMessageTextsConfig", m.GetEventMessageTextsConfig(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventMessageTextsConfig' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventDetectionEnable", m.GetEventDetectionEnable(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventDetectionEnable' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibitRef", m.GetEventAlgorithmInhibitRef(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibitRef' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "eventAlgorithmInhibit", m.GetEventAlgorithmInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'eventAlgorithmInhibit' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("AccessPoint"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AccessPoint")
	}
	return nil
}

func (m *_AccessPoint) IsAccessPoint() {}

func (m *_AccessPoint) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AccessPoint) deepCopy() *_AccessPoint {
	if m == nil {
		return nil
	}
	_AccessPointCopy := &_AccessPoint{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.EventState.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.OutOfService.DeepCopy().(ReadableProperty),
		m.AuthenticationStatus.DeepCopy().(ReadableProperty),
		m.ActiveAuthenticationPolicy.DeepCopy().(ReadableProperty),
		m.NumberOfAuthenticationPolicies.DeepCopy().(ReadableProperty),
		m.AuthenticationPolicyList.DeepCopy().(OptionalProperty),
		m.AuthenticationPolicyNames.DeepCopy().(OptionalProperty),
		m.AuthorizationMode.DeepCopy().(ReadableProperty),
		m.VerificationTime.DeepCopy().(OptionalProperty),
		m.Lockout.DeepCopy().(OptionalProperty),
		m.LockoutRelinquishTime.DeepCopy().(OptionalProperty),
		m.FailedAttempts.DeepCopy().(OptionalProperty),
		m.FailedAttemptEvents.DeepCopy().(OptionalProperty),
		m.MaxFailedAttempts.DeepCopy().(OptionalProperty),
		m.FailedAttemptsTime.DeepCopy().(OptionalProperty),
		m.ThreatLevel.DeepCopy().(OptionalProperty),
		m.OccupancyUpperLimitEnforced.DeepCopy().(OptionalProperty),
		m.OccupancyLowerLimitEnforced.DeepCopy().(OptionalProperty),
		m.OccupancyCountAdjust.DeepCopy().(OptionalProperty),
		m.AccompanimentTime.DeepCopy().(OptionalProperty),
		m.AccessEvent.DeepCopy().(ReadableProperty),
		m.AccessEventTag.DeepCopy().(ReadableProperty),
		m.AccessEventTime.DeepCopy().(ReadableProperty),
		m.AccessEventCredential.DeepCopy().(ReadableProperty),
		m.AccessEventAuthenticationFactor.DeepCopy().(OptionalProperty),
		m.AccessDoors.DeepCopy().(ReadableProperty),
		m.PriorityForWriting.DeepCopy().(ReadableProperty),
		m.MusterPoint.DeepCopy().(OptionalProperty),
		m.ZoneTo.DeepCopy().(OptionalProperty),
		m.ZoneFrom.DeepCopy().(OptionalProperty),
		m.NotificationClass.DeepCopy().(OptionalProperty),
		m.TransactionNotificationClass.DeepCopy().(OptionalProperty),
		m.AccessAlarmEvents.DeepCopy().(OptionalProperty),
		m.AccessTransactionEvents.DeepCopy().(OptionalProperty),
		m.EventEnable.DeepCopy().(OptionalProperty),
		m.AckedTransitions.DeepCopy().(OptionalProperty),
		m.NotifyType.DeepCopy().(OptionalProperty),
		m.EventTimeStamps.DeepCopy().(OptionalProperty),
		m.EventMessageTexts.DeepCopy().(OptionalProperty),
		m.EventMessageTextsConfig.DeepCopy().(OptionalProperty),
		m.EventDetectionEnable.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibitRef.DeepCopy().(OptionalProperty),
		m.EventAlgorithmInhibit.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AccessPointCopy
}

func (m *_AccessPoint) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
