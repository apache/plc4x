/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// AccessRights is the corresponding interface of AccessRights
type AccessRights interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() ReadableProperty
	// GetObjectName returns ObjectName (property field)
	GetObjectName() ReadableProperty
	// GetObjectType returns ObjectType (property field)
	GetObjectType() ReadableProperty
	// GetDescription returns Description (property field)
	GetDescription() OptionalProperty
	// GetGlobalIdentifier returns GlobalIdentifier (property field)
	GetGlobalIdentifier() WritableProperty
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() ReadableProperty
	// GetReliability returns Reliability (property field)
	GetReliability() ReadableProperty
	// GetEnable returns Enable (property field)
	GetEnable() ReadableProperty
	// GetNegativeAccessRules returns NegativeAccessRules (property field)
	GetNegativeAccessRules() ReadableProperty
	// GetPositiveAccessRules returns PositiveAccessRules (property field)
	GetPositiveAccessRules() ReadableProperty
	// GetAccompaniment returns Accompaniment (property field)
	GetAccompaniment() OptionalProperty
	// GetReliabilityEvaluationInhibit returns ReliabilityEvaluationInhibit (property field)
	GetReliabilityEvaluationInhibit() OptionalProperty
	// GetPropertyList returns PropertyList (property field)
	GetPropertyList() ReadableProperty
	// GetTags returns Tags (property field)
	GetTags() OptionalProperty
	// GetProfileLocation returns ProfileLocation (property field)
	GetProfileLocation() OptionalProperty
	// GetProfileName returns ProfileName (property field)
	GetProfileName() OptionalProperty
	// IsAccessRights is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsAccessRights()
	// CreateBuilder creates a AccessRightsBuilder
	CreateAccessRightsBuilder() AccessRightsBuilder
}

// _AccessRights is the data-structure of this message
type _AccessRights struct {
	ObjectIdentifier             ReadableProperty
	ObjectName                   ReadableProperty
	ObjectType                   ReadableProperty
	Description                  OptionalProperty
	GlobalIdentifier             WritableProperty
	StatusFlags                  ReadableProperty
	Reliability                  ReadableProperty
	Enable                       ReadableProperty
	NegativeAccessRules          ReadableProperty
	PositiveAccessRules          ReadableProperty
	Accompaniment                OptionalProperty
	ReliabilityEvaluationInhibit OptionalProperty
	PropertyList                 ReadableProperty
	Tags                         OptionalProperty
	ProfileLocation              OptionalProperty
	ProfileName                  OptionalProperty
}

var _ AccessRights = (*_AccessRights)(nil)

// NewAccessRights factory function for _AccessRights
func NewAccessRights(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, enable ReadableProperty, negativeAccessRules ReadableProperty, positiveAccessRules ReadableProperty, accompaniment OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) *_AccessRights {
	if objectIdentifier == nil {
		panic("objectIdentifier of type ReadableProperty for AccessRights must not be nil")
	}
	if objectName == nil {
		panic("objectName of type ReadableProperty for AccessRights must not be nil")
	}
	if objectType == nil {
		panic("objectType of type ReadableProperty for AccessRights must not be nil")
	}
	if description == nil {
		panic("description of type OptionalProperty for AccessRights must not be nil")
	}
	if globalIdentifier == nil {
		panic("globalIdentifier of type WritableProperty for AccessRights must not be nil")
	}
	if statusFlags == nil {
		panic("statusFlags of type ReadableProperty for AccessRights must not be nil")
	}
	if reliability == nil {
		panic("reliability of type ReadableProperty for AccessRights must not be nil")
	}
	if enable == nil {
		panic("enable of type ReadableProperty for AccessRights must not be nil")
	}
	if negativeAccessRules == nil {
		panic("negativeAccessRules of type ReadableProperty for AccessRights must not be nil")
	}
	if positiveAccessRules == nil {
		panic("positiveAccessRules of type ReadableProperty for AccessRights must not be nil")
	}
	if accompaniment == nil {
		panic("accompaniment of type OptionalProperty for AccessRights must not be nil")
	}
	if reliabilityEvaluationInhibit == nil {
		panic("reliabilityEvaluationInhibit of type OptionalProperty for AccessRights must not be nil")
	}
	if propertyList == nil {
		panic("propertyList of type ReadableProperty for AccessRights must not be nil")
	}
	if tags == nil {
		panic("tags of type OptionalProperty for AccessRights must not be nil")
	}
	if profileLocation == nil {
		panic("profileLocation of type OptionalProperty for AccessRights must not be nil")
	}
	if profileName == nil {
		panic("profileName of type OptionalProperty for AccessRights must not be nil")
	}
	return &_AccessRights{ObjectIdentifier: objectIdentifier, ObjectName: objectName, ObjectType: objectType, Description: description, GlobalIdentifier: globalIdentifier, StatusFlags: statusFlags, Reliability: reliability, Enable: enable, NegativeAccessRules: negativeAccessRules, PositiveAccessRules: positiveAccessRules, Accompaniment: accompaniment, ReliabilityEvaluationInhibit: reliabilityEvaluationInhibit, PropertyList: propertyList, Tags: tags, ProfileLocation: profileLocation, ProfileName: profileName}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// AccessRightsBuilder is a builder for AccessRights
type AccessRightsBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, enable ReadableProperty, negativeAccessRules ReadableProperty, positiveAccessRules ReadableProperty, accompaniment OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessRightsBuilder
	// WithObjectIdentifier adds ObjectIdentifier (property field)
	WithObjectIdentifier(ReadableProperty) AccessRightsBuilder
	// WithObjectIdentifierBuilder adds ObjectIdentifier (property field) which is build by the builder
	WithObjectIdentifierBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithObjectName adds ObjectName (property field)
	WithObjectName(ReadableProperty) AccessRightsBuilder
	// WithObjectNameBuilder adds ObjectName (property field) which is build by the builder
	WithObjectNameBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithObjectType adds ObjectType (property field)
	WithObjectType(ReadableProperty) AccessRightsBuilder
	// WithObjectTypeBuilder adds ObjectType (property field) which is build by the builder
	WithObjectTypeBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithDescription adds Description (property field)
	WithDescription(OptionalProperty) AccessRightsBuilder
	// WithDescriptionBuilder adds Description (property field) which is build by the builder
	WithDescriptionBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder
	// WithGlobalIdentifier adds GlobalIdentifier (property field)
	WithGlobalIdentifier(WritableProperty) AccessRightsBuilder
	// WithGlobalIdentifierBuilder adds GlobalIdentifier (property field) which is build by the builder
	WithGlobalIdentifierBuilder(func(WritablePropertyBuilder) WritablePropertyBuilder) AccessRightsBuilder
	// WithStatusFlags adds StatusFlags (property field)
	WithStatusFlags(ReadableProperty) AccessRightsBuilder
	// WithStatusFlagsBuilder adds StatusFlags (property field) which is build by the builder
	WithStatusFlagsBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithReliability adds Reliability (property field)
	WithReliability(ReadableProperty) AccessRightsBuilder
	// WithReliabilityBuilder adds Reliability (property field) which is build by the builder
	WithReliabilityBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithEnable adds Enable (property field)
	WithEnable(ReadableProperty) AccessRightsBuilder
	// WithEnableBuilder adds Enable (property field) which is build by the builder
	WithEnableBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithNegativeAccessRules adds NegativeAccessRules (property field)
	WithNegativeAccessRules(ReadableProperty) AccessRightsBuilder
	// WithNegativeAccessRulesBuilder adds NegativeAccessRules (property field) which is build by the builder
	WithNegativeAccessRulesBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithPositiveAccessRules adds PositiveAccessRules (property field)
	WithPositiveAccessRules(ReadableProperty) AccessRightsBuilder
	// WithPositiveAccessRulesBuilder adds PositiveAccessRules (property field) which is build by the builder
	WithPositiveAccessRulesBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithAccompaniment adds Accompaniment (property field)
	WithAccompaniment(OptionalProperty) AccessRightsBuilder
	// WithAccompanimentBuilder adds Accompaniment (property field) which is build by the builder
	WithAccompanimentBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder
	// WithReliabilityEvaluationInhibit adds ReliabilityEvaluationInhibit (property field)
	WithReliabilityEvaluationInhibit(OptionalProperty) AccessRightsBuilder
	// WithReliabilityEvaluationInhibitBuilder adds ReliabilityEvaluationInhibit (property field) which is build by the builder
	WithReliabilityEvaluationInhibitBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder
	// WithPropertyList adds PropertyList (property field)
	WithPropertyList(ReadableProperty) AccessRightsBuilder
	// WithPropertyListBuilder adds PropertyList (property field) which is build by the builder
	WithPropertyListBuilder(func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder
	// WithTags adds Tags (property field)
	WithTags(OptionalProperty) AccessRightsBuilder
	// WithTagsBuilder adds Tags (property field) which is build by the builder
	WithTagsBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder
	// WithProfileLocation adds ProfileLocation (property field)
	WithProfileLocation(OptionalProperty) AccessRightsBuilder
	// WithProfileLocationBuilder adds ProfileLocation (property field) which is build by the builder
	WithProfileLocationBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder
	// WithProfileName adds ProfileName (property field)
	WithProfileName(OptionalProperty) AccessRightsBuilder
	// WithProfileNameBuilder adds ProfileName (property field) which is build by the builder
	WithProfileNameBuilder(func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder
	// Build builds the AccessRights or returns an error if something is wrong
	Build() (AccessRights, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() AccessRights
}

// NewAccessRightsBuilder() creates a AccessRightsBuilder
func NewAccessRightsBuilder() AccessRightsBuilder {
	return &_AccessRightsBuilder{_AccessRights: new(_AccessRights)}
}

type _AccessRightsBuilder struct {
	*_AccessRights

	err *utils.MultiError
}

var _ (AccessRightsBuilder) = (*_AccessRightsBuilder)(nil)

func (b *_AccessRightsBuilder) WithMandatoryFields(objectIdentifier ReadableProperty, objectName ReadableProperty, objectType ReadableProperty, description OptionalProperty, globalIdentifier WritableProperty, statusFlags ReadableProperty, reliability ReadableProperty, enable ReadableProperty, negativeAccessRules ReadableProperty, positiveAccessRules ReadableProperty, accompaniment OptionalProperty, reliabilityEvaluationInhibit OptionalProperty, propertyList ReadableProperty, tags OptionalProperty, profileLocation OptionalProperty, profileName OptionalProperty) AccessRightsBuilder {
	return b.WithObjectIdentifier(objectIdentifier).WithObjectName(objectName).WithObjectType(objectType).WithDescription(description).WithGlobalIdentifier(globalIdentifier).WithStatusFlags(statusFlags).WithReliability(reliability).WithEnable(enable).WithNegativeAccessRules(negativeAccessRules).WithPositiveAccessRules(positiveAccessRules).WithAccompaniment(accompaniment).WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit).WithPropertyList(propertyList).WithTags(tags).WithProfileLocation(profileLocation).WithProfileName(profileName)
}

func (b *_AccessRightsBuilder) WithObjectIdentifier(objectIdentifier ReadableProperty) AccessRightsBuilder {
	b.ObjectIdentifier = objectIdentifier
	return b
}

func (b *_AccessRightsBuilder) WithObjectIdentifierBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.ObjectIdentifier.CreateReadablePropertyBuilder())
	var err error
	b.ObjectIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithObjectName(objectName ReadableProperty) AccessRightsBuilder {
	b.ObjectName = objectName
	return b
}

func (b *_AccessRightsBuilder) WithObjectNameBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.ObjectName.CreateReadablePropertyBuilder())
	var err error
	b.ObjectName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithObjectType(objectType ReadableProperty) AccessRightsBuilder {
	b.ObjectType = objectType
	return b
}

func (b *_AccessRightsBuilder) WithObjectTypeBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.ObjectType.CreateReadablePropertyBuilder())
	var err error
	b.ObjectType, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithDescription(description OptionalProperty) AccessRightsBuilder {
	b.Description = description
	return b
}

func (b *_AccessRightsBuilder) WithDescriptionBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.Description.CreateOptionalPropertyBuilder())
	var err error
	b.Description, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithGlobalIdentifier(globalIdentifier WritableProperty) AccessRightsBuilder {
	b.GlobalIdentifier = globalIdentifier
	return b
}

func (b *_AccessRightsBuilder) WithGlobalIdentifierBuilder(builderSupplier func(WritablePropertyBuilder) WritablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.GlobalIdentifier.CreateWritablePropertyBuilder())
	var err error
	b.GlobalIdentifier, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "WritablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithStatusFlags(statusFlags ReadableProperty) AccessRightsBuilder {
	b.StatusFlags = statusFlags
	return b
}

func (b *_AccessRightsBuilder) WithStatusFlagsBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.StatusFlags.CreateReadablePropertyBuilder())
	var err error
	b.StatusFlags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithReliability(reliability ReadableProperty) AccessRightsBuilder {
	b.Reliability = reliability
	return b
}

func (b *_AccessRightsBuilder) WithReliabilityBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.Reliability.CreateReadablePropertyBuilder())
	var err error
	b.Reliability, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithEnable(enable ReadableProperty) AccessRightsBuilder {
	b.Enable = enable
	return b
}

func (b *_AccessRightsBuilder) WithEnableBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.Enable.CreateReadablePropertyBuilder())
	var err error
	b.Enable, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithNegativeAccessRules(negativeAccessRules ReadableProperty) AccessRightsBuilder {
	b.NegativeAccessRules = negativeAccessRules
	return b
}

func (b *_AccessRightsBuilder) WithNegativeAccessRulesBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.NegativeAccessRules.CreateReadablePropertyBuilder())
	var err error
	b.NegativeAccessRules, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithPositiveAccessRules(positiveAccessRules ReadableProperty) AccessRightsBuilder {
	b.PositiveAccessRules = positiveAccessRules
	return b
}

func (b *_AccessRightsBuilder) WithPositiveAccessRulesBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.PositiveAccessRules.CreateReadablePropertyBuilder())
	var err error
	b.PositiveAccessRules, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithAccompaniment(accompaniment OptionalProperty) AccessRightsBuilder {
	b.Accompaniment = accompaniment
	return b
}

func (b *_AccessRightsBuilder) WithAccompanimentBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.Accompaniment.CreateOptionalPropertyBuilder())
	var err error
	b.Accompaniment, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithReliabilityEvaluationInhibit(reliabilityEvaluationInhibit OptionalProperty) AccessRightsBuilder {
	b.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit
	return b
}

func (b *_AccessRightsBuilder) WithReliabilityEvaluationInhibitBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.ReliabilityEvaluationInhibit.CreateOptionalPropertyBuilder())
	var err error
	b.ReliabilityEvaluationInhibit, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithPropertyList(propertyList ReadableProperty) AccessRightsBuilder {
	b.PropertyList = propertyList
	return b
}

func (b *_AccessRightsBuilder) WithPropertyListBuilder(builderSupplier func(ReadablePropertyBuilder) ReadablePropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.PropertyList.CreateReadablePropertyBuilder())
	var err error
	b.PropertyList, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "ReadablePropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithTags(tags OptionalProperty) AccessRightsBuilder {
	b.Tags = tags
	return b
}

func (b *_AccessRightsBuilder) WithTagsBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.Tags.CreateOptionalPropertyBuilder())
	var err error
	b.Tags, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithProfileLocation(profileLocation OptionalProperty) AccessRightsBuilder {
	b.ProfileLocation = profileLocation
	return b
}

func (b *_AccessRightsBuilder) WithProfileLocationBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.ProfileLocation.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileLocation, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) WithProfileName(profileName OptionalProperty) AccessRightsBuilder {
	b.ProfileName = profileName
	return b
}

func (b *_AccessRightsBuilder) WithProfileNameBuilder(builderSupplier func(OptionalPropertyBuilder) OptionalPropertyBuilder) AccessRightsBuilder {
	builder := builderSupplier(b.ProfileName.CreateOptionalPropertyBuilder())
	var err error
	b.ProfileName, err = builder.Build()
	if err != nil {
		if b.err == nil {
			b.err = &utils.MultiError{MainError: errors.New("sub builder failed")}
		}
		b.err.Append(errors.Wrap(err, "OptionalPropertyBuilder failed"))
	}
	return b
}

func (b *_AccessRightsBuilder) Build() (AccessRights, error) {
	if b.ObjectIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectIdentifier' not set"))
	}
	if b.ObjectName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectName' not set"))
	}
	if b.ObjectType == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'objectType' not set"))
	}
	if b.Description == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'description' not set"))
	}
	if b.GlobalIdentifier == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'globalIdentifier' not set"))
	}
	if b.StatusFlags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'statusFlags' not set"))
	}
	if b.Reliability == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliability' not set"))
	}
	if b.Enable == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'enable' not set"))
	}
	if b.NegativeAccessRules == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'negativeAccessRules' not set"))
	}
	if b.PositiveAccessRules == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'positiveAccessRules' not set"))
	}
	if b.Accompaniment == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'accompaniment' not set"))
	}
	if b.ReliabilityEvaluationInhibit == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'reliabilityEvaluationInhibit' not set"))
	}
	if b.PropertyList == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'propertyList' not set"))
	}
	if b.Tags == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'tags' not set"))
	}
	if b.ProfileLocation == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileLocation' not set"))
	}
	if b.ProfileName == nil {
		if b.err == nil {
			b.err = new(utils.MultiError)
		}
		b.err.Append(errors.New("mandatory field 'profileName' not set"))
	}
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._AccessRights.deepCopy(), nil
}

func (b *_AccessRightsBuilder) MustBuild() AccessRights {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (b *_AccessRightsBuilder) DeepCopy() any {
	_copy := b.CreateAccessRightsBuilder().(*_AccessRightsBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateAccessRightsBuilder creates a AccessRightsBuilder
func (b *_AccessRights) CreateAccessRightsBuilder() AccessRightsBuilder {
	if b == nil {
		return NewAccessRightsBuilder()
	}
	return &_AccessRightsBuilder{_AccessRights: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AccessRights) GetObjectIdentifier() ReadableProperty {
	return m.ObjectIdentifier
}

func (m *_AccessRights) GetObjectName() ReadableProperty {
	return m.ObjectName
}

func (m *_AccessRights) GetObjectType() ReadableProperty {
	return m.ObjectType
}

func (m *_AccessRights) GetDescription() OptionalProperty {
	return m.Description
}

func (m *_AccessRights) GetGlobalIdentifier() WritableProperty {
	return m.GlobalIdentifier
}

func (m *_AccessRights) GetStatusFlags() ReadableProperty {
	return m.StatusFlags
}

func (m *_AccessRights) GetReliability() ReadableProperty {
	return m.Reliability
}

func (m *_AccessRights) GetEnable() ReadableProperty {
	return m.Enable
}

func (m *_AccessRights) GetNegativeAccessRules() ReadableProperty {
	return m.NegativeAccessRules
}

func (m *_AccessRights) GetPositiveAccessRules() ReadableProperty {
	return m.PositiveAccessRules
}

func (m *_AccessRights) GetAccompaniment() OptionalProperty {
	return m.Accompaniment
}

func (m *_AccessRights) GetReliabilityEvaluationInhibit() OptionalProperty {
	return m.ReliabilityEvaluationInhibit
}

func (m *_AccessRights) GetPropertyList() ReadableProperty {
	return m.PropertyList
}

func (m *_AccessRights) GetTags() OptionalProperty {
	return m.Tags
}

func (m *_AccessRights) GetProfileLocation() OptionalProperty {
	return m.ProfileLocation
}

func (m *_AccessRights) GetProfileName() OptionalProperty {
	return m.ProfileName
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastAccessRights(structType any) AccessRights {
	if casted, ok := structType.(AccessRights); ok {
		return casted
	}
	if casted, ok := structType.(*AccessRights); ok {
		return *casted
	}
	return nil
}

func (m *_AccessRights) GetTypeName() string {
	return "AccessRights"
}

func (m *_AccessRights) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits(ctx)

	// Simple field (objectName)
	lengthInBits += m.ObjectName.GetLengthInBits(ctx)

	// Simple field (objectType)
	lengthInBits += m.ObjectType.GetLengthInBits(ctx)

	// Simple field (description)
	lengthInBits += m.Description.GetLengthInBits(ctx)

	// Simple field (globalIdentifier)
	lengthInBits += m.GlobalIdentifier.GetLengthInBits(ctx)

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits(ctx)

	// Simple field (reliability)
	lengthInBits += m.Reliability.GetLengthInBits(ctx)

	// Simple field (enable)
	lengthInBits += m.Enable.GetLengthInBits(ctx)

	// Simple field (negativeAccessRules)
	lengthInBits += m.NegativeAccessRules.GetLengthInBits(ctx)

	// Simple field (positiveAccessRules)
	lengthInBits += m.PositiveAccessRules.GetLengthInBits(ctx)

	// Simple field (accompaniment)
	lengthInBits += m.Accompaniment.GetLengthInBits(ctx)

	// Simple field (reliabilityEvaluationInhibit)
	lengthInBits += m.ReliabilityEvaluationInhibit.GetLengthInBits(ctx)

	// Simple field (propertyList)
	lengthInBits += m.PropertyList.GetLengthInBits(ctx)

	// Simple field (tags)
	lengthInBits += m.Tags.GetLengthInBits(ctx)

	// Simple field (profileLocation)
	lengthInBits += m.ProfileLocation.GetLengthInBits(ctx)

	// Simple field (profileName)
	lengthInBits += m.ProfileName.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_AccessRights) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func AccessRightsParse(ctx context.Context, theBytes []byte) (AccessRights, error) {
	return AccessRightsParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func AccessRightsParseWithBufferProducer() func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessRights, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (AccessRights, error) {
		return AccessRightsParseWithBuffer(ctx, readBuffer)
	}
}

func AccessRightsParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (AccessRights, error) {
	v, err := (&_AccessRights{}).parse(ctx, readBuffer)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (m *_AccessRights) parse(ctx context.Context, readBuffer utils.ReadBuffer) (__accessRights AccessRights, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AccessRights"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AccessRights")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	objectIdentifier, err := ReadSimpleField[ReadableProperty](ctx, "objectIdentifier", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectIdentifier' field"))
	}
	m.ObjectIdentifier = objectIdentifier

	objectName, err := ReadSimpleField[ReadableProperty](ctx, "objectName", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectName' field"))
	}
	m.ObjectName = objectName

	objectType, err := ReadSimpleField[ReadableProperty](ctx, "objectType", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetObjectType")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'objectType' field"))
	}
	m.ObjectType = objectType

	description, err := ReadSimpleField[OptionalProperty](ctx, "description", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'description' field"))
	}
	m.Description = description

	globalIdentifier, err := ReadSimpleField[WritableProperty](ctx, "globalIdentifier", ReadComplex[WritableProperty](WritablePropertyParseWithBufferProducer((string)("Unsigned32")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'globalIdentifier' field"))
	}
	m.GlobalIdentifier = globalIdentifier

	statusFlags, err := ReadSimpleField[ReadableProperty](ctx, "statusFlags", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetStatusFlags")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'statusFlags' field"))
	}
	m.StatusFlags = statusFlags

	reliability, err := ReadSimpleField[ReadableProperty](ctx, "reliability", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetReliability")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliability' field"))
	}
	m.Reliability = reliability

	enable, err := ReadSimpleField[ReadableProperty](ctx, "enable", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'enable' field"))
	}
	m.Enable = enable

	negativeAccessRules, err := ReadSimpleField[ReadableProperty](ctx, "negativeAccessRules", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetAccessRule")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'negativeAccessRules' field"))
	}
	m.NegativeAccessRules = negativeAccessRules

	positiveAccessRules, err := ReadSimpleField[ReadableProperty](ctx, "positiveAccessRules", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetAccessRule")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'positiveAccessRules' field"))
	}
	m.PositiveAccessRules = positiveAccessRules

	accompaniment, err := ReadSimpleField[OptionalProperty](ctx, "accompaniment", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetDeviceObjectReference")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'accompaniment' field"))
	}
	m.Accompaniment = accompaniment

	reliabilityEvaluationInhibit, err := ReadSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BOOLEAN")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'reliabilityEvaluationInhibit' field"))
	}
	m.ReliabilityEvaluationInhibit = reliabilityEvaluationInhibit

	propertyList, err := ReadSimpleField[ReadableProperty](ctx, "propertyList", ReadComplex[ReadableProperty](ReadablePropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetPropertyIdentifier")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'propertyList' field"))
	}
	m.PropertyList = propertyList

	tags, err := ReadSimpleField[OptionalProperty](ctx, "tags", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("BACnetARRAY[N] of BACnetNameValue")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'tags' field"))
	}
	m.Tags = tags

	profileLocation, err := ReadSimpleField[OptionalProperty](ctx, "profileLocation", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileLocation' field"))
	}
	m.ProfileLocation = profileLocation

	profileName, err := ReadSimpleField[OptionalProperty](ctx, "profileName", ReadComplex[OptionalProperty](OptionalPropertyParseWithBufferProducer((string)("CharacterString")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'profileName' field"))
	}
	m.ProfileName = profileName

	if closeErr := readBuffer.CloseContext("AccessRights"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AccessRights")
	}

	return m, nil
}

func (m *_AccessRights) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_AccessRights) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("AccessRights"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AccessRights")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectIdentifier", m.GetObjectIdentifier(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectName", m.GetObjectName(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectName' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "objectType", m.GetObjectType(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'objectType' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "description", m.GetDescription(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'description' field")
	}

	if err := WriteSimpleField[WritableProperty](ctx, "globalIdentifier", m.GetGlobalIdentifier(), WriteComplex[WritableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'globalIdentifier' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "statusFlags", m.GetStatusFlags(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'statusFlags' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "reliability", m.GetReliability(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliability' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "enable", m.GetEnable(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'enable' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "negativeAccessRules", m.GetNegativeAccessRules(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'negativeAccessRules' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "positiveAccessRules", m.GetPositiveAccessRules(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'positiveAccessRules' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "accompaniment", m.GetAccompaniment(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'accompaniment' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "reliabilityEvaluationInhibit", m.GetReliabilityEvaluationInhibit(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'reliabilityEvaluationInhibit' field")
	}

	if err := WriteSimpleField[ReadableProperty](ctx, "propertyList", m.GetPropertyList(), WriteComplex[ReadableProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'propertyList' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "tags", m.GetTags(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'tags' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileLocation", m.GetProfileLocation(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileLocation' field")
	}

	if err := WriteSimpleField[OptionalProperty](ctx, "profileName", m.GetProfileName(), WriteComplex[OptionalProperty](writeBuffer)); err != nil {
		return errors.Wrap(err, "Error serializing 'profileName' field")
	}

	if popErr := writeBuffer.PopContext("AccessRights"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AccessRights")
	}
	return nil
}

func (m *_AccessRights) IsAccessRights() {}

func (m *_AccessRights) DeepCopy() any {
	return m.deepCopy()
}

func (m *_AccessRights) deepCopy() *_AccessRights {
	if m == nil {
		return nil
	}
	_AccessRightsCopy := &_AccessRights{
		m.ObjectIdentifier.DeepCopy().(ReadableProperty),
		m.ObjectName.DeepCopy().(ReadableProperty),
		m.ObjectType.DeepCopy().(ReadableProperty),
		m.Description.DeepCopy().(OptionalProperty),
		m.GlobalIdentifier.DeepCopy().(WritableProperty),
		m.StatusFlags.DeepCopy().(ReadableProperty),
		m.Reliability.DeepCopy().(ReadableProperty),
		m.Enable.DeepCopy().(ReadableProperty),
		m.NegativeAccessRules.DeepCopy().(ReadableProperty),
		m.PositiveAccessRules.DeepCopy().(ReadableProperty),
		m.Accompaniment.DeepCopy().(OptionalProperty),
		m.ReliabilityEvaluationInhibit.DeepCopy().(OptionalProperty),
		m.PropertyList.DeepCopy().(ReadableProperty),
		m.Tags.DeepCopy().(OptionalProperty),
		m.ProfileLocation.DeepCopy().(OptionalProperty),
		m.ProfileName.DeepCopy().(OptionalProperty),
	}
	return _AccessRightsCopy
}

func (m *_AccessRights) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
