/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// SysexCommand is the corresponding interface of SysexCommand
type SysexCommand interface {
	SysexCommandContract
	SysexCommandRequirements
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	// IsSysexCommand is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsSysexCommand()
	// CreateBuilder creates a SysexCommandBuilder
	CreateSysexCommandBuilder() SysexCommandBuilder
}

// SysexCommandContract provides a set of functions which can be overwritten by a sub struct
type SysexCommandContract interface {
	// IsSysexCommand is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsSysexCommand()
	// CreateBuilder creates a SysexCommandBuilder
	CreateSysexCommandBuilder() SysexCommandBuilder
}

// SysexCommandRequirements provides a set of functions which need to be implemented by a sub struct
type SysexCommandRequirements interface {
	GetLengthInBits(ctx context.Context) uint16
	GetLengthInBytes(ctx context.Context) uint16
	// GetCommandType returns CommandType (discriminator field)
	GetCommandType() uint8
	// GetResponse returns Response (discriminator field)
	GetResponse() bool
}

// _SysexCommand is the data-structure of this message
type _SysexCommand struct {
	_SubType SysexCommand
}

var _ SysexCommandContract = (*_SysexCommand)(nil)

// NewSysexCommand factory function for _SysexCommand
func NewSysexCommand() *_SysexCommand {
	return &_SysexCommand{}
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// SysexCommandBuilder is a builder for SysexCommand
type SysexCommandBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields() SysexCommandBuilder
	// Build builds the SysexCommand or returns an error if something is wrong
	Build() (SysexCommandContract, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() SysexCommandContract
}

// NewSysexCommandBuilder() creates a SysexCommandBuilder
func NewSysexCommandBuilder() SysexCommandBuilder {
	return &_SysexCommandBuilder{_SysexCommand: new(_SysexCommand)}
}

type _SysexCommandBuilder struct {
	*_SysexCommand

	err *utils.MultiError
}

var _ (SysexCommandBuilder) = (*_SysexCommandBuilder)(nil)

func (m *_SysexCommandBuilder) WithMandatoryFields() SysexCommandBuilder {
	return m
}

func (m *_SysexCommandBuilder) Build() (SysexCommandContract, error) {
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._SysexCommand.deepCopy(), nil
}

func (m *_SysexCommandBuilder) MustBuild() SysexCommandContract {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_SysexCommandBuilder) DeepCopy() any {
	return m.CreateSysexCommandBuilder()
}

// CreateSysexCommandBuilder creates a SysexCommandBuilder
func (m *_SysexCommand) CreateSysexCommandBuilder() SysexCommandBuilder {
	if m == nil {
		return NewSysexCommandBuilder()
	}
	return &_SysexCommandBuilder{_SysexCommand: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastSysexCommand(structType any) SysexCommand {
	if casted, ok := structType.(SysexCommand); ok {
		return casted
	}
	if casted, ok := structType.(*SysexCommand); ok {
		return *casted
	}
	return nil
}

func (m *_SysexCommand) GetTypeName() string {
	return "SysexCommand"
}

func (m *_SysexCommand) getLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (commandType)
	lengthInBits += 8

	return lengthInBits
}

func (m *_SysexCommand) GetLengthInBytes(ctx context.Context) uint16 {
	return m._SubType.GetLengthInBits(ctx) / 8
}

func SysexCommandParse[T SysexCommand](ctx context.Context, theBytes []byte, response bool) (T, error) {
	return SysexCommandParseWithBuffer[T](ctx, utils.NewReadBufferByteBased(theBytes), response)
}

func SysexCommandParseWithBufferProducer[T SysexCommand](response bool) func(ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (T, error) {
		v, err := SysexCommandParseWithBuffer[T](ctx, readBuffer, response)
		if err != nil {
			var zero T
			return zero, err
		}
		return v, nil
	}
}

func SysexCommandParseWithBuffer[T SysexCommand](ctx context.Context, readBuffer utils.ReadBuffer, response bool) (T, error) {
	v, err := (&_SysexCommand{}).parse(ctx, readBuffer, response)
	if err != nil {
		var zero T
		return zero, err
	}
	vc, ok := v.(T)
	if !ok {
		var zero T
		return zero, errors.Errorf("Unexpected type %T. Expected type %T", v, *new(T))
	}
	return vc, nil
}

func (m *_SysexCommand) parse(ctx context.Context, readBuffer utils.ReadBuffer, response bool) (__sysexCommand SysexCommand, err error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("SysexCommand"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for SysexCommand")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	commandType, err := ReadDiscriminatorField[uint8](ctx, "commandType", ReadUnsignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'commandType' field"))
	}

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _child SysexCommand
	switch {
	case commandType == 0x00: // SysexCommandExtendedId
		if _child, err = new(_SysexCommandExtendedId).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandExtendedId for type-switch of SysexCommand")
		}
	case commandType == 0x69 && response == bool(false): // SysexCommandAnalogMappingQueryRequest
		if _child, err = new(_SysexCommandAnalogMappingQueryRequest).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandAnalogMappingQueryRequest for type-switch of SysexCommand")
		}
	case commandType == 0x69 && response == bool(true): // SysexCommandAnalogMappingQueryResponse
		if _child, err = new(_SysexCommandAnalogMappingQueryResponse).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandAnalogMappingQueryResponse for type-switch of SysexCommand")
		}
	case commandType == 0x6A: // SysexCommandAnalogMappingResponse
		if _child, err = new(_SysexCommandAnalogMappingResponse).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandAnalogMappingResponse for type-switch of SysexCommand")
		}
	case commandType == 0x6B: // SysexCommandCapabilityQuery
		if _child, err = new(_SysexCommandCapabilityQuery).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandCapabilityQuery for type-switch of SysexCommand")
		}
	case commandType == 0x6C: // SysexCommandCapabilityResponse
		if _child, err = new(_SysexCommandCapabilityResponse).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandCapabilityResponse for type-switch of SysexCommand")
		}
	case commandType == 0x6D: // SysexCommandPinStateQuery
		if _child, err = new(_SysexCommandPinStateQuery).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandPinStateQuery for type-switch of SysexCommand")
		}
	case commandType == 0x6E: // SysexCommandPinStateResponse
		if _child, err = new(_SysexCommandPinStateResponse).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandPinStateResponse for type-switch of SysexCommand")
		}
	case commandType == 0x6F: // SysexCommandExtendedAnalog
		if _child, err = new(_SysexCommandExtendedAnalog).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandExtendedAnalog for type-switch of SysexCommand")
		}
	case commandType == 0x71: // SysexCommandStringData
		if _child, err = new(_SysexCommandStringData).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandStringData for type-switch of SysexCommand")
		}
	case commandType == 0x79 && response == bool(false): // SysexCommandReportFirmwareRequest
		if _child, err = new(_SysexCommandReportFirmwareRequest).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandReportFirmwareRequest for type-switch of SysexCommand")
		}
	case commandType == 0x79 && response == bool(true): // SysexCommandReportFirmwareResponse
		if _child, err = new(_SysexCommandReportFirmwareResponse).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandReportFirmwareResponse for type-switch of SysexCommand")
		}
	case commandType == 0x7A: // SysexCommandSamplingInterval
		if _child, err = new(_SysexCommandSamplingInterval).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandSamplingInterval for type-switch of SysexCommand")
		}
	case commandType == 0x7E: // SysexCommandSysexNonRealtime
		if _child, err = new(_SysexCommandSysexNonRealtime).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandSysexNonRealtime for type-switch of SysexCommand")
		}
	case commandType == 0x7F: // SysexCommandSysexRealtime
		if _child, err = new(_SysexCommandSysexRealtime).parse(ctx, readBuffer, m, response); err != nil {
			return nil, errors.Wrap(err, "Error parsing sub-type SysexCommandSysexRealtime for type-switch of SysexCommand")
		}
	default:
		return nil, errors.Errorf("Unmapped type for parameters [commandType=%v, response=%v]", commandType, response)
	}

	if closeErr := readBuffer.CloseContext("SysexCommand"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for SysexCommand")
	}

	return _child, nil
}

func (pm *_SysexCommand) serializeParent(ctx context.Context, writeBuffer utils.WriteBuffer, child SysexCommand, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pushErr := writeBuffer.PushContext("SysexCommand"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for SysexCommand")
	}

	if err := WriteDiscriminatorField(ctx, "commandType", m.GetCommandType(), WriteUnsignedByte(writeBuffer, 8)); err != nil {
		return errors.Wrap(err, "Error serializing 'commandType' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("SysexCommand"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for SysexCommand")
	}
	return nil
}

func (m *_SysexCommand) IsSysexCommand() {}

func (m *_SysexCommand) DeepCopy() any {
	return m.deepCopy()
}

func (m *_SysexCommand) deepCopy() *_SysexCommand {
	if m == nil {
		return nil
	}
	_SysexCommandCopy := &_SysexCommand{
		nil, // will be set by child
	}
	return _SysexCommandCopy
}
