/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// UnConnectedDataItem is the corresponding interface of UnConnectedDataItem
type UnConnectedDataItem interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	TypeId
	// GetService returns Service (property field)
	GetService() CipService
	// IsUnConnectedDataItem is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsUnConnectedDataItem()
	// CreateBuilder creates a UnConnectedDataItemBuilder
	CreateUnConnectedDataItemBuilder() UnConnectedDataItemBuilder
}

// _UnConnectedDataItem is the data-structure of this message
type _UnConnectedDataItem struct {
	TypeIdContract
	Service CipService
}

var _ UnConnectedDataItem = (*_UnConnectedDataItem)(nil)
var _ TypeIdRequirements = (*_UnConnectedDataItem)(nil)

// NewUnConnectedDataItem factory function for _UnConnectedDataItem
func NewUnConnectedDataItem(service CipService) *_UnConnectedDataItem {
	if service == nil {
		panic("service of type CipService for UnConnectedDataItem must not be nil")
	}
	_result := &_UnConnectedDataItem{
		TypeIdContract: NewTypeId(),
		Service:        service,
	}
	_result.TypeIdContract.(*_TypeId)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// UnConnectedDataItemBuilder is a builder for UnConnectedDataItem
type UnConnectedDataItemBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(service CipService) UnConnectedDataItemBuilder
	// WithService adds Service (property field)
	WithService(CipService) UnConnectedDataItemBuilder
	// Build builds the UnConnectedDataItem or returns an error if something is wrong
	Build() (UnConnectedDataItem, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() UnConnectedDataItem
}

// NewUnConnectedDataItemBuilder() creates a UnConnectedDataItemBuilder
func NewUnConnectedDataItemBuilder() UnConnectedDataItemBuilder {
	return &_UnConnectedDataItemBuilder{_UnConnectedDataItem: new(_UnConnectedDataItem)}
}

type _UnConnectedDataItemBuilder struct {
	*_UnConnectedDataItem

	err *utils.MultiError
}

var _ (UnConnectedDataItemBuilder) = (*_UnConnectedDataItemBuilder)(nil)

func (m *_UnConnectedDataItemBuilder) WithMandatoryFields(service CipService) UnConnectedDataItemBuilder {
	return m.WithService(service)
}

func (m *_UnConnectedDataItemBuilder) WithService(service CipService) UnConnectedDataItemBuilder {
	m.Service = service
	return m
}

func (m *_UnConnectedDataItemBuilder) Build() (UnConnectedDataItem, error) {
	if m.Service == nil {
		if m.err == nil {
			m.err = new(utils.MultiError)
		}
		m.err.Append(errors.New("mandatory field 'service' not set"))
	}
	if m.err != nil {
		return nil, errors.Wrap(m.err, "error occurred during build")
	}
	return m._UnConnectedDataItem.deepCopy(), nil
}

func (m *_UnConnectedDataItemBuilder) MustBuild() UnConnectedDataItem {
	build, err := m.Build()
	if err != nil {
		panic(err)
	}
	return build
}

func (m *_UnConnectedDataItemBuilder) DeepCopy() any {
	return m.CreateUnConnectedDataItemBuilder()
}

// CreateUnConnectedDataItemBuilder creates a UnConnectedDataItemBuilder
func (m *_UnConnectedDataItem) CreateUnConnectedDataItemBuilder() UnConnectedDataItemBuilder {
	if m == nil {
		return NewUnConnectedDataItemBuilder()
	}
	return &_UnConnectedDataItemBuilder{_UnConnectedDataItem: m.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_UnConnectedDataItem) GetId() uint16 {
	return 0x00B2
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_UnConnectedDataItem) GetParent() TypeIdContract {
	return m.TypeIdContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_UnConnectedDataItem) GetService() CipService {
	return m.Service
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastUnConnectedDataItem(structType any) UnConnectedDataItem {
	if casted, ok := structType.(UnConnectedDataItem); ok {
		return casted
	}
	if casted, ok := structType.(*UnConnectedDataItem); ok {
		return *casted
	}
	return nil
}

func (m *_UnConnectedDataItem) GetTypeName() string {
	return "UnConnectedDataItem"
}

func (m *_UnConnectedDataItem) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.TypeIdContract.(*_TypeId).getLengthInBits(ctx))

	// Implicit Field (packetSize)
	lengthInBits += 16

	// Simple field (service)
	lengthInBits += m.Service.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_UnConnectedDataItem) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_UnConnectedDataItem) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_TypeId) (__unConnectedDataItem UnConnectedDataItem, err error) {
	m.TypeIdContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("UnConnectedDataItem"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for UnConnectedDataItem")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	packetSize, err := ReadImplicitField[uint16](ctx, "packetSize", ReadUnsignedShort(readBuffer, uint8(16)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'packetSize' field"))
	}
	_ = packetSize

	service, err := ReadSimpleField[CipService](ctx, "service", ReadComplex[CipService](CipServiceParseWithBufferProducer[CipService]((bool)(bool(false)), (uint16)(packetSize)), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'service' field"))
	}
	m.Service = service

	if closeErr := readBuffer.CloseContext("UnConnectedDataItem"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for UnConnectedDataItem")
	}

	return m, nil
}

func (m *_UnConnectedDataItem) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_UnConnectedDataItem) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("UnConnectedDataItem"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for UnConnectedDataItem")
		}
		packetSize := uint16(m.GetService().GetLengthInBytes(ctx))
		if err := WriteImplicitField(ctx, "packetSize", packetSize, WriteUnsignedShort(writeBuffer, 16)); err != nil {
			return errors.Wrap(err, "Error serializing 'packetSize' field")
		}

		if err := WriteSimpleField[CipService](ctx, "service", m.GetService(), WriteComplex[CipService](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'service' field")
		}

		if popErr := writeBuffer.PopContext("UnConnectedDataItem"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for UnConnectedDataItem")
		}
		return nil
	}
	return m.TypeIdContract.(*_TypeId).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_UnConnectedDataItem) IsUnConnectedDataItem() {}

func (m *_UnConnectedDataItem) DeepCopy() any {
	return m.deepCopy()
}

func (m *_UnConnectedDataItem) deepCopy() *_UnConnectedDataItem {
	if m == nil {
		return nil
	}
	_UnConnectedDataItemCopy := &_UnConnectedDataItem{
		m.TypeIdContract.(*_TypeId).deepCopy(),
		m.Service.DeepCopy().(CipService),
	}
	m.TypeIdContract.(*_TypeId)._SubType = m
	return _UnConnectedDataItemCopy
}

func (m *_UnConnectedDataItem) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
