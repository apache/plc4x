/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// SetAttributeAllRequest is the corresponding interface of SetAttributeAllRequest
type SetAttributeAllRequest interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	CipService
	// IsSetAttributeAllRequest is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsSetAttributeAllRequest()
}

// _SetAttributeAllRequest is the data-structure of this message
type _SetAttributeAllRequest struct {
	CipServiceContract
}

var _ SetAttributeAllRequest = (*_SetAttributeAllRequest)(nil)
var _ CipServiceRequirements = (*_SetAttributeAllRequest)(nil)

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_SetAttributeAllRequest) GetService() uint8 {
	return 0x02
}

func (m *_SetAttributeAllRequest) GetResponse() bool {
	return bool(false)
}

func (m *_SetAttributeAllRequest) GetConnected() bool {
	return false
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_SetAttributeAllRequest) GetParent() CipServiceContract {
	return m.CipServiceContract
}

// NewSetAttributeAllRequest factory function for _SetAttributeAllRequest
func NewSetAttributeAllRequest(serviceLen uint16) *_SetAttributeAllRequest {
	_result := &_SetAttributeAllRequest{
		CipServiceContract: NewCipService(serviceLen),
	}
	_result.CipServiceContract.(*_CipService)._SubType = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastSetAttributeAllRequest(structType any) SetAttributeAllRequest {
	if casted, ok := structType.(SetAttributeAllRequest); ok {
		return casted
	}
	if casted, ok := structType.(*SetAttributeAllRequest); ok {
		return *casted
	}
	return nil
}

func (m *_SetAttributeAllRequest) GetTypeName() string {
	return "SetAttributeAllRequest"
}

func (m *_SetAttributeAllRequest) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.CipServiceContract.(*_CipService).getLengthInBits(ctx))

	return lengthInBits
}

func (m *_SetAttributeAllRequest) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_SetAttributeAllRequest) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_CipService, connected bool, serviceLen uint16) (__setAttributeAllRequest SetAttributeAllRequest, err error) {
	m.CipServiceContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("SetAttributeAllRequest"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for SetAttributeAllRequest")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	if closeErr := readBuffer.CloseContext("SetAttributeAllRequest"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for SetAttributeAllRequest")
	}

	return m, nil
}

func (m *_SetAttributeAllRequest) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_SetAttributeAllRequest) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("SetAttributeAllRequest"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for SetAttributeAllRequest")
		}

		if popErr := writeBuffer.PopContext("SetAttributeAllRequest"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for SetAttributeAllRequest")
		}
		return nil
	}
	return m.CipServiceContract.(*_CipService).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_SetAttributeAllRequest) IsSetAttributeAllRequest() {}

func (m *_SetAttributeAllRequest) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
