/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// ModbusPDUReadCoilsResponse is the corresponding interface of ModbusPDUReadCoilsResponse
type ModbusPDUReadCoilsResponse interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	utils.Copyable
	ModbusPDU
	// GetValue returns Value (property field)
	GetValue() []byte
	// IsModbusPDUReadCoilsResponse is a marker method to prevent unintentional type checks (interfaces of same signature)
	IsModbusPDUReadCoilsResponse()
	// CreateBuilder creates a ModbusPDUReadCoilsResponseBuilder
	CreateModbusPDUReadCoilsResponseBuilder() ModbusPDUReadCoilsResponseBuilder
}

// _ModbusPDUReadCoilsResponse is the data-structure of this message
type _ModbusPDUReadCoilsResponse struct {
	ModbusPDUContract
	Value []byte
}

var _ ModbusPDUReadCoilsResponse = (*_ModbusPDUReadCoilsResponse)(nil)
var _ ModbusPDURequirements = (*_ModbusPDUReadCoilsResponse)(nil)

// NewModbusPDUReadCoilsResponse factory function for _ModbusPDUReadCoilsResponse
func NewModbusPDUReadCoilsResponse(value []byte) *_ModbusPDUReadCoilsResponse {
	_result := &_ModbusPDUReadCoilsResponse{
		ModbusPDUContract: NewModbusPDU(),
		Value:             value,
	}
	_result.ModbusPDUContract.(*_ModbusPDU)._SubType = _result
	return _result
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Builder
///////////////////////

// ModbusPDUReadCoilsResponseBuilder is a builder for ModbusPDUReadCoilsResponse
type ModbusPDUReadCoilsResponseBuilder interface {
	utils.Copyable
	// WithMandatoryFields adds all mandatory fields (convenience for using multiple builder calls)
	WithMandatoryFields(value []byte) ModbusPDUReadCoilsResponseBuilder
	// WithValue adds Value (property field)
	WithValue(...byte) ModbusPDUReadCoilsResponseBuilder
	// Build builds the ModbusPDUReadCoilsResponse or returns an error if something is wrong
	Build() (ModbusPDUReadCoilsResponse, error)
	// MustBuild does the same as Build but panics on error
	MustBuild() ModbusPDUReadCoilsResponse
}

// NewModbusPDUReadCoilsResponseBuilder() creates a ModbusPDUReadCoilsResponseBuilder
func NewModbusPDUReadCoilsResponseBuilder() ModbusPDUReadCoilsResponseBuilder {
	return &_ModbusPDUReadCoilsResponseBuilder{_ModbusPDUReadCoilsResponse: new(_ModbusPDUReadCoilsResponse)}
}

type _ModbusPDUReadCoilsResponseBuilder struct {
	*_ModbusPDUReadCoilsResponse

	parentBuilder *_ModbusPDUBuilder

	err *utils.MultiError
}

var _ (ModbusPDUReadCoilsResponseBuilder) = (*_ModbusPDUReadCoilsResponseBuilder)(nil)

func (b *_ModbusPDUReadCoilsResponseBuilder) setParent(contract ModbusPDUContract) {
	b.ModbusPDUContract = contract
}

func (b *_ModbusPDUReadCoilsResponseBuilder) WithMandatoryFields(value []byte) ModbusPDUReadCoilsResponseBuilder {
	return b.WithValue(value...)
}

func (b *_ModbusPDUReadCoilsResponseBuilder) WithValue(value ...byte) ModbusPDUReadCoilsResponseBuilder {
	b.Value = value
	return b
}

func (b *_ModbusPDUReadCoilsResponseBuilder) Build() (ModbusPDUReadCoilsResponse, error) {
	if b.err != nil {
		return nil, errors.Wrap(b.err, "error occurred during build")
	}
	return b._ModbusPDUReadCoilsResponse.deepCopy(), nil
}

func (b *_ModbusPDUReadCoilsResponseBuilder) MustBuild() ModbusPDUReadCoilsResponse {
	build, err := b.Build()
	if err != nil {
		panic(err)
	}
	return build
}

// Done is used to finish work on this child and return to the parent builder
func (b *_ModbusPDUReadCoilsResponseBuilder) Done() ModbusPDUBuilder {
	return b.parentBuilder
}

func (b *_ModbusPDUReadCoilsResponseBuilder) buildForModbusPDU() (ModbusPDU, error) {
	return b.Build()
}

func (b *_ModbusPDUReadCoilsResponseBuilder) DeepCopy() any {
	_copy := b.CreateModbusPDUReadCoilsResponseBuilder().(*_ModbusPDUReadCoilsResponseBuilder)
	if b.err != nil {
		_copy.err = b.err.DeepCopy().(*utils.MultiError)
	}
	return _copy
}

// CreateModbusPDUReadCoilsResponseBuilder creates a ModbusPDUReadCoilsResponseBuilder
func (b *_ModbusPDUReadCoilsResponse) CreateModbusPDUReadCoilsResponseBuilder() ModbusPDUReadCoilsResponseBuilder {
	if b == nil {
		return NewModbusPDUReadCoilsResponseBuilder()
	}
	return &_ModbusPDUReadCoilsResponseBuilder{_ModbusPDUReadCoilsResponse: b.deepCopy()}
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_ModbusPDUReadCoilsResponse) GetErrorFlag() bool {
	return bool(false)
}

func (m *_ModbusPDUReadCoilsResponse) GetFunctionFlag() uint8 {
	return 0x01
}

func (m *_ModbusPDUReadCoilsResponse) GetResponse() bool {
	return bool(true)
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_ModbusPDUReadCoilsResponse) GetParent() ModbusPDUContract {
	return m.ModbusPDUContract
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_ModbusPDUReadCoilsResponse) GetValue() []byte {
	return m.Value
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Deprecated: use the interface for direct cast
func CastModbusPDUReadCoilsResponse(structType any) ModbusPDUReadCoilsResponse {
	if casted, ok := structType.(ModbusPDUReadCoilsResponse); ok {
		return casted
	}
	if casted, ok := structType.(*ModbusPDUReadCoilsResponse); ok {
		return *casted
	}
	return nil
}

func (m *_ModbusPDUReadCoilsResponse) GetTypeName() string {
	return "ModbusPDUReadCoilsResponse"
}

func (m *_ModbusPDUReadCoilsResponse) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.ModbusPDUContract.(*_ModbusPDU).GetLengthInBits(ctx))

	// Implicit Field (byteCount)
	lengthInBits += 8

	// Array field
	if len(m.Value) > 0 {
		lengthInBits += 8 * uint16(len(m.Value))
	}

	return lengthInBits
}

func (m *_ModbusPDUReadCoilsResponse) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func (m *_ModbusPDUReadCoilsResponse) parse(ctx context.Context, readBuffer utils.ReadBuffer, parent *_ModbusPDU, response bool) (__modbusPDUReadCoilsResponse ModbusPDUReadCoilsResponse, err error) {
	m.ModbusPDUContract = parent
	parent._SubType = m
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("ModbusPDUReadCoilsResponse"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ModbusPDUReadCoilsResponse")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	byteCount, err := ReadImplicitField[uint8](ctx, "byteCount", ReadUnsignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'byteCount' field"))
	}
	_ = byteCount

	value, err := readBuffer.ReadByteArray("value", int(byteCount))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'value' field"))
	}
	m.Value = value

	if closeErr := readBuffer.CloseContext("ModbusPDUReadCoilsResponse"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ModbusPDUReadCoilsResponse")
	}

	return m, nil
}

func (m *_ModbusPDUReadCoilsResponse) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_ModbusPDUReadCoilsResponse) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("ModbusPDUReadCoilsResponse"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for ModbusPDUReadCoilsResponse")
		}
		byteCount := uint8(uint8(len(m.GetValue())))
		if err := WriteImplicitField(ctx, "byteCount", byteCount, WriteUnsignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'byteCount' field")
		}

		if err := WriteByteArrayField(ctx, "value", m.GetValue(), WriteByteArray(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'value' field")
		}

		if popErr := writeBuffer.PopContext("ModbusPDUReadCoilsResponse"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for ModbusPDUReadCoilsResponse")
		}
		return nil
	}
	return m.ModbusPDUContract.(*_ModbusPDU).serializeParent(ctx, writeBuffer, m, ser)
}

func (m *_ModbusPDUReadCoilsResponse) IsModbusPDUReadCoilsResponse() {}

func (m *_ModbusPDUReadCoilsResponse) DeepCopy() any {
	return m.deepCopy()
}

func (m *_ModbusPDUReadCoilsResponse) deepCopy() *_ModbusPDUReadCoilsResponse {
	if m == nil {
		return nil
	}
	_ModbusPDUReadCoilsResponseCopy := &_ModbusPDUReadCoilsResponse{
		m.ModbusPDUContract.(*_ModbusPDU).deepCopy(),
		utils.DeepCopySlice[byte, byte](m.Value),
	}
	m.ModbusPDUContract.(*_ModbusPDU)._SubType = m
	return _ModbusPDUReadCoilsResponseCopy
}

func (m *_ModbusPDUReadCoilsResponse) String() string {
	if m == nil {
		return "<nil>"
	}
	wb := utils.NewWriteBufferBoxBased(
		utils.WithWriteBufferBoxBasedMergeSingleBoxes(),
		utils.WithWriteBufferBoxBasedOmitEmptyBoxes(),
		utils.WithWriteBufferBoxBasedPrintPosLengthFooter(),
	)
	if err := wb.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return wb.GetBox().String()
}
