/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.27.1. DO NOT EDIT.

package model

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"

	values "github.com/apache/plc4x/plc4go/pkg/api/values"
)

// MockPlcDiscoveryItem is an autogenerated mock type for the PlcDiscoveryItem type
type MockPlcDiscoveryItem struct {
	mock.Mock
}

type MockPlcDiscoveryItem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlcDiscoveryItem) EXPECT() *MockPlcDiscoveryItem_Expecter {
	return &MockPlcDiscoveryItem_Expecter{mock: &_m.Mock}
}

// GetAttributes provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetAttributes() map[string]values.PlcValue {
	ret := _m.Called()

	var r0 map[string]values.PlcValue
	if rf, ok := ret.Get(0).(func() map[string]values.PlcValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]values.PlcValue)
		}
	}

	return r0
}

// MockPlcDiscoveryItem_GetAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttributes'
type MockPlcDiscoveryItem_GetAttributes_Call struct {
	*mock.Call
}

// GetAttributes is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetAttributes() *MockPlcDiscoveryItem_GetAttributes_Call {
	return &MockPlcDiscoveryItem_GetAttributes_Call{Call: _e.mock.On("GetAttributes")}
}

func (_c *MockPlcDiscoveryItem_GetAttributes_Call) Run(run func()) *MockPlcDiscoveryItem_GetAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetAttributes_Call) Return(_a0 map[string]values.PlcValue) *MockPlcDiscoveryItem_GetAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetAttributes_Call) RunAndReturn(run func() map[string]values.PlcValue) *MockPlcDiscoveryItem_GetAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionUrl provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetConnectionUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPlcDiscoveryItem_GetConnectionUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionUrl'
type MockPlcDiscoveryItem_GetConnectionUrl_Call struct {
	*mock.Call
}

// GetConnectionUrl is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetConnectionUrl() *MockPlcDiscoveryItem_GetConnectionUrl_Call {
	return &MockPlcDiscoveryItem_GetConnectionUrl_Call{Call: _e.mock.On("GetConnectionUrl")}
}

func (_c *MockPlcDiscoveryItem_GetConnectionUrl_Call) Run(run func()) *MockPlcDiscoveryItem_GetConnectionUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetConnectionUrl_Call) Return(_a0 string) *MockPlcDiscoveryItem_GetConnectionUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetConnectionUrl_Call) RunAndReturn(run func() string) *MockPlcDiscoveryItem_GetConnectionUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPlcDiscoveryItem_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockPlcDiscoveryItem_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetName() *MockPlcDiscoveryItem_GetName_Call {
	return &MockPlcDiscoveryItem_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockPlcDiscoveryItem_GetName_Call) Run(run func()) *MockPlcDiscoveryItem_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetName_Call) Return(_a0 string) *MockPlcDiscoveryItem_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetName_Call) RunAndReturn(run func() string) *MockPlcDiscoveryItem_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetOptions() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// MockPlcDiscoveryItem_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockPlcDiscoveryItem_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetOptions() *MockPlcDiscoveryItem_GetOptions_Call {
	return &MockPlcDiscoveryItem_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockPlcDiscoveryItem_GetOptions_Call) Run(run func()) *MockPlcDiscoveryItem_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetOptions_Call) Return(_a0 map[string][]string) *MockPlcDiscoveryItem_GetOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetOptions_Call) RunAndReturn(run func() map[string][]string) *MockPlcDiscoveryItem_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolCode provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetProtocolCode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPlcDiscoveryItem_GetProtocolCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolCode'
type MockPlcDiscoveryItem_GetProtocolCode_Call struct {
	*mock.Call
}

// GetProtocolCode is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetProtocolCode() *MockPlcDiscoveryItem_GetProtocolCode_Call {
	return &MockPlcDiscoveryItem_GetProtocolCode_Call{Call: _e.mock.On("GetProtocolCode")}
}

func (_c *MockPlcDiscoveryItem_GetProtocolCode_Call) Run(run func()) *MockPlcDiscoveryItem_GetProtocolCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetProtocolCode_Call) Return(_a0 string) *MockPlcDiscoveryItem_GetProtocolCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetProtocolCode_Call) RunAndReturn(run func() string) *MockPlcDiscoveryItem_GetProtocolCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransportCode provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetTransportCode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPlcDiscoveryItem_GetTransportCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransportCode'
type MockPlcDiscoveryItem_GetTransportCode_Call struct {
	*mock.Call
}

// GetTransportCode is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetTransportCode() *MockPlcDiscoveryItem_GetTransportCode_Call {
	return &MockPlcDiscoveryItem_GetTransportCode_Call{Call: _e.mock.On("GetTransportCode")}
}

func (_c *MockPlcDiscoveryItem_GetTransportCode_Call) Run(run func()) *MockPlcDiscoveryItem_GetTransportCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetTransportCode_Call) Return(_a0 string) *MockPlcDiscoveryItem_GetTransportCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetTransportCode_Call) RunAndReturn(run func() string) *MockPlcDiscoveryItem_GetTransportCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransportUrl provides a mock function with given fields:
func (_m *MockPlcDiscoveryItem) GetTransportUrl() url.URL {
	ret := _m.Called()

	var r0 url.URL
	if rf, ok := ret.Get(0).(func() url.URL); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(url.URL)
	}

	return r0
}

// MockPlcDiscoveryItem_GetTransportUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransportUrl'
type MockPlcDiscoveryItem_GetTransportUrl_Call struct {
	*mock.Call
}

// GetTransportUrl is a helper method to define mock.On call
func (_e *MockPlcDiscoveryItem_Expecter) GetTransportUrl() *MockPlcDiscoveryItem_GetTransportUrl_Call {
	return &MockPlcDiscoveryItem_GetTransportUrl_Call{Call: _e.mock.On("GetTransportUrl")}
}

func (_c *MockPlcDiscoveryItem_GetTransportUrl_Call) Run(run func()) *MockPlcDiscoveryItem_GetTransportUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlcDiscoveryItem_GetTransportUrl_Call) Return(_a0 url.URL) *MockPlcDiscoveryItem_GetTransportUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlcDiscoveryItem_GetTransportUrl_Call) RunAndReturn(run func() url.URL) *MockPlcDiscoveryItem_GetTransportUrl_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockPlcDiscoveryItem interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPlcDiscoveryItem creates a new instance of MockPlcDiscoveryItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPlcDiscoveryItem(t mockConstructorTestingTNewMockPlcDiscoveryItem) *MockPlcDiscoveryItem {
	mock := &MockPlcDiscoveryItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
