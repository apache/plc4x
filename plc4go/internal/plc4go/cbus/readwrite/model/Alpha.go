/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type Alpha struct {
	Character byte
}

// The corresponding interface
type IAlpha interface {
	// GetCharacter returns Character (property field)
	GetCharacter() byte
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *Alpha) GetCharacter() byte {
	return m.Character
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewAlpha factory function for Alpha
func NewAlpha(character byte) *Alpha {
	return &Alpha{Character: character}
}

func CastAlpha(structType interface{}) *Alpha {
	if casted, ok := structType.(Alpha); ok {
		return &casted
	}
	if casted, ok := structType.(*Alpha); ok {
		return casted
	}
	return nil
}

func (m *Alpha) GetTypeName() string {
	return "Alpha"
}

func (m *Alpha) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *Alpha) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (character)
	lengthInBits += 8

	return lengthInBits
}

func (m *Alpha) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func AlphaParse(readBuffer utils.ReadBuffer) (*Alpha, error) {
	if pullErr := readBuffer.PullContext("Alpha"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (character)
	_character, _characterErr := readBuffer.ReadByte("character")
	if _characterErr != nil {
		return nil, errors.Wrap(_characterErr, "Error parsing 'character' field")
	}
	character := _character

	if closeErr := readBuffer.CloseContext("Alpha"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewAlpha(character), nil
}

func (m *Alpha) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("Alpha"); pushErr != nil {
		return pushErr
	}

	// Simple Field (character)
	character := byte(m.Character)
	_characterErr := writeBuffer.WriteByte("character", (character))
	if _characterErr != nil {
		return errors.Wrap(_characterErr, "Error serializing 'character' field")
	}

	if popErr := writeBuffer.PopContext("Alpha"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *Alpha) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
