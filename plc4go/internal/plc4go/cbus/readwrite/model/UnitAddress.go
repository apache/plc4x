/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type UnitAddress struct {
	Address byte
}

// The corresponding interface
type IUnitAddress interface {
	// GetAddress returns Address (property field)
	GetAddress() byte
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *UnitAddress) GetAddress() byte {
	return m.Address
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewUnitAddress factory function for UnitAddress
func NewUnitAddress(address byte) *UnitAddress {
	return &UnitAddress{Address: address}
}

func CastUnitAddress(structType interface{}) *UnitAddress {
	if casted, ok := structType.(UnitAddress); ok {
		return &casted
	}
	if casted, ok := structType.(*UnitAddress); ok {
		return casted
	}
	return nil
}

func (m *UnitAddress) GetTypeName() string {
	return "UnitAddress"
}

func (m *UnitAddress) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *UnitAddress) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (address)
	lengthInBits += 8

	return lengthInBits
}

func (m *UnitAddress) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func UnitAddressParse(readBuffer utils.ReadBuffer) (*UnitAddress, error) {
	if pullErr := readBuffer.PullContext("UnitAddress"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (address)
	_address, _addressErr := readBuffer.ReadByte("address")
	if _addressErr != nil {
		return nil, errors.Wrap(_addressErr, "Error parsing 'address' field")
	}
	address := _address

	if closeErr := readBuffer.CloseContext("UnitAddress"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewUnitAddress(address), nil
}

func (m *UnitAddress) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("UnitAddress"); pushErr != nil {
		return pushErr
	}

	// Simple Field (address)
	address := byte(m.Address)
	_addressErr := writeBuffer.WriteByte("address", (address))
	if _addressErr != nil {
		return errors.Wrap(_addressErr, "Error serializing 'address' field")
	}

	if popErr := writeBuffer.PopContext("UnitAddress"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *UnitAddress) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
