/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type Application struct {
	Id byte
}

// The corresponding interface
type IApplication interface {
	// GetId returns Id
	GetId() byte
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for property fields.
///////////////////////////////////////////////////////////
func (m *Application) GetId() byte {
	return m.Id
}

///////////////////////////////////////////////////////////
// Accessors for virtual fields.
///////////////////////////////////////////////////////////

// NewApplication factory function for Application
func NewApplication(id byte) *Application {
	return &Application{Id: id}
}

func CastApplication(structType interface{}) *Application {
	castFunc := func(typ interface{}) *Application {
		if casted, ok := typ.(Application); ok {
			return &casted
		}
		if casted, ok := typ.(*Application); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *Application) GetTypeName() string {
	return "Application"
}

func (m *Application) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *Application) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (id)
	lengthInBits += 8

	return lengthInBits
}

func (m *Application) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ApplicationParse(readBuffer utils.ReadBuffer) (*Application, error) {
	if pullErr := readBuffer.PullContext("Application"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (id)
	_id, _idErr := readBuffer.ReadByte("id")
	if _idErr != nil {
		return nil, errors.Wrap(_idErr, "Error parsing 'id' field")
	}
	id := _id

	if closeErr := readBuffer.CloseContext("Application"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewApplication(id), nil
}

func (m *Application) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("Application"); pushErr != nil {
		return pushErr
	}

	// Simple Field (id)
	id := byte(m.Id)
	_idErr := writeBuffer.WriteByte("id", (id))
	if _idErr != nil {
		return errors.Wrap(_idErr, "Error serializing 'id' field")
	}

	if popErr := writeBuffer.PopContext("Application"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *Application) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
