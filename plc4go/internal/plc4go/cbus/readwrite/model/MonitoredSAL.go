/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// Constant values.
const MonitoredSAL_CR byte = 0x0D
const MonitoredSAL_LF byte = 0x0A

// The data-structure of this message
type MonitoredSAL struct {
	SalType byte
	SalData *SALData
	Child   IMonitoredSALChild
}

// The corresponding interface
type IMonitoredSAL interface {
	// GetSalType returns SalType (property field)
	GetSalType() byte
	// GetSalData returns SalData (property field)
	GetSalData() *SALData
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

type IMonitoredSALParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child IMonitoredSAL, serializeChildFunction func() error) error
	GetTypeName() string
}

type IMonitoredSALChild interface {
	Serialize(writeBuffer utils.WriteBuffer) error
	InitializeParent(parent *MonitoredSAL, salType byte, salData *SALData)
	GetParent() *MonitoredSAL

	GetTypeName() string
	IMonitoredSAL
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *MonitoredSAL) GetSalType() byte {
	return m.SalType
}

func (m *MonitoredSAL) GetSalData() *SALData {
	return m.SalData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////
func (m *MonitoredSAL) GetCr() byte {
	return MonitoredSAL_CR
}

func (m *MonitoredSAL) GetLf() byte {
	return MonitoredSAL_LF
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewMonitoredSAL factory function for MonitoredSAL
func NewMonitoredSAL(salType byte, salData *SALData) *MonitoredSAL {
	return &MonitoredSAL{SalType: salType, SalData: salData}
}

func CastMonitoredSAL(structType interface{}) *MonitoredSAL {
	if casted, ok := structType.(MonitoredSAL); ok {
		return &casted
	}
	if casted, ok := structType.(*MonitoredSAL); ok {
		return casted
	}
	if casted, ok := structType.(IMonitoredSALChild); ok {
		return casted.GetParent()
	}
	return nil
}

func (m *MonitoredSAL) GetTypeName() string {
	return "MonitoredSAL"
}

func (m *MonitoredSAL) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *MonitoredSAL) GetLengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.GetLengthInBits()
}

func (m *MonitoredSAL) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	// Optional Field (salData)
	if m.SalData != nil {
		lengthInBits += (*m.SalData).GetLengthInBits()
	}

	// Const Field (cr)
	lengthInBits += 8

	// Const Field (lf)
	lengthInBits += 8

	return lengthInBits
}

func (m *MonitoredSAL) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func MonitoredSALParse(readBuffer utils.ReadBuffer) (*MonitoredSAL, error) {
	if pullErr := readBuffer.PullContext("MonitoredSAL"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Peek Field (salType)
	currentPos = readBuffer.GetPos()
	salType, _err := readBuffer.ReadByte("salType")
	if _err != nil {
		return nil, errors.Wrap(_err, "Error parsing 'salType' field")
	}

	readBuffer.Reset(currentPos)

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type MonitoredSALChild interface {
		InitializeParent(*MonitoredSAL, byte, *SALData)
		GetParent() *MonitoredSAL
	}
	var _child MonitoredSALChild
	var typeSwitchError error
	switch {
	case salType == 0x05: // MonitoredSALLongFormSmartMode
		_child, typeSwitchError = MonitoredSALLongFormSmartModeParse(readBuffer)
	case true: // MonitoredSALShortFormBasicMode
		_child, typeSwitchError = MonitoredSALShortFormBasicModeParse(readBuffer)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	// Optional Field (salData) (Can be skipped, if a given expression evaluates to false)
	var salData *SALData = nil
	{
		currentPos = readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("salData"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := SALDataParse(readBuffer)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'salData' field")
		default:
			salData = CastSALData(_val)
			if closeErr := readBuffer.CloseContext("salData"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Const Field (cr)
	cr, _crErr := readBuffer.ReadByte("cr")
	if _crErr != nil {
		return nil, errors.Wrap(_crErr, "Error parsing 'cr' field")
	}
	if cr != MonitoredSAL_CR {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", MonitoredSAL_CR) + " but got " + fmt.Sprintf("%d", cr))
	}

	// Const Field (lf)
	lf, _lfErr := readBuffer.ReadByte("lf")
	if _lfErr != nil {
		return nil, errors.Wrap(_lfErr, "Error parsing 'lf' field")
	}
	if lf != MonitoredSAL_LF {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", MonitoredSAL_LF) + " but got " + fmt.Sprintf("%d", lf))
	}

	if closeErr := readBuffer.CloseContext("MonitoredSAL"); closeErr != nil {
		return nil, closeErr
	}

	// Finish initializing
	_child.InitializeParent(_child.GetParent(), salType, salData)
	return _child.GetParent(), nil
}

func (m *MonitoredSAL) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *MonitoredSAL) SerializeParent(writeBuffer utils.WriteBuffer, child IMonitoredSAL, serializeChildFunction func() error) error {
	if pushErr := writeBuffer.PushContext("MonitoredSAL"); pushErr != nil {
		return pushErr
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	// Optional Field (salData) (Can be skipped, if the value is null)
	var salData *SALData = nil
	if m.SalData != nil {
		if pushErr := writeBuffer.PushContext("salData"); pushErr != nil {
			return pushErr
		}
		salData = m.SalData
		_salDataErr := salData.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("salData"); popErr != nil {
			return popErr
		}
		if _salDataErr != nil {
			return errors.Wrap(_salDataErr, "Error serializing 'salData' field")
		}
	}

	// Const Field (cr)
	_crErr := writeBuffer.WriteByte("cr", 0x0D)
	if _crErr != nil {
		return errors.Wrap(_crErr, "Error serializing 'cr' field")
	}

	// Const Field (lf)
	_lfErr := writeBuffer.WriteByte("lf", 0x0A)
	if _lfErr != nil {
		return errors.Wrap(_lfErr, "Error serializing 'lf' field")
	}

	if popErr := writeBuffer.PopContext("MonitoredSAL"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *MonitoredSAL) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
