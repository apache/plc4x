/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type LPollData struct {
	*LDataFrame
	SourceAddress          *KnxAddress
	TargetAddress          []byte
	NumberExpectedPollData uint8
}

// The corresponding interface
type ILPollData interface {
	ILDataFrame
	// GetSourceAddress returns SourceAddress (property field)
	GetSourceAddress() *KnxAddress
	// GetTargetAddress returns TargetAddress (property field)
	GetTargetAddress() []byte
	// GetNumberExpectedPollData returns NumberExpectedPollData (property field)
	GetNumberExpectedPollData() uint8
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////
func (m *LPollData) GetNotAckFrame() bool {
	return bool(true)
}

func (m *LPollData) GetPolling() bool {
	return bool(true)
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *LPollData) InitializeParent(parent *LDataFrame, frameType bool, notRepeated bool, priority CEMIPriority, acknowledgeRequested bool, errorFlag bool) {
	m.LDataFrame.FrameType = frameType
	m.LDataFrame.NotRepeated = notRepeated
	m.LDataFrame.Priority = priority
	m.LDataFrame.AcknowledgeRequested = acknowledgeRequested
	m.LDataFrame.ErrorFlag = errorFlag
}

func (m *LPollData) GetParent() *LDataFrame {
	return m.LDataFrame
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *LPollData) GetSourceAddress() *KnxAddress {
	return m.SourceAddress
}

func (m *LPollData) GetTargetAddress() []byte {
	return m.TargetAddress
}

func (m *LPollData) GetNumberExpectedPollData() uint8 {
	return m.NumberExpectedPollData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewLPollData factory function for LPollData
func NewLPollData(sourceAddress *KnxAddress, targetAddress []byte, numberExpectedPollData uint8, frameType bool, notRepeated bool, priority CEMIPriority, acknowledgeRequested bool, errorFlag bool) *LPollData {
	_result := &LPollData{
		SourceAddress:          sourceAddress,
		TargetAddress:          targetAddress,
		NumberExpectedPollData: numberExpectedPollData,
		LDataFrame:             NewLDataFrame(frameType, notRepeated, priority, acknowledgeRequested, errorFlag),
	}
	_result.Child = _result
	return _result
}

func CastLPollData(structType interface{}) *LPollData {
	if casted, ok := structType.(LPollData); ok {
		return &casted
	}
	if casted, ok := structType.(*LPollData); ok {
		return casted
	}
	if casted, ok := structType.(LDataFrame); ok {
		return CastLPollData(casted.Child)
	}
	if casted, ok := structType.(*LDataFrame); ok {
		return CastLPollData(casted.Child)
	}
	return nil
}

func (m *LPollData) GetTypeName() string {
	return "LPollData"
}

func (m *LPollData) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *LPollData) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (sourceAddress)
	lengthInBits += m.SourceAddress.GetLengthInBits()

	// Array field
	if len(m.TargetAddress) > 0 {
		lengthInBits += 8 * uint16(len(m.TargetAddress))
	}

	// Reserved Field (reserved)
	lengthInBits += 4

	// Simple field (numberExpectedPollData)
	lengthInBits += 6

	return lengthInBits
}

func (m *LPollData) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func LPollDataParse(readBuffer utils.ReadBuffer) (*LPollData, error) {
	if pullErr := readBuffer.PullContext("LPollData"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (sourceAddress)
	if pullErr := readBuffer.PullContext("sourceAddress"); pullErr != nil {
		return nil, pullErr
	}
	_sourceAddress, _sourceAddressErr := KnxAddressParse(readBuffer)
	if _sourceAddressErr != nil {
		return nil, errors.Wrap(_sourceAddressErr, "Error parsing 'sourceAddress' field")
	}
	sourceAddress := CastKnxAddress(_sourceAddress)
	if closeErr := readBuffer.CloseContext("sourceAddress"); closeErr != nil {
		return nil, closeErr
	}
	// Byte Array field (targetAddress)
	numberOfBytestargetAddress := int(uint16(2))
	targetAddress, _readArrayErr := readBuffer.ReadByteArray("targetAddress", numberOfBytestargetAddress)
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing 'targetAddress' field")
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadUint8("reserved", 4)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint8(0x00) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint8(0x00),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Simple Field (numberExpectedPollData)
	_numberExpectedPollData, _numberExpectedPollDataErr := readBuffer.ReadUint8("numberExpectedPollData", 6)
	if _numberExpectedPollDataErr != nil {
		return nil, errors.Wrap(_numberExpectedPollDataErr, "Error parsing 'numberExpectedPollData' field")
	}
	numberExpectedPollData := _numberExpectedPollData

	if closeErr := readBuffer.CloseContext("LPollData"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &LPollData{
		SourceAddress:          CastKnxAddress(sourceAddress),
		TargetAddress:          targetAddress,
		NumberExpectedPollData: numberExpectedPollData,
		LDataFrame:             &LDataFrame{},
	}
	_child.LDataFrame.Child = _child
	return _child, nil
}

func (m *LPollData) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("LPollData"); pushErr != nil {
			return pushErr
		}

		// Simple Field (sourceAddress)
		if pushErr := writeBuffer.PushContext("sourceAddress"); pushErr != nil {
			return pushErr
		}
		_sourceAddressErr := m.SourceAddress.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("sourceAddress"); popErr != nil {
			return popErr
		}
		if _sourceAddressErr != nil {
			return errors.Wrap(_sourceAddressErr, "Error serializing 'sourceAddress' field")
		}

		// Array Field (targetAddress)
		if m.TargetAddress != nil {
			// Byte Array field (targetAddress)
			_writeArrayErr := writeBuffer.WriteByteArray("targetAddress", m.TargetAddress)
			if _writeArrayErr != nil {
				return errors.Wrap(_writeArrayErr, "Error serializing 'targetAddress' field")
			}
		}

		// Reserved Field (reserved)
		{
			_err := writeBuffer.WriteUint8("reserved", 4, uint8(0x00))
			if _err != nil {
				return errors.Wrap(_err, "Error serializing 'reserved' field")
			}
		}

		// Simple Field (numberExpectedPollData)
		numberExpectedPollData := uint8(m.NumberExpectedPollData)
		_numberExpectedPollDataErr := writeBuffer.WriteUint8("numberExpectedPollData", 6, (numberExpectedPollData))
		if _numberExpectedPollDataErr != nil {
			return errors.Wrap(_numberExpectedPollDataErr, "Error serializing 'numberExpectedPollData' field")
		}

		if popErr := writeBuffer.PopContext("LPollData"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *LPollData) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
