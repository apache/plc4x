/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type Apdu struct {
	Numbered bool
	Counter  uint8

	// Arguments.
	DataLength uint8
	Child      IApduChild
}

// The corresponding interface
type IApdu interface {
	// GetControl returns Control (discriminator field)
	GetControl() uint8
	// GetNumbered returns Numbered (property field)
	GetNumbered() bool
	// GetCounter returns Counter (property field)
	GetCounter() uint8
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

type IApduParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child IApdu, serializeChildFunction func() error) error
	GetTypeName() string
}

type IApduChild interface {
	Serialize(writeBuffer utils.WriteBuffer) error
	InitializeParent(parent *Apdu, numbered bool, counter uint8)
	GetParent() *Apdu

	GetTypeName() string
	IApdu
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *Apdu) GetNumbered() bool {
	return m.Numbered
}

func (m *Apdu) GetCounter() uint8 {
	return m.Counter
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewApdu factory function for Apdu
func NewApdu(numbered bool, counter uint8, dataLength uint8) *Apdu {
	return &Apdu{Numbered: numbered, Counter: counter, DataLength: dataLength}
}

func CastApdu(structType interface{}) *Apdu {
	if casted, ok := structType.(Apdu); ok {
		return &casted
	}
	if casted, ok := structType.(*Apdu); ok {
		return casted
	}
	if casted, ok := structType.(IApduChild); ok {
		return casted.GetParent()
	}
	return nil
}

func (m *Apdu) GetTypeName() string {
	return "Apdu"
}

func (m *Apdu) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *Apdu) GetLengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.GetLengthInBits()
}

func (m *Apdu) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (control)
	lengthInBits += 1

	// Simple field (numbered)
	lengthInBits += 1

	// Simple field (counter)
	lengthInBits += 4

	return lengthInBits
}

func (m *Apdu) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ApduParse(readBuffer utils.ReadBuffer, dataLength uint8) (*Apdu, error) {
	if pullErr := readBuffer.PullContext("Apdu"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Discriminator Field (control) (Used as input to a switch field)
	control, _controlErr := readBuffer.ReadUint8("control", 1)
	if _controlErr != nil {
		return nil, errors.Wrap(_controlErr, "Error parsing 'control' field")
	}

	// Simple Field (numbered)
	_numbered, _numberedErr := readBuffer.ReadBit("numbered")
	if _numberedErr != nil {
		return nil, errors.Wrap(_numberedErr, "Error parsing 'numbered' field")
	}
	numbered := _numbered

	// Simple Field (counter)
	_counter, _counterErr := readBuffer.ReadUint8("counter", 4)
	if _counterErr != nil {
		return nil, errors.Wrap(_counterErr, "Error parsing 'counter' field")
	}
	counter := _counter

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type ApduChild interface {
		InitializeParent(*Apdu, bool, uint8)
		GetParent() *Apdu
	}
	var _child ApduChild
	var typeSwitchError error
	switch {
	case control == uint8(1): // ApduControlContainer
		_child, typeSwitchError = ApduControlContainerParse(readBuffer, dataLength)
	case control == uint8(0): // ApduDataContainer
		_child, typeSwitchError = ApduDataContainerParse(readBuffer, dataLength)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := readBuffer.CloseContext("Apdu"); closeErr != nil {
		return nil, closeErr
	}

	// Finish initializing
	_child.InitializeParent(_child.GetParent(), numbered, counter)
	return _child.GetParent(), nil
}

func (m *Apdu) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *Apdu) SerializeParent(writeBuffer utils.WriteBuffer, child IApdu, serializeChildFunction func() error) error {
	if pushErr := writeBuffer.PushContext("Apdu"); pushErr != nil {
		return pushErr
	}

	// Discriminator Field (control) (Used as input to a switch field)
	control := uint8(child.GetControl())
	_controlErr := writeBuffer.WriteUint8("control", 1, (control))

	if _controlErr != nil {
		return errors.Wrap(_controlErr, "Error serializing 'control' field")
	}

	// Simple Field (numbered)
	numbered := bool(m.Numbered)
	_numberedErr := writeBuffer.WriteBit("numbered", (numbered))
	if _numberedErr != nil {
		return errors.Wrap(_numberedErr, "Error serializing 'numbered' field")
	}

	// Simple Field (counter)
	counter := uint8(m.Counter)
	_counterErr := writeBuffer.WriteUint8("counter", 4, (counter))
	if _counterErr != nil {
		return errors.Wrap(_counterErr, "Error serializing 'counter' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("Apdu"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *Apdu) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
