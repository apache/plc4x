/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetUnconfirmedServiceRequestWhoHas struct {
	DeviceInstanceRangeLowLimit  *BACnetComplexTagUnsignedInteger
	DeviceInstanceRangeHighLimit *BACnetComplexTagUnsignedInteger
	ObjectIdentifier             *BACnetComplexTagOctetString
	ObjectName                   *BACnetComplexTagOctetString
	Parent                       *BACnetUnconfirmedServiceRequest
}

// The corresponding interface
type IBACnetUnconfirmedServiceRequestWhoHas interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *BACnetUnconfirmedServiceRequestWhoHas) ServiceChoice() uint8 {
	return 0x07
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) InitializeParent(parent *BACnetUnconfirmedServiceRequest) {
}

func NewBACnetUnconfirmedServiceRequestWhoHas(deviceInstanceRangeLowLimit *BACnetComplexTagUnsignedInteger, deviceInstanceRangeHighLimit *BACnetComplexTagUnsignedInteger, objectIdentifier *BACnetComplexTagOctetString, objectName *BACnetComplexTagOctetString) *BACnetUnconfirmedServiceRequest {
	child := &BACnetUnconfirmedServiceRequestWhoHas{
		DeviceInstanceRangeLowLimit:  deviceInstanceRangeLowLimit,
		DeviceInstanceRangeHighLimit: deviceInstanceRangeHighLimit,
		ObjectIdentifier:             objectIdentifier,
		ObjectName:                   objectName,
		Parent:                       NewBACnetUnconfirmedServiceRequest(),
	}
	child.Parent.Child = child
	return child.Parent
}

func CastBACnetUnconfirmedServiceRequestWhoHas(structType interface{}) *BACnetUnconfirmedServiceRequestWhoHas {
	castFunc := func(typ interface{}) *BACnetUnconfirmedServiceRequestWhoHas {
		if casted, ok := typ.(BACnetUnconfirmedServiceRequestWhoHas); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetUnconfirmedServiceRequestWhoHas); ok {
			return casted
		}
		if casted, ok := typ.(BACnetUnconfirmedServiceRequest); ok {
			return CastBACnetUnconfirmedServiceRequestWhoHas(casted.Child)
		}
		if casted, ok := typ.(*BACnetUnconfirmedServiceRequest); ok {
			return CastBACnetUnconfirmedServiceRequestWhoHas(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) GetTypeName() string {
	return "BACnetUnconfirmedServiceRequestWhoHas"
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.Parent.ParentLengthInBits())

	// Simple field (deviceInstanceRangeLowLimit)
	lengthInBits += m.DeviceInstanceRangeLowLimit.LengthInBits()

	// Optional Field (deviceInstanceRangeHighLimit)
	if m.DeviceInstanceRangeHighLimit != nil {
		lengthInBits += (*m.DeviceInstanceRangeHighLimit).LengthInBits()
	}

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.LengthInBits()

	// Optional Field (objectName)
	if m.ObjectName != nil {
		lengthInBits += (*m.ObjectName).LengthInBits()
	}

	return lengthInBits
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetUnconfirmedServiceRequestWhoHasParse(readBuffer utils.ReadBuffer) (*BACnetUnconfirmedServiceRequest, error) {
	if pullErr := readBuffer.PullContext("BACnetUnconfirmedServiceRequestWhoHas"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (deviceInstanceRangeLowLimit)
	if pullErr := readBuffer.PullContext("deviceInstanceRangeLowLimit"); pullErr != nil {
		return nil, pullErr
	}
	deviceInstanceRangeLowLimit, _deviceInstanceRangeLowLimitErr := BACnetComplexTagParse(readBuffer, (0), BACnetDataType_UNSIGNED_INTEGER)
	if _deviceInstanceRangeLowLimitErr != nil {
		return nil, errors.Wrap(_deviceInstanceRangeLowLimitErr, "Error parsing 'deviceInstanceRangeLowLimit' field")
	}
	if closeErr := readBuffer.CloseContext("deviceInstanceRangeLowLimit"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (deviceInstanceRangeHighLimit) (Can be skipped, if a given expression evaluates to false)
	var deviceInstanceRangeHighLimit *BACnetComplexTagUnsignedInteger = nil
	if bool((deviceInstanceRangeLowLimit) != (nil)) {
		_val, _err := BACnetComplexTagParse(readBuffer, (1), BACnetDataType_UNSIGNED_INTEGER)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'deviceInstanceRangeHighLimit' field")
		}
		deviceInstanceRangeHighLimit = CastBACnetComplexTagUnsignedInteger(_val)
	}

	// Simple Field (objectIdentifier)
	if pullErr := readBuffer.PullContext("objectIdentifier"); pullErr != nil {
		return nil, pullErr
	}
	objectIdentifier, _objectIdentifierErr := BACnetComplexTagParse(readBuffer, (2), BACnetDataType_OCTET_STRING)
	if _objectIdentifierErr != nil {
		return nil, errors.Wrap(_objectIdentifierErr, "Error parsing 'objectIdentifier' field")
	}
	if closeErr := readBuffer.CloseContext("objectIdentifier"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (objectName) (Can be skipped, if a given expression evaluates to false)
	var objectName *BACnetComplexTagOctetString = nil
	if bool((objectIdentifier) == (nil)) {
		_val, _err := BACnetComplexTagParse(readBuffer, (3), BACnetDataType_OCTET_STRING)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'objectName' field")
		}
		objectName = CastBACnetComplexTagOctetString(_val)
	}

	if closeErr := readBuffer.CloseContext("BACnetUnconfirmedServiceRequestWhoHas"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetUnconfirmedServiceRequestWhoHas{
		DeviceInstanceRangeLowLimit:  CastBACnetComplexTagUnsignedInteger(deviceInstanceRangeLowLimit),
		DeviceInstanceRangeHighLimit: CastBACnetComplexTagUnsignedInteger(deviceInstanceRangeHighLimit),
		ObjectIdentifier:             CastBACnetComplexTagOctetString(objectIdentifier),
		ObjectName:                   CastBACnetComplexTagOctetString(objectName),
		Parent:                       &BACnetUnconfirmedServiceRequest{},
	}
	_child.Parent.Child = _child
	return _child.Parent, nil
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetUnconfirmedServiceRequestWhoHas"); pushErr != nil {
			return pushErr
		}

		// Simple Field (deviceInstanceRangeLowLimit)
		if pushErr := writeBuffer.PushContext("deviceInstanceRangeLowLimit"); pushErr != nil {
			return pushErr
		}
		_deviceInstanceRangeLowLimitErr := m.DeviceInstanceRangeLowLimit.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("deviceInstanceRangeLowLimit"); popErr != nil {
			return popErr
		}
		if _deviceInstanceRangeLowLimitErr != nil {
			return errors.Wrap(_deviceInstanceRangeLowLimitErr, "Error serializing 'deviceInstanceRangeLowLimit' field")
		}

		// Optional Field (deviceInstanceRangeHighLimit) (Can be skipped, if the value is null)
		var deviceInstanceRangeHighLimit *BACnetComplexTagUnsignedInteger = nil
		if m.DeviceInstanceRangeHighLimit != nil {
			deviceInstanceRangeHighLimit = m.DeviceInstanceRangeHighLimit
			_deviceInstanceRangeHighLimitErr := deviceInstanceRangeHighLimit.Serialize(writeBuffer)
			if _deviceInstanceRangeHighLimitErr != nil {
				return errors.Wrap(_deviceInstanceRangeHighLimitErr, "Error serializing 'deviceInstanceRangeHighLimit' field")
			}
		}

		// Simple Field (objectIdentifier)
		if pushErr := writeBuffer.PushContext("objectIdentifier"); pushErr != nil {
			return pushErr
		}
		_objectIdentifierErr := m.ObjectIdentifier.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("objectIdentifier"); popErr != nil {
			return popErr
		}
		if _objectIdentifierErr != nil {
			return errors.Wrap(_objectIdentifierErr, "Error serializing 'objectIdentifier' field")
		}

		// Optional Field (objectName) (Can be skipped, if the value is null)
		var objectName *BACnetComplexTagOctetString = nil
		if m.ObjectName != nil {
			objectName = m.ObjectName
			_objectNameErr := objectName.Serialize(writeBuffer)
			if _objectNameErr != nil {
				return errors.Wrap(_objectNameErr, "Error serializing 'objectName' field")
			}
		}

		if popErr := writeBuffer.PopContext("BACnetUnconfirmedServiceRequestWhoHas"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.Parent.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetUnconfirmedServiceRequestWhoHas) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
