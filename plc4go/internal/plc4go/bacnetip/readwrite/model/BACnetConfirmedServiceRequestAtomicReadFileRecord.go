/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetConfirmedServiceRequestAtomicReadFileRecord struct {
	*BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord
	FileStartRecord    *BACnetApplicationTagSignedInteger
	RequestRecordCount *BACnetApplicationTagUnsignedInteger
}

// The corresponding interface
type IBACnetConfirmedServiceRequestAtomicReadFileRecord interface {
	IBACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord
	// GetFileStartRecord returns FileStartRecord (property field)
	GetFileStartRecord() *BACnetApplicationTagSignedInteger
	// GetRequestRecordCount returns RequestRecordCount (property field)
	GetRequestRecordCount() *BACnetApplicationTagUnsignedInteger
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) InitializeParent(parent *BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord, peekedTagHeader *BACnetTagHeader, openingTag *BACnetOpeningTag, closingTag *BACnetClosingTag) {
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.PeekedTagHeader = peekedTagHeader
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.OpeningTag = openingTag
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.ClosingTag = closingTag
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetParent() *BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord {
	return m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetFileStartRecord() *BACnetApplicationTagSignedInteger {
	return m.FileStartRecord
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetRequestRecordCount() *BACnetApplicationTagUnsignedInteger {
	return m.RequestRecordCount
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetConfirmedServiceRequestAtomicReadFileRecord factory function for BACnetConfirmedServiceRequestAtomicReadFileRecord
func NewBACnetConfirmedServiceRequestAtomicReadFileRecord(fileStartRecord *BACnetApplicationTagSignedInteger, requestRecordCount *BACnetApplicationTagUnsignedInteger, peekedTagHeader *BACnetTagHeader, openingTag *BACnetOpeningTag, closingTag *BACnetClosingTag) *BACnetConfirmedServiceRequestAtomicReadFileRecord {
	_result := &BACnetConfirmedServiceRequestAtomicReadFileRecord{
		FileStartRecord:    fileStartRecord,
		RequestRecordCount: requestRecordCount,
		BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord: NewBACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord(peekedTagHeader, openingTag, closingTag),
	}
	_result.Child = _result
	return _result
}

func CastBACnetConfirmedServiceRequestAtomicReadFileRecord(structType interface{}) *BACnetConfirmedServiceRequestAtomicReadFileRecord {
	if casted, ok := structType.(BACnetConfirmedServiceRequestAtomicReadFileRecord); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetConfirmedServiceRequestAtomicReadFileRecord); ok {
		return casted
	}
	if casted, ok := structType.(BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord); ok {
		return CastBACnetConfirmedServiceRequestAtomicReadFileRecord(casted.Child)
	}
	if casted, ok := structType.(*BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord); ok {
		return CastBACnetConfirmedServiceRequestAtomicReadFileRecord(casted.Child)
	}
	return nil
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetTypeName() string {
	return "BACnetConfirmedServiceRequestAtomicReadFileRecord"
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (fileStartRecord)
	lengthInBits += m.FileStartRecord.GetLengthInBits()

	// Simple field (requestRecordCount)
	lengthInBits += m.RequestRecordCount.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetConfirmedServiceRequestAtomicReadFileRecordParse(readBuffer utils.ReadBuffer) (*BACnetConfirmedServiceRequestAtomicReadFileRecord, error) {
	if pullErr := readBuffer.PullContext("BACnetConfirmedServiceRequestAtomicReadFileRecord"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (fileStartRecord)
	if pullErr := readBuffer.PullContext("fileStartRecord"); pullErr != nil {
		return nil, pullErr
	}
	_fileStartRecord, _fileStartRecordErr := BACnetApplicationTagParse(readBuffer)
	if _fileStartRecordErr != nil {
		return nil, errors.Wrap(_fileStartRecordErr, "Error parsing 'fileStartRecord' field")
	}
	fileStartRecord := CastBACnetApplicationTagSignedInteger(_fileStartRecord)
	if closeErr := readBuffer.CloseContext("fileStartRecord"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (requestRecordCount)
	if pullErr := readBuffer.PullContext("requestRecordCount"); pullErr != nil {
		return nil, pullErr
	}
	_requestRecordCount, _requestRecordCountErr := BACnetApplicationTagParse(readBuffer)
	if _requestRecordCountErr != nil {
		return nil, errors.Wrap(_requestRecordCountErr, "Error parsing 'requestRecordCount' field")
	}
	requestRecordCount := CastBACnetApplicationTagUnsignedInteger(_requestRecordCount)
	if closeErr := readBuffer.CloseContext("requestRecordCount"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetConfirmedServiceRequestAtomicReadFileRecord"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetConfirmedServiceRequestAtomicReadFileRecord{
		FileStartRecord:    CastBACnetApplicationTagSignedInteger(fileStartRecord),
		RequestRecordCount: CastBACnetApplicationTagUnsignedInteger(requestRecordCount),
		BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord: &BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord{},
	}
	_child.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.Child = _child
	return _child, nil
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetConfirmedServiceRequestAtomicReadFileRecord"); pushErr != nil {
			return pushErr
		}

		// Simple Field (fileStartRecord)
		if pushErr := writeBuffer.PushContext("fileStartRecord"); pushErr != nil {
			return pushErr
		}
		_fileStartRecordErr := m.FileStartRecord.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("fileStartRecord"); popErr != nil {
			return popErr
		}
		if _fileStartRecordErr != nil {
			return errors.Wrap(_fileStartRecordErr, "Error serializing 'fileStartRecord' field")
		}

		// Simple Field (requestRecordCount)
		if pushErr := writeBuffer.PushContext("requestRecordCount"); pushErr != nil {
			return pushErr
		}
		_requestRecordCountErr := m.RequestRecordCount.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("requestRecordCount"); popErr != nil {
			return popErr
		}
		if _requestRecordCountErr != nil {
			return errors.Wrap(_requestRecordCountErr, "Error serializing 'requestRecordCount' field")
		}

		if popErr := writeBuffer.PopContext("BACnetConfirmedServiceRequestAtomicReadFileRecord"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileRecord) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
