/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetReadAccessPropertyError is the data-structure of this message
type BACnetReadAccessPropertyError struct {
	OpeningTag *BACnetOpeningTag
	ErrorClass *BACnetApplicationTagEnumerated
	ErrorCode  *BACnetApplicationTagEnumerated
	ClosingTag *BACnetClosingTag
}

// IBACnetReadAccessPropertyError is the corresponding interface of BACnetReadAccessPropertyError
type IBACnetReadAccessPropertyError interface {
	// GetOpeningTag returns OpeningTag (property field)
	GetOpeningTag() *BACnetOpeningTag
	// GetErrorClass returns ErrorClass (property field)
	GetErrorClass() *BACnetApplicationTagEnumerated
	// GetErrorCode returns ErrorCode (property field)
	GetErrorCode() *BACnetApplicationTagEnumerated
	// GetClosingTag returns ClosingTag (property field)
	GetClosingTag() *BACnetClosingTag
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetReadAccessPropertyError) GetOpeningTag() *BACnetOpeningTag {
	return m.OpeningTag
}

func (m *BACnetReadAccessPropertyError) GetErrorClass() *BACnetApplicationTagEnumerated {
	return m.ErrorClass
}

func (m *BACnetReadAccessPropertyError) GetErrorCode() *BACnetApplicationTagEnumerated {
	return m.ErrorCode
}

func (m *BACnetReadAccessPropertyError) GetClosingTag() *BACnetClosingTag {
	return m.ClosingTag
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetReadAccessPropertyError factory function for BACnetReadAccessPropertyError
func NewBACnetReadAccessPropertyError(openingTag *BACnetOpeningTag, errorClass *BACnetApplicationTagEnumerated, errorCode *BACnetApplicationTagEnumerated, closingTag *BACnetClosingTag) *BACnetReadAccessPropertyError {
	return &BACnetReadAccessPropertyError{OpeningTag: openingTag, ErrorClass: errorClass, ErrorCode: errorCode, ClosingTag: closingTag}
}

func CastBACnetReadAccessPropertyError(structType interface{}) *BACnetReadAccessPropertyError {
	if casted, ok := structType.(BACnetReadAccessPropertyError); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetReadAccessPropertyError); ok {
		return casted
	}
	return nil
}

func (m *BACnetReadAccessPropertyError) GetTypeName() string {
	return "BACnetReadAccessPropertyError"
}

func (m *BACnetReadAccessPropertyError) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetReadAccessPropertyError) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (openingTag)
	lengthInBits += m.OpeningTag.GetLengthInBits()

	// Simple field (errorClass)
	lengthInBits += m.ErrorClass.GetLengthInBits()

	// Simple field (errorCode)
	lengthInBits += m.ErrorCode.GetLengthInBits()

	// Simple field (closingTag)
	lengthInBits += m.ClosingTag.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetReadAccessPropertyError) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetReadAccessPropertyErrorParse(readBuffer utils.ReadBuffer) (*BACnetReadAccessPropertyError, error) {
	if pullErr := readBuffer.PullContext("BACnetReadAccessPropertyError"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (openingTag)
	if pullErr := readBuffer.PullContext("openingTag"); pullErr != nil {
		return nil, pullErr
	}
	_openingTag, _openingTagErr := BACnetContextTagParse(readBuffer, uint8(uint8(5)), BACnetDataType(BACnetDataType_OPENING_TAG))
	if _openingTagErr != nil {
		return nil, errors.Wrap(_openingTagErr, "Error parsing 'openingTag' field")
	}
	openingTag := CastBACnetOpeningTag(_openingTag)
	if closeErr := readBuffer.CloseContext("openingTag"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (errorClass)
	if pullErr := readBuffer.PullContext("errorClass"); pullErr != nil {
		return nil, pullErr
	}
	_errorClass, _errorClassErr := BACnetApplicationTagParse(readBuffer)
	if _errorClassErr != nil {
		return nil, errors.Wrap(_errorClassErr, "Error parsing 'errorClass' field")
	}
	errorClass := CastBACnetApplicationTagEnumerated(_errorClass)
	if closeErr := readBuffer.CloseContext("errorClass"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (errorCode)
	if pullErr := readBuffer.PullContext("errorCode"); pullErr != nil {
		return nil, pullErr
	}
	_errorCode, _errorCodeErr := BACnetApplicationTagParse(readBuffer)
	if _errorCodeErr != nil {
		return nil, errors.Wrap(_errorCodeErr, "Error parsing 'errorCode' field")
	}
	errorCode := CastBACnetApplicationTagEnumerated(_errorCode)
	if closeErr := readBuffer.CloseContext("errorCode"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (closingTag)
	if pullErr := readBuffer.PullContext("closingTag"); pullErr != nil {
		return nil, pullErr
	}
	_closingTag, _closingTagErr := BACnetContextTagParse(readBuffer, uint8(uint8(5)), BACnetDataType(BACnetDataType_CLOSING_TAG))
	if _closingTagErr != nil {
		return nil, errors.Wrap(_closingTagErr, "Error parsing 'closingTag' field")
	}
	closingTag := CastBACnetClosingTag(_closingTag)
	if closeErr := readBuffer.CloseContext("closingTag"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetReadAccessPropertyError"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetReadAccessPropertyError(openingTag, errorClass, errorCode, closingTag), nil
}

func (m *BACnetReadAccessPropertyError) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("BACnetReadAccessPropertyError"); pushErr != nil {
		return pushErr
	}

	// Simple Field (openingTag)
	if pushErr := writeBuffer.PushContext("openingTag"); pushErr != nil {
		return pushErr
	}
	_openingTagErr := m.OpeningTag.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("openingTag"); popErr != nil {
		return popErr
	}
	if _openingTagErr != nil {
		return errors.Wrap(_openingTagErr, "Error serializing 'openingTag' field")
	}

	// Simple Field (errorClass)
	if pushErr := writeBuffer.PushContext("errorClass"); pushErr != nil {
		return pushErr
	}
	_errorClassErr := m.ErrorClass.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("errorClass"); popErr != nil {
		return popErr
	}
	if _errorClassErr != nil {
		return errors.Wrap(_errorClassErr, "Error serializing 'errorClass' field")
	}

	// Simple Field (errorCode)
	if pushErr := writeBuffer.PushContext("errorCode"); pushErr != nil {
		return pushErr
	}
	_errorCodeErr := m.ErrorCode.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("errorCode"); popErr != nil {
		return popErr
	}
	if _errorCodeErr != nil {
		return errors.Wrap(_errorCodeErr, "Error serializing 'errorCode' field")
	}

	// Simple Field (closingTag)
	if pushErr := writeBuffer.PushContext("closingTag"); pushErr != nil {
		return pushErr
	}
	_closingTagErr := m.ClosingTag.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("closingTag"); popErr != nil {
		return popErr
	}
	if _closingTagErr != nil {
		return errors.Wrap(_closingTagErr, "Error serializing 'closingTag' field")
	}

	if popErr := writeBuffer.PopContext("BACnetReadAccessPropertyError"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetReadAccessPropertyError) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
