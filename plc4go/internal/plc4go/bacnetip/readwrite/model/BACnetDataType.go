/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

type BACnetDataType int8

type IBACnetDataType interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetDataType_NULL                       BACnetDataType = 0x0
	BACnetDataType_BOOLEAN                    BACnetDataType = 0x1
	BACnetDataType_UNSIGNED_INTEGER           BACnetDataType = 0x2
	BACnetDataType_SIGNED_INTEGER             BACnetDataType = 0x3
	BACnetDataType_REAL                       BACnetDataType = 0x4
	BACnetDataType_DOUBLE                     BACnetDataType = 0x5
	BACnetDataType_OCTET_STRING               BACnetDataType = 0x6
	BACnetDataType_CHARACTER_STRING           BACnetDataType = 0x7
	BACnetDataType_BIT_STRING                 BACnetDataType = 0x8
	BACnetDataType_ENUMERATED                 BACnetDataType = 0x9
	BACnetDataType_DATE                       BACnetDataType = 0xA
	BACnetDataType_TIME                       BACnetDataType = 0xB
	BACnetDataType_BACNET_OBJECT_IDENTIFIER   BACnetDataType = 0xC
	BACnetDataType_BACNET_PROPERTY_IDENTIFIER BACnetDataType = 0xD
	BACnetDataType_BACNET_DEVICE_STATE        BACnetDataType = 0xE
)

var BACnetDataTypeValues []BACnetDataType

func init() {
	_ = errors.New
	BACnetDataTypeValues = []BACnetDataType{
		BACnetDataType_NULL,
		BACnetDataType_BOOLEAN,
		BACnetDataType_UNSIGNED_INTEGER,
		BACnetDataType_SIGNED_INTEGER,
		BACnetDataType_REAL,
		BACnetDataType_DOUBLE,
		BACnetDataType_OCTET_STRING,
		BACnetDataType_CHARACTER_STRING,
		BACnetDataType_BIT_STRING,
		BACnetDataType_ENUMERATED,
		BACnetDataType_DATE,
		BACnetDataType_TIME,
		BACnetDataType_BACNET_OBJECT_IDENTIFIER,
		BACnetDataType_BACNET_PROPERTY_IDENTIFIER,
		BACnetDataType_BACNET_DEVICE_STATE,
	}
}

func BACnetDataTypeByValue(value int8) BACnetDataType {
	switch value {
	case 0x0:
		return BACnetDataType_NULL
	case 0x1:
		return BACnetDataType_BOOLEAN
	case 0x2:
		return BACnetDataType_UNSIGNED_INTEGER
	case 0x3:
		return BACnetDataType_SIGNED_INTEGER
	case 0x4:
		return BACnetDataType_REAL
	case 0x5:
		return BACnetDataType_DOUBLE
	case 0x6:
		return BACnetDataType_OCTET_STRING
	case 0x7:
		return BACnetDataType_CHARACTER_STRING
	case 0x8:
		return BACnetDataType_BIT_STRING
	case 0x9:
		return BACnetDataType_ENUMERATED
	case 0xA:
		return BACnetDataType_DATE
	case 0xB:
		return BACnetDataType_TIME
	case 0xC:
		return BACnetDataType_BACNET_OBJECT_IDENTIFIER
	case 0xD:
		return BACnetDataType_BACNET_PROPERTY_IDENTIFIER
	case 0xE:
		return BACnetDataType_BACNET_DEVICE_STATE
	}
	return 0
}

func BACnetDataTypeByName(value string) BACnetDataType {
	switch value {
	case "NULL":
		return BACnetDataType_NULL
	case "BOOLEAN":
		return BACnetDataType_BOOLEAN
	case "UNSIGNED_INTEGER":
		return BACnetDataType_UNSIGNED_INTEGER
	case "SIGNED_INTEGER":
		return BACnetDataType_SIGNED_INTEGER
	case "REAL":
		return BACnetDataType_REAL
	case "DOUBLE":
		return BACnetDataType_DOUBLE
	case "OCTET_STRING":
		return BACnetDataType_OCTET_STRING
	case "CHARACTER_STRING":
		return BACnetDataType_CHARACTER_STRING
	case "BIT_STRING":
		return BACnetDataType_BIT_STRING
	case "ENUMERATED":
		return BACnetDataType_ENUMERATED
	case "DATE":
		return BACnetDataType_DATE
	case "TIME":
		return BACnetDataType_TIME
	case "BACNET_OBJECT_IDENTIFIER":
		return BACnetDataType_BACNET_OBJECT_IDENTIFIER
	case "BACNET_PROPERTY_IDENTIFIER":
		return BACnetDataType_BACNET_PROPERTY_IDENTIFIER
	case "BACNET_DEVICE_STATE":
		return BACnetDataType_BACNET_DEVICE_STATE
	}
	return 0
}

func CastBACnetDataType(structType interface{}) BACnetDataType {
	castFunc := func(typ interface{}) BACnetDataType {
		if sBACnetDataType, ok := typ.(BACnetDataType); ok {
			return sBACnetDataType
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetDataType) LengthInBits() uint16 {
	return 4
}

func (m BACnetDataType) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetDataTypeParse(readBuffer utils.ReadBuffer) (BACnetDataType, error) {
	val, err := readBuffer.ReadInt8("BACnetDataType", 4)
	if err != nil {
		return 0, nil
	}
	return BACnetDataTypeByValue(val), nil
}

func (e BACnetDataType) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteInt8("BACnetDataType", 4, int8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetDataType) name() string {
	switch e {
	case BACnetDataType_NULL:
		return "NULL"
	case BACnetDataType_BOOLEAN:
		return "BOOLEAN"
	case BACnetDataType_UNSIGNED_INTEGER:
		return "UNSIGNED_INTEGER"
	case BACnetDataType_SIGNED_INTEGER:
		return "SIGNED_INTEGER"
	case BACnetDataType_REAL:
		return "REAL"
	case BACnetDataType_DOUBLE:
		return "DOUBLE"
	case BACnetDataType_OCTET_STRING:
		return "OCTET_STRING"
	case BACnetDataType_CHARACTER_STRING:
		return "CHARACTER_STRING"
	case BACnetDataType_BIT_STRING:
		return "BIT_STRING"
	case BACnetDataType_ENUMERATED:
		return "ENUMERATED"
	case BACnetDataType_DATE:
		return "DATE"
	case BACnetDataType_TIME:
		return "TIME"
	case BACnetDataType_BACNET_OBJECT_IDENTIFIER:
		return "BACNET_OBJECT_IDENTIFIER"
	case BACnetDataType_BACNET_PROPERTY_IDENTIFIER:
		return "BACNET_PROPERTY_IDENTIFIER"
	case BACnetDataType_BACNET_DEVICE_STATE:
		return "BACNET_DEVICE_STATE"
	}
	return ""
}

func (e BACnetDataType) String() string {
	return e.name()
}
