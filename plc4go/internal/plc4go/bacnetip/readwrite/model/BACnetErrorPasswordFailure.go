/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetErrorPasswordFailure struct {
	*BACnetError
	ErrorClass *BACnetTagApplicationEnumerated
	ErrorCode  *BACnetTagApplicationEnumerated
}

// The corresponding interface
type IBACnetErrorPasswordFailure interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *BACnetErrorPasswordFailure) ServiceChoice() uint8 {
	return 0x14
}

func (m *BACnetErrorPasswordFailure) InitializeParent(parent *BACnetError) {
}

func NewBACnetErrorPasswordFailure(errorClass *BACnetTagApplicationEnumerated, errorCode *BACnetTagApplicationEnumerated) *BACnetError {
	child := &BACnetErrorPasswordFailure{
		ErrorClass:  errorClass,
		ErrorCode:   errorCode,
		BACnetError: NewBACnetError(),
	}
	child.Child = child
	return child.BACnetError
}

func CastBACnetErrorPasswordFailure(structType interface{}) *BACnetErrorPasswordFailure {
	castFunc := func(typ interface{}) *BACnetErrorPasswordFailure {
		if casted, ok := typ.(BACnetErrorPasswordFailure); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetErrorPasswordFailure); ok {
			return casted
		}
		if casted, ok := typ.(BACnetError); ok {
			return CastBACnetErrorPasswordFailure(casted.Child)
		}
		if casted, ok := typ.(*BACnetError); ok {
			return CastBACnetErrorPasswordFailure(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetErrorPasswordFailure) GetTypeName() string {
	return "BACnetErrorPasswordFailure"
}

func (m *BACnetErrorPasswordFailure) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetErrorPasswordFailure) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.ParentLengthInBits())

	// Simple field (errorClass)
	lengthInBits += m.ErrorClass.LengthInBits()

	// Simple field (errorCode)
	lengthInBits += m.ErrorCode.LengthInBits()

	return lengthInBits
}

func (m *BACnetErrorPasswordFailure) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetErrorPasswordFailureParse(readBuffer utils.ReadBuffer) (*BACnetError, error) {
	if pullErr := readBuffer.PullContext("BACnetErrorPasswordFailure"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (errorClass)
	if pullErr := readBuffer.PullContext("errorClass"); pullErr != nil {
		return nil, pullErr
	}
	_errorClass, _errorClassErr := BACnetTagParse(readBuffer)
	if _errorClassErr != nil {
		return nil, errors.Wrap(_errorClassErr, "Error parsing 'errorClass' field")
	}
	errorClass := CastBACnetTagApplicationEnumerated(_errorClass)
	if closeErr := readBuffer.CloseContext("errorClass"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (errorCode)
	if pullErr := readBuffer.PullContext("errorCode"); pullErr != nil {
		return nil, pullErr
	}
	_errorCode, _errorCodeErr := BACnetTagParse(readBuffer)
	if _errorCodeErr != nil {
		return nil, errors.Wrap(_errorCodeErr, "Error parsing 'errorCode' field")
	}
	errorCode := CastBACnetTagApplicationEnumerated(_errorCode)
	if closeErr := readBuffer.CloseContext("errorCode"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetErrorPasswordFailure"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetErrorPasswordFailure{
		ErrorClass:  CastBACnetTagApplicationEnumerated(errorClass),
		ErrorCode:   CastBACnetTagApplicationEnumerated(errorCode),
		BACnetError: &BACnetError{},
	}
	_child.BACnetError.Child = _child
	return _child.BACnetError, nil
}

func (m *BACnetErrorPasswordFailure) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetErrorPasswordFailure"); pushErr != nil {
			return pushErr
		}

		// Simple Field (errorClass)
		if pushErr := writeBuffer.PushContext("errorClass"); pushErr != nil {
			return pushErr
		}
		_errorClassErr := m.ErrorClass.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("errorClass"); popErr != nil {
			return popErr
		}
		if _errorClassErr != nil {
			return errors.Wrap(_errorClassErr, "Error serializing 'errorClass' field")
		}

		// Simple Field (errorCode)
		if pushErr := writeBuffer.PushContext("errorCode"); pushErr != nil {
			return pushErr
		}
		_errorCodeErr := m.ErrorCode.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("errorCode"); popErr != nil {
			return popErr
		}
		if _errorCodeErr != nil {
			return errors.Wrap(_errorCodeErr, "Error serializing 'errorCode' field")
		}

		if popErr := writeBuffer.PopContext("BACnetErrorPasswordFailure"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetErrorPasswordFailure) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
