/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

type BACnetDeviceState uint8

type IBACnetDeviceState interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetDeviceState_COLDSTART        BACnetDeviceState = 0x0
	BACnetDeviceState_WARMSTART        BACnetDeviceState = 0x1
	BACnetDeviceState_ACTIVATE_CHANGES BACnetDeviceState = 0x2
	BACnetDeviceState_STARTBACKUP      BACnetDeviceState = 0x3
	BACnetDeviceState_ENDBACKUP        BACnetDeviceState = 0x4
	BACnetDeviceState_STARTRESTORE     BACnetDeviceState = 0x5
	BACnetDeviceState_ENDRESTORE       BACnetDeviceState = 0x6
	BACnetDeviceState_ABORTRESTORE     BACnetDeviceState = 0x7
)

var BACnetDeviceStateValues []BACnetDeviceState

func init() {
	_ = errors.New
	BACnetDeviceStateValues = []BACnetDeviceState{
		BACnetDeviceState_COLDSTART,
		BACnetDeviceState_WARMSTART,
		BACnetDeviceState_ACTIVATE_CHANGES,
		BACnetDeviceState_STARTBACKUP,
		BACnetDeviceState_ENDBACKUP,
		BACnetDeviceState_STARTRESTORE,
		BACnetDeviceState_ENDRESTORE,
		BACnetDeviceState_ABORTRESTORE,
	}
}

func BACnetDeviceStateByValue(value uint8) BACnetDeviceState {
	switch value {
	case 0x0:
		return BACnetDeviceState_COLDSTART
	case 0x1:
		return BACnetDeviceState_WARMSTART
	case 0x2:
		return BACnetDeviceState_ACTIVATE_CHANGES
	case 0x3:
		return BACnetDeviceState_STARTBACKUP
	case 0x4:
		return BACnetDeviceState_ENDBACKUP
	case 0x5:
		return BACnetDeviceState_STARTRESTORE
	case 0x6:
		return BACnetDeviceState_ENDRESTORE
	case 0x7:
		return BACnetDeviceState_ABORTRESTORE
	}
	return 0
}

func BACnetDeviceStateByName(value string) BACnetDeviceState {
	switch value {
	case "COLDSTART":
		return BACnetDeviceState_COLDSTART
	case "WARMSTART":
		return BACnetDeviceState_WARMSTART
	case "ACTIVATE_CHANGES":
		return BACnetDeviceState_ACTIVATE_CHANGES
	case "STARTBACKUP":
		return BACnetDeviceState_STARTBACKUP
	case "ENDBACKUP":
		return BACnetDeviceState_ENDBACKUP
	case "STARTRESTORE":
		return BACnetDeviceState_STARTRESTORE
	case "ENDRESTORE":
		return BACnetDeviceState_ENDRESTORE
	case "ABORTRESTORE":
		return BACnetDeviceState_ABORTRESTORE
	}
	return 0
}

func CastBACnetDeviceState(structType interface{}) BACnetDeviceState {
	castFunc := func(typ interface{}) BACnetDeviceState {
		if sBACnetDeviceState, ok := typ.(BACnetDeviceState); ok {
			return sBACnetDeviceState
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetDeviceState) LengthInBits() uint16 {
	return 8
}

func (m BACnetDeviceState) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetDeviceStateParse(readBuffer utils.ReadBuffer) (BACnetDeviceState, error) {
	val, err := readBuffer.ReadUint8("BACnetDeviceState", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetDeviceStateByValue(val), nil
}

func (e BACnetDeviceState) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetDeviceState", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetDeviceState) name() string {
	switch e {
	case BACnetDeviceState_COLDSTART:
		return "COLDSTART"
	case BACnetDeviceState_WARMSTART:
		return "WARMSTART"
	case BACnetDeviceState_ACTIVATE_CHANGES:
		return "ACTIVATE_CHANGES"
	case BACnetDeviceState_STARTBACKUP:
		return "STARTBACKUP"
	case BACnetDeviceState_ENDBACKUP:
		return "ENDBACKUP"
	case BACnetDeviceState_STARTRESTORE:
		return "STARTRESTORE"
	case BACnetDeviceState_ENDRESTORE:
		return "ENDRESTORE"
	case BACnetDeviceState_ABORTRESTORE:
		return "ABORTRESTORE"
	}
	return ""
}

func (e BACnetDeviceState) String() string {
	return e.name()
}
