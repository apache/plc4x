/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// Constant values.
const DF1SymbolMessageFrame_MESSAGEEND uint8 = 0x10
const DF1SymbolMessageFrame_ENDTRANSACTION uint8 = 0x03

// The data-structure of this message
type DF1SymbolMessageFrame struct {
	*DF1Symbol
	DestinationAddress uint8
	SourceAddress      uint8
	Command            *DF1Command
}

// The corresponding interface
type IDF1SymbolMessageFrame interface {
	IDF1Symbol
	// GetDestinationAddress returns DestinationAddress (property field)
	GetDestinationAddress() uint8
	// GetSourceAddress returns SourceAddress (property field)
	GetSourceAddress() uint8
	// GetCommand returns Command (property field)
	GetCommand() *DF1Command
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////
func (m *DF1SymbolMessageFrame) GetSymbolType() uint8 {
	return 0x02
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *DF1SymbolMessageFrame) InitializeParent(parent *DF1Symbol) {}

func (m *DF1SymbolMessageFrame) GetParent() *DF1Symbol {
	return m.DF1Symbol
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////
func (m *DF1SymbolMessageFrame) GetDestinationAddress() uint8 {
	return m.DestinationAddress
}

func (m *DF1SymbolMessageFrame) GetSourceAddress() uint8 {
	return m.SourceAddress
}

func (m *DF1SymbolMessageFrame) GetCommand() *DF1Command {
	return m.Command
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////
func (m *DF1SymbolMessageFrame) GetMessageEnd() uint8 {
	return DF1SymbolMessageFrame_MESSAGEEND
}

func (m *DF1SymbolMessageFrame) GetEndTransaction() uint8 {
	return DF1SymbolMessageFrame_ENDTRANSACTION
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewDF1SymbolMessageFrame factory function for DF1SymbolMessageFrame
func NewDF1SymbolMessageFrame(destinationAddress uint8, sourceAddress uint8, command *DF1Command) *DF1SymbolMessageFrame {
	_result := &DF1SymbolMessageFrame{
		DestinationAddress: destinationAddress,
		SourceAddress:      sourceAddress,
		Command:            command,
		DF1Symbol:          NewDF1Symbol(),
	}
	_result.Child = _result
	return _result
}

func CastDF1SymbolMessageFrame(structType interface{}) *DF1SymbolMessageFrame {
	if casted, ok := structType.(DF1SymbolMessageFrame); ok {
		return &casted
	}
	if casted, ok := structType.(*DF1SymbolMessageFrame); ok {
		return casted
	}
	if casted, ok := structType.(DF1Symbol); ok {
		return CastDF1SymbolMessageFrame(casted.Child)
	}
	if casted, ok := structType.(*DF1Symbol); ok {
		return CastDF1SymbolMessageFrame(casted.Child)
	}
	return nil
}

func (m *DF1SymbolMessageFrame) GetTypeName() string {
	return "DF1SymbolMessageFrame"
}

func (m *DF1SymbolMessageFrame) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *DF1SymbolMessageFrame) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (destinationAddress)
	lengthInBits += 8

	// Simple field (sourceAddress)
	lengthInBits += 8

	// Simple field (command)
	lengthInBits += m.Command.GetLengthInBits()

	// Const Field (messageEnd)
	lengthInBits += 8

	// Const Field (endTransaction)
	lengthInBits += 8

	// Checksum Field (checksum)
	lengthInBits += 16

	return lengthInBits
}

func (m *DF1SymbolMessageFrame) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func DF1SymbolMessageFrameParse(readBuffer utils.ReadBuffer) (*DF1SymbolMessageFrame, error) {
	if pullErr := readBuffer.PullContext("DF1SymbolMessageFrame"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Simple Field (destinationAddress)
	_destinationAddress, _destinationAddressErr := readBuffer.ReadUint8("destinationAddress", 8)
	if _destinationAddressErr != nil {
		return nil, errors.Wrap(_destinationAddressErr, "Error parsing 'destinationAddress' field")
	}
	destinationAddress := _destinationAddress

	// Simple Field (sourceAddress)
	_sourceAddress, _sourceAddressErr := readBuffer.ReadUint8("sourceAddress", 8)
	if _sourceAddressErr != nil {
		return nil, errors.Wrap(_sourceAddressErr, "Error parsing 'sourceAddress' field")
	}
	sourceAddress := _sourceAddress

	// Simple Field (command)
	if pullErr := readBuffer.PullContext("command"); pullErr != nil {
		return nil, pullErr
	}
	_command, _commandErr := DF1CommandParse(readBuffer)
	if _commandErr != nil {
		return nil, errors.Wrap(_commandErr, "Error parsing 'command' field")
	}
	command := CastDF1Command(_command)
	if closeErr := readBuffer.CloseContext("command"); closeErr != nil {
		return nil, closeErr
	}

	// Const Field (messageEnd)
	messageEnd, _messageEndErr := readBuffer.ReadUint8("messageEnd", 8)
	if _messageEndErr != nil {
		return nil, errors.Wrap(_messageEndErr, "Error parsing 'messageEnd' field")
	}
	if messageEnd != DF1SymbolMessageFrame_MESSAGEEND {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", DF1SymbolMessageFrame_MESSAGEEND) + " but got " + fmt.Sprintf("%d", messageEnd))
	}

	// Const Field (endTransaction)
	endTransaction, _endTransactionErr := readBuffer.ReadUint8("endTransaction", 8)
	if _endTransactionErr != nil {
		return nil, errors.Wrap(_endTransactionErr, "Error parsing 'endTransaction' field")
	}
	if endTransaction != DF1SymbolMessageFrame_ENDTRANSACTION {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", DF1SymbolMessageFrame_ENDTRANSACTION) + " but got " + fmt.Sprintf("%d", endTransaction))
	}

	// Checksum Field (checksum)
	{
		checksumRef, _checksumRefErr := readBuffer.ReadUint16("checksum", 16)
		if _checksumRefErr != nil {
			return nil, errors.Wrap(_checksumRefErr, "Error parsing 'checksum' field")
		}
		checksum, _checksumErr := CrcCheck(destinationAddress, sourceAddress, command)
		if _checksumErr != nil {
			return nil, errors.Wrap(_checksumErr, "Checksum verification failed")
		}
		if checksum != checksumRef {
			return nil, errors.Errorf("Checksum verification failed. Expected %x but got %x", checksumRef, checksum)
		}
	}

	if closeErr := readBuffer.CloseContext("DF1SymbolMessageFrame"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &DF1SymbolMessageFrame{
		DestinationAddress: destinationAddress,
		SourceAddress:      sourceAddress,
		Command:            CastDF1Command(command),
		DF1Symbol:          &DF1Symbol{},
	}
	_child.DF1Symbol.Child = _child
	return _child, nil
}

func (m *DF1SymbolMessageFrame) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("DF1SymbolMessageFrame"); pushErr != nil {
			return pushErr
		}

		// Simple Field (destinationAddress)
		destinationAddress := uint8(m.DestinationAddress)
		_destinationAddressErr := writeBuffer.WriteUint8("destinationAddress", 8, (destinationAddress))
		if _destinationAddressErr != nil {
			return errors.Wrap(_destinationAddressErr, "Error serializing 'destinationAddress' field")
		}

		// Simple Field (sourceAddress)
		sourceAddress := uint8(m.SourceAddress)
		_sourceAddressErr := writeBuffer.WriteUint8("sourceAddress", 8, (sourceAddress))
		if _sourceAddressErr != nil {
			return errors.Wrap(_sourceAddressErr, "Error serializing 'sourceAddress' field")
		}

		// Simple Field (command)
		if pushErr := writeBuffer.PushContext("command"); pushErr != nil {
			return pushErr
		}
		_commandErr := m.Command.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("command"); popErr != nil {
			return popErr
		}
		if _commandErr != nil {
			return errors.Wrap(_commandErr, "Error serializing 'command' field")
		}

		// Const Field (messageEnd)
		_messageEndErr := writeBuffer.WriteUint8("messageEnd", 8, 0x10)
		if _messageEndErr != nil {
			return errors.Wrap(_messageEndErr, "Error serializing 'messageEnd' field")
		}

		// Const Field (endTransaction)
		_endTransactionErr := writeBuffer.WriteUint8("endTransaction", 8, 0x03)
		if _endTransactionErr != nil {
			return errors.Wrap(_endTransactionErr, "Error serializing 'endTransaction' field")
		}

		// Checksum Field (checksum) (Calculated)
		{
			_checksum, _checksumErr := CrcCheck(m.GetDestinationAddress(), m.GetSourceAddress(), m.GetCommand())
			if _checksumErr != nil {
				return errors.Wrap(_checksumErr, "Checksum calculation failed")
			}
			_checksumWriteErr := writeBuffer.WriteUint16("checksum", 16, (_checksum))
			if _checksumWriteErr != nil {
				return errors.Wrap(_checksumWriteErr, "Error serializing 'checksum' field")
			}
		}

		if popErr := writeBuffer.PopContext("DF1SymbolMessageFrame"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *DF1SymbolMessageFrame) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
