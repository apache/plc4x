/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type ModbusADU struct {

	// Arguments.
	Response bool
	Child    IModbusADUChild
}

// The corresponding interface
type IModbusADU interface {
	// GetDriverType returns DriverType (discriminator field)
	GetDriverType() DriverType
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

type IModbusADUParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child IModbusADU, serializeChildFunction func() error) error
	GetTypeName() string
}

type IModbusADUChild interface {
	Serialize(writeBuffer utils.WriteBuffer) error
	InitializeParent(parent *ModbusADU)
	GetParent() *ModbusADU

	GetTypeName() string
	IModbusADU
}

// NewModbusADU factory function for ModbusADU
func NewModbusADU(response bool) *ModbusADU {
	return &ModbusADU{Response: response}
}

func CastModbusADU(structType interface{}) *ModbusADU {
	if casted, ok := structType.(ModbusADU); ok {
		return &casted
	}
	if casted, ok := structType.(*ModbusADU); ok {
		return casted
	}
	if casted, ok := structType.(IModbusADUChild); ok {
		return casted.GetParent()
	}
	return nil
}

func (m *ModbusADU) GetTypeName() string {
	return "ModbusADU"
}

func (m *ModbusADU) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *ModbusADU) GetLengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.GetLengthInBits()
}

func (m *ModbusADU) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	return lengthInBits
}

func (m *ModbusADU) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ModbusADUParse(readBuffer utils.ReadBuffer, driverType DriverType, response bool) (*ModbusADU, error) {
	if pullErr := readBuffer.PullContext("ModbusADU"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type ModbusADUChild interface {
		InitializeParent(*ModbusADU)
		GetParent() *ModbusADU
	}
	var _child ModbusADUChild
	var typeSwitchError error
	switch {
	case driverType == DriverType_MODBUS_TCP: // ModbusTcpADU
		_child, typeSwitchError = ModbusTcpADUParse(readBuffer, driverType, response)
	case driverType == DriverType_MODBUS_RTU: // ModbusRtuADU
		_child, typeSwitchError = ModbusRtuADUParse(readBuffer, driverType, response)
	case driverType == DriverType_MODBUS_ASCII: // ModbusAsciiADU
		_child, typeSwitchError = ModbusAsciiADUParse(readBuffer, driverType, response)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := readBuffer.CloseContext("ModbusADU"); closeErr != nil {
		return nil, closeErr
	}

	// Finish initializing
	_child.InitializeParent(_child.GetParent())
	return _child.GetParent(), nil
}

func (m *ModbusADU) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *ModbusADU) SerializeParent(writeBuffer utils.WriteBuffer, child IModbusADU, serializeChildFunction func() error) error {
	if pushErr := writeBuffer.PushContext("ModbusADU"); pushErr != nil {
		return pushErr
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("ModbusADU"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *ModbusADU) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
