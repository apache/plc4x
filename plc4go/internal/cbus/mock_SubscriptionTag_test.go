/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package cbus

import (
	model "github.com/apache/plc4x/plc4go/pkg/api/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	values "github.com/apache/plc4x/plc4go/pkg/api/values"
)

// MockSubscriptionTag is an autogenerated mock type for the SubscriptionTag type
type MockSubscriptionTag struct {
	mock.Mock
}

type MockSubscriptionTag_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionTag) EXPECT() *MockSubscriptionTag_Expecter {
	return &MockSubscriptionTag_Expecter{mock: &_m.Mock}
}

// GetAddressString provides a mock function with given fields:
func (_m *MockSubscriptionTag) GetAddressString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddressString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSubscriptionTag_GetAddressString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressString'
type MockSubscriptionTag_GetAddressString_Call struct {
	*mock.Call
}

// GetAddressString is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) GetAddressString() *MockSubscriptionTag_GetAddressString_Call {
	return &MockSubscriptionTag_GetAddressString_Call{Call: _e.mock.On("GetAddressString")}
}

func (_c *MockSubscriptionTag_GetAddressString_Call) Run(run func()) *MockSubscriptionTag_GetAddressString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_GetAddressString_Call) Return(_a0 string) *MockSubscriptionTag_GetAddressString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_GetAddressString_Call) RunAndReturn(run func() string) *MockSubscriptionTag_GetAddressString_Call {
	_c.Call.Return(run)
	return _c
}

// GetArrayInfo provides a mock function with given fields:
func (_m *MockSubscriptionTag) GetArrayInfo() []model.ArrayInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayInfo")
	}

	var r0 []model.ArrayInfo
	if rf, ok := ret.Get(0).(func() []model.ArrayInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArrayInfo)
		}
	}

	return r0
}

// MockSubscriptionTag_GetArrayInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayInfo'
type MockSubscriptionTag_GetArrayInfo_Call struct {
	*mock.Call
}

// GetArrayInfo is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) GetArrayInfo() *MockSubscriptionTag_GetArrayInfo_Call {
	return &MockSubscriptionTag_GetArrayInfo_Call{Call: _e.mock.On("GetArrayInfo")}
}

func (_c *MockSubscriptionTag_GetArrayInfo_Call) Run(run func()) *MockSubscriptionTag_GetArrayInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_GetArrayInfo_Call) Return(_a0 []model.ArrayInfo) *MockSubscriptionTag_GetArrayInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_GetArrayInfo_Call) RunAndReturn(run func() []model.ArrayInfo) *MockSubscriptionTag_GetArrayInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function with given fields:
func (_m *MockSubscriptionTag) GetDuration() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockSubscriptionTag_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type MockSubscriptionTag_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) GetDuration() *MockSubscriptionTag_GetDuration_Call {
	return &MockSubscriptionTag_GetDuration_Call{Call: _e.mock.On("GetDuration")}
}

func (_c *MockSubscriptionTag_GetDuration_Call) Run(run func()) *MockSubscriptionTag_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_GetDuration_Call) Return(_a0 time.Duration) *MockSubscriptionTag_GetDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_GetDuration_Call) RunAndReturn(run func() time.Duration) *MockSubscriptionTag_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlcSubscriptionType provides a mock function with given fields:
func (_m *MockSubscriptionTag) GetPlcSubscriptionType() model.PlcSubscriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlcSubscriptionType")
	}

	var r0 model.PlcSubscriptionType
	if rf, ok := ret.Get(0).(func() model.PlcSubscriptionType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.PlcSubscriptionType)
	}

	return r0
}

// MockSubscriptionTag_GetPlcSubscriptionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlcSubscriptionType'
type MockSubscriptionTag_GetPlcSubscriptionType_Call struct {
	*mock.Call
}

// GetPlcSubscriptionType is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) GetPlcSubscriptionType() *MockSubscriptionTag_GetPlcSubscriptionType_Call {
	return &MockSubscriptionTag_GetPlcSubscriptionType_Call{Call: _e.mock.On("GetPlcSubscriptionType")}
}

func (_c *MockSubscriptionTag_GetPlcSubscriptionType_Call) Run(run func()) *MockSubscriptionTag_GetPlcSubscriptionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_GetPlcSubscriptionType_Call) Return(_a0 model.PlcSubscriptionType) *MockSubscriptionTag_GetPlcSubscriptionType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_GetPlcSubscriptionType_Call) RunAndReturn(run func() model.PlcSubscriptionType) *MockSubscriptionTag_GetPlcSubscriptionType_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagType provides a mock function with given fields:
func (_m *MockSubscriptionTag) GetTagType() TagType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTagType")
	}

	var r0 TagType
	if rf, ok := ret.Get(0).(func() TagType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(TagType)
	}

	return r0
}

// MockSubscriptionTag_GetTagType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagType'
type MockSubscriptionTag_GetTagType_Call struct {
	*mock.Call
}

// GetTagType is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) GetTagType() *MockSubscriptionTag_GetTagType_Call {
	return &MockSubscriptionTag_GetTagType_Call{Call: _e.mock.On("GetTagType")}
}

func (_c *MockSubscriptionTag_GetTagType_Call) Run(run func()) *MockSubscriptionTag_GetTagType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_GetTagType_Call) Return(_a0 TagType) *MockSubscriptionTag_GetTagType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_GetTagType_Call) RunAndReturn(run func() TagType) *MockSubscriptionTag_GetTagType_Call {
	_c.Call.Return(run)
	return _c
}

// GetValueType provides a mock function with given fields:
func (_m *MockSubscriptionTag) GetValueType() values.PlcValueType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValueType")
	}

	var r0 values.PlcValueType
	if rf, ok := ret.Get(0).(func() values.PlcValueType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(values.PlcValueType)
	}

	return r0
}

// MockSubscriptionTag_GetValueType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValueType'
type MockSubscriptionTag_GetValueType_Call struct {
	*mock.Call
}

// GetValueType is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) GetValueType() *MockSubscriptionTag_GetValueType_Call {
	return &MockSubscriptionTag_GetValueType_Call{Call: _e.mock.On("GetValueType")}
}

func (_c *MockSubscriptionTag_GetValueType_Call) Run(run func()) *MockSubscriptionTag_GetValueType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_GetValueType_Call) Return(_a0 values.PlcValueType) *MockSubscriptionTag_GetValueType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_GetValueType_Call) RunAndReturn(run func() values.PlcValueType) *MockSubscriptionTag_GetValueType_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockSubscriptionTag) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSubscriptionTag_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockSubscriptionTag_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockSubscriptionTag_Expecter) String() *MockSubscriptionTag_String_Call {
	return &MockSubscriptionTag_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockSubscriptionTag_String_Call) Run(run func()) *MockSubscriptionTag_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionTag_String_Call) Return(_a0 string) *MockSubscriptionTag_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionTag_String_Call) RunAndReturn(run func() string) *MockSubscriptionTag_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionTag creates a new instance of MockSubscriptionTag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionTag(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionTag {
	mock := &MockSubscriptionTag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
