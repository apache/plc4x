/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import (
	context "context"

	model "github.com/apache/plc4x/plc4go/protocols/bacnetip/readwrite/model"
	mock "github.com/stretchr/testify/mock"

	spi "github.com/apache/plc4x/plc4go/spi"

	utils "github.com/apache/plc4x/plc4go/spi/utils"
)

// MockNPDU is an autogenerated mock type for the NPDU type
type MockNPDU struct {
	mock.Mock
}

type MockNPDU_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNPDU) EXPECT() *MockNPDU_Expecter {
	return &MockNPDU_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: pdu
func (_m *MockNPDU) Decode(pdu Arg) error {
	ret := _m.Called(pdu)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pdu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPDU_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockNPDU_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - pdu Arg
func (_e *MockNPDU_Expecter) Decode(pdu interface{}) *MockNPDU_Decode_Call {
	return &MockNPDU_Decode_Call{Call: _e.mock.On("Decode", pdu)}
}

func (_c *MockNPDU_Decode_Call) Run(run func(pdu Arg)) *MockNPDU_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockNPDU_Decode_Call) Return(_a0 error) *MockNPDU_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_Decode_Call) RunAndReturn(run func(Arg) error) *MockNPDU_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// DeepCopy provides a mock function with given fields:
func (_m *MockNPDU) DeepCopy() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeepCopy")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockNPDU_DeepCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeepCopy'
type MockNPDU_DeepCopy_Call struct {
	*mock.Call
}

// DeepCopy is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) DeepCopy() *MockNPDU_DeepCopy_Call {
	return &MockNPDU_DeepCopy_Call{Call: _e.mock.On("DeepCopy")}
}

func (_c *MockNPDU_DeepCopy_Call) Run(run func()) *MockNPDU_DeepCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_DeepCopy_Call) Return(_a0 interface{}) *MockNPDU_DeepCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_DeepCopy_Call) RunAndReturn(run func() interface{}) *MockNPDU_DeepCopy_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: pdu
func (_m *MockNPDU) Encode(pdu Arg) error {
	ret := _m.Called(pdu)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pdu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPDU_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockNPDU_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - pdu Arg
func (_e *MockNPDU_Expecter) Encode(pdu interface{}) *MockNPDU_Encode_Call {
	return &MockNPDU_Encode_Call{Call: _e.mock.On("Encode", pdu)}
}

func (_c *MockNPDU_Encode_Call) Run(run func(pdu Arg)) *MockNPDU_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockNPDU_Encode_Call) Return(_a0 error) *MockNPDU_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_Encode_Call) RunAndReturn(run func(Arg) error) *MockNPDU_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields:
func (_m *MockNPDU) Get() (byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 byte
	var r1 error
	if rf, ok := ret.Get(0).(func() (byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(byte)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNPDU_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNPDU_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) Get() *MockNPDU_Get_Call {
	return &MockNPDU_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockNPDU_Get_Call) Run(run func()) *MockNPDU_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_Get_Call) Return(_a0 byte, _a1 error) *MockNPDU_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNPDU_Get_Call) RunAndReturn(run func() (byte, error)) *MockNPDU_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetApdu provides a mock function with given fields:
func (_m *MockNPDU) GetApdu() model.APDU {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApdu")
	}

	var r0 model.APDU
	if rf, ok := ret.Get(0).(func() model.APDU); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.APDU)
		}
	}

	return r0
}

// MockNPDU_GetApdu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApdu'
type MockNPDU_GetApdu_Call struct {
	*mock.Call
}

// GetApdu is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetApdu() *MockNPDU_GetApdu_Call {
	return &MockNPDU_GetApdu_Call{Call: _e.mock.On("GetApdu")}
}

func (_c *MockNPDU_GetApdu_Call) Run(run func()) *MockNPDU_GetApdu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetApdu_Call) Return(_a0 model.APDU) *MockNPDU_GetApdu_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetApdu_Call) RunAndReturn(run func() model.APDU) *MockNPDU_GetApdu_Call {
	_c.Call.Return(run)
	return _c
}

// GetControl provides a mock function with given fields:
func (_m *MockNPDU) GetControl() model.NPDUControl {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetControl")
	}

	var r0 model.NPDUControl
	if rf, ok := ret.Get(0).(func() model.NPDUControl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.NPDUControl)
		}
	}

	return r0
}

// MockNPDU_GetControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControl'
type MockNPDU_GetControl_Call struct {
	*mock.Call
}

// GetControl is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetControl() *MockNPDU_GetControl_Call {
	return &MockNPDU_GetControl_Call{Call: _e.mock.On("GetControl")}
}

func (_c *MockNPDU_GetControl_Call) Run(run func()) *MockNPDU_GetControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetControl_Call) Return(_a0 model.NPDUControl) *MockNPDU_GetControl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetControl_Call) RunAndReturn(run func() model.NPDUControl) *MockNPDU_GetControl_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: dlen
func (_m *MockNPDU) GetData(dlen int) ([]byte, error) {
	ret := _m.Called(dlen)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(dlen)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(dlen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(dlen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNPDU_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockNPDU_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - dlen int
func (_e *MockNPDU_Expecter) GetData(dlen interface{}) *MockNPDU_GetData_Call {
	return &MockNPDU_GetData_Call{Call: _e.mock.On("GetData", dlen)}
}

func (_c *MockNPDU_GetData_Call) Run(run func(dlen int)) *MockNPDU_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNPDU_GetData_Call) Return(_a0 []byte, _a1 error) *MockNPDU_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNPDU_GetData_Call) RunAndReturn(run func(int) ([]byte, error)) *MockNPDU_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestinationAddress provides a mock function with given fields:
func (_m *MockNPDU) GetDestinationAddress() []uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDestinationAddress")
	}

	var r0 []uint8
	if rf, ok := ret.Get(0).(func() []uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint8)
		}
	}

	return r0
}

// MockNPDU_GetDestinationAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestinationAddress'
type MockNPDU_GetDestinationAddress_Call struct {
	*mock.Call
}

// GetDestinationAddress is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetDestinationAddress() *MockNPDU_GetDestinationAddress_Call {
	return &MockNPDU_GetDestinationAddress_Call{Call: _e.mock.On("GetDestinationAddress")}
}

func (_c *MockNPDU_GetDestinationAddress_Call) Run(run func()) *MockNPDU_GetDestinationAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetDestinationAddress_Call) Return(_a0 []uint8) *MockNPDU_GetDestinationAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetDestinationAddress_Call) RunAndReturn(run func() []uint8) *MockNPDU_GetDestinationAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestinationLength provides a mock function with given fields:
func (_m *MockNPDU) GetDestinationLength() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDestinationLength")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPDU_GetDestinationLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestinationLength'
type MockNPDU_GetDestinationLength_Call struct {
	*mock.Call
}

// GetDestinationLength is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetDestinationLength() *MockNPDU_GetDestinationLength_Call {
	return &MockNPDU_GetDestinationLength_Call{Call: _e.mock.On("GetDestinationLength")}
}

func (_c *MockNPDU_GetDestinationLength_Call) Run(run func()) *MockNPDU_GetDestinationLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetDestinationLength_Call) Return(_a0 *uint8) *MockNPDU_GetDestinationLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetDestinationLength_Call) RunAndReturn(run func() *uint8) *MockNPDU_GetDestinationLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestinationLengthAddon provides a mock function with given fields:
func (_m *MockNPDU) GetDestinationLengthAddon() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDestinationLengthAddon")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPDU_GetDestinationLengthAddon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestinationLengthAddon'
type MockNPDU_GetDestinationLengthAddon_Call struct {
	*mock.Call
}

// GetDestinationLengthAddon is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetDestinationLengthAddon() *MockNPDU_GetDestinationLengthAddon_Call {
	return &MockNPDU_GetDestinationLengthAddon_Call{Call: _e.mock.On("GetDestinationLengthAddon")}
}

func (_c *MockNPDU_GetDestinationLengthAddon_Call) Run(run func()) *MockNPDU_GetDestinationLengthAddon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetDestinationLengthAddon_Call) Return(_a0 uint16) *MockNPDU_GetDestinationLengthAddon_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetDestinationLengthAddon_Call) RunAndReturn(run func() uint16) *MockNPDU_GetDestinationLengthAddon_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestinationNetworkAddress provides a mock function with given fields:
func (_m *MockNPDU) GetDestinationNetworkAddress() *uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDestinationNetworkAddress")
	}

	var r0 *uint16
	if rf, ok := ret.Get(0).(func() *uint16); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint16)
		}
	}

	return r0
}

// MockNPDU_GetDestinationNetworkAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestinationNetworkAddress'
type MockNPDU_GetDestinationNetworkAddress_Call struct {
	*mock.Call
}

// GetDestinationNetworkAddress is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetDestinationNetworkAddress() *MockNPDU_GetDestinationNetworkAddress_Call {
	return &MockNPDU_GetDestinationNetworkAddress_Call{Call: _e.mock.On("GetDestinationNetworkAddress")}
}

func (_c *MockNPDU_GetDestinationNetworkAddress_Call) Run(run func()) *MockNPDU_GetDestinationNetworkAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetDestinationNetworkAddress_Call) Return(_a0 *uint16) *MockNPDU_GetDestinationNetworkAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetDestinationNetworkAddress_Call) RunAndReturn(run func() *uint16) *MockNPDU_GetDestinationNetworkAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpectingReply provides a mock function with given fields:
func (_m *MockNPDU) GetExpectingReply() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpectingReply")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNPDU_GetExpectingReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectingReply'
type MockNPDU_GetExpectingReply_Call struct {
	*mock.Call
}

// GetExpectingReply is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetExpectingReply() *MockNPDU_GetExpectingReply_Call {
	return &MockNPDU_GetExpectingReply_Call{Call: _e.mock.On("GetExpectingReply")}
}

func (_c *MockNPDU_GetExpectingReply_Call) Run(run func()) *MockNPDU_GetExpectingReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetExpectingReply_Call) Return(_a0 bool) *MockNPDU_GetExpectingReply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetExpectingReply_Call) RunAndReturn(run func() bool) *MockNPDU_GetExpectingReply_Call {
	_c.Call.Return(run)
	return _c
}

// GetHopCount provides a mock function with given fields:
func (_m *MockNPDU) GetHopCount() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHopCount")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPDU_GetHopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHopCount'
type MockNPDU_GetHopCount_Call struct {
	*mock.Call
}

// GetHopCount is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetHopCount() *MockNPDU_GetHopCount_Call {
	return &MockNPDU_GetHopCount_Call{Call: _e.mock.On("GetHopCount")}
}

func (_c *MockNPDU_GetHopCount_Call) Run(run func()) *MockNPDU_GetHopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetHopCount_Call) Return(_a0 *uint8) *MockNPDU_GetHopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetHopCount_Call) RunAndReturn(run func() *uint8) *MockNPDU_GetHopCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetLengthInBits provides a mock function with given fields: ctx
func (_m *MockNPDU) GetLengthInBits(ctx context.Context) uint16 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLengthInBits")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context) uint16); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPDU_GetLengthInBits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLengthInBits'
type MockNPDU_GetLengthInBits_Call struct {
	*mock.Call
}

// GetLengthInBits is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNPDU_Expecter) GetLengthInBits(ctx interface{}) *MockNPDU_GetLengthInBits_Call {
	return &MockNPDU_GetLengthInBits_Call{Call: _e.mock.On("GetLengthInBits", ctx)}
}

func (_c *MockNPDU_GetLengthInBits_Call) Run(run func(ctx context.Context)) *MockNPDU_GetLengthInBits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNPDU_GetLengthInBits_Call) Return(_a0 uint16) *MockNPDU_GetLengthInBits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetLengthInBits_Call) RunAndReturn(run func(context.Context) uint16) *MockNPDU_GetLengthInBits_Call {
	_c.Call.Return(run)
	return _c
}

// GetLengthInBytes provides a mock function with given fields: ctx
func (_m *MockNPDU) GetLengthInBytes(ctx context.Context) uint16 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLengthInBytes")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context) uint16); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPDU_GetLengthInBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLengthInBytes'
type MockNPDU_GetLengthInBytes_Call struct {
	*mock.Call
}

// GetLengthInBytes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNPDU_Expecter) GetLengthInBytes(ctx interface{}) *MockNPDU_GetLengthInBytes_Call {
	return &MockNPDU_GetLengthInBytes_Call{Call: _e.mock.On("GetLengthInBytes", ctx)}
}

func (_c *MockNPDU_GetLengthInBytes_Call) Run(run func(ctx context.Context)) *MockNPDU_GetLengthInBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNPDU_GetLengthInBytes_Call) Return(_a0 uint16) *MockNPDU_GetLengthInBytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetLengthInBytes_Call) RunAndReturn(run func(context.Context) uint16) *MockNPDU_GetLengthInBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLong provides a mock function with given fields:
func (_m *MockNPDU) GetLong() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLong")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNPDU_GetLong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLong'
type MockNPDU_GetLong_Call struct {
	*mock.Call
}

// GetLong is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetLong() *MockNPDU_GetLong_Call {
	return &MockNPDU_GetLong_Call{Call: _e.mock.On("GetLong")}
}

func (_c *MockNPDU_GetLong_Call) Run(run func()) *MockNPDU_GetLong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetLong_Call) Return(_a0 int64, _a1 error) *MockNPDU_GetLong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNPDU_GetLong_Call) RunAndReturn(run func() (int64, error)) *MockNPDU_GetLong_Call {
	_c.Call.Return(run)
	return _c
}

// GetNPDUNetMessage provides a mock function with given fields:
func (_m *MockNPDU) GetNPDUNetMessage() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNPDUNetMessage")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPDU_GetNPDUNetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNPDUNetMessage'
type MockNPDU_GetNPDUNetMessage_Call struct {
	*mock.Call
}

// GetNPDUNetMessage is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetNPDUNetMessage() *MockNPDU_GetNPDUNetMessage_Call {
	return &MockNPDU_GetNPDUNetMessage_Call{Call: _e.mock.On("GetNPDUNetMessage")}
}

func (_c *MockNPDU_GetNPDUNetMessage_Call) Run(run func()) *MockNPDU_GetNPDUNetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetNPDUNetMessage_Call) Return(_a0 *uint8) *MockNPDU_GetNPDUNetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetNPDUNetMessage_Call) RunAndReturn(run func() *uint8) *MockNPDU_GetNPDUNetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkPriority provides a mock function with given fields:
func (_m *MockNPDU) GetNetworkPriority() model.NPDUNetworkPriority {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPriority")
	}

	var r0 model.NPDUNetworkPriority
	if rf, ok := ret.Get(0).(func() model.NPDUNetworkPriority); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.NPDUNetworkPriority)
	}

	return r0
}

// MockNPDU_GetNetworkPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkPriority'
type MockNPDU_GetNetworkPriority_Call struct {
	*mock.Call
}

// GetNetworkPriority is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetNetworkPriority() *MockNPDU_GetNetworkPriority_Call {
	return &MockNPDU_GetNetworkPriority_Call{Call: _e.mock.On("GetNetworkPriority")}
}

func (_c *MockNPDU_GetNetworkPriority_Call) Run(run func()) *MockNPDU_GetNetworkPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetNetworkPriority_Call) Return(_a0 model.NPDUNetworkPriority) *MockNPDU_GetNetworkPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetNetworkPriority_Call) RunAndReturn(run func() model.NPDUNetworkPriority) *MockNPDU_GetNetworkPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetNlm provides a mock function with given fields:
func (_m *MockNPDU) GetNlm() model.NLM {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNlm")
	}

	var r0 model.NLM
	if rf, ok := ret.Get(0).(func() model.NLM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.NLM)
		}
	}

	return r0
}

// MockNPDU_GetNlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNlm'
type MockNPDU_GetNlm_Call struct {
	*mock.Call
}

// GetNlm is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetNlm() *MockNPDU_GetNlm_Call {
	return &MockNPDU_GetNlm_Call{Call: _e.mock.On("GetNlm")}
}

func (_c *MockNPDU_GetNlm_Call) Run(run func()) *MockNPDU_GetNlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetNlm_Call) Return(_a0 model.NLM) *MockNPDU_GetNlm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetNlm_Call) RunAndReturn(run func() model.NLM) *MockNPDU_GetNlm_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUDestination provides a mock function with given fields:
func (_m *MockNPDU) GetPDUDestination() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUDestination")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPDU_GetPDUDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUDestination'
type MockNPDU_GetPDUDestination_Call struct {
	*mock.Call
}

// GetPDUDestination is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetPDUDestination() *MockNPDU_GetPDUDestination_Call {
	return &MockNPDU_GetPDUDestination_Call{Call: _e.mock.On("GetPDUDestination")}
}

func (_c *MockNPDU_GetPDUDestination_Call) Run(run func()) *MockNPDU_GetPDUDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetPDUDestination_Call) Return(_a0 *Address) *MockNPDU_GetPDUDestination_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetPDUDestination_Call) RunAndReturn(run func() *Address) *MockNPDU_GetPDUDestination_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUSource provides a mock function with given fields:
func (_m *MockNPDU) GetPDUSource() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUSource")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPDU_GetPDUSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUSource'
type MockNPDU_GetPDUSource_Call struct {
	*mock.Call
}

// GetPDUSource is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetPDUSource() *MockNPDU_GetPDUSource_Call {
	return &MockNPDU_GetPDUSource_Call{Call: _e.mock.On("GetPDUSource")}
}

func (_c *MockNPDU_GetPDUSource_Call) Run(run func()) *MockNPDU_GetPDUSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetPDUSource_Call) Return(_a0 *Address) *MockNPDU_GetPDUSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetPDUSource_Call) RunAndReturn(run func() *Address) *MockNPDU_GetPDUSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUUserData provides a mock function with given fields:
func (_m *MockNPDU) GetPDUUserData() spi.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUUserData")
	}

	var r0 spi.Message
	if rf, ok := ret.Get(0).(func() spi.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.Message)
		}
	}

	return r0
}

// MockNPDU_GetPDUUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUUserData'
type MockNPDU_GetPDUUserData_Call struct {
	*mock.Call
}

// GetPDUUserData is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetPDUUserData() *MockNPDU_GetPDUUserData_Call {
	return &MockNPDU_GetPDUUserData_Call{Call: _e.mock.On("GetPDUUserData")}
}

func (_c *MockNPDU_GetPDUUserData_Call) Run(run func()) *MockNPDU_GetPDUUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetPDUUserData_Call) Return(_a0 spi.Message) *MockNPDU_GetPDUUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetPDUUserData_Call) RunAndReturn(run func() spi.Message) *MockNPDU_GetPDUUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayloadSubtraction provides a mock function with given fields:
func (_m *MockNPDU) GetPayloadSubtraction() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPayloadSubtraction")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPDU_GetPayloadSubtraction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayloadSubtraction'
type MockNPDU_GetPayloadSubtraction_Call struct {
	*mock.Call
}

// GetPayloadSubtraction is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetPayloadSubtraction() *MockNPDU_GetPayloadSubtraction_Call {
	return &MockNPDU_GetPayloadSubtraction_Call{Call: _e.mock.On("GetPayloadSubtraction")}
}

func (_c *MockNPDU_GetPayloadSubtraction_Call) Run(run func()) *MockNPDU_GetPayloadSubtraction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetPayloadSubtraction_Call) Return(_a0 uint16) *MockNPDU_GetPayloadSubtraction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetPayloadSubtraction_Call) RunAndReturn(run func() uint16) *MockNPDU_GetPayloadSubtraction_Call {
	_c.Call.Return(run)
	return _c
}

// GetPduData provides a mock function with given fields:
func (_m *MockNPDU) GetPduData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPduData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockNPDU_GetPduData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPduData'
type MockNPDU_GetPduData_Call struct {
	*mock.Call
}

// GetPduData is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetPduData() *MockNPDU_GetPduData_Call {
	return &MockNPDU_GetPduData_Call{Call: _e.mock.On("GetPduData")}
}

func (_c *MockNPDU_GetPduData_Call) Run(run func()) *MockNPDU_GetPduData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetPduData_Call) Return(_a0 []byte) *MockNPDU_GetPduData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetPduData_Call) RunAndReturn(run func() []byte) *MockNPDU_GetPduData_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolVersionNumber provides a mock function with given fields:
func (_m *MockNPDU) GetProtocolVersionNumber() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolVersionNumber")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// MockNPDU_GetProtocolVersionNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolVersionNumber'
type MockNPDU_GetProtocolVersionNumber_Call struct {
	*mock.Call
}

// GetProtocolVersionNumber is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetProtocolVersionNumber() *MockNPDU_GetProtocolVersionNumber_Call {
	return &MockNPDU_GetProtocolVersionNumber_Call{Call: _e.mock.On("GetProtocolVersionNumber")}
}

func (_c *MockNPDU_GetProtocolVersionNumber_Call) Run(run func()) *MockNPDU_GetProtocolVersionNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetProtocolVersionNumber_Call) Return(_a0 uint8) *MockNPDU_GetProtocolVersionNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetProtocolVersionNumber_Call) RunAndReturn(run func() uint8) *MockNPDU_GetProtocolVersionNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootMessage provides a mock function with given fields:
func (_m *MockNPDU) GetRootMessage() spi.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootMessage")
	}

	var r0 spi.Message
	if rf, ok := ret.Get(0).(func() spi.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.Message)
		}
	}

	return r0
}

// MockNPDU_GetRootMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootMessage'
type MockNPDU_GetRootMessage_Call struct {
	*mock.Call
}

// GetRootMessage is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetRootMessage() *MockNPDU_GetRootMessage_Call {
	return &MockNPDU_GetRootMessage_Call{Call: _e.mock.On("GetRootMessage")}
}

func (_c *MockNPDU_GetRootMessage_Call) Run(run func()) *MockNPDU_GetRootMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetRootMessage_Call) Return(_a0 spi.Message) *MockNPDU_GetRootMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetRootMessage_Call) RunAndReturn(run func() spi.Message) *MockNPDU_GetRootMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetShort provides a mock function with given fields:
func (_m *MockNPDU) GetShort() (int16, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShort")
	}

	var r0 int16
	var r1 error
	if rf, ok := ret.Get(0).(func() (int16, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int16)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNPDU_GetShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShort'
type MockNPDU_GetShort_Call struct {
	*mock.Call
}

// GetShort is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetShort() *MockNPDU_GetShort_Call {
	return &MockNPDU_GetShort_Call{Call: _e.mock.On("GetShort")}
}

func (_c *MockNPDU_GetShort_Call) Run(run func()) *MockNPDU_GetShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetShort_Call) Return(_a0 int16, _a1 error) *MockNPDU_GetShort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNPDU_GetShort_Call) RunAndReturn(run func() (int16, error)) *MockNPDU_GetShort_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceAddress provides a mock function with given fields:
func (_m *MockNPDU) GetSourceAddress() []uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceAddress")
	}

	var r0 []uint8
	if rf, ok := ret.Get(0).(func() []uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint8)
		}
	}

	return r0
}

// MockNPDU_GetSourceAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceAddress'
type MockNPDU_GetSourceAddress_Call struct {
	*mock.Call
}

// GetSourceAddress is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetSourceAddress() *MockNPDU_GetSourceAddress_Call {
	return &MockNPDU_GetSourceAddress_Call{Call: _e.mock.On("GetSourceAddress")}
}

func (_c *MockNPDU_GetSourceAddress_Call) Run(run func()) *MockNPDU_GetSourceAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetSourceAddress_Call) Return(_a0 []uint8) *MockNPDU_GetSourceAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetSourceAddress_Call) RunAndReturn(run func() []uint8) *MockNPDU_GetSourceAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceLength provides a mock function with given fields:
func (_m *MockNPDU) GetSourceLength() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceLength")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPDU_GetSourceLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceLength'
type MockNPDU_GetSourceLength_Call struct {
	*mock.Call
}

// GetSourceLength is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetSourceLength() *MockNPDU_GetSourceLength_Call {
	return &MockNPDU_GetSourceLength_Call{Call: _e.mock.On("GetSourceLength")}
}

func (_c *MockNPDU_GetSourceLength_Call) Run(run func()) *MockNPDU_GetSourceLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetSourceLength_Call) Return(_a0 *uint8) *MockNPDU_GetSourceLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetSourceLength_Call) RunAndReturn(run func() *uint8) *MockNPDU_GetSourceLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceLengthAddon provides a mock function with given fields:
func (_m *MockNPDU) GetSourceLengthAddon() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceLengthAddon")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPDU_GetSourceLengthAddon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceLengthAddon'
type MockNPDU_GetSourceLengthAddon_Call struct {
	*mock.Call
}

// GetSourceLengthAddon is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetSourceLengthAddon() *MockNPDU_GetSourceLengthAddon_Call {
	return &MockNPDU_GetSourceLengthAddon_Call{Call: _e.mock.On("GetSourceLengthAddon")}
}

func (_c *MockNPDU_GetSourceLengthAddon_Call) Run(run func()) *MockNPDU_GetSourceLengthAddon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetSourceLengthAddon_Call) Return(_a0 uint16) *MockNPDU_GetSourceLengthAddon_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetSourceLengthAddon_Call) RunAndReturn(run func() uint16) *MockNPDU_GetSourceLengthAddon_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceNetworkAddress provides a mock function with given fields:
func (_m *MockNPDU) GetSourceNetworkAddress() *uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceNetworkAddress")
	}

	var r0 *uint16
	if rf, ok := ret.Get(0).(func() *uint16); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint16)
		}
	}

	return r0
}

// MockNPDU_GetSourceNetworkAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceNetworkAddress'
type MockNPDU_GetSourceNetworkAddress_Call struct {
	*mock.Call
}

// GetSourceNetworkAddress is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) GetSourceNetworkAddress() *MockNPDU_GetSourceNetworkAddress_Call {
	return &MockNPDU_GetSourceNetworkAddress_Call{Call: _e.mock.On("GetSourceNetworkAddress")}
}

func (_c *MockNPDU_GetSourceNetworkAddress_Call) Run(run func()) *MockNPDU_GetSourceNetworkAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_GetSourceNetworkAddress_Call) Return(_a0 *uint16) *MockNPDU_GetSourceNetworkAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_GetSourceNetworkAddress_Call) RunAndReturn(run func() *uint16) *MockNPDU_GetSourceNetworkAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0
func (_m *MockNPDU) Put(_a0 byte) {
	_m.Called(_a0)
}

// MockNPDU_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockNPDU_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 byte
func (_e *MockNPDU_Expecter) Put(_a0 interface{}) *MockNPDU_Put_Call {
	return &MockNPDU_Put_Call{Call: _e.mock.On("Put", _a0)}
}

func (_c *MockNPDU_Put_Call) Run(run func(_a0 byte)) *MockNPDU_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockNPDU_Put_Call) Return() *MockNPDU_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_Put_Call) RunAndReturn(run func(byte)) *MockNPDU_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutData provides a mock function with given fields: _a0
func (_m *MockNPDU) PutData(_a0 ...byte) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockNPDU_PutData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutData'
type MockNPDU_PutData_Call struct {
	*mock.Call
}

// PutData is a helper method to define mock.On call
//   - _a0 ...byte
func (_e *MockNPDU_Expecter) PutData(_a0 ...interface{}) *MockNPDU_PutData_Call {
	return &MockNPDU_PutData_Call{Call: _e.mock.On("PutData",
		append([]interface{}{}, _a0...)...)}
}

func (_c *MockNPDU_PutData_Call) Run(run func(_a0 ...byte)) *MockNPDU_PutData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]byte, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(byte)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockNPDU_PutData_Call) Return() *MockNPDU_PutData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_PutData_Call) RunAndReturn(run func(...byte)) *MockNPDU_PutData_Call {
	_c.Call.Return(run)
	return _c
}

// PutLong provides a mock function with given fields: _a0
func (_m *MockNPDU) PutLong(_a0 uint32) {
	_m.Called(_a0)
}

// MockNPDU_PutLong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLong'
type MockNPDU_PutLong_Call struct {
	*mock.Call
}

// PutLong is a helper method to define mock.On call
//   - _a0 uint32
func (_e *MockNPDU_Expecter) PutLong(_a0 interface{}) *MockNPDU_PutLong_Call {
	return &MockNPDU_PutLong_Call{Call: _e.mock.On("PutLong", _a0)}
}

func (_c *MockNPDU_PutLong_Call) Run(run func(_a0 uint32)) *MockNPDU_PutLong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *MockNPDU_PutLong_Call) Return() *MockNPDU_PutLong_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_PutLong_Call) RunAndReturn(run func(uint32)) *MockNPDU_PutLong_Call {
	_c.Call.Return(run)
	return _c
}

// PutShort provides a mock function with given fields: _a0
func (_m *MockNPDU) PutShort(_a0 uint16) {
	_m.Called(_a0)
}

// MockNPDU_PutShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutShort'
type MockNPDU_PutShort_Call struct {
	*mock.Call
}

// PutShort is a helper method to define mock.On call
//   - _a0 uint16
func (_e *MockNPDU_Expecter) PutShort(_a0 interface{}) *MockNPDU_PutShort_Call {
	return &MockNPDU_PutShort_Call{Call: _e.mock.On("PutShort", _a0)}
}

func (_c *MockNPDU_PutShort_Call) Run(run func(_a0 uint16)) *MockNPDU_PutShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16))
	})
	return _c
}

func (_c *MockNPDU_PutShort_Call) Return() *MockNPDU_PutShort_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_PutShort_Call) RunAndReturn(run func(uint16)) *MockNPDU_PutShort_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields:
func (_m *MockNPDU) Serialize() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNPDU_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockNPDU_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) Serialize() *MockNPDU_Serialize_Call {
	return &MockNPDU_Serialize_Call{Call: _e.mock.On("Serialize")}
}

func (_c *MockNPDU_Serialize_Call) Run(run func()) *MockNPDU_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_Serialize_Call) Return(_a0 []byte, _a1 error) *MockNPDU_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNPDU_Serialize_Call) RunAndReturn(run func() ([]byte, error)) *MockNPDU_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// SerializeWithWriteBuffer provides a mock function with given fields: ctx, writeBuffer
func (_m *MockNPDU) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	ret := _m.Called(ctx, writeBuffer)

	if len(ret) == 0 {
		panic("no return value specified for SerializeWithWriteBuffer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.WriteBuffer) error); ok {
		r0 = rf(ctx, writeBuffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPDU_SerializeWithWriteBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerializeWithWriteBuffer'
type MockNPDU_SerializeWithWriteBuffer_Call struct {
	*mock.Call
}

// SerializeWithWriteBuffer is a helper method to define mock.On call
//   - ctx context.Context
//   - writeBuffer utils.WriteBuffer
func (_e *MockNPDU_Expecter) SerializeWithWriteBuffer(ctx interface{}, writeBuffer interface{}) *MockNPDU_SerializeWithWriteBuffer_Call {
	return &MockNPDU_SerializeWithWriteBuffer_Call{Call: _e.mock.On("SerializeWithWriteBuffer", ctx, writeBuffer)}
}

func (_c *MockNPDU_SerializeWithWriteBuffer_Call) Run(run func(ctx context.Context, writeBuffer utils.WriteBuffer)) *MockNPDU_SerializeWithWriteBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.WriteBuffer))
	})
	return _c
}

func (_c *MockNPDU_SerializeWithWriteBuffer_Call) Return(_a0 error) *MockNPDU_SerializeWithWriteBuffer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_SerializeWithWriteBuffer_Call) RunAndReturn(run func(context.Context, utils.WriteBuffer) error) *MockNPDU_SerializeWithWriteBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// SetExpectingReply provides a mock function with given fields: _a0
func (_m *MockNPDU) SetExpectingReply(_a0 bool) {
	_m.Called(_a0)
}

// MockNPDU_SetExpectingReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpectingReply'
type MockNPDU_SetExpectingReply_Call struct {
	*mock.Call
}

// SetExpectingReply is a helper method to define mock.On call
//   - _a0 bool
func (_e *MockNPDU_Expecter) SetExpectingReply(_a0 interface{}) *MockNPDU_SetExpectingReply_Call {
	return &MockNPDU_SetExpectingReply_Call{Call: _e.mock.On("SetExpectingReply", _a0)}
}

func (_c *MockNPDU_SetExpectingReply_Call) Run(run func(_a0 bool)) *MockNPDU_SetExpectingReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockNPDU_SetExpectingReply_Call) Return() *MockNPDU_SetExpectingReply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_SetExpectingReply_Call) RunAndReturn(run func(bool)) *MockNPDU_SetExpectingReply_Call {
	_c.Call.Return(run)
	return _c
}

// SetNetworkPriority provides a mock function with given fields: _a0
func (_m *MockNPDU) SetNetworkPriority(_a0 model.NPDUNetworkPriority) {
	_m.Called(_a0)
}

// MockNPDU_SetNetworkPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNetworkPriority'
type MockNPDU_SetNetworkPriority_Call struct {
	*mock.Call
}

// SetNetworkPriority is a helper method to define mock.On call
//   - _a0 model.NPDUNetworkPriority
func (_e *MockNPDU_Expecter) SetNetworkPriority(_a0 interface{}) *MockNPDU_SetNetworkPriority_Call {
	return &MockNPDU_SetNetworkPriority_Call{Call: _e.mock.On("SetNetworkPriority", _a0)}
}

func (_c *MockNPDU_SetNetworkPriority_Call) Run(run func(_a0 model.NPDUNetworkPriority)) *MockNPDU_SetNetworkPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.NPDUNetworkPriority))
	})
	return _c
}

func (_c *MockNPDU_SetNetworkPriority_Call) Return() *MockNPDU_SetNetworkPriority_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_SetNetworkPriority_Call) RunAndReturn(run func(model.NPDUNetworkPriority)) *MockNPDU_SetNetworkPriority_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUDestination provides a mock function with given fields: _a0
func (_m *MockNPDU) SetPDUDestination(_a0 *Address) {
	_m.Called(_a0)
}

// MockNPDU_SetPDUDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUDestination'
type MockNPDU_SetPDUDestination_Call struct {
	*mock.Call
}

// SetPDUDestination is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockNPDU_Expecter) SetPDUDestination(_a0 interface{}) *MockNPDU_SetPDUDestination_Call {
	return &MockNPDU_SetPDUDestination_Call{Call: _e.mock.On("SetPDUDestination", _a0)}
}

func (_c *MockNPDU_SetPDUDestination_Call) Run(run func(_a0 *Address)) *MockNPDU_SetPDUDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPDU_SetPDUDestination_Call) Return() *MockNPDU_SetPDUDestination_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_SetPDUDestination_Call) RunAndReturn(run func(*Address)) *MockNPDU_SetPDUDestination_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUSource provides a mock function with given fields: source
func (_m *MockNPDU) SetPDUSource(source *Address) {
	_m.Called(source)
}

// MockNPDU_SetPDUSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUSource'
type MockNPDU_SetPDUSource_Call struct {
	*mock.Call
}

// SetPDUSource is a helper method to define mock.On call
//   - source *Address
func (_e *MockNPDU_Expecter) SetPDUSource(source interface{}) *MockNPDU_SetPDUSource_Call {
	return &MockNPDU_SetPDUSource_Call{Call: _e.mock.On("SetPDUSource", source)}
}

func (_c *MockNPDU_SetPDUSource_Call) Run(run func(source *Address)) *MockNPDU_SetPDUSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPDU_SetPDUSource_Call) Return() *MockNPDU_SetPDUSource_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_SetPDUSource_Call) RunAndReturn(run func(*Address)) *MockNPDU_SetPDUSource_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUUserData provides a mock function with given fields: _a0
func (_m *MockNPDU) SetPDUUserData(_a0 spi.Message) {
	_m.Called(_a0)
}

// MockNPDU_SetPDUUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUUserData'
type MockNPDU_SetPDUUserData_Call struct {
	*mock.Call
}

// SetPDUUserData is a helper method to define mock.On call
//   - _a0 spi.Message
func (_e *MockNPDU_Expecter) SetPDUUserData(_a0 interface{}) *MockNPDU_SetPDUUserData_Call {
	return &MockNPDU_SetPDUUserData_Call{Call: _e.mock.On("SetPDUUserData", _a0)}
}

func (_c *MockNPDU_SetPDUUserData_Call) Run(run func(_a0 spi.Message)) *MockNPDU_SetPDUUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spi.Message))
	})
	return _c
}

func (_c *MockNPDU_SetPDUUserData_Call) Return() *MockNPDU_SetPDUUserData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_SetPDUUserData_Call) RunAndReturn(run func(spi.Message)) *MockNPDU_SetPDUUserData_Call {
	_c.Call.Return(run)
	return _c
}

// SetPduData provides a mock function with given fields: _a0
func (_m *MockNPDU) SetPduData(_a0 []byte) {
	_m.Called(_a0)
}

// MockNPDU_SetPduData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPduData'
type MockNPDU_SetPduData_Call struct {
	*mock.Call
}

// SetPduData is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockNPDU_Expecter) SetPduData(_a0 interface{}) *MockNPDU_SetPduData_Call {
	return &MockNPDU_SetPduData_Call{Call: _e.mock.On("SetPduData", _a0)}
}

func (_c *MockNPDU_SetPduData_Call) Run(run func(_a0 []byte)) *MockNPDU_SetPduData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockNPDU_SetPduData_Call) Return() *MockNPDU_SetPduData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_SetPduData_Call) RunAndReturn(run func([]byte)) *MockNPDU_SetPduData_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockNPDU) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNPDU_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockNPDU_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) String() *MockNPDU_String_Call {
	return &MockNPDU_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockNPDU_String_Call) Run(run func()) *MockNPDU_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_String_Call) Return(_a0 string) *MockNPDU_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_String_Call) RunAndReturn(run func() string) *MockNPDU_String_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: pci
func (_m *MockNPDU) Update(pci Arg) error {
	ret := _m.Called(pci)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pci)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPDU_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNPDU_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - pci Arg
func (_e *MockNPDU_Expecter) Update(pci interface{}) *MockNPDU_Update_Call {
	return &MockNPDU_Update_Call{Call: _e.mock.On("Update", pci)}
}

func (_c *MockNPDU_Update_Call) Run(run func(pci Arg)) *MockNPDU_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockNPDU_Update_Call) Return(_a0 error) *MockNPDU_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_Update_Call) RunAndReturn(run func(Arg) error) *MockNPDU_Update_Call {
	_c.Call.Return(run)
	return _c
}

// getAPDU provides a mock function with given fields:
func (_m *MockNPDU) getAPDU() model.APDU {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getAPDU")
	}

	var r0 model.APDU
	if rf, ok := ret.Get(0).(func() model.APDU); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.APDU)
		}
	}

	return r0
}

// MockNPDU_getAPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAPDU'
type MockNPDU_getAPDU_Call struct {
	*mock.Call
}

// getAPDU is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getAPDU() *MockNPDU_getAPDU_Call {
	return &MockNPDU_getAPDU_Call{Call: _e.mock.On("getAPDU")}
}

func (_c *MockNPDU_getAPDU_Call) Run(run func()) *MockNPDU_getAPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getAPDU_Call) Return(_a0 model.APDU) *MockNPDU_getAPDU_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getAPDU_Call) RunAndReturn(run func() model.APDU) *MockNPDU_getAPDU_Call {
	_c.Call.Return(run)
	return _c
}

// getNLM provides a mock function with given fields:
func (_m *MockNPDU) getNLM() model.NLM {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNLM")
	}

	var r0 model.NLM
	if rf, ok := ret.Get(0).(func() model.NLM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.NLM)
		}
	}

	return r0
}

// MockNPDU_getNLM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNLM'
type MockNPDU_getNLM_Call struct {
	*mock.Call
}

// getNLM is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNLM() *MockNPDU_getNLM_Call {
	return &MockNPDU_getNLM_Call{Call: _e.mock.On("getNLM")}
}

func (_c *MockNPDU_getNLM_Call) Run(run func()) *MockNPDU_getNLM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNLM_Call) Return(_a0 model.NLM) *MockNPDU_getNLM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNLM_Call) RunAndReturn(run func() model.NLM) *MockNPDU_getNLM_Call {
	_c.Call.Return(run)
	return _c
}

// getNPDU provides a mock function with given fields:
func (_m *MockNPDU) getNPDU() model.NPDU {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNPDU")
	}

	var r0 model.NPDU
	if rf, ok := ret.Get(0).(func() model.NPDU); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.NPDU)
		}
	}

	return r0
}

// MockNPDU_getNPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNPDU'
type MockNPDU_getNPDU_Call struct {
	*mock.Call
}

// getNPDU is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNPDU() *MockNPDU_getNPDU_Call {
	return &MockNPDU_getNPDU_Call{Call: _e.mock.On("getNPDU")}
}

func (_c *MockNPDU_getNPDU_Call) Run(run func()) *MockNPDU_getNPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNPDU_Call) Return(_a0 model.NPDU) *MockNPDU_getNPDU_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNPDU_Call) RunAndReturn(run func() model.NPDU) *MockNPDU_getNPDU_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduControl provides a mock function with given fields:
func (_m *MockNPDU) getNpduControl() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduControl")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// MockNPDU_getNpduControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduControl'
type MockNPDU_getNpduControl_Call struct {
	*mock.Call
}

// getNpduControl is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduControl() *MockNPDU_getNpduControl_Call {
	return &MockNPDU_getNpduControl_Call{Call: _e.mock.On("getNpduControl")}
}

func (_c *MockNPDU_getNpduControl_Call) Run(run func()) *MockNPDU_getNpduControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduControl_Call) Return(_a0 uint8) *MockNPDU_getNpduControl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduControl_Call) RunAndReturn(run func() uint8) *MockNPDU_getNpduControl_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduDADR provides a mock function with given fields:
func (_m *MockNPDU) getNpduDADR() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduDADR")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPDU_getNpduDADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduDADR'
type MockNPDU_getNpduDADR_Call struct {
	*mock.Call
}

// getNpduDADR is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduDADR() *MockNPDU_getNpduDADR_Call {
	return &MockNPDU_getNpduDADR_Call{Call: _e.mock.On("getNpduDADR")}
}

func (_c *MockNPDU_getNpduDADR_Call) Run(run func()) *MockNPDU_getNpduDADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduDADR_Call) Return(_a0 *Address) *MockNPDU_getNpduDADR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduDADR_Call) RunAndReturn(run func() *Address) *MockNPDU_getNpduDADR_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduHopCount provides a mock function with given fields:
func (_m *MockNPDU) getNpduHopCount() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduHopCount")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPDU_getNpduHopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduHopCount'
type MockNPDU_getNpduHopCount_Call struct {
	*mock.Call
}

// getNpduHopCount is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduHopCount() *MockNPDU_getNpduHopCount_Call {
	return &MockNPDU_getNpduHopCount_Call{Call: _e.mock.On("getNpduHopCount")}
}

func (_c *MockNPDU_getNpduHopCount_Call) Run(run func()) *MockNPDU_getNpduHopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduHopCount_Call) Return(_a0 *uint8) *MockNPDU_getNpduHopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduHopCount_Call) RunAndReturn(run func() *uint8) *MockNPDU_getNpduHopCount_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduNetMessage provides a mock function with given fields:
func (_m *MockNPDU) getNpduNetMessage() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduNetMessage")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPDU_getNpduNetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduNetMessage'
type MockNPDU_getNpduNetMessage_Call struct {
	*mock.Call
}

// getNpduNetMessage is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduNetMessage() *MockNPDU_getNpduNetMessage_Call {
	return &MockNPDU_getNpduNetMessage_Call{Call: _e.mock.On("getNpduNetMessage")}
}

func (_c *MockNPDU_getNpduNetMessage_Call) Run(run func()) *MockNPDU_getNpduNetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduNetMessage_Call) Return(_a0 *uint8) *MockNPDU_getNpduNetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduNetMessage_Call) RunAndReturn(run func() *uint8) *MockNPDU_getNpduNetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduSADR provides a mock function with given fields:
func (_m *MockNPDU) getNpduSADR() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduSADR")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPDU_getNpduSADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduSADR'
type MockNPDU_getNpduSADR_Call struct {
	*mock.Call
}

// getNpduSADR is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduSADR() *MockNPDU_getNpduSADR_Call {
	return &MockNPDU_getNpduSADR_Call{Call: _e.mock.On("getNpduSADR")}
}

func (_c *MockNPDU_getNpduSADR_Call) Run(run func()) *MockNPDU_getNpduSADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduSADR_Call) Return(_a0 *Address) *MockNPDU_getNpduSADR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduSADR_Call) RunAndReturn(run func() *Address) *MockNPDU_getNpduSADR_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduVendorID provides a mock function with given fields:
func (_m *MockNPDU) getNpduVendorID() *model.BACnetVendorId {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduVendorID")
	}

	var r0 *model.BACnetVendorId
	if rf, ok := ret.Get(0).(func() *model.BACnetVendorId); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BACnetVendorId)
		}
	}

	return r0
}

// MockNPDU_getNpduVendorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduVendorID'
type MockNPDU_getNpduVendorID_Call struct {
	*mock.Call
}

// getNpduVendorID is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduVendorID() *MockNPDU_getNpduVendorID_Call {
	return &MockNPDU_getNpduVendorID_Call{Call: _e.mock.On("getNpduVendorID")}
}

func (_c *MockNPDU_getNpduVendorID_Call) Run(run func()) *MockNPDU_getNpduVendorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduVendorID_Call) Return(_a0 *model.BACnetVendorId) *MockNPDU_getNpduVendorID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduVendorID_Call) RunAndReturn(run func() *model.BACnetVendorId) *MockNPDU_getNpduVendorID_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduVersion provides a mock function with given fields:
func (_m *MockNPDU) getNpduVersion() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduVersion")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// MockNPDU_getNpduVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduVersion'
type MockNPDU_getNpduVersion_Call struct {
	*mock.Call
}

// getNpduVersion is a helper method to define mock.On call
func (_e *MockNPDU_Expecter) getNpduVersion() *MockNPDU_getNpduVersion_Call {
	return &MockNPDU_getNpduVersion_Call{Call: _e.mock.On("getNpduVersion")}
}

func (_c *MockNPDU_getNpduVersion_Call) Run(run func()) *MockNPDU_getNpduVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPDU_getNpduVersion_Call) Return(_a0 uint8) *MockNPDU_getNpduVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPDU_getNpduVersion_Call) RunAndReturn(run func() uint8) *MockNPDU_getNpduVersion_Call {
	_c.Call.Return(run)
	return _c
}

// setAPDU provides a mock function with given fields: _a0
func (_m *MockNPDU) setAPDU(_a0 model.APDU) {
	_m.Called(_a0)
}

// MockNPDU_setAPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setAPDU'
type MockNPDU_setAPDU_Call struct {
	*mock.Call
}

// setAPDU is a helper method to define mock.On call
//   - _a0 model.APDU
func (_e *MockNPDU_Expecter) setAPDU(_a0 interface{}) *MockNPDU_setAPDU_Call {
	return &MockNPDU_setAPDU_Call{Call: _e.mock.On("setAPDU", _a0)}
}

func (_c *MockNPDU_setAPDU_Call) Run(run func(_a0 model.APDU)) *MockNPDU_setAPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.APDU))
	})
	return _c
}

func (_c *MockNPDU_setAPDU_Call) Return() *MockNPDU_setAPDU_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setAPDU_Call) RunAndReturn(run func(model.APDU)) *MockNPDU_setAPDU_Call {
	_c.Call.Return(run)
	return _c
}

// setNLM provides a mock function with given fields: _a0
func (_m *MockNPDU) setNLM(_a0 model.NLM) {
	_m.Called(_a0)
}

// MockNPDU_setNLM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNLM'
type MockNPDU_setNLM_Call struct {
	*mock.Call
}

// setNLM is a helper method to define mock.On call
//   - _a0 model.NLM
func (_e *MockNPDU_Expecter) setNLM(_a0 interface{}) *MockNPDU_setNLM_Call {
	return &MockNPDU_setNLM_Call{Call: _e.mock.On("setNLM", _a0)}
}

func (_c *MockNPDU_setNLM_Call) Run(run func(_a0 model.NLM)) *MockNPDU_setNLM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.NLM))
	})
	return _c
}

func (_c *MockNPDU_setNLM_Call) Return() *MockNPDU_setNLM_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNLM_Call) RunAndReturn(run func(model.NLM)) *MockNPDU_setNLM_Call {
	_c.Call.Return(run)
	return _c
}

// setNPDU provides a mock function with given fields: _a0
func (_m *MockNPDU) setNPDU(_a0 model.NPDU) {
	_m.Called(_a0)
}

// MockNPDU_setNPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNPDU'
type MockNPDU_setNPDU_Call struct {
	*mock.Call
}

// setNPDU is a helper method to define mock.On call
//   - _a0 model.NPDU
func (_e *MockNPDU_Expecter) setNPDU(_a0 interface{}) *MockNPDU_setNPDU_Call {
	return &MockNPDU_setNPDU_Call{Call: _e.mock.On("setNPDU", _a0)}
}

func (_c *MockNPDU_setNPDU_Call) Run(run func(_a0 model.NPDU)) *MockNPDU_setNPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.NPDU))
	})
	return _c
}

func (_c *MockNPDU_setNPDU_Call) Return() *MockNPDU_setNPDU_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNPDU_Call) RunAndReturn(run func(model.NPDU)) *MockNPDU_setNPDU_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduControl provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduControl(_a0 uint8) {
	_m.Called(_a0)
}

// MockNPDU_setNpduControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduControl'
type MockNPDU_setNpduControl_Call struct {
	*mock.Call
}

// setNpduControl is a helper method to define mock.On call
//   - _a0 uint8
func (_e *MockNPDU_Expecter) setNpduControl(_a0 interface{}) *MockNPDU_setNpduControl_Call {
	return &MockNPDU_setNpduControl_Call{Call: _e.mock.On("setNpduControl", _a0)}
}

func (_c *MockNPDU_setNpduControl_Call) Run(run func(_a0 uint8)) *MockNPDU_setNpduControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *MockNPDU_setNpduControl_Call) Return() *MockNPDU_setNpduControl_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduControl_Call) RunAndReturn(run func(uint8)) *MockNPDU_setNpduControl_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduDADR provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduDADR(_a0 *Address) {
	_m.Called(_a0)
}

// MockNPDU_setNpduDADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduDADR'
type MockNPDU_setNpduDADR_Call struct {
	*mock.Call
}

// setNpduDADR is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockNPDU_Expecter) setNpduDADR(_a0 interface{}) *MockNPDU_setNpduDADR_Call {
	return &MockNPDU_setNpduDADR_Call{Call: _e.mock.On("setNpduDADR", _a0)}
}

func (_c *MockNPDU_setNpduDADR_Call) Run(run func(_a0 *Address)) *MockNPDU_setNpduDADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPDU_setNpduDADR_Call) Return() *MockNPDU_setNpduDADR_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduDADR_Call) RunAndReturn(run func(*Address)) *MockNPDU_setNpduDADR_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduHopCount provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduHopCount(_a0 *uint8) {
	_m.Called(_a0)
}

// MockNPDU_setNpduHopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduHopCount'
type MockNPDU_setNpduHopCount_Call struct {
	*mock.Call
}

// setNpduHopCount is a helper method to define mock.On call
//   - _a0 *uint8
func (_e *MockNPDU_Expecter) setNpduHopCount(_a0 interface{}) *MockNPDU_setNpduHopCount_Call {
	return &MockNPDU_setNpduHopCount_Call{Call: _e.mock.On("setNpduHopCount", _a0)}
}

func (_c *MockNPDU_setNpduHopCount_Call) Run(run func(_a0 *uint8)) *MockNPDU_setNpduHopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*uint8))
	})
	return _c
}

func (_c *MockNPDU_setNpduHopCount_Call) Return() *MockNPDU_setNpduHopCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduHopCount_Call) RunAndReturn(run func(*uint8)) *MockNPDU_setNpduHopCount_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduNetMessage provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduNetMessage(_a0 *uint8) {
	_m.Called(_a0)
}

// MockNPDU_setNpduNetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduNetMessage'
type MockNPDU_setNpduNetMessage_Call struct {
	*mock.Call
}

// setNpduNetMessage is a helper method to define mock.On call
//   - _a0 *uint8
func (_e *MockNPDU_Expecter) setNpduNetMessage(_a0 interface{}) *MockNPDU_setNpduNetMessage_Call {
	return &MockNPDU_setNpduNetMessage_Call{Call: _e.mock.On("setNpduNetMessage", _a0)}
}

func (_c *MockNPDU_setNpduNetMessage_Call) Run(run func(_a0 *uint8)) *MockNPDU_setNpduNetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*uint8))
	})
	return _c
}

func (_c *MockNPDU_setNpduNetMessage_Call) Return() *MockNPDU_setNpduNetMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduNetMessage_Call) RunAndReturn(run func(*uint8)) *MockNPDU_setNpduNetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduSADR provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduSADR(_a0 *Address) {
	_m.Called(_a0)
}

// MockNPDU_setNpduSADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduSADR'
type MockNPDU_setNpduSADR_Call struct {
	*mock.Call
}

// setNpduSADR is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockNPDU_Expecter) setNpduSADR(_a0 interface{}) *MockNPDU_setNpduSADR_Call {
	return &MockNPDU_setNpduSADR_Call{Call: _e.mock.On("setNpduSADR", _a0)}
}

func (_c *MockNPDU_setNpduSADR_Call) Run(run func(_a0 *Address)) *MockNPDU_setNpduSADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPDU_setNpduSADR_Call) Return() *MockNPDU_setNpduSADR_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduSADR_Call) RunAndReturn(run func(*Address)) *MockNPDU_setNpduSADR_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduVendorID provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduVendorID(_a0 *model.BACnetVendorId) {
	_m.Called(_a0)
}

// MockNPDU_setNpduVendorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduVendorID'
type MockNPDU_setNpduVendorID_Call struct {
	*mock.Call
}

// setNpduVendorID is a helper method to define mock.On call
//   - _a0 *model.BACnetVendorId
func (_e *MockNPDU_Expecter) setNpduVendorID(_a0 interface{}) *MockNPDU_setNpduVendorID_Call {
	return &MockNPDU_setNpduVendorID_Call{Call: _e.mock.On("setNpduVendorID", _a0)}
}

func (_c *MockNPDU_setNpduVendorID_Call) Run(run func(_a0 *model.BACnetVendorId)) *MockNPDU_setNpduVendorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.BACnetVendorId))
	})
	return _c
}

func (_c *MockNPDU_setNpduVendorID_Call) Return() *MockNPDU_setNpduVendorID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduVendorID_Call) RunAndReturn(run func(*model.BACnetVendorId)) *MockNPDU_setNpduVendorID_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduVersion provides a mock function with given fields: _a0
func (_m *MockNPDU) setNpduVersion(_a0 uint8) {
	_m.Called(_a0)
}

// MockNPDU_setNpduVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduVersion'
type MockNPDU_setNpduVersion_Call struct {
	*mock.Call
}

// setNpduVersion is a helper method to define mock.On call
//   - _a0 uint8
func (_e *MockNPDU_Expecter) setNpduVersion(_a0 interface{}) *MockNPDU_setNpduVersion_Call {
	return &MockNPDU_setNpduVersion_Call{Call: _e.mock.On("setNpduVersion", _a0)}
}

func (_c *MockNPDU_setNpduVersion_Call) Run(run func(_a0 uint8)) *MockNPDU_setNpduVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *MockNPDU_setNpduVersion_Call) Return() *MockNPDU_setNpduVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPDU_setNpduVersion_Call) RunAndReturn(run func(uint8)) *MockNPDU_setNpduVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNPDU creates a new instance of MockNPDU. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNPDU(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNPDU {
	mock := &MockNPDU{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
