/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockEnumeratedContract is an autogenerated mock type for the EnumeratedContract type
type MockEnumeratedContract struct {
	mock.Mock
}

type MockEnumeratedContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnumeratedContract) EXPECT() *MockEnumeratedContract_Expecter {
	return &MockEnumeratedContract_Expecter{mock: &_m.Mock}
}

// GetEnumerations provides a mock function with given fields:
func (_m *MockEnumeratedContract) GetEnumerations() map[string]uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnumerations")
	}

	var r0 map[string]uint64
	if rf, ok := ret.Get(0).(func() map[string]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	return r0
}

// MockEnumeratedContract_GetEnumerations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnumerations'
type MockEnumeratedContract_GetEnumerations_Call struct {
	*mock.Call
}

// GetEnumerations is a helper method to define mock.On call
func (_e *MockEnumeratedContract_Expecter) GetEnumerations() *MockEnumeratedContract_GetEnumerations_Call {
	return &MockEnumeratedContract_GetEnumerations_Call{Call: _e.mock.On("GetEnumerations")}
}

func (_c *MockEnumeratedContract_GetEnumerations_Call) Run(run func()) *MockEnumeratedContract_GetEnumerations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnumeratedContract_GetEnumerations_Call) Return(_a0 map[string]uint64) *MockEnumeratedContract_GetEnumerations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnumeratedContract_GetEnumerations_Call) RunAndReturn(run func() map[string]uint64) *MockEnumeratedContract_GetEnumerations_Call {
	_c.Call.Return(run)
	return _c
}

// GetXlateTable provides a mock function with given fields:
func (_m *MockEnumeratedContract) GetXlateTable() map[interface{}]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetXlateTable")
	}

	var r0 map[interface{}]interface{}
	if rf, ok := ret.Get(0).(func() map[interface{}]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[interface{}]interface{})
		}
	}

	return r0
}

// MockEnumeratedContract_GetXlateTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetXlateTable'
type MockEnumeratedContract_GetXlateTable_Call struct {
	*mock.Call
}

// GetXlateTable is a helper method to define mock.On call
func (_e *MockEnumeratedContract_Expecter) GetXlateTable() *MockEnumeratedContract_GetXlateTable_Call {
	return &MockEnumeratedContract_GetXlateTable_Call{Call: _e.mock.On("GetXlateTable")}
}

func (_c *MockEnumeratedContract_GetXlateTable_Call) Run(run func()) *MockEnumeratedContract_GetXlateTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnumeratedContract_GetXlateTable_Call) Return(_a0 map[interface{}]interface{}) *MockEnumeratedContract_GetXlateTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnumeratedContract_GetXlateTable_Call) RunAndReturn(run func() map[interface{}]interface{}) *MockEnumeratedContract_GetXlateTable_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnumerated provides a mock function with given fields: enumerated
func (_m *MockEnumeratedContract) SetEnumerated(enumerated *Enumerated) {
	_m.Called(enumerated)
}

// MockEnumeratedContract_SetEnumerated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnumerated'
type MockEnumeratedContract_SetEnumerated_Call struct {
	*mock.Call
}

// SetEnumerated is a helper method to define mock.On call
//   - enumerated *Enumerated
func (_e *MockEnumeratedContract_Expecter) SetEnumerated(enumerated interface{}) *MockEnumeratedContract_SetEnumerated_Call {
	return &MockEnumeratedContract_SetEnumerated_Call{Call: _e.mock.On("SetEnumerated", enumerated)}
}

func (_c *MockEnumeratedContract_SetEnumerated_Call) Run(run func(enumerated *Enumerated)) *MockEnumeratedContract_SetEnumerated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Enumerated))
	})
	return _c
}

func (_c *MockEnumeratedContract_SetEnumerated_Call) Return() *MockEnumeratedContract_SetEnumerated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnumeratedContract_SetEnumerated_Call) RunAndReturn(run func(*Enumerated)) *MockEnumeratedContract_SetEnumerated_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnumeratedContract creates a new instance of MockEnumeratedContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnumeratedContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnumeratedContract {
	mock := &MockEnumeratedContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
