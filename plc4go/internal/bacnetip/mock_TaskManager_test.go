/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTaskManager is an autogenerated mock type for the TaskManager type
type MockTaskManager struct {
	mock.Mock
}

type MockTaskManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskManager) EXPECT() *MockTaskManager_Expecter {
	return &MockTaskManager_Expecter{mock: &_m.Mock}
}

// ClearTasks provides a mock function with given fields:
func (_m *MockTaskManager) ClearTasks() {
	_m.Called()
}

// MockTaskManager_ClearTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearTasks'
type MockTaskManager_ClearTasks_Call struct {
	*mock.Call
}

// ClearTasks is a helper method to define mock.On call
func (_e *MockTaskManager_Expecter) ClearTasks() *MockTaskManager_ClearTasks_Call {
	return &MockTaskManager_ClearTasks_Call{Call: _e.mock.On("ClearTasks")}
}

func (_c *MockTaskManager_ClearTasks_Call) Run(run func()) *MockTaskManager_ClearTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskManager_ClearTasks_Call) Return() *MockTaskManager_ClearTasks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_ClearTasks_Call) RunAndReturn(run func()) *MockTaskManager_ClearTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextTask provides a mock function with given fields:
func (_m *MockTaskManager) GetNextTask() (TaskRequirements, *time.Duration) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextTask")
	}

	var r0 TaskRequirements
	var r1 *time.Duration
	if rf, ok := ret.Get(0).(func() (TaskRequirements, *time.Duration)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() TaskRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TaskRequirements)
		}
	}

	if rf, ok := ret.Get(1).(func() *time.Duration); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*time.Duration)
		}
	}

	return r0, r1
}

// MockTaskManager_GetNextTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextTask'
type MockTaskManager_GetNextTask_Call struct {
	*mock.Call
}

// GetNextTask is a helper method to define mock.On call
func (_e *MockTaskManager_Expecter) GetNextTask() *MockTaskManager_GetNextTask_Call {
	return &MockTaskManager_GetNextTask_Call{Call: _e.mock.On("GetNextTask")}
}

func (_c *MockTaskManager_GetNextTask_Call) Run(run func()) *MockTaskManager_GetNextTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskManager_GetNextTask_Call) Return(_a0 TaskRequirements, _a1 *time.Duration) *MockTaskManager_GetNextTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskManager_GetNextTask_Call) RunAndReturn(run func() (TaskRequirements, *time.Duration)) *MockTaskManager_GetNextTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields:
func (_m *MockTaskManager) GetTasks() []TaskRequirements {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []TaskRequirements
	if rf, ok := ret.Get(0).(func() []TaskRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TaskRequirements)
		}
	}

	return r0
}

// MockTaskManager_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type MockTaskManager_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
func (_e *MockTaskManager_Expecter) GetTasks() *MockTaskManager_GetTasks_Call {
	return &MockTaskManager_GetTasks_Call{Call: _e.mock.On("GetTasks")}
}

func (_c *MockTaskManager_GetTasks_Call) Run(run func()) *MockTaskManager_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskManager_GetTasks_Call) Return(_a0 []TaskRequirements) *MockTaskManager_GetTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskManager_GetTasks_Call) RunAndReturn(run func() []TaskRequirements) *MockTaskManager_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTime provides a mock function with given fields:
func (_m *MockTaskManager) GetTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTaskManager_GetTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTime'
type MockTaskManager_GetTime_Call struct {
	*mock.Call
}

// GetTime is a helper method to define mock.On call
func (_e *MockTaskManager_Expecter) GetTime() *MockTaskManager_GetTime_Call {
	return &MockTaskManager_GetTime_Call{Call: _e.mock.On("GetTime")}
}

func (_c *MockTaskManager_GetTime_Call) Run(run func()) *MockTaskManager_GetTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskManager_GetTime_Call) Return(_a0 time.Time) *MockTaskManager_GetTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskManager_GetTime_Call) RunAndReturn(run func() time.Time) *MockTaskManager_GetTime_Call {
	_c.Call.Return(run)
	return _c
}

// InstallTask provides a mock function with given fields: task
func (_m *MockTaskManager) InstallTask(task TaskRequirements) {
	_m.Called(task)
}

// MockTaskManager_InstallTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallTask'
type MockTaskManager_InstallTask_Call struct {
	*mock.Call
}

// InstallTask is a helper method to define mock.On call
//   - task TaskRequirements
func (_e *MockTaskManager_Expecter) InstallTask(task interface{}) *MockTaskManager_InstallTask_Call {
	return &MockTaskManager_InstallTask_Call{Call: _e.mock.On("InstallTask", task)}
}

func (_c *MockTaskManager_InstallTask_Call) Run(run func(task TaskRequirements)) *MockTaskManager_InstallTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TaskRequirements))
	})
	return _c
}

func (_c *MockTaskManager_InstallTask_Call) Return() *MockTaskManager_InstallTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_InstallTask_Call) RunAndReturn(run func(TaskRequirements)) *MockTaskManager_InstallTask_Call {
	_c.Call.Return(run)
	return _c
}

// PopTask provides a mock function with given fields:
func (_m *MockTaskManager) PopTask() TaskRequirements {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopTask")
	}

	var r0 TaskRequirements
	if rf, ok := ret.Get(0).(func() TaskRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TaskRequirements)
		}
	}

	return r0
}

// MockTaskManager_PopTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopTask'
type MockTaskManager_PopTask_Call struct {
	*mock.Call
}

// PopTask is a helper method to define mock.On call
func (_e *MockTaskManager_Expecter) PopTask() *MockTaskManager_PopTask_Call {
	return &MockTaskManager_PopTask_Call{Call: _e.mock.On("PopTask")}
}

func (_c *MockTaskManager_PopTask_Call) Run(run func()) *MockTaskManager_PopTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskManager_PopTask_Call) Return(_a0 TaskRequirements) *MockTaskManager_PopTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskManager_PopTask_Call) RunAndReturn(run func() TaskRequirements) *MockTaskManager_PopTask_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTask provides a mock function with given fields: task
func (_m *MockTaskManager) ProcessTask(task TaskRequirements) {
	_m.Called(task)
}

// MockTaskManager_ProcessTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTask'
type MockTaskManager_ProcessTask_Call struct {
	*mock.Call
}

// ProcessTask is a helper method to define mock.On call
//   - task TaskRequirements
func (_e *MockTaskManager_Expecter) ProcessTask(task interface{}) *MockTaskManager_ProcessTask_Call {
	return &MockTaskManager_ProcessTask_Call{Call: _e.mock.On("ProcessTask", task)}
}

func (_c *MockTaskManager_ProcessTask_Call) Run(run func(task TaskRequirements)) *MockTaskManager_ProcessTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TaskRequirements))
	})
	return _c
}

func (_c *MockTaskManager_ProcessTask_Call) Return() *MockTaskManager_ProcessTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_ProcessTask_Call) RunAndReturn(run func(TaskRequirements)) *MockTaskManager_ProcessTask_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeTask provides a mock function with given fields: task
func (_m *MockTaskManager) ResumeTask(task TaskRequirements) {
	_m.Called(task)
}

// MockTaskManager_ResumeTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeTask'
type MockTaskManager_ResumeTask_Call struct {
	*mock.Call
}

// ResumeTask is a helper method to define mock.On call
//   - task TaskRequirements
func (_e *MockTaskManager_Expecter) ResumeTask(task interface{}) *MockTaskManager_ResumeTask_Call {
	return &MockTaskManager_ResumeTask_Call{Call: _e.mock.On("ResumeTask", task)}
}

func (_c *MockTaskManager_ResumeTask_Call) Run(run func(task TaskRequirements)) *MockTaskManager_ResumeTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TaskRequirements))
	})
	return _c
}

func (_c *MockTaskManager_ResumeTask_Call) Return() *MockTaskManager_ResumeTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_ResumeTask_Call) RunAndReturn(run func(TaskRequirements)) *MockTaskManager_ResumeTask_Call {
	_c.Call.Return(run)
	return _c
}

// SuspendTask provides a mock function with given fields: task
func (_m *MockTaskManager) SuspendTask(task TaskRequirements) {
	_m.Called(task)
}

// MockTaskManager_SuspendTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuspendTask'
type MockTaskManager_SuspendTask_Call struct {
	*mock.Call
}

// SuspendTask is a helper method to define mock.On call
//   - task TaskRequirements
func (_e *MockTaskManager_Expecter) SuspendTask(task interface{}) *MockTaskManager_SuspendTask_Call {
	return &MockTaskManager_SuspendTask_Call{Call: _e.mock.On("SuspendTask", task)}
}

func (_c *MockTaskManager_SuspendTask_Call) Run(run func(task TaskRequirements)) *MockTaskManager_SuspendTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TaskRequirements))
	})
	return _c
}

func (_c *MockTaskManager_SuspendTask_Call) Return() *MockTaskManager_SuspendTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_SuspendTask_Call) RunAndReturn(run func(TaskRequirements)) *MockTaskManager_SuspendTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskManager creates a new instance of MockTaskManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskManager {
	mock := &MockTaskManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
