/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import (
	context "context"

	utils "github.com/apache/plc4x/plc4go/spi/utils"
	mock "github.com/stretchr/testify/mock"
)

// MockMessageBridge is an autogenerated mock type for the MessageBridge type
type MockMessageBridge struct {
	mock.Mock
}

type MockMessageBridge_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageBridge) EXPECT() *MockMessageBridge_Expecter {
	return &MockMessageBridge_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *MockMessageBridge) Get() (byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 byte
	var r1 error
	if rf, ok := ret.Get(0).(func() (byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(byte)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageBridge_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMessageBridge_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockMessageBridge_Expecter) Get() *MockMessageBridge_Get_Call {
	return &MockMessageBridge_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockMessageBridge_Get_Call) Run(run func()) *MockMessageBridge_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBridge_Get_Call) Return(_a0 byte, _a1 error) *MockMessageBridge_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageBridge_Get_Call) RunAndReturn(run func() (byte, error)) *MockMessageBridge_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: dlen
func (_m *MockMessageBridge) GetData(dlen int) ([]byte, error) {
	ret := _m.Called(dlen)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(dlen)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(dlen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(dlen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageBridge_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockMessageBridge_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - dlen int
func (_e *MockMessageBridge_Expecter) GetData(dlen interface{}) *MockMessageBridge_GetData_Call {
	return &MockMessageBridge_GetData_Call{Call: _e.mock.On("GetData", dlen)}
}

func (_c *MockMessageBridge_GetData_Call) Run(run func(dlen int)) *MockMessageBridge_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockMessageBridge_GetData_Call) Return(_a0 []byte, _a1 error) *MockMessageBridge_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageBridge_GetData_Call) RunAndReturn(run func(int) ([]byte, error)) *MockMessageBridge_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetLengthInBits provides a mock function with given fields: ctx
func (_m *MockMessageBridge) GetLengthInBits(ctx context.Context) uint16 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLengthInBits")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context) uint16); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockMessageBridge_GetLengthInBits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLengthInBits'
type MockMessageBridge_GetLengthInBits_Call struct {
	*mock.Call
}

// GetLengthInBits is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessageBridge_Expecter) GetLengthInBits(ctx interface{}) *MockMessageBridge_GetLengthInBits_Call {
	return &MockMessageBridge_GetLengthInBits_Call{Call: _e.mock.On("GetLengthInBits", ctx)}
}

func (_c *MockMessageBridge_GetLengthInBits_Call) Run(run func(ctx context.Context)) *MockMessageBridge_GetLengthInBits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessageBridge_GetLengthInBits_Call) Return(_a0 uint16) *MockMessageBridge_GetLengthInBits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBridge_GetLengthInBits_Call) RunAndReturn(run func(context.Context) uint16) *MockMessageBridge_GetLengthInBits_Call {
	_c.Call.Return(run)
	return _c
}

// GetLengthInBytes provides a mock function with given fields: ctx
func (_m *MockMessageBridge) GetLengthInBytes(ctx context.Context) uint16 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLengthInBytes")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context) uint16); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockMessageBridge_GetLengthInBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLengthInBytes'
type MockMessageBridge_GetLengthInBytes_Call struct {
	*mock.Call
}

// GetLengthInBytes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessageBridge_Expecter) GetLengthInBytes(ctx interface{}) *MockMessageBridge_GetLengthInBytes_Call {
	return &MockMessageBridge_GetLengthInBytes_Call{Call: _e.mock.On("GetLengthInBytes", ctx)}
}

func (_c *MockMessageBridge_GetLengthInBytes_Call) Run(run func(ctx context.Context)) *MockMessageBridge_GetLengthInBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessageBridge_GetLengthInBytes_Call) Return(_a0 uint16) *MockMessageBridge_GetLengthInBytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBridge_GetLengthInBytes_Call) RunAndReturn(run func(context.Context) uint16) *MockMessageBridge_GetLengthInBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLong provides a mock function with given fields:
func (_m *MockMessageBridge) GetLong() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLong")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageBridge_GetLong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLong'
type MockMessageBridge_GetLong_Call struct {
	*mock.Call
}

// GetLong is a helper method to define mock.On call
func (_e *MockMessageBridge_Expecter) GetLong() *MockMessageBridge_GetLong_Call {
	return &MockMessageBridge_GetLong_Call{Call: _e.mock.On("GetLong")}
}

func (_c *MockMessageBridge_GetLong_Call) Run(run func()) *MockMessageBridge_GetLong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBridge_GetLong_Call) Return(_a0 int64, _a1 error) *MockMessageBridge_GetLong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageBridge_GetLong_Call) RunAndReturn(run func() (int64, error)) *MockMessageBridge_GetLong_Call {
	_c.Call.Return(run)
	return _c
}

// GetPduData provides a mock function with given fields:
func (_m *MockMessageBridge) GetPduData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPduData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessageBridge_GetPduData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPduData'
type MockMessageBridge_GetPduData_Call struct {
	*mock.Call
}

// GetPduData is a helper method to define mock.On call
func (_e *MockMessageBridge_Expecter) GetPduData() *MockMessageBridge_GetPduData_Call {
	return &MockMessageBridge_GetPduData_Call{Call: _e.mock.On("GetPduData")}
}

func (_c *MockMessageBridge_GetPduData_Call) Run(run func()) *MockMessageBridge_GetPduData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBridge_GetPduData_Call) Return(_a0 []byte) *MockMessageBridge_GetPduData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBridge_GetPduData_Call) RunAndReturn(run func() []byte) *MockMessageBridge_GetPduData_Call {
	_c.Call.Return(run)
	return _c
}

// GetShort provides a mock function with given fields:
func (_m *MockMessageBridge) GetShort() (int16, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShort")
	}

	var r0 int16
	var r1 error
	if rf, ok := ret.Get(0).(func() (int16, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int16)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageBridge_GetShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShort'
type MockMessageBridge_GetShort_Call struct {
	*mock.Call
}

// GetShort is a helper method to define mock.On call
func (_e *MockMessageBridge_Expecter) GetShort() *MockMessageBridge_GetShort_Call {
	return &MockMessageBridge_GetShort_Call{Call: _e.mock.On("GetShort")}
}

func (_c *MockMessageBridge_GetShort_Call) Run(run func()) *MockMessageBridge_GetShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBridge_GetShort_Call) Return(_a0 int16, _a1 error) *MockMessageBridge_GetShort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageBridge_GetShort_Call) RunAndReturn(run func() (int16, error)) *MockMessageBridge_GetShort_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0
func (_m *MockMessageBridge) Put(_a0 byte) {
	_m.Called(_a0)
}

// MockMessageBridge_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockMessageBridge_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 byte
func (_e *MockMessageBridge_Expecter) Put(_a0 interface{}) *MockMessageBridge_Put_Call {
	return &MockMessageBridge_Put_Call{Call: _e.mock.On("Put", _a0)}
}

func (_c *MockMessageBridge_Put_Call) Run(run func(_a0 byte)) *MockMessageBridge_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockMessageBridge_Put_Call) Return() *MockMessageBridge_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageBridge_Put_Call) RunAndReturn(run func(byte)) *MockMessageBridge_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutData provides a mock function with given fields: _a0
func (_m *MockMessageBridge) PutData(_a0 ...byte) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockMessageBridge_PutData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutData'
type MockMessageBridge_PutData_Call struct {
	*mock.Call
}

// PutData is a helper method to define mock.On call
//   - _a0 ...byte
func (_e *MockMessageBridge_Expecter) PutData(_a0 ...interface{}) *MockMessageBridge_PutData_Call {
	return &MockMessageBridge_PutData_Call{Call: _e.mock.On("PutData",
		append([]interface{}{}, _a0...)...)}
}

func (_c *MockMessageBridge_PutData_Call) Run(run func(_a0 ...byte)) *MockMessageBridge_PutData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]byte, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(byte)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMessageBridge_PutData_Call) Return() *MockMessageBridge_PutData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageBridge_PutData_Call) RunAndReturn(run func(...byte)) *MockMessageBridge_PutData_Call {
	_c.Call.Return(run)
	return _c
}

// PutLong provides a mock function with given fields: _a0
func (_m *MockMessageBridge) PutLong(_a0 uint32) {
	_m.Called(_a0)
}

// MockMessageBridge_PutLong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLong'
type MockMessageBridge_PutLong_Call struct {
	*mock.Call
}

// PutLong is a helper method to define mock.On call
//   - _a0 uint32
func (_e *MockMessageBridge_Expecter) PutLong(_a0 interface{}) *MockMessageBridge_PutLong_Call {
	return &MockMessageBridge_PutLong_Call{Call: _e.mock.On("PutLong", _a0)}
}

func (_c *MockMessageBridge_PutLong_Call) Run(run func(_a0 uint32)) *MockMessageBridge_PutLong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *MockMessageBridge_PutLong_Call) Return() *MockMessageBridge_PutLong_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageBridge_PutLong_Call) RunAndReturn(run func(uint32)) *MockMessageBridge_PutLong_Call {
	_c.Call.Return(run)
	return _c
}

// PutShort provides a mock function with given fields: _a0
func (_m *MockMessageBridge) PutShort(_a0 uint16) {
	_m.Called(_a0)
}

// MockMessageBridge_PutShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutShort'
type MockMessageBridge_PutShort_Call struct {
	*mock.Call
}

// PutShort is a helper method to define mock.On call
//   - _a0 uint16
func (_e *MockMessageBridge_Expecter) PutShort(_a0 interface{}) *MockMessageBridge_PutShort_Call {
	return &MockMessageBridge_PutShort_Call{Call: _e.mock.On("PutShort", _a0)}
}

func (_c *MockMessageBridge_PutShort_Call) Run(run func(_a0 uint16)) *MockMessageBridge_PutShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16))
	})
	return _c
}

func (_c *MockMessageBridge_PutShort_Call) Return() *MockMessageBridge_PutShort_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageBridge_PutShort_Call) RunAndReturn(run func(uint16)) *MockMessageBridge_PutShort_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields:
func (_m *MockMessageBridge) Serialize() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageBridge_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockMessageBridge_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *MockMessageBridge_Expecter) Serialize() *MockMessageBridge_Serialize_Call {
	return &MockMessageBridge_Serialize_Call{Call: _e.mock.On("Serialize")}
}

func (_c *MockMessageBridge_Serialize_Call) Run(run func()) *MockMessageBridge_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBridge_Serialize_Call) Return(_a0 []byte, _a1 error) *MockMessageBridge_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageBridge_Serialize_Call) RunAndReturn(run func() ([]byte, error)) *MockMessageBridge_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// SerializeWithWriteBuffer provides a mock function with given fields: ctx, writeBuffer
func (_m *MockMessageBridge) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	ret := _m.Called(ctx, writeBuffer)

	if len(ret) == 0 {
		panic("no return value specified for SerializeWithWriteBuffer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.WriteBuffer) error); ok {
		r0 = rf(ctx, writeBuffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageBridge_SerializeWithWriteBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerializeWithWriteBuffer'
type MockMessageBridge_SerializeWithWriteBuffer_Call struct {
	*mock.Call
}

// SerializeWithWriteBuffer is a helper method to define mock.On call
//   - ctx context.Context
//   - writeBuffer utils.WriteBuffer
func (_e *MockMessageBridge_Expecter) SerializeWithWriteBuffer(ctx interface{}, writeBuffer interface{}) *MockMessageBridge_SerializeWithWriteBuffer_Call {
	return &MockMessageBridge_SerializeWithWriteBuffer_Call{Call: _e.mock.On("SerializeWithWriteBuffer", ctx, writeBuffer)}
}

func (_c *MockMessageBridge_SerializeWithWriteBuffer_Call) Run(run func(ctx context.Context, writeBuffer utils.WriteBuffer)) *MockMessageBridge_SerializeWithWriteBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.WriteBuffer))
	})
	return _c
}

func (_c *MockMessageBridge_SerializeWithWriteBuffer_Call) Return(_a0 error) *MockMessageBridge_SerializeWithWriteBuffer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBridge_SerializeWithWriteBuffer_Call) RunAndReturn(run func(context.Context, utils.WriteBuffer) error) *MockMessageBridge_SerializeWithWriteBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// SetPduData provides a mock function with given fields: _a0
func (_m *MockMessageBridge) SetPduData(_a0 []byte) {
	_m.Called(_a0)
}

// MockMessageBridge_SetPduData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPduData'
type MockMessageBridge_SetPduData_Call struct {
	*mock.Call
}

// SetPduData is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockMessageBridge_Expecter) SetPduData(_a0 interface{}) *MockMessageBridge_SetPduData_Call {
	return &MockMessageBridge_SetPduData_Call{Call: _e.mock.On("SetPduData", _a0)}
}

func (_c *MockMessageBridge_SetPduData_Call) Run(run func(_a0 []byte)) *MockMessageBridge_SetPduData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockMessageBridge_SetPduData_Call) Return() *MockMessageBridge_SetPduData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageBridge_SetPduData_Call) RunAndReturn(run func([]byte)) *MockMessageBridge_SetPduData_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockMessageBridge) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMessageBridge_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockMessageBridge_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockMessageBridge_Expecter) String() *MockMessageBridge_String_Call {
	return &MockMessageBridge_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockMessageBridge_String_Call) Run(run func()) *MockMessageBridge_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBridge_String_Call) Return(_a0 string) *MockMessageBridge_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBridge_String_Call) RunAndReturn(run func() string) *MockMessageBridge_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageBridge creates a new instance of MockMessageBridge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageBridge(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageBridge {
	mock := &MockMessageBridge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
