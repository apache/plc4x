/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockNetworkNode is an autogenerated mock type for the NetworkNode type
type MockNetworkNode struct {
	mock.Mock
}

type MockNetworkNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkNode) EXPECT() *MockNetworkNode_Expecter {
	return &MockNetworkNode_Expecter{mock: &_m.Mock}
}

// Response provides a mock function with given fields: args, kwArgs
func (_m *MockNetworkNode) Response(args Args, kwArgs KWArgs) error {
	ret := _m.Called(args, kwArgs)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwArgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkNode_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type MockNetworkNode_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
//   - args Args
//   - kwArgs KWArgs
func (_e *MockNetworkNode_Expecter) Response(args interface{}, kwArgs interface{}) *MockNetworkNode_Response_Call {
	return &MockNetworkNode_Response_Call{Call: _e.mock.On("Response", args, kwArgs)}
}

func (_c *MockNetworkNode_Response_Call) Run(run func(args Args, kwArgs KWArgs)) *MockNetworkNode_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockNetworkNode_Response_Call) Return(_a0 error) *MockNetworkNode_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkNode_Response_Call) RunAndReturn(run func(Args, KWArgs) error) *MockNetworkNode_Response_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockNetworkNode) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNetworkNode_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockNetworkNode_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockNetworkNode_Expecter) String() *MockNetworkNode_String_Call {
	return &MockNetworkNode_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockNetworkNode_String_Call) Run(run func()) *MockNetworkNode_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkNode_String_Call) Return(_a0 string) *MockNetworkNode_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkNode_String_Call) RunAndReturn(run func() string) *MockNetworkNode_String_Call {
	_c.Call.Return(run)
	return _c
}

// getAddress provides a mock function with given fields:
func (_m *MockNetworkNode) getAddress() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getAddress")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNetworkNode_getAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAddress'
type MockNetworkNode_getAddress_Call struct {
	*mock.Call
}

// getAddress is a helper method to define mock.On call
func (_e *MockNetworkNode_Expecter) getAddress() *MockNetworkNode_getAddress_Call {
	return &MockNetworkNode_getAddress_Call{Call: _e.mock.On("getAddress")}
}

func (_c *MockNetworkNode_getAddress_Call) Run(run func()) *MockNetworkNode_getAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkNode_getAddress_Call) Return(_a0 *Address) *MockNetworkNode_getAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkNode_getAddress_Call) RunAndReturn(run func() *Address) *MockNetworkNode_getAddress_Call {
	_c.Call.Return(run)
	return _c
}

// getName provides a mock function with given fields:
func (_m *MockNetworkNode) getName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNetworkNode_getName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getName'
type MockNetworkNode_getName_Call struct {
	*mock.Call
}

// getName is a helper method to define mock.On call
func (_e *MockNetworkNode_Expecter) getName() *MockNetworkNode_getName_Call {
	return &MockNetworkNode_getName_Call{Call: _e.mock.On("getName")}
}

func (_c *MockNetworkNode_getName_Call) Run(run func()) *MockNetworkNode_getName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkNode_getName_Call) Return(_a0 string) *MockNetworkNode_getName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkNode_getName_Call) RunAndReturn(run func() string) *MockNetworkNode_getName_Call {
	_c.Call.Return(run)
	return _c
}

// isPromiscuous provides a mock function with given fields:
func (_m *MockNetworkNode) isPromiscuous() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for isPromiscuous")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNetworkNode_isPromiscuous_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isPromiscuous'
type MockNetworkNode_isPromiscuous_Call struct {
	*mock.Call
}

// isPromiscuous is a helper method to define mock.On call
func (_e *MockNetworkNode_Expecter) isPromiscuous() *MockNetworkNode_isPromiscuous_Call {
	return &MockNetworkNode_isPromiscuous_Call{Call: _e.mock.On("isPromiscuous")}
}

func (_c *MockNetworkNode_isPromiscuous_Call) Run(run func()) *MockNetworkNode_isPromiscuous_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkNode_isPromiscuous_Call) Return(_a0 bool) *MockNetworkNode_isPromiscuous_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkNode_isPromiscuous_Call) RunAndReturn(run func() bool) *MockNetworkNode_isPromiscuous_Call {
	_c.Call.Return(run)
	return _c
}

// setLan provides a mock function with given fields: lan
func (_m *MockNetworkNode) setLan(lan *Network) {
	_m.Called(lan)
}

// MockNetworkNode_setLan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setLan'
type MockNetworkNode_setLan_Call struct {
	*mock.Call
}

// setLan is a helper method to define mock.On call
//   - lan *Network
func (_e *MockNetworkNode_Expecter) setLan(lan interface{}) *MockNetworkNode_setLan_Call {
	return &MockNetworkNode_setLan_Call{Call: _e.mock.On("setLan", lan)}
}

func (_c *MockNetworkNode_setLan_Call) Run(run func(lan *Network)) *MockNetworkNode_setLan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Network))
	})
	return _c
}

func (_c *MockNetworkNode_setLan_Call) Return() *MockNetworkNode_setLan_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkNode_setLan_Call) RunAndReturn(run func(*Network)) *MockNetworkNode_setLan_Call {
	_c.Call.Return(run)
	return _c
}

// setName provides a mock function with given fields: name
func (_m *MockNetworkNode) setName(name string) {
	_m.Called(name)
}

// MockNetworkNode_setName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setName'
type MockNetworkNode_setName_Call struct {
	*mock.Call
}

// setName is a helper method to define mock.On call
//   - name string
func (_e *MockNetworkNode_Expecter) setName(name interface{}) *MockNetworkNode_setName_Call {
	return &MockNetworkNode_setName_Call{Call: _e.mock.On("setName", name)}
}

func (_c *MockNetworkNode_setName_Call) Run(run func(name string)) *MockNetworkNode_setName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetworkNode_setName_Call) Return() *MockNetworkNode_setName_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkNode_setName_Call) RunAndReturn(run func(string)) *MockNetworkNode_setName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkNode creates a new instance of MockNetworkNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkNode {
	mock := &MockNetworkNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
