/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package tests

import (
	bacnetip "github.com/apache/plc4x/plc4go/internal/bacnetip"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockState is an autogenerated mock type for the State type
type MockState struct {
	mock.Mock
}

type MockState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockState) EXPECT() *MockState_Expecter {
	return &MockState_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: fn, args, kwargs
func (_m *MockState) Call(fn func(bacnetip.Args, bacnetip.KWArgs) error, args bacnetip.Args, kwargs bacnetip.KWArgs) State {
	ret := _m.Called(fn, args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(func(bacnetip.Args, bacnetip.KWArgs) error, bacnetip.Args, bacnetip.KWArgs) State); ok {
		r0 = rf(fn, args, kwargs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockState_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - fn func(bacnetip.Args , bacnetip.KWArgs) error
//   - args bacnetip.Args
//   - kwargs bacnetip.KWArgs
func (_e *MockState_Expecter) Call(fn interface{}, args interface{}, kwargs interface{}) *MockState_Call_Call {
	return &MockState_Call_Call{Call: _e.mock.On("Call", fn, args, kwargs)}
}

func (_c *MockState_Call_Call) Run(run func(fn func(bacnetip.Args, bacnetip.KWArgs) error, args bacnetip.Args, kwargs bacnetip.KWArgs)) *MockState_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(bacnetip.Args, bacnetip.KWArgs) error), args[1].(bacnetip.Args), args[2].(bacnetip.KWArgs))
	})
	return _c
}

func (_c *MockState_Call_Call) Return(_a0 State) *MockState_Call_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Call_Call) RunAndReturn(run func(func(bacnetip.Args, bacnetip.KWArgs) error, bacnetip.Args, bacnetip.KWArgs) State) *MockState_Call_Call {
	_c.Call.Return(run)
	return _c
}

// Doc provides a mock function with given fields: docstring
func (_m *MockState) Doc(docstring string) State {
	ret := _m.Called(docstring)

	if len(ret) == 0 {
		panic("no return value specified for Doc")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(string) State); ok {
		r0 = rf(docstring)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Doc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Doc'
type MockState_Doc_Call struct {
	*mock.Call
}

// Doc is a helper method to define mock.On call
//   - docstring string
func (_e *MockState_Expecter) Doc(docstring interface{}) *MockState_Doc_Call {
	return &MockState_Doc_Call{Call: _e.mock.On("Doc", docstring)}
}

func (_c *MockState_Doc_Call) Run(run func(docstring string)) *MockState_Doc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_Doc_Call) Return(_a0 State) *MockState_Doc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Doc_Call) RunAndReturn(run func(string) State) *MockState_Doc_Call {
	_c.Call.Return(run)
	return _c
}

// DocString provides a mock function with given fields:
func (_m *MockState) DocString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DocString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockState_DocString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DocString'
type MockState_DocString_Call struct {
	*mock.Call
}

// DocString is a helper method to define mock.On call
func (_e *MockState_Expecter) DocString() *MockState_DocString_Call {
	return &MockState_DocString_Call{Call: _e.mock.On("DocString")}
}

func (_c *MockState_DocString_Call) Run(run func()) *MockState_DocString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_DocString_Call) Return(_a0 string) *MockState_DocString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_DocString_Call) RunAndReturn(run func() string) *MockState_DocString_Call {
	_c.Call.Return(run)
	return _c
}

// EnterState provides a mock function with given fields:
func (_m *MockState) EnterState() {
	_m.Called()
}

// MockState_EnterState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnterState'
type MockState_EnterState_Call struct {
	*mock.Call
}

// EnterState is a helper method to define mock.On call
func (_e *MockState_Expecter) EnterState() *MockState_EnterState_Call {
	return &MockState_EnterState_Call{Call: _e.mock.On("EnterState")}
}

func (_c *MockState_EnterState_Call) Run(run func()) *MockState_EnterState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_EnterState_Call) Return() *MockState_EnterState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockState_EnterState_Call) RunAndReturn(run func()) *MockState_EnterState_Call {
	_c.Call.Return(run)
	return _c
}

// Equals provides a mock function with given fields: other
func (_m *MockState) Equals(other State) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Equals")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(State) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockState_Equals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Equals'
type MockState_Equals_Call struct {
	*mock.Call
}

// Equals is a helper method to define mock.On call
//   - other State
func (_e *MockState_Expecter) Equals(other interface{}) *MockState_Equals_Call {
	return &MockState_Equals_Call{Call: _e.mock.On("Equals", other)}
}

func (_c *MockState_Equals_Call) Run(run func(other State)) *MockState_Equals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(State))
	})
	return _c
}

func (_c *MockState_Equals_Call) Return(_a0 bool) *MockState_Equals_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Equals_Call) RunAndReturn(run func(State) bool) *MockState_Equals_Call {
	_c.Call.Return(run)
	return _c
}

// EventSet provides a mock function with given fields: eventId
func (_m *MockState) EventSet(eventId string) {
	_m.Called(eventId)
}

// MockState_EventSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventSet'
type MockState_EventSet_Call struct {
	*mock.Call
}

// EventSet is a helper method to define mock.On call
//   - eventId string
func (_e *MockState_Expecter) EventSet(eventId interface{}) *MockState_EventSet_Call {
	return &MockState_EventSet_Call{Call: _e.mock.On("EventSet", eventId)}
}

func (_c *MockState_EventSet_Call) Run(run func(eventId string)) *MockState_EventSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_EventSet_Call) Return() *MockState_EventSet_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockState_EventSet_Call) RunAndReturn(run func(string)) *MockState_EventSet_Call {
	_c.Call.Return(run)
	return _c
}

// ExitState provides a mock function with given fields:
func (_m *MockState) ExitState() {
	_m.Called()
}

// MockState_ExitState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExitState'
type MockState_ExitState_Call struct {
	*mock.Call
}

// ExitState is a helper method to define mock.On call
func (_e *MockState_Expecter) ExitState() *MockState_ExitState_Call {
	return &MockState_ExitState_Call{Call: _e.mock.On("ExitState")}
}

func (_c *MockState_ExitState_Call) Run(run func()) *MockState_ExitState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_ExitState_Call) Return() *MockState_ExitState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockState_ExitState_Call) RunAndReturn(run func()) *MockState_ExitState_Call {
	_c.Call.Return(run)
	return _c
}

// Fail provides a mock function with given fields: docstring
func (_m *MockState) Fail(docstring string) State {
	ret := _m.Called(docstring)

	if len(ret) == 0 {
		panic("no return value specified for Fail")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(string) State); ok {
		r0 = rf(docstring)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Fail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fail'
type MockState_Fail_Call struct {
	*mock.Call
}

// Fail is a helper method to define mock.On call
//   - docstring string
func (_e *MockState_Expecter) Fail(docstring interface{}) *MockState_Fail_Call {
	return &MockState_Fail_Call{Call: _e.mock.On("Fail", docstring)}
}

func (_c *MockState_Fail_Call) Run(run func(docstring string)) *MockState_Fail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_Fail_Call) Return(_a0 State) *MockState_Fail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Fail_Call) RunAndReturn(run func(string) State) *MockState_Fail_Call {
	_c.Call.Return(run)
	return _c
}

// IsFailState provides a mock function with given fields:
func (_m *MockState) IsFailState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFailState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockState_IsFailState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFailState'
type MockState_IsFailState_Call struct {
	*mock.Call
}

// IsFailState is a helper method to define mock.On call
func (_e *MockState_Expecter) IsFailState() *MockState_IsFailState_Call {
	return &MockState_IsFailState_Call{Call: _e.mock.On("IsFailState")}
}

func (_c *MockState_IsFailState_Call) Run(run func()) *MockState_IsFailState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_IsFailState_Call) Return(_a0 bool) *MockState_IsFailState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_IsFailState_Call) RunAndReturn(run func() bool) *MockState_IsFailState_Call {
	_c.Call.Return(run)
	return _c
}

// IsSuccessState provides a mock function with given fields:
func (_m *MockState) IsSuccessState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSuccessState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockState_IsSuccessState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSuccessState'
type MockState_IsSuccessState_Call struct {
	*mock.Call
}

// IsSuccessState is a helper method to define mock.On call
func (_e *MockState_Expecter) IsSuccessState() *MockState_IsSuccessState_Call {
	return &MockState_IsSuccessState_Call{Call: _e.mock.On("IsSuccessState")}
}

func (_c *MockState_IsSuccessState_Call) Run(run func()) *MockState_IsSuccessState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_IsSuccessState_Call) Return(_a0 bool) *MockState_IsSuccessState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_IsSuccessState_Call) RunAndReturn(run func() bool) *MockState_IsSuccessState_Call {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function with given fields: args, kwargs
func (_m *MockState) Receive(args bacnetip.Args, kwargs bacnetip.KWArgs) State {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(bacnetip.Args, bacnetip.KWArgs) State); ok {
		r0 = rf(args, kwargs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type MockState_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - args bacnetip.Args
//   - kwargs bacnetip.KWArgs
func (_e *MockState_Expecter) Receive(args interface{}, kwargs interface{}) *MockState_Receive_Call {
	return &MockState_Receive_Call{Call: _e.mock.On("Receive", args, kwargs)}
}

func (_c *MockState_Receive_Call) Run(run func(args bacnetip.Args, kwargs bacnetip.KWArgs)) *MockState_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bacnetip.Args), args[1].(bacnetip.KWArgs))
	})
	return _c
}

func (_c *MockState_Receive_Call) Return(_a0 State) *MockState_Receive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Receive_Call) RunAndReturn(run func(bacnetip.Args, bacnetip.KWArgs) State) *MockState_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *MockState) Reset() {
	_m.Called()
}

// MockState_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockState_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockState_Expecter) Reset() *MockState_Reset_Call {
	return &MockState_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockState_Reset_Call) Run(run func()) *MockState_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_Reset_Call) Return() *MockState_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockState_Reset_Call) RunAndReturn(run func()) *MockState_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: pdu, nextState
func (_m *MockState) Send(pdu bacnetip.PDU, nextState State) State {
	ret := _m.Called(pdu, nextState)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(bacnetip.PDU, State) State); ok {
		r0 = rf(pdu, nextState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockState_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - pdu bacnetip.PDU
//   - nextState State
func (_e *MockState_Expecter) Send(pdu interface{}, nextState interface{}) *MockState_Send_Call {
	return &MockState_Send_Call{Call: _e.mock.On("Send", pdu, nextState)}
}

func (_c *MockState_Send_Call) Run(run func(pdu bacnetip.PDU, nextState State)) *MockState_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bacnetip.PDU), args[1].(State))
	})
	return _c
}

func (_c *MockState_Send_Call) Return(_a0 State) *MockState_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Send_Call) RunAndReturn(run func(bacnetip.PDU, State) State) *MockState_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetEvent provides a mock function with given fields: eventId
func (_m *MockState) SetEvent(eventId string) State {
	ret := _m.Called(eventId)

	if len(ret) == 0 {
		panic("no return value specified for SetEvent")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(string) State); ok {
		r0 = rf(eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_SetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEvent'
type MockState_SetEvent_Call struct {
	*mock.Call
}

// SetEvent is a helper method to define mock.On call
//   - eventId string
func (_e *MockState_Expecter) SetEvent(eventId interface{}) *MockState_SetEvent_Call {
	return &MockState_SetEvent_Call{Call: _e.mock.On("SetEvent", eventId)}
}

func (_c *MockState_SetEvent_Call) Run(run func(eventId string)) *MockState_SetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_SetEvent_Call) Return(_a0 State) *MockState_SetEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_SetEvent_Call) RunAndReturn(run func(string) State) *MockState_SetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockState) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockState_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockState_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockState_Expecter) String() *MockState_String_Call {
	return &MockState_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockState_String_Call) Run(run func()) *MockState_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_String_Call) Return(_a0 string) *MockState_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_String_Call) RunAndReturn(run func() string) *MockState_String_Call {
	_c.Call.Return(run)
	return _c
}

// Success provides a mock function with given fields: docstring
func (_m *MockState) Success(docstring string) State {
	ret := _m.Called(docstring)

	if len(ret) == 0 {
		panic("no return value specified for Success")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(string) State); ok {
		r0 = rf(docstring)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Success_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Success'
type MockState_Success_Call struct {
	*mock.Call
}

// Success is a helper method to define mock.On call
//   - docstring string
func (_e *MockState_Expecter) Success(docstring interface{}) *MockState_Success_Call {
	return &MockState_Success_Call{Call: _e.mock.On("Success", docstring)}
}

func (_c *MockState_Success_Call) Run(run func(docstring string)) *MockState_Success_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_Success_Call) Return(_a0 State) *MockState_Success_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Success_Call) RunAndReturn(run func(string) State) *MockState_Success_Call {
	_c.Call.Return(run)
	return _c
}

// Timeout provides a mock function with given fields: duration, nextState
func (_m *MockState) Timeout(duration time.Duration, nextState State) State {
	ret := _m.Called(duration, nextState)

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(time.Duration, State) State); ok {
		r0 = rf(duration, nextState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type MockState_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
//   - duration time.Duration
//   - nextState State
func (_e *MockState_Expecter) Timeout(duration interface{}, nextState interface{}) *MockState_Timeout_Call {
	return &MockState_Timeout_Call{Call: _e.mock.On("Timeout", duration, nextState)}
}

func (_c *MockState_Timeout_Call) Run(run func(duration time.Duration, nextState State)) *MockState_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(State))
	})
	return _c
}

func (_c *MockState_Timeout_Call) Return(_a0 State) *MockState_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Timeout_Call) RunAndReturn(run func(time.Duration, State) State) *MockState_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// WaitEvent provides a mock function with given fields: eventId, nextState
func (_m *MockState) WaitEvent(eventId string, nextState State) State {
	ret := _m.Called(eventId, nextState)

	if len(ret) == 0 {
		panic("no return value specified for WaitEvent")
	}

	var r0 State
	if rf, ok := ret.Get(0).(func(string, State) State); ok {
		r0 = rf(eventId, nextState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// MockState_WaitEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitEvent'
type MockState_WaitEvent_Call struct {
	*mock.Call
}

// WaitEvent is a helper method to define mock.On call
//   - eventId string
//   - nextState State
func (_e *MockState_Expecter) WaitEvent(eventId interface{}, nextState interface{}) *MockState_WaitEvent_Call {
	return &MockState_WaitEvent_Call{Call: _e.mock.On("WaitEvent", eventId, nextState)}
}

func (_c *MockState_WaitEvent_Call) Run(run func(eventId string, nextState State)) *MockState_WaitEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(State))
	})
	return _c
}

func (_c *MockState_WaitEvent_Call) Return(_a0 State) *MockState_WaitEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_WaitEvent_Call) RunAndReturn(run func(string, State) State) *MockState_WaitEvent_Call {
	_c.Call.Return(run)
	return _c
}

// getCallTransition provides a mock function with given fields:
func (_m *MockState) getCallTransition() *CallTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getCallTransition")
	}

	var r0 *CallTransition
	if rf, ok := ret.Get(0).(func() *CallTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CallTransition)
		}
	}

	return r0
}

// MockState_getCallTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getCallTransition'
type MockState_getCallTransition_Call struct {
	*mock.Call
}

// getCallTransition is a helper method to define mock.On call
func (_e *MockState_Expecter) getCallTransition() *MockState_getCallTransition_Call {
	return &MockState_getCallTransition_Call{Call: _e.mock.On("getCallTransition")}
}

func (_c *MockState_getCallTransition_Call) Run(run func()) *MockState_getCallTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getCallTransition_Call) Return(_a0 *CallTransition) *MockState_getCallTransition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getCallTransition_Call) RunAndReturn(run func() *CallTransition) *MockState_getCallTransition_Call {
	_c.Call.Return(run)
	return _c
}

// getClearEventTransitions provides a mock function with given fields:
func (_m *MockState) getClearEventTransitions() []EventTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getClearEventTransitions")
	}

	var r0 []EventTransition
	if rf, ok := ret.Get(0).(func() []EventTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]EventTransition)
		}
	}

	return r0
}

// MockState_getClearEventTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getClearEventTransitions'
type MockState_getClearEventTransitions_Call struct {
	*mock.Call
}

// getClearEventTransitions is a helper method to define mock.On call
func (_e *MockState_Expecter) getClearEventTransitions() *MockState_getClearEventTransitions_Call {
	return &MockState_getClearEventTransitions_Call{Call: _e.mock.On("getClearEventTransitions")}
}

func (_c *MockState_getClearEventTransitions_Call) Run(run func()) *MockState_getClearEventTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getClearEventTransitions_Call) Return(_a0 []EventTransition) *MockState_getClearEventTransitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getClearEventTransitions_Call) RunAndReturn(run func() []EventTransition) *MockState_getClearEventTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// getDocString provides a mock function with given fields:
func (_m *MockState) getDocString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getDocString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockState_getDocString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getDocString'
type MockState_getDocString_Call struct {
	*mock.Call
}

// getDocString is a helper method to define mock.On call
func (_e *MockState_Expecter) getDocString() *MockState_getDocString_Call {
	return &MockState_getDocString_Call{Call: _e.mock.On("getDocString")}
}

func (_c *MockState_getDocString_Call) Run(run func()) *MockState_getDocString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getDocString_Call) Return(_a0 string) *MockState_getDocString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getDocString_Call) RunAndReturn(run func() string) *MockState_getDocString_Call {
	_c.Call.Return(run)
	return _c
}

// getInterceptor provides a mock function with given fields:
func (_m *MockState) getInterceptor() StateInterceptor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getInterceptor")
	}

	var r0 StateInterceptor
	if rf, ok := ret.Get(0).(func() StateInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StateInterceptor)
		}
	}

	return r0
}

// MockState_getInterceptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getInterceptor'
type MockState_getInterceptor_Call struct {
	*mock.Call
}

// getInterceptor is a helper method to define mock.On call
func (_e *MockState_Expecter) getInterceptor() *MockState_getInterceptor_Call {
	return &MockState_getInterceptor_Call{Call: _e.mock.On("getInterceptor")}
}

func (_c *MockState_getInterceptor_Call) Run(run func()) *MockState_getInterceptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getInterceptor_Call) Return(_a0 StateInterceptor) *MockState_getInterceptor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getInterceptor_Call) RunAndReturn(run func() StateInterceptor) *MockState_getInterceptor_Call {
	_c.Call.Return(run)
	return _c
}

// getReceiveTransitions provides a mock function with given fields:
func (_m *MockState) getReceiveTransitions() []ReceiveTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getReceiveTransitions")
	}

	var r0 []ReceiveTransition
	if rf, ok := ret.Get(0).(func() []ReceiveTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ReceiveTransition)
		}
	}

	return r0
}

// MockState_getReceiveTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getReceiveTransitions'
type MockState_getReceiveTransitions_Call struct {
	*mock.Call
}

// getReceiveTransitions is a helper method to define mock.On call
func (_e *MockState_Expecter) getReceiveTransitions() *MockState_getReceiveTransitions_Call {
	return &MockState_getReceiveTransitions_Call{Call: _e.mock.On("getReceiveTransitions")}
}

func (_c *MockState_getReceiveTransitions_Call) Run(run func()) *MockState_getReceiveTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getReceiveTransitions_Call) Return(_a0 []ReceiveTransition) *MockState_getReceiveTransitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getReceiveTransitions_Call) RunAndReturn(run func() []ReceiveTransition) *MockState_getReceiveTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// getSendTransitions provides a mock function with given fields:
func (_m *MockState) getSendTransitions() []SendTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getSendTransitions")
	}

	var r0 []SendTransition
	if rf, ok := ret.Get(0).(func() []SendTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SendTransition)
		}
	}

	return r0
}

// MockState_getSendTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSendTransitions'
type MockState_getSendTransitions_Call struct {
	*mock.Call
}

// getSendTransitions is a helper method to define mock.On call
func (_e *MockState_Expecter) getSendTransitions() *MockState_getSendTransitions_Call {
	return &MockState_getSendTransitions_Call{Call: _e.mock.On("getSendTransitions")}
}

func (_c *MockState_getSendTransitions_Call) Run(run func()) *MockState_getSendTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getSendTransitions_Call) Return(_a0 []SendTransition) *MockState_getSendTransitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getSendTransitions_Call) RunAndReturn(run func() []SendTransition) *MockState_getSendTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// getSetEventTransitions provides a mock function with given fields:
func (_m *MockState) getSetEventTransitions() []EventTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getSetEventTransitions")
	}

	var r0 []EventTransition
	if rf, ok := ret.Get(0).(func() []EventTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]EventTransition)
		}
	}

	return r0
}

// MockState_getSetEventTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSetEventTransitions'
type MockState_getSetEventTransitions_Call struct {
	*mock.Call
}

// getSetEventTransitions is a helper method to define mock.On call
func (_e *MockState_Expecter) getSetEventTransitions() *MockState_getSetEventTransitions_Call {
	return &MockState_getSetEventTransitions_Call{Call: _e.mock.On("getSetEventTransitions")}
}

func (_c *MockState_getSetEventTransitions_Call) Run(run func()) *MockState_getSetEventTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getSetEventTransitions_Call) Return(_a0 []EventTransition) *MockState_getSetEventTransitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getSetEventTransitions_Call) RunAndReturn(run func() []EventTransition) *MockState_getSetEventTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// getStateMachine provides a mock function with given fields:
func (_m *MockState) getStateMachine() StateMachine {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getStateMachine")
	}

	var r0 StateMachine
	if rf, ok := ret.Get(0).(func() StateMachine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StateMachine)
		}
	}

	return r0
}

// MockState_getStateMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getStateMachine'
type MockState_getStateMachine_Call struct {
	*mock.Call
}

// getStateMachine is a helper method to define mock.On call
func (_e *MockState_Expecter) getStateMachine() *MockState_getStateMachine_Call {
	return &MockState_getStateMachine_Call{Call: _e.mock.On("getStateMachine")}
}

func (_c *MockState_getStateMachine_Call) Run(run func()) *MockState_getStateMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getStateMachine_Call) Return(_a0 StateMachine) *MockState_getStateMachine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getStateMachine_Call) RunAndReturn(run func() StateMachine) *MockState_getStateMachine_Call {
	_c.Call.Return(run)
	return _c
}

// getTimeoutTransition provides a mock function with given fields:
func (_m *MockState) getTimeoutTransition() *TimeoutTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getTimeoutTransition")
	}

	var r0 *TimeoutTransition
	if rf, ok := ret.Get(0).(func() *TimeoutTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TimeoutTransition)
		}
	}

	return r0
}

// MockState_getTimeoutTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getTimeoutTransition'
type MockState_getTimeoutTransition_Call struct {
	*mock.Call
}

// getTimeoutTransition is a helper method to define mock.On call
func (_e *MockState_Expecter) getTimeoutTransition() *MockState_getTimeoutTransition_Call {
	return &MockState_getTimeoutTransition_Call{Call: _e.mock.On("getTimeoutTransition")}
}

func (_c *MockState_getTimeoutTransition_Call) Run(run func()) *MockState_getTimeoutTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getTimeoutTransition_Call) Return(_a0 *TimeoutTransition) *MockState_getTimeoutTransition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getTimeoutTransition_Call) RunAndReturn(run func() *TimeoutTransition) *MockState_getTimeoutTransition_Call {
	_c.Call.Return(run)
	return _c
}

// getWaitEventTransitions provides a mock function with given fields:
func (_m *MockState) getWaitEventTransitions() []EventTransition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getWaitEventTransitions")
	}

	var r0 []EventTransition
	if rf, ok := ret.Get(0).(func() []EventTransition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]EventTransition)
		}
	}

	return r0
}

// MockState_getWaitEventTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getWaitEventTransitions'
type MockState_getWaitEventTransitions_Call struct {
	*mock.Call
}

// getWaitEventTransitions is a helper method to define mock.On call
func (_e *MockState_Expecter) getWaitEventTransitions() *MockState_getWaitEventTransitions_Call {
	return &MockState_getWaitEventTransitions_Call{Call: _e.mock.On("getWaitEventTransitions")}
}

func (_c *MockState_getWaitEventTransitions_Call) Run(run func()) *MockState_getWaitEventTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_getWaitEventTransitions_Call) Return(_a0 []EventTransition) *MockState_getWaitEventTransitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_getWaitEventTransitions_Call) RunAndReturn(run func() []EventTransition) *MockState_getWaitEventTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// setStateMachine provides a mock function with given fields: _a0
func (_m *MockState) setStateMachine(_a0 StateMachine) {
	_m.Called(_a0)
}

// MockState_setStateMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setStateMachine'
type MockState_setStateMachine_Call struct {
	*mock.Call
}

// setStateMachine is a helper method to define mock.On call
//   - _a0 StateMachine
func (_e *MockState_Expecter) setStateMachine(_a0 interface{}) *MockState_setStateMachine_Call {
	return &MockState_setStateMachine_Call{Call: _e.mock.On("setStateMachine", _a0)}
}

func (_c *MockState_setStateMachine_Call) Run(run func(_a0 StateMachine)) *MockState_setStateMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(StateMachine))
	})
	return _c
}

func (_c *MockState_setStateMachine_Call) Return() *MockState_setStateMachine_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockState_setStateMachine_Call) RunAndReturn(run func(StateMachine)) *MockState_setStateMachine_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockState creates a new instance of MockState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockState {
	mock := &MockState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
