/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package test_service

import (
	bacnetip "github.com/apache/plc4x/plc4go/internal/bacnetip"
	mock "github.com/stretchr/testify/mock"
)

// MockApplicationStateMachineRequirements is an autogenerated mock type for the ApplicationStateMachineRequirements type
type MockApplicationStateMachineRequirements struct {
	mock.Mock
}

type MockApplicationStateMachineRequirements_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApplicationStateMachineRequirements) EXPECT() *MockApplicationStateMachineRequirements_Expecter {
	return &MockApplicationStateMachineRequirements_Expecter{mock: &_m.Mock}
}

// Confirmation provides a mock function with given fields: args, kwargs
func (_m *MockApplicationStateMachineRequirements) Confirmation(args bacnetip.Args, kwargs bacnetip.KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Confirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bacnetip.Args, bacnetip.KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplicationStateMachineRequirements_Confirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Confirmation'
type MockApplicationStateMachineRequirements_Confirmation_Call struct {
	*mock.Call
}

// Confirmation is a helper method to define mock.On call
//   - args bacnetip.Args
//   - kwargs bacnetip.KWArgs
func (_e *MockApplicationStateMachineRequirements_Expecter) Confirmation(args interface{}, kwargs interface{}) *MockApplicationStateMachineRequirements_Confirmation_Call {
	return &MockApplicationStateMachineRequirements_Confirmation_Call{Call: _e.mock.On("Confirmation", args, kwargs)}
}

func (_c *MockApplicationStateMachineRequirements_Confirmation_Call) Run(run func(args bacnetip.Args, kwargs bacnetip.KWArgs)) *MockApplicationStateMachineRequirements_Confirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bacnetip.Args), args[1].(bacnetip.KWArgs))
	})
	return _c
}

func (_c *MockApplicationStateMachineRequirements_Confirmation_Call) Return(_a0 error) *MockApplicationStateMachineRequirements_Confirmation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplicationStateMachineRequirements_Confirmation_Call) RunAndReturn(run func(bacnetip.Args, bacnetip.KWArgs) error) *MockApplicationStateMachineRequirements_Confirmation_Call {
	_c.Call.Return(run)
	return _c
}

// Indication provides a mock function with given fields: args, kwargs
func (_m *MockApplicationStateMachineRequirements) Indication(args bacnetip.Args, kwargs bacnetip.KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Indication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bacnetip.Args, bacnetip.KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplicationStateMachineRequirements_Indication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indication'
type MockApplicationStateMachineRequirements_Indication_Call struct {
	*mock.Call
}

// Indication is a helper method to define mock.On call
//   - args bacnetip.Args
//   - kwargs bacnetip.KWArgs
func (_e *MockApplicationStateMachineRequirements_Expecter) Indication(args interface{}, kwargs interface{}) *MockApplicationStateMachineRequirements_Indication_Call {
	return &MockApplicationStateMachineRequirements_Indication_Call{Call: _e.mock.On("Indication", args, kwargs)}
}

func (_c *MockApplicationStateMachineRequirements_Indication_Call) Run(run func(args bacnetip.Args, kwargs bacnetip.KWArgs)) *MockApplicationStateMachineRequirements_Indication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bacnetip.Args), args[1].(bacnetip.KWArgs))
	})
	return _c
}

func (_c *MockApplicationStateMachineRequirements_Indication_Call) Return(_a0 error) *MockApplicationStateMachineRequirements_Indication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplicationStateMachineRequirements_Indication_Call) RunAndReturn(run func(bacnetip.Args, bacnetip.KWArgs) error) *MockApplicationStateMachineRequirements_Indication_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApplicationStateMachineRequirements creates a new instance of MockApplicationStateMachineRequirements. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplicationStateMachineRequirements(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplicationStateMachineRequirements {
	mock := &MockApplicationStateMachineRequirements{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
