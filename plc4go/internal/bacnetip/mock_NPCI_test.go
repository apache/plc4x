/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import (
	context "context"

	model "github.com/apache/plc4x/plc4go/protocols/bacnetip/readwrite/model"
	mock "github.com/stretchr/testify/mock"

	spi "github.com/apache/plc4x/plc4go/spi"

	utils "github.com/apache/plc4x/plc4go/spi/utils"
)

// MockNPCI is an autogenerated mock type for the NPCI type
type MockNPCI struct {
	mock.Mock
}

type MockNPCI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNPCI) EXPECT() *MockNPCI_Expecter {
	return &MockNPCI_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: pdu
func (_m *MockNPCI) Decode(pdu Arg) error {
	ret := _m.Called(pdu)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pdu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPCI_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockNPCI_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - pdu Arg
func (_e *MockNPCI_Expecter) Decode(pdu interface{}) *MockNPCI_Decode_Call {
	return &MockNPCI_Decode_Call{Call: _e.mock.On("Decode", pdu)}
}

func (_c *MockNPCI_Decode_Call) Run(run func(pdu Arg)) *MockNPCI_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockNPCI_Decode_Call) Return(_a0 error) *MockNPCI_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_Decode_Call) RunAndReturn(run func(Arg) error) *MockNPCI_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: pdu
func (_m *MockNPCI) Encode(pdu Arg) error {
	ret := _m.Called(pdu)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pdu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPCI_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockNPCI_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - pdu Arg
func (_e *MockNPCI_Expecter) Encode(pdu interface{}) *MockNPCI_Encode_Call {
	return &MockNPCI_Encode_Call{Call: _e.mock.On("Encode", pdu)}
}

func (_c *MockNPCI_Encode_Call) Run(run func(pdu Arg)) *MockNPCI_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockNPCI_Encode_Call) Return(_a0 error) *MockNPCI_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_Encode_Call) RunAndReturn(run func(Arg) error) *MockNPCI_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpectingReply provides a mock function with given fields:
func (_m *MockNPCI) GetExpectingReply() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpectingReply")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNPCI_GetExpectingReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectingReply'
type MockNPCI_GetExpectingReply_Call struct {
	*mock.Call
}

// GetExpectingReply is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetExpectingReply() *MockNPCI_GetExpectingReply_Call {
	return &MockNPCI_GetExpectingReply_Call{Call: _e.mock.On("GetExpectingReply")}
}

func (_c *MockNPCI_GetExpectingReply_Call) Run(run func()) *MockNPCI_GetExpectingReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetExpectingReply_Call) Return(_a0 bool) *MockNPCI_GetExpectingReply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetExpectingReply_Call) RunAndReturn(run func() bool) *MockNPCI_GetExpectingReply_Call {
	_c.Call.Return(run)
	return _c
}

// GetLengthInBits provides a mock function with given fields: ctx
func (_m *MockNPCI) GetLengthInBits(ctx context.Context) uint16 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLengthInBits")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context) uint16); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPCI_GetLengthInBits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLengthInBits'
type MockNPCI_GetLengthInBits_Call struct {
	*mock.Call
}

// GetLengthInBits is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNPCI_Expecter) GetLengthInBits(ctx interface{}) *MockNPCI_GetLengthInBits_Call {
	return &MockNPCI_GetLengthInBits_Call{Call: _e.mock.On("GetLengthInBits", ctx)}
}

func (_c *MockNPCI_GetLengthInBits_Call) Run(run func(ctx context.Context)) *MockNPCI_GetLengthInBits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNPCI_GetLengthInBits_Call) Return(_a0 uint16) *MockNPCI_GetLengthInBits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetLengthInBits_Call) RunAndReturn(run func(context.Context) uint16) *MockNPCI_GetLengthInBits_Call {
	_c.Call.Return(run)
	return _c
}

// GetLengthInBytes provides a mock function with given fields: ctx
func (_m *MockNPCI) GetLengthInBytes(ctx context.Context) uint16 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLengthInBytes")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context) uint16); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// MockNPCI_GetLengthInBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLengthInBytes'
type MockNPCI_GetLengthInBytes_Call struct {
	*mock.Call
}

// GetLengthInBytes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNPCI_Expecter) GetLengthInBytes(ctx interface{}) *MockNPCI_GetLengthInBytes_Call {
	return &MockNPCI_GetLengthInBytes_Call{Call: _e.mock.On("GetLengthInBytes", ctx)}
}

func (_c *MockNPCI_GetLengthInBytes_Call) Run(run func(ctx context.Context)) *MockNPCI_GetLengthInBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNPCI_GetLengthInBytes_Call) Return(_a0 uint16) *MockNPCI_GetLengthInBytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetLengthInBytes_Call) RunAndReturn(run func(context.Context) uint16) *MockNPCI_GetLengthInBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GetNPDUNetMessage provides a mock function with given fields:
func (_m *MockNPCI) GetNPDUNetMessage() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNPDUNetMessage")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPCI_GetNPDUNetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNPDUNetMessage'
type MockNPCI_GetNPDUNetMessage_Call struct {
	*mock.Call
}

// GetNPDUNetMessage is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetNPDUNetMessage() *MockNPCI_GetNPDUNetMessage_Call {
	return &MockNPCI_GetNPDUNetMessage_Call{Call: _e.mock.On("GetNPDUNetMessage")}
}

func (_c *MockNPCI_GetNPDUNetMessage_Call) Run(run func()) *MockNPCI_GetNPDUNetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetNPDUNetMessage_Call) Return(_a0 *uint8) *MockNPCI_GetNPDUNetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetNPDUNetMessage_Call) RunAndReturn(run func() *uint8) *MockNPCI_GetNPDUNetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkPriority provides a mock function with given fields:
func (_m *MockNPCI) GetNetworkPriority() model.NPDUNetworkPriority {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPriority")
	}

	var r0 model.NPDUNetworkPriority
	if rf, ok := ret.Get(0).(func() model.NPDUNetworkPriority); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.NPDUNetworkPriority)
	}

	return r0
}

// MockNPCI_GetNetworkPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkPriority'
type MockNPCI_GetNetworkPriority_Call struct {
	*mock.Call
}

// GetNetworkPriority is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetNetworkPriority() *MockNPCI_GetNetworkPriority_Call {
	return &MockNPCI_GetNetworkPriority_Call{Call: _e.mock.On("GetNetworkPriority")}
}

func (_c *MockNPCI_GetNetworkPriority_Call) Run(run func()) *MockNPCI_GetNetworkPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetNetworkPriority_Call) Return(_a0 model.NPDUNetworkPriority) *MockNPCI_GetNetworkPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetNetworkPriority_Call) RunAndReturn(run func() model.NPDUNetworkPriority) *MockNPCI_GetNetworkPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUDestination provides a mock function with given fields:
func (_m *MockNPCI) GetPDUDestination() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUDestination")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPCI_GetPDUDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUDestination'
type MockNPCI_GetPDUDestination_Call struct {
	*mock.Call
}

// GetPDUDestination is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetPDUDestination() *MockNPCI_GetPDUDestination_Call {
	return &MockNPCI_GetPDUDestination_Call{Call: _e.mock.On("GetPDUDestination")}
}

func (_c *MockNPCI_GetPDUDestination_Call) Run(run func()) *MockNPCI_GetPDUDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetPDUDestination_Call) Return(_a0 *Address) *MockNPCI_GetPDUDestination_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetPDUDestination_Call) RunAndReturn(run func() *Address) *MockNPCI_GetPDUDestination_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUSource provides a mock function with given fields:
func (_m *MockNPCI) GetPDUSource() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUSource")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPCI_GetPDUSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUSource'
type MockNPCI_GetPDUSource_Call struct {
	*mock.Call
}

// GetPDUSource is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetPDUSource() *MockNPCI_GetPDUSource_Call {
	return &MockNPCI_GetPDUSource_Call{Call: _e.mock.On("GetPDUSource")}
}

func (_c *MockNPCI_GetPDUSource_Call) Run(run func()) *MockNPCI_GetPDUSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetPDUSource_Call) Return(_a0 *Address) *MockNPCI_GetPDUSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetPDUSource_Call) RunAndReturn(run func() *Address) *MockNPCI_GetPDUSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUUserData provides a mock function with given fields:
func (_m *MockNPCI) GetPDUUserData() spi.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUUserData")
	}

	var r0 spi.Message
	if rf, ok := ret.Get(0).(func() spi.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.Message)
		}
	}

	return r0
}

// MockNPCI_GetPDUUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUUserData'
type MockNPCI_GetPDUUserData_Call struct {
	*mock.Call
}

// GetPDUUserData is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetPDUUserData() *MockNPCI_GetPDUUserData_Call {
	return &MockNPCI_GetPDUUserData_Call{Call: _e.mock.On("GetPDUUserData")}
}

func (_c *MockNPCI_GetPDUUserData_Call) Run(run func()) *MockNPCI_GetPDUUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetPDUUserData_Call) Return(_a0 spi.Message) *MockNPCI_GetPDUUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetPDUUserData_Call) RunAndReturn(run func() spi.Message) *MockNPCI_GetPDUUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootMessage provides a mock function with given fields:
func (_m *MockNPCI) GetRootMessage() spi.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootMessage")
	}

	var r0 spi.Message
	if rf, ok := ret.Get(0).(func() spi.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.Message)
		}
	}

	return r0
}

// MockNPCI_GetRootMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootMessage'
type MockNPCI_GetRootMessage_Call struct {
	*mock.Call
}

// GetRootMessage is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) GetRootMessage() *MockNPCI_GetRootMessage_Call {
	return &MockNPCI_GetRootMessage_Call{Call: _e.mock.On("GetRootMessage")}
}

func (_c *MockNPCI_GetRootMessage_Call) Run(run func()) *MockNPCI_GetRootMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_GetRootMessage_Call) Return(_a0 spi.Message) *MockNPCI_GetRootMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_GetRootMessage_Call) RunAndReturn(run func() spi.Message) *MockNPCI_GetRootMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields:
func (_m *MockNPCI) Serialize() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNPCI_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockNPCI_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) Serialize() *MockNPCI_Serialize_Call {
	return &MockNPCI_Serialize_Call{Call: _e.mock.On("Serialize")}
}

func (_c *MockNPCI_Serialize_Call) Run(run func()) *MockNPCI_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_Serialize_Call) Return(_a0 []byte, _a1 error) *MockNPCI_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNPCI_Serialize_Call) RunAndReturn(run func() ([]byte, error)) *MockNPCI_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// SerializeWithWriteBuffer provides a mock function with given fields: ctx, writeBuffer
func (_m *MockNPCI) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	ret := _m.Called(ctx, writeBuffer)

	if len(ret) == 0 {
		panic("no return value specified for SerializeWithWriteBuffer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.WriteBuffer) error); ok {
		r0 = rf(ctx, writeBuffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPCI_SerializeWithWriteBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerializeWithWriteBuffer'
type MockNPCI_SerializeWithWriteBuffer_Call struct {
	*mock.Call
}

// SerializeWithWriteBuffer is a helper method to define mock.On call
//   - ctx context.Context
//   - writeBuffer utils.WriteBuffer
func (_e *MockNPCI_Expecter) SerializeWithWriteBuffer(ctx interface{}, writeBuffer interface{}) *MockNPCI_SerializeWithWriteBuffer_Call {
	return &MockNPCI_SerializeWithWriteBuffer_Call{Call: _e.mock.On("SerializeWithWriteBuffer", ctx, writeBuffer)}
}

func (_c *MockNPCI_SerializeWithWriteBuffer_Call) Run(run func(ctx context.Context, writeBuffer utils.WriteBuffer)) *MockNPCI_SerializeWithWriteBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.WriteBuffer))
	})
	return _c
}

func (_c *MockNPCI_SerializeWithWriteBuffer_Call) Return(_a0 error) *MockNPCI_SerializeWithWriteBuffer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_SerializeWithWriteBuffer_Call) RunAndReturn(run func(context.Context, utils.WriteBuffer) error) *MockNPCI_SerializeWithWriteBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// SetExpectingReply provides a mock function with given fields: _a0
func (_m *MockNPCI) SetExpectingReply(_a0 bool) {
	_m.Called(_a0)
}

// MockNPCI_SetExpectingReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpectingReply'
type MockNPCI_SetExpectingReply_Call struct {
	*mock.Call
}

// SetExpectingReply is a helper method to define mock.On call
//   - _a0 bool
func (_e *MockNPCI_Expecter) SetExpectingReply(_a0 interface{}) *MockNPCI_SetExpectingReply_Call {
	return &MockNPCI_SetExpectingReply_Call{Call: _e.mock.On("SetExpectingReply", _a0)}
}

func (_c *MockNPCI_SetExpectingReply_Call) Run(run func(_a0 bool)) *MockNPCI_SetExpectingReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockNPCI_SetExpectingReply_Call) Return() *MockNPCI_SetExpectingReply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_SetExpectingReply_Call) RunAndReturn(run func(bool)) *MockNPCI_SetExpectingReply_Call {
	_c.Call.Return(run)
	return _c
}

// SetNetworkPriority provides a mock function with given fields: _a0
func (_m *MockNPCI) SetNetworkPriority(_a0 model.NPDUNetworkPriority) {
	_m.Called(_a0)
}

// MockNPCI_SetNetworkPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNetworkPriority'
type MockNPCI_SetNetworkPriority_Call struct {
	*mock.Call
}

// SetNetworkPriority is a helper method to define mock.On call
//   - _a0 model.NPDUNetworkPriority
func (_e *MockNPCI_Expecter) SetNetworkPriority(_a0 interface{}) *MockNPCI_SetNetworkPriority_Call {
	return &MockNPCI_SetNetworkPriority_Call{Call: _e.mock.On("SetNetworkPriority", _a0)}
}

func (_c *MockNPCI_SetNetworkPriority_Call) Run(run func(_a0 model.NPDUNetworkPriority)) *MockNPCI_SetNetworkPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.NPDUNetworkPriority))
	})
	return _c
}

func (_c *MockNPCI_SetNetworkPriority_Call) Return() *MockNPCI_SetNetworkPriority_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_SetNetworkPriority_Call) RunAndReturn(run func(model.NPDUNetworkPriority)) *MockNPCI_SetNetworkPriority_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUDestination provides a mock function with given fields: _a0
func (_m *MockNPCI) SetPDUDestination(_a0 *Address) {
	_m.Called(_a0)
}

// MockNPCI_SetPDUDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUDestination'
type MockNPCI_SetPDUDestination_Call struct {
	*mock.Call
}

// SetPDUDestination is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockNPCI_Expecter) SetPDUDestination(_a0 interface{}) *MockNPCI_SetPDUDestination_Call {
	return &MockNPCI_SetPDUDestination_Call{Call: _e.mock.On("SetPDUDestination", _a0)}
}

func (_c *MockNPCI_SetPDUDestination_Call) Run(run func(_a0 *Address)) *MockNPCI_SetPDUDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPCI_SetPDUDestination_Call) Return() *MockNPCI_SetPDUDestination_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_SetPDUDestination_Call) RunAndReturn(run func(*Address)) *MockNPCI_SetPDUDestination_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUSource provides a mock function with given fields: source
func (_m *MockNPCI) SetPDUSource(source *Address) {
	_m.Called(source)
}

// MockNPCI_SetPDUSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUSource'
type MockNPCI_SetPDUSource_Call struct {
	*mock.Call
}

// SetPDUSource is a helper method to define mock.On call
//   - source *Address
func (_e *MockNPCI_Expecter) SetPDUSource(source interface{}) *MockNPCI_SetPDUSource_Call {
	return &MockNPCI_SetPDUSource_Call{Call: _e.mock.On("SetPDUSource", source)}
}

func (_c *MockNPCI_SetPDUSource_Call) Run(run func(source *Address)) *MockNPCI_SetPDUSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPCI_SetPDUSource_Call) Return() *MockNPCI_SetPDUSource_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_SetPDUSource_Call) RunAndReturn(run func(*Address)) *MockNPCI_SetPDUSource_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUUserData provides a mock function with given fields: _a0
func (_m *MockNPCI) SetPDUUserData(_a0 spi.Message) {
	_m.Called(_a0)
}

// MockNPCI_SetPDUUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUUserData'
type MockNPCI_SetPDUUserData_Call struct {
	*mock.Call
}

// SetPDUUserData is a helper method to define mock.On call
//   - _a0 spi.Message
func (_e *MockNPCI_Expecter) SetPDUUserData(_a0 interface{}) *MockNPCI_SetPDUUserData_Call {
	return &MockNPCI_SetPDUUserData_Call{Call: _e.mock.On("SetPDUUserData", _a0)}
}

func (_c *MockNPCI_SetPDUUserData_Call) Run(run func(_a0 spi.Message)) *MockNPCI_SetPDUUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spi.Message))
	})
	return _c
}

func (_c *MockNPCI_SetPDUUserData_Call) Return() *MockNPCI_SetPDUUserData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_SetPDUUserData_Call) RunAndReturn(run func(spi.Message)) *MockNPCI_SetPDUUserData_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockNPCI) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNPCI_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockNPCI_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) String() *MockNPCI_String_Call {
	return &MockNPCI_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockNPCI_String_Call) Run(run func()) *MockNPCI_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_String_Call) Return(_a0 string) *MockNPCI_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_String_Call) RunAndReturn(run func() string) *MockNPCI_String_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: pci
func (_m *MockNPCI) Update(pci Arg) error {
	ret := _m.Called(pci)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pci)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNPCI_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNPCI_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - pci Arg
func (_e *MockNPCI_Expecter) Update(pci interface{}) *MockNPCI_Update_Call {
	return &MockNPCI_Update_Call{Call: _e.mock.On("Update", pci)}
}

func (_c *MockNPCI_Update_Call) Run(run func(pci Arg)) *MockNPCI_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockNPCI_Update_Call) Return(_a0 error) *MockNPCI_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_Update_Call) RunAndReturn(run func(Arg) error) *MockNPCI_Update_Call {
	_c.Call.Return(run)
	return _c
}

// getAPDU provides a mock function with given fields:
func (_m *MockNPCI) getAPDU() model.APDU {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getAPDU")
	}

	var r0 model.APDU
	if rf, ok := ret.Get(0).(func() model.APDU); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.APDU)
		}
	}

	return r0
}

// MockNPCI_getAPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAPDU'
type MockNPCI_getAPDU_Call struct {
	*mock.Call
}

// getAPDU is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getAPDU() *MockNPCI_getAPDU_Call {
	return &MockNPCI_getAPDU_Call{Call: _e.mock.On("getAPDU")}
}

func (_c *MockNPCI_getAPDU_Call) Run(run func()) *MockNPCI_getAPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getAPDU_Call) Return(_a0 model.APDU) *MockNPCI_getAPDU_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getAPDU_Call) RunAndReturn(run func() model.APDU) *MockNPCI_getAPDU_Call {
	_c.Call.Return(run)
	return _c
}

// getNLM provides a mock function with given fields:
func (_m *MockNPCI) getNLM() model.NLM {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNLM")
	}

	var r0 model.NLM
	if rf, ok := ret.Get(0).(func() model.NLM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.NLM)
		}
	}

	return r0
}

// MockNPCI_getNLM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNLM'
type MockNPCI_getNLM_Call struct {
	*mock.Call
}

// getNLM is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNLM() *MockNPCI_getNLM_Call {
	return &MockNPCI_getNLM_Call{Call: _e.mock.On("getNLM")}
}

func (_c *MockNPCI_getNLM_Call) Run(run func()) *MockNPCI_getNLM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNLM_Call) Return(_a0 model.NLM) *MockNPCI_getNLM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNLM_Call) RunAndReturn(run func() model.NLM) *MockNPCI_getNLM_Call {
	_c.Call.Return(run)
	return _c
}

// getNPDU provides a mock function with given fields:
func (_m *MockNPCI) getNPDU() model.NPDU {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNPDU")
	}

	var r0 model.NPDU
	if rf, ok := ret.Get(0).(func() model.NPDU); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.NPDU)
		}
	}

	return r0
}

// MockNPCI_getNPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNPDU'
type MockNPCI_getNPDU_Call struct {
	*mock.Call
}

// getNPDU is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNPDU() *MockNPCI_getNPDU_Call {
	return &MockNPCI_getNPDU_Call{Call: _e.mock.On("getNPDU")}
}

func (_c *MockNPCI_getNPDU_Call) Run(run func()) *MockNPCI_getNPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNPDU_Call) Return(_a0 model.NPDU) *MockNPCI_getNPDU_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNPDU_Call) RunAndReturn(run func() model.NPDU) *MockNPCI_getNPDU_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduControl provides a mock function with given fields:
func (_m *MockNPCI) getNpduControl() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduControl")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// MockNPCI_getNpduControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduControl'
type MockNPCI_getNpduControl_Call struct {
	*mock.Call
}

// getNpduControl is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduControl() *MockNPCI_getNpduControl_Call {
	return &MockNPCI_getNpduControl_Call{Call: _e.mock.On("getNpduControl")}
}

func (_c *MockNPCI_getNpduControl_Call) Run(run func()) *MockNPCI_getNpduControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduControl_Call) Return(_a0 uint8) *MockNPCI_getNpduControl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduControl_Call) RunAndReturn(run func() uint8) *MockNPCI_getNpduControl_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduDADR provides a mock function with given fields:
func (_m *MockNPCI) getNpduDADR() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduDADR")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPCI_getNpduDADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduDADR'
type MockNPCI_getNpduDADR_Call struct {
	*mock.Call
}

// getNpduDADR is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduDADR() *MockNPCI_getNpduDADR_Call {
	return &MockNPCI_getNpduDADR_Call{Call: _e.mock.On("getNpduDADR")}
}

func (_c *MockNPCI_getNpduDADR_Call) Run(run func()) *MockNPCI_getNpduDADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduDADR_Call) Return(_a0 *Address) *MockNPCI_getNpduDADR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduDADR_Call) RunAndReturn(run func() *Address) *MockNPCI_getNpduDADR_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduHopCount provides a mock function with given fields:
func (_m *MockNPCI) getNpduHopCount() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduHopCount")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPCI_getNpduHopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduHopCount'
type MockNPCI_getNpduHopCount_Call struct {
	*mock.Call
}

// getNpduHopCount is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduHopCount() *MockNPCI_getNpduHopCount_Call {
	return &MockNPCI_getNpduHopCount_Call{Call: _e.mock.On("getNpduHopCount")}
}

func (_c *MockNPCI_getNpduHopCount_Call) Run(run func()) *MockNPCI_getNpduHopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduHopCount_Call) Return(_a0 *uint8) *MockNPCI_getNpduHopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduHopCount_Call) RunAndReturn(run func() *uint8) *MockNPCI_getNpduHopCount_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduNetMessage provides a mock function with given fields:
func (_m *MockNPCI) getNpduNetMessage() *uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduNetMessage")
	}

	var r0 *uint8
	if rf, ok := ret.Get(0).(func() *uint8); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	return r0
}

// MockNPCI_getNpduNetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduNetMessage'
type MockNPCI_getNpduNetMessage_Call struct {
	*mock.Call
}

// getNpduNetMessage is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduNetMessage() *MockNPCI_getNpduNetMessage_Call {
	return &MockNPCI_getNpduNetMessage_Call{Call: _e.mock.On("getNpduNetMessage")}
}

func (_c *MockNPCI_getNpduNetMessage_Call) Run(run func()) *MockNPCI_getNpduNetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduNetMessage_Call) Return(_a0 *uint8) *MockNPCI_getNpduNetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduNetMessage_Call) RunAndReturn(run func() *uint8) *MockNPCI_getNpduNetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduSADR provides a mock function with given fields:
func (_m *MockNPCI) getNpduSADR() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduSADR")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockNPCI_getNpduSADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduSADR'
type MockNPCI_getNpduSADR_Call struct {
	*mock.Call
}

// getNpduSADR is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduSADR() *MockNPCI_getNpduSADR_Call {
	return &MockNPCI_getNpduSADR_Call{Call: _e.mock.On("getNpduSADR")}
}

func (_c *MockNPCI_getNpduSADR_Call) Run(run func()) *MockNPCI_getNpduSADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduSADR_Call) Return(_a0 *Address) *MockNPCI_getNpduSADR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduSADR_Call) RunAndReturn(run func() *Address) *MockNPCI_getNpduSADR_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduVendorID provides a mock function with given fields:
func (_m *MockNPCI) getNpduVendorID() *model.BACnetVendorId {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduVendorID")
	}

	var r0 *model.BACnetVendorId
	if rf, ok := ret.Get(0).(func() *model.BACnetVendorId); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BACnetVendorId)
		}
	}

	return r0
}

// MockNPCI_getNpduVendorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduVendorID'
type MockNPCI_getNpduVendorID_Call struct {
	*mock.Call
}

// getNpduVendorID is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduVendorID() *MockNPCI_getNpduVendorID_Call {
	return &MockNPCI_getNpduVendorID_Call{Call: _e.mock.On("getNpduVendorID")}
}

func (_c *MockNPCI_getNpduVendorID_Call) Run(run func()) *MockNPCI_getNpduVendorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduVendorID_Call) Return(_a0 *model.BACnetVendorId) *MockNPCI_getNpduVendorID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduVendorID_Call) RunAndReturn(run func() *model.BACnetVendorId) *MockNPCI_getNpduVendorID_Call {
	_c.Call.Return(run)
	return _c
}

// getNpduVersion provides a mock function with given fields:
func (_m *MockNPCI) getNpduVersion() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNpduVersion")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// MockNPCI_getNpduVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNpduVersion'
type MockNPCI_getNpduVersion_Call struct {
	*mock.Call
}

// getNpduVersion is a helper method to define mock.On call
func (_e *MockNPCI_Expecter) getNpduVersion() *MockNPCI_getNpduVersion_Call {
	return &MockNPCI_getNpduVersion_Call{Call: _e.mock.On("getNpduVersion")}
}

func (_c *MockNPCI_getNpduVersion_Call) Run(run func()) *MockNPCI_getNpduVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNPCI_getNpduVersion_Call) Return(_a0 uint8) *MockNPCI_getNpduVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNPCI_getNpduVersion_Call) RunAndReturn(run func() uint8) *MockNPCI_getNpduVersion_Call {
	_c.Call.Return(run)
	return _c
}

// setAPDU provides a mock function with given fields: _a0
func (_m *MockNPCI) setAPDU(_a0 model.APDU) {
	_m.Called(_a0)
}

// MockNPCI_setAPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setAPDU'
type MockNPCI_setAPDU_Call struct {
	*mock.Call
}

// setAPDU is a helper method to define mock.On call
//   - _a0 model.APDU
func (_e *MockNPCI_Expecter) setAPDU(_a0 interface{}) *MockNPCI_setAPDU_Call {
	return &MockNPCI_setAPDU_Call{Call: _e.mock.On("setAPDU", _a0)}
}

func (_c *MockNPCI_setAPDU_Call) Run(run func(_a0 model.APDU)) *MockNPCI_setAPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.APDU))
	})
	return _c
}

func (_c *MockNPCI_setAPDU_Call) Return() *MockNPCI_setAPDU_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setAPDU_Call) RunAndReturn(run func(model.APDU)) *MockNPCI_setAPDU_Call {
	_c.Call.Return(run)
	return _c
}

// setNLM provides a mock function with given fields: _a0
func (_m *MockNPCI) setNLM(_a0 model.NLM) {
	_m.Called(_a0)
}

// MockNPCI_setNLM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNLM'
type MockNPCI_setNLM_Call struct {
	*mock.Call
}

// setNLM is a helper method to define mock.On call
//   - _a0 model.NLM
func (_e *MockNPCI_Expecter) setNLM(_a0 interface{}) *MockNPCI_setNLM_Call {
	return &MockNPCI_setNLM_Call{Call: _e.mock.On("setNLM", _a0)}
}

func (_c *MockNPCI_setNLM_Call) Run(run func(_a0 model.NLM)) *MockNPCI_setNLM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.NLM))
	})
	return _c
}

func (_c *MockNPCI_setNLM_Call) Return() *MockNPCI_setNLM_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNLM_Call) RunAndReturn(run func(model.NLM)) *MockNPCI_setNLM_Call {
	_c.Call.Return(run)
	return _c
}

// setNPDU provides a mock function with given fields: _a0
func (_m *MockNPCI) setNPDU(_a0 model.NPDU) {
	_m.Called(_a0)
}

// MockNPCI_setNPDU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNPDU'
type MockNPCI_setNPDU_Call struct {
	*mock.Call
}

// setNPDU is a helper method to define mock.On call
//   - _a0 model.NPDU
func (_e *MockNPCI_Expecter) setNPDU(_a0 interface{}) *MockNPCI_setNPDU_Call {
	return &MockNPCI_setNPDU_Call{Call: _e.mock.On("setNPDU", _a0)}
}

func (_c *MockNPCI_setNPDU_Call) Run(run func(_a0 model.NPDU)) *MockNPCI_setNPDU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.NPDU))
	})
	return _c
}

func (_c *MockNPCI_setNPDU_Call) Return() *MockNPCI_setNPDU_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNPDU_Call) RunAndReturn(run func(model.NPDU)) *MockNPCI_setNPDU_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduControl provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduControl(_a0 uint8) {
	_m.Called(_a0)
}

// MockNPCI_setNpduControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduControl'
type MockNPCI_setNpduControl_Call struct {
	*mock.Call
}

// setNpduControl is a helper method to define mock.On call
//   - _a0 uint8
func (_e *MockNPCI_Expecter) setNpduControl(_a0 interface{}) *MockNPCI_setNpduControl_Call {
	return &MockNPCI_setNpduControl_Call{Call: _e.mock.On("setNpduControl", _a0)}
}

func (_c *MockNPCI_setNpduControl_Call) Run(run func(_a0 uint8)) *MockNPCI_setNpduControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *MockNPCI_setNpduControl_Call) Return() *MockNPCI_setNpduControl_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduControl_Call) RunAndReturn(run func(uint8)) *MockNPCI_setNpduControl_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduDADR provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduDADR(_a0 *Address) {
	_m.Called(_a0)
}

// MockNPCI_setNpduDADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduDADR'
type MockNPCI_setNpduDADR_Call struct {
	*mock.Call
}

// setNpduDADR is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockNPCI_Expecter) setNpduDADR(_a0 interface{}) *MockNPCI_setNpduDADR_Call {
	return &MockNPCI_setNpduDADR_Call{Call: _e.mock.On("setNpduDADR", _a0)}
}

func (_c *MockNPCI_setNpduDADR_Call) Run(run func(_a0 *Address)) *MockNPCI_setNpduDADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPCI_setNpduDADR_Call) Return() *MockNPCI_setNpduDADR_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduDADR_Call) RunAndReturn(run func(*Address)) *MockNPCI_setNpduDADR_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduHopCount provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduHopCount(_a0 *uint8) {
	_m.Called(_a0)
}

// MockNPCI_setNpduHopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduHopCount'
type MockNPCI_setNpduHopCount_Call struct {
	*mock.Call
}

// setNpduHopCount is a helper method to define mock.On call
//   - _a0 *uint8
func (_e *MockNPCI_Expecter) setNpduHopCount(_a0 interface{}) *MockNPCI_setNpduHopCount_Call {
	return &MockNPCI_setNpduHopCount_Call{Call: _e.mock.On("setNpduHopCount", _a0)}
}

func (_c *MockNPCI_setNpduHopCount_Call) Run(run func(_a0 *uint8)) *MockNPCI_setNpduHopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*uint8))
	})
	return _c
}

func (_c *MockNPCI_setNpduHopCount_Call) Return() *MockNPCI_setNpduHopCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduHopCount_Call) RunAndReturn(run func(*uint8)) *MockNPCI_setNpduHopCount_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduNetMessage provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduNetMessage(_a0 *uint8) {
	_m.Called(_a0)
}

// MockNPCI_setNpduNetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduNetMessage'
type MockNPCI_setNpduNetMessage_Call struct {
	*mock.Call
}

// setNpduNetMessage is a helper method to define mock.On call
//   - _a0 *uint8
func (_e *MockNPCI_Expecter) setNpduNetMessage(_a0 interface{}) *MockNPCI_setNpduNetMessage_Call {
	return &MockNPCI_setNpduNetMessage_Call{Call: _e.mock.On("setNpduNetMessage", _a0)}
}

func (_c *MockNPCI_setNpduNetMessage_Call) Run(run func(_a0 *uint8)) *MockNPCI_setNpduNetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*uint8))
	})
	return _c
}

func (_c *MockNPCI_setNpduNetMessage_Call) Return() *MockNPCI_setNpduNetMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduNetMessage_Call) RunAndReturn(run func(*uint8)) *MockNPCI_setNpduNetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduSADR provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduSADR(_a0 *Address) {
	_m.Called(_a0)
}

// MockNPCI_setNpduSADR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduSADR'
type MockNPCI_setNpduSADR_Call struct {
	*mock.Call
}

// setNpduSADR is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockNPCI_Expecter) setNpduSADR(_a0 interface{}) *MockNPCI_setNpduSADR_Call {
	return &MockNPCI_setNpduSADR_Call{Call: _e.mock.On("setNpduSADR", _a0)}
}

func (_c *MockNPCI_setNpduSADR_Call) Run(run func(_a0 *Address)) *MockNPCI_setNpduSADR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockNPCI_setNpduSADR_Call) Return() *MockNPCI_setNpduSADR_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduSADR_Call) RunAndReturn(run func(*Address)) *MockNPCI_setNpduSADR_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduVendorID provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduVendorID(_a0 *model.BACnetVendorId) {
	_m.Called(_a0)
}

// MockNPCI_setNpduVendorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduVendorID'
type MockNPCI_setNpduVendorID_Call struct {
	*mock.Call
}

// setNpduVendorID is a helper method to define mock.On call
//   - _a0 *model.BACnetVendorId
func (_e *MockNPCI_Expecter) setNpduVendorID(_a0 interface{}) *MockNPCI_setNpduVendorID_Call {
	return &MockNPCI_setNpduVendorID_Call{Call: _e.mock.On("setNpduVendorID", _a0)}
}

func (_c *MockNPCI_setNpduVendorID_Call) Run(run func(_a0 *model.BACnetVendorId)) *MockNPCI_setNpduVendorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.BACnetVendorId))
	})
	return _c
}

func (_c *MockNPCI_setNpduVendorID_Call) Return() *MockNPCI_setNpduVendorID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduVendorID_Call) RunAndReturn(run func(*model.BACnetVendorId)) *MockNPCI_setNpduVendorID_Call {
	_c.Call.Return(run)
	return _c
}

// setNpduVersion provides a mock function with given fields: _a0
func (_m *MockNPCI) setNpduVersion(_a0 uint8) {
	_m.Called(_a0)
}

// MockNPCI_setNpduVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNpduVersion'
type MockNPCI_setNpduVersion_Call struct {
	*mock.Call
}

// setNpduVersion is a helper method to define mock.On call
//   - _a0 uint8
func (_e *MockNPCI_Expecter) setNpduVersion(_a0 interface{}) *MockNPCI_setNpduVersion_Call {
	return &MockNPCI_setNpduVersion_Call{Call: _e.mock.On("setNpduVersion", _a0)}
}

func (_c *MockNPCI_setNpduVersion_Call) Run(run func(_a0 uint8)) *MockNPCI_setNpduVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *MockNPCI_setNpduVersion_Call) Return() *MockNPCI_setNpduVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNPCI_setNpduVersion_Call) RunAndReturn(run func(uint8)) *MockNPCI_setNpduVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNPCI creates a new instance of MockNPCI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNPCI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNPCI {
	mock := &MockNPCI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
