/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockServerContract is an autogenerated mock type for the ServerContract type
type MockServerContract struct {
	mock.Mock
}

type MockServerContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerContract) EXPECT() *MockServerContract_Expecter {
	return &MockServerContract_Expecter{mock: &_m.Mock}
}

// Indication provides a mock function with given fields: args, kwargs
func (_m *MockServerContract) Indication(args Args, kwargs KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Indication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerContract_Indication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indication'
type MockServerContract_Indication_Call struct {
	*mock.Call
}

// Indication is a helper method to define mock.On call
//   - args Args
//   - kwargs KWArgs
func (_e *MockServerContract_Expecter) Indication(args interface{}, kwargs interface{}) *MockServerContract_Indication_Call {
	return &MockServerContract_Indication_Call{Call: _e.mock.On("Indication", args, kwargs)}
}

func (_c *MockServerContract_Indication_Call) Run(run func(args Args, kwargs KWArgs)) *MockServerContract_Indication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockServerContract_Indication_Call) Return(_a0 error) *MockServerContract_Indication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerContract_Indication_Call) RunAndReturn(run func(Args, KWArgs) error) *MockServerContract_Indication_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields: args, kwargs
func (_m *MockServerContract) Response(args Args, kwargs KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerContract_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type MockServerContract_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
//   - args Args
//   - kwargs KWArgs
func (_e *MockServerContract_Expecter) Response(args interface{}, kwargs interface{}) *MockServerContract_Response_Call {
	return &MockServerContract_Response_Call{Call: _e.mock.On("Response", args, kwargs)}
}

func (_c *MockServerContract_Response_Call) Run(run func(args Args, kwargs KWArgs)) *MockServerContract_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockServerContract_Response_Call) Return(_a0 error) *MockServerContract_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerContract_Response_Call) RunAndReturn(run func(Args, KWArgs) error) *MockServerContract_Response_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockServerContract) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockServerContract_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockServerContract_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockServerContract_Expecter) String() *MockServerContract_String_Call {
	return &MockServerContract_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockServerContract_String_Call) Run(run func()) *MockServerContract_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerContract_String_Call) Return(_a0 string) *MockServerContract_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerContract_String_Call) RunAndReturn(run func() string) *MockServerContract_String_Call {
	_c.Call.Return(run)
	return _c
}

// _setServerPeer provides a mock function with given fields: serverPeer
func (_m *MockServerContract) _setServerPeer(serverPeer Client) {
	_m.Called(serverPeer)
}

// MockServerContract__setServerPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method '_setServerPeer'
type MockServerContract__setServerPeer_Call struct {
	*mock.Call
}

// _setServerPeer is a helper method to define mock.On call
//   - serverPeer Client
func (_e *MockServerContract_Expecter) _setServerPeer(serverPeer interface{}) *MockServerContract__setServerPeer_Call {
	return &MockServerContract__setServerPeer_Call{Call: _e.mock.On("_setServerPeer", serverPeer)}
}

func (_c *MockServerContract__setServerPeer_Call) Run(run func(serverPeer Client)) *MockServerContract__setServerPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Client))
	})
	return _c
}

func (_c *MockServerContract__setServerPeer_Call) Return() *MockServerContract__setServerPeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerContract__setServerPeer_Call) RunAndReturn(run func(Client)) *MockServerContract__setServerPeer_Call {
	_c.Call.Return(run)
	return _c
}

// getServerId provides a mock function with given fields:
func (_m *MockServerContract) getServerId() *int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getServerId")
	}

	var r0 *int
	if rf, ok := ret.Get(0).(func() *int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	return r0
}

// MockServerContract_getServerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getServerId'
type MockServerContract_getServerId_Call struct {
	*mock.Call
}

// getServerId is a helper method to define mock.On call
func (_e *MockServerContract_Expecter) getServerId() *MockServerContract_getServerId_Call {
	return &MockServerContract_getServerId_Call{Call: _e.mock.On("getServerId")}
}

func (_c *MockServerContract_getServerId_Call) Run(run func()) *MockServerContract_getServerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerContract_getServerId_Call) Return(_a0 *int) *MockServerContract_getServerId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerContract_getServerId_Call) RunAndReturn(run func() *int) *MockServerContract_getServerId_Call {
	_c.Call.Return(run)
	return _c
}

// hasServerPeer provides a mock function with given fields:
func (_m *MockServerContract) hasServerPeer() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for hasServerPeer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockServerContract_hasServerPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'hasServerPeer'
type MockServerContract_hasServerPeer_Call struct {
	*mock.Call
}

// hasServerPeer is a helper method to define mock.On call
func (_e *MockServerContract_Expecter) hasServerPeer() *MockServerContract_hasServerPeer_Call {
	return &MockServerContract_hasServerPeer_Call{Call: _e.mock.On("hasServerPeer")}
}

func (_c *MockServerContract_hasServerPeer_Call) Run(run func()) *MockServerContract_hasServerPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerContract_hasServerPeer_Call) Return(_a0 bool) *MockServerContract_hasServerPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerContract_hasServerPeer_Call) RunAndReturn(run func() bool) *MockServerContract_hasServerPeer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerContract creates a new instance of MockServerContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerContract {
	mock := &MockServerContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
