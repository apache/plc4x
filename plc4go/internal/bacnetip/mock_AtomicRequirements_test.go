/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockAtomicRequirements is an autogenerated mock type for the AtomicRequirements type
type MockAtomicRequirements struct {
	mock.Mock
}

type MockAtomicRequirements_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAtomicRequirements) EXPECT() *MockAtomicRequirements_Expecter {
	return &MockAtomicRequirements_Expecter{mock: &_m.Mock}
}

// IsValid provides a mock function with given fields: arg
func (_m *MockAtomicRequirements) IsValid(arg interface{}) bool {
	ret := _m.Called(arg)

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAtomicRequirements_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type MockAtomicRequirements_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
//   - arg interface{}
func (_e *MockAtomicRequirements_Expecter) IsValid(arg interface{}) *MockAtomicRequirements_IsValid_Call {
	return &MockAtomicRequirements_IsValid_Call{Call: _e.mock.On("IsValid", arg)}
}

func (_c *MockAtomicRequirements_IsValid_Call) Run(run func(arg interface{})) *MockAtomicRequirements_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAtomicRequirements_IsValid_Call) Return(_a0 bool) *MockAtomicRequirements_IsValid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAtomicRequirements_IsValid_Call) RunAndReturn(run func(interface{}) bool) *MockAtomicRequirements_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAtomicRequirements creates a new instance of MockAtomicRequirements. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAtomicRequirements(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAtomicRequirements {
	mock := &MockAtomicRequirements{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
