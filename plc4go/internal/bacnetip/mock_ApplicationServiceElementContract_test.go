/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockApplicationServiceElementContract is an autogenerated mock type for the ApplicationServiceElementContract type
type MockApplicationServiceElementContract struct {
	mock.Mock
}

type MockApplicationServiceElementContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApplicationServiceElementContract) EXPECT() *MockApplicationServiceElementContract_Expecter {
	return &MockApplicationServiceElementContract_Expecter{mock: &_m.Mock}
}

// Confirmation provides a mock function with given fields: args, kwargs
func (_m *MockApplicationServiceElementContract) Confirmation(args Args, kwargs KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Confirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplicationServiceElementContract_Confirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Confirmation'
type MockApplicationServiceElementContract_Confirmation_Call struct {
	*mock.Call
}

// Confirmation is a helper method to define mock.On call
//   - args Args
//   - kwargs KWArgs
func (_e *MockApplicationServiceElementContract_Expecter) Confirmation(args interface{}, kwargs interface{}) *MockApplicationServiceElementContract_Confirmation_Call {
	return &MockApplicationServiceElementContract_Confirmation_Call{Call: _e.mock.On("Confirmation", args, kwargs)}
}

func (_c *MockApplicationServiceElementContract_Confirmation_Call) Run(run func(args Args, kwargs KWArgs)) *MockApplicationServiceElementContract_Confirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockApplicationServiceElementContract_Confirmation_Call) Return(_a0 error) *MockApplicationServiceElementContract_Confirmation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplicationServiceElementContract_Confirmation_Call) RunAndReturn(run func(Args, KWArgs) error) *MockApplicationServiceElementContract_Confirmation_Call {
	_c.Call.Return(run)
	return _c
}

// Indication provides a mock function with given fields: args, kwargs
func (_m *MockApplicationServiceElementContract) Indication(args Args, kwargs KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Indication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplicationServiceElementContract_Indication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indication'
type MockApplicationServiceElementContract_Indication_Call struct {
	*mock.Call
}

// Indication is a helper method to define mock.On call
//   - args Args
//   - kwargs KWArgs
func (_e *MockApplicationServiceElementContract_Expecter) Indication(args interface{}, kwargs interface{}) *MockApplicationServiceElementContract_Indication_Call {
	return &MockApplicationServiceElementContract_Indication_Call{Call: _e.mock.On("Indication", args, kwargs)}
}

func (_c *MockApplicationServiceElementContract_Indication_Call) Run(run func(args Args, kwargs KWArgs)) *MockApplicationServiceElementContract_Indication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockApplicationServiceElementContract_Indication_Call) Return(_a0 error) *MockApplicationServiceElementContract_Indication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplicationServiceElementContract_Indication_Call) RunAndReturn(run func(Args, KWArgs) error) *MockApplicationServiceElementContract_Indication_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: args, kwargs
func (_m *MockApplicationServiceElementContract) Request(args Args, kwargs KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplicationServiceElementContract_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockApplicationServiceElementContract_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - args Args
//   - kwargs KWArgs
func (_e *MockApplicationServiceElementContract_Expecter) Request(args interface{}, kwargs interface{}) *MockApplicationServiceElementContract_Request_Call {
	return &MockApplicationServiceElementContract_Request_Call{Call: _e.mock.On("Request", args, kwargs)}
}

func (_c *MockApplicationServiceElementContract_Request_Call) Run(run func(args Args, kwargs KWArgs)) *MockApplicationServiceElementContract_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockApplicationServiceElementContract_Request_Call) Return(_a0 error) *MockApplicationServiceElementContract_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplicationServiceElementContract_Request_Call) RunAndReturn(run func(Args, KWArgs) error) *MockApplicationServiceElementContract_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields: args, kwargs
func (_m *MockApplicationServiceElementContract) Response(args Args, kwargs KWArgs) error {
	ret := _m.Called(args, kwargs)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Args, KWArgs) error); ok {
		r0 = rf(args, kwargs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplicationServiceElementContract_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type MockApplicationServiceElementContract_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
//   - args Args
//   - kwargs KWArgs
func (_e *MockApplicationServiceElementContract_Expecter) Response(args interface{}, kwargs interface{}) *MockApplicationServiceElementContract_Response_Call {
	return &MockApplicationServiceElementContract_Response_Call{Call: _e.mock.On("Response", args, kwargs)}
}

func (_c *MockApplicationServiceElementContract_Response_Call) Run(run func(args Args, kwargs KWArgs)) *MockApplicationServiceElementContract_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args), args[1].(KWArgs))
	})
	return _c
}

func (_c *MockApplicationServiceElementContract_Response_Call) Return(_a0 error) *MockApplicationServiceElementContract_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplicationServiceElementContract_Response_Call) RunAndReturn(run func(Args, KWArgs) error) *MockApplicationServiceElementContract_Response_Call {
	_c.Call.Return(run)
	return _c
}

// _setElementService provides a mock function with given fields: elementService
func (_m *MockApplicationServiceElementContract) _setElementService(elementService ServiceAccessPointContract) {
	_m.Called(elementService)
}

// MockApplicationServiceElementContract__setElementService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method '_setElementService'
type MockApplicationServiceElementContract__setElementService_Call struct {
	*mock.Call
}

// _setElementService is a helper method to define mock.On call
//   - elementService ServiceAccessPointContract
func (_e *MockApplicationServiceElementContract_Expecter) _setElementService(elementService interface{}) *MockApplicationServiceElementContract__setElementService_Call {
	return &MockApplicationServiceElementContract__setElementService_Call{Call: _e.mock.On("_setElementService", elementService)}
}

func (_c *MockApplicationServiceElementContract__setElementService_Call) Run(run func(elementService ServiceAccessPointContract)) *MockApplicationServiceElementContract__setElementService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ServiceAccessPointContract))
	})
	return _c
}

func (_c *MockApplicationServiceElementContract__setElementService_Call) Return() *MockApplicationServiceElementContract__setElementService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplicationServiceElementContract__setElementService_Call) RunAndReturn(run func(ServiceAccessPointContract)) *MockApplicationServiceElementContract__setElementService_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApplicationServiceElementContract creates a new instance of MockApplicationServiceElementContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplicationServiceElementContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplicationServiceElementContract {
	mock := &MockApplicationServiceElementContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
