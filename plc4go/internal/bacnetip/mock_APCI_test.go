/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import (
	model "github.com/apache/plc4x/plc4go/protocols/bacnetip/readwrite/model"
	spi "github.com/apache/plc4x/plc4go/spi"
	mock "github.com/stretchr/testify/mock"
)

// MockAPCI is an autogenerated mock type for the APCI type
type MockAPCI struct {
	mock.Mock
}

type MockAPCI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPCI) EXPECT() *MockAPCI_Expecter {
	return &MockAPCI_Expecter{mock: &_m.Mock}
}

// GetExpectingReply provides a mock function with given fields:
func (_m *MockAPCI) GetExpectingReply() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpectingReply")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAPCI_GetExpectingReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectingReply'
type MockAPCI_GetExpectingReply_Call struct {
	*mock.Call
}

// GetExpectingReply is a helper method to define mock.On call
func (_e *MockAPCI_Expecter) GetExpectingReply() *MockAPCI_GetExpectingReply_Call {
	return &MockAPCI_GetExpectingReply_Call{Call: _e.mock.On("GetExpectingReply")}
}

func (_c *MockAPCI_GetExpectingReply_Call) Run(run func()) *MockAPCI_GetExpectingReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPCI_GetExpectingReply_Call) Return(_a0 bool) *MockAPCI_GetExpectingReply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_GetExpectingReply_Call) RunAndReturn(run func() bool) *MockAPCI_GetExpectingReply_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkPriority provides a mock function with given fields:
func (_m *MockAPCI) GetNetworkPriority() model.NPDUNetworkPriority {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPriority")
	}

	var r0 model.NPDUNetworkPriority
	if rf, ok := ret.Get(0).(func() model.NPDUNetworkPriority); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.NPDUNetworkPriority)
	}

	return r0
}

// MockAPCI_GetNetworkPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkPriority'
type MockAPCI_GetNetworkPriority_Call struct {
	*mock.Call
}

// GetNetworkPriority is a helper method to define mock.On call
func (_e *MockAPCI_Expecter) GetNetworkPriority() *MockAPCI_GetNetworkPriority_Call {
	return &MockAPCI_GetNetworkPriority_Call{Call: _e.mock.On("GetNetworkPriority")}
}

func (_c *MockAPCI_GetNetworkPriority_Call) Run(run func()) *MockAPCI_GetNetworkPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPCI_GetNetworkPriority_Call) Return(_a0 model.NPDUNetworkPriority) *MockAPCI_GetNetworkPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_GetNetworkPriority_Call) RunAndReturn(run func() model.NPDUNetworkPriority) *MockAPCI_GetNetworkPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUDestination provides a mock function with given fields:
func (_m *MockAPCI) GetPDUDestination() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUDestination")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockAPCI_GetPDUDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUDestination'
type MockAPCI_GetPDUDestination_Call struct {
	*mock.Call
}

// GetPDUDestination is a helper method to define mock.On call
func (_e *MockAPCI_Expecter) GetPDUDestination() *MockAPCI_GetPDUDestination_Call {
	return &MockAPCI_GetPDUDestination_Call{Call: _e.mock.On("GetPDUDestination")}
}

func (_c *MockAPCI_GetPDUDestination_Call) Run(run func()) *MockAPCI_GetPDUDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPCI_GetPDUDestination_Call) Return(_a0 *Address) *MockAPCI_GetPDUDestination_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_GetPDUDestination_Call) RunAndReturn(run func() *Address) *MockAPCI_GetPDUDestination_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUSource provides a mock function with given fields:
func (_m *MockAPCI) GetPDUSource() *Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUSource")
	}

	var r0 *Address
	if rf, ok := ret.Get(0).(func() *Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	return r0
}

// MockAPCI_GetPDUSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUSource'
type MockAPCI_GetPDUSource_Call struct {
	*mock.Call
}

// GetPDUSource is a helper method to define mock.On call
func (_e *MockAPCI_Expecter) GetPDUSource() *MockAPCI_GetPDUSource_Call {
	return &MockAPCI_GetPDUSource_Call{Call: _e.mock.On("GetPDUSource")}
}

func (_c *MockAPCI_GetPDUSource_Call) Run(run func()) *MockAPCI_GetPDUSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPCI_GetPDUSource_Call) Return(_a0 *Address) *MockAPCI_GetPDUSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_GetPDUSource_Call) RunAndReturn(run func() *Address) *MockAPCI_GetPDUSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDUUserData provides a mock function with given fields:
func (_m *MockAPCI) GetPDUUserData() spi.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPDUUserData")
	}

	var r0 spi.Message
	if rf, ok := ret.Get(0).(func() spi.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spi.Message)
		}
	}

	return r0
}

// MockAPCI_GetPDUUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDUUserData'
type MockAPCI_GetPDUUserData_Call struct {
	*mock.Call
}

// GetPDUUserData is a helper method to define mock.On call
func (_e *MockAPCI_Expecter) GetPDUUserData() *MockAPCI_GetPDUUserData_Call {
	return &MockAPCI_GetPDUUserData_Call{Call: _e.mock.On("GetPDUUserData")}
}

func (_c *MockAPCI_GetPDUUserData_Call) Run(run func()) *MockAPCI_GetPDUUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPCI_GetPDUUserData_Call) Return(_a0 spi.Message) *MockAPCI_GetPDUUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_GetPDUUserData_Call) RunAndReturn(run func() spi.Message) *MockAPCI_GetPDUUserData_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUDestination provides a mock function with given fields: _a0
func (_m *MockAPCI) SetPDUDestination(_a0 *Address) {
	_m.Called(_a0)
}

// MockAPCI_SetPDUDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUDestination'
type MockAPCI_SetPDUDestination_Call struct {
	*mock.Call
}

// SetPDUDestination is a helper method to define mock.On call
//   - _a0 *Address
func (_e *MockAPCI_Expecter) SetPDUDestination(_a0 interface{}) *MockAPCI_SetPDUDestination_Call {
	return &MockAPCI_SetPDUDestination_Call{Call: _e.mock.On("SetPDUDestination", _a0)}
}

func (_c *MockAPCI_SetPDUDestination_Call) Run(run func(_a0 *Address)) *MockAPCI_SetPDUDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockAPCI_SetPDUDestination_Call) Return() *MockAPCI_SetPDUDestination_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPCI_SetPDUDestination_Call) RunAndReturn(run func(*Address)) *MockAPCI_SetPDUDestination_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUSource provides a mock function with given fields: source
func (_m *MockAPCI) SetPDUSource(source *Address) {
	_m.Called(source)
}

// MockAPCI_SetPDUSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUSource'
type MockAPCI_SetPDUSource_Call struct {
	*mock.Call
}

// SetPDUSource is a helper method to define mock.On call
//   - source *Address
func (_e *MockAPCI_Expecter) SetPDUSource(source interface{}) *MockAPCI_SetPDUSource_Call {
	return &MockAPCI_SetPDUSource_Call{Call: _e.mock.On("SetPDUSource", source)}
}

func (_c *MockAPCI_SetPDUSource_Call) Run(run func(source *Address)) *MockAPCI_SetPDUSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Address))
	})
	return _c
}

func (_c *MockAPCI_SetPDUSource_Call) Return() *MockAPCI_SetPDUSource_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPCI_SetPDUSource_Call) RunAndReturn(run func(*Address)) *MockAPCI_SetPDUSource_Call {
	_c.Call.Return(run)
	return _c
}

// SetPDUUserData provides a mock function with given fields: _a0
func (_m *MockAPCI) SetPDUUserData(_a0 spi.Message) {
	_m.Called(_a0)
}

// MockAPCI_SetPDUUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPDUUserData'
type MockAPCI_SetPDUUserData_Call struct {
	*mock.Call
}

// SetPDUUserData is a helper method to define mock.On call
//   - _a0 spi.Message
func (_e *MockAPCI_Expecter) SetPDUUserData(_a0 interface{}) *MockAPCI_SetPDUUserData_Call {
	return &MockAPCI_SetPDUUserData_Call{Call: _e.mock.On("SetPDUUserData", _a0)}
}

func (_c *MockAPCI_SetPDUUserData_Call) Run(run func(_a0 spi.Message)) *MockAPCI_SetPDUUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spi.Message))
	})
	return _c
}

func (_c *MockAPCI_SetPDUUserData_Call) Return() *MockAPCI_SetPDUUserData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPCI_SetPDUUserData_Call) RunAndReturn(run func(spi.Message)) *MockAPCI_SetPDUUserData_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockAPCI) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAPCI_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockAPCI_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockAPCI_Expecter) String() *MockAPCI_String_Call {
	return &MockAPCI_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockAPCI_String_Call) Run(run func()) *MockAPCI_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPCI_String_Call) Return(_a0 string) *MockAPCI_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_String_Call) RunAndReturn(run func() string) *MockAPCI_String_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: pci
func (_m *MockAPCI) Update(pci Arg) error {
	ret := _m.Called(pci)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(pci)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPCI_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAPCI_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - pci Arg
func (_e *MockAPCI_Expecter) Update(pci interface{}) *MockAPCI_Update_Call {
	return &MockAPCI_Update_Call{Call: _e.mock.On("Update", pci)}
}

func (_c *MockAPCI_Update_Call) Run(run func(pci Arg)) *MockAPCI_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockAPCI_Update_Call) Return(_a0 error) *MockAPCI_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPCI_Update_Call) RunAndReturn(run func(Arg) error) *MockAPCI_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPCI creates a new instance of MockAPCI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPCI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPCI {
	mock := &MockAPCI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
