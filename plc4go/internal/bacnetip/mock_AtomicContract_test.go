/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockAtomicContract is an autogenerated mock type for the AtomicContract type
type MockAtomicContract[T ComparableAndOrdered] struct {
	mock.Mock
}

type MockAtomicContract_Expecter[T ComparableAndOrdered] struct {
	mock *mock.Mock
}

func (_m *MockAtomicContract[T]) EXPECT() *MockAtomicContract_Expecter[T] {
	return &MockAtomicContract_Expecter[T]{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: other
func (_m *MockAtomicContract[T]) Compare(other interface{}) int {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(interface{}) int); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAtomicContract_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockAtomicContract_Compare_Call[T ComparableAndOrdered] struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - other interface{}
func (_e *MockAtomicContract_Expecter[T]) Compare(other interface{}) *MockAtomicContract_Compare_Call[T] {
	return &MockAtomicContract_Compare_Call[T]{Call: _e.mock.On("Compare", other)}
}

func (_c *MockAtomicContract_Compare_Call[T]) Run(run func(other interface{})) *MockAtomicContract_Compare_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAtomicContract_Compare_Call[T]) Return(_a0 int) *MockAtomicContract_Compare_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAtomicContract_Compare_Call[T]) RunAndReturn(run func(interface{}) int) *MockAtomicContract_Compare_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Equals provides a mock function with given fields: other
func (_m *MockAtomicContract[T]) Equals(other interface{}) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Equals")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAtomicContract_Equals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Equals'
type MockAtomicContract_Equals_Call[T ComparableAndOrdered] struct {
	*mock.Call
}

// Equals is a helper method to define mock.On call
//   - other interface{}
func (_e *MockAtomicContract_Expecter[T]) Equals(other interface{}) *MockAtomicContract_Equals_Call[T] {
	return &MockAtomicContract_Equals_Call[T]{Call: _e.mock.On("Equals", other)}
}

func (_c *MockAtomicContract_Equals_Call[T]) Run(run func(other interface{})) *MockAtomicContract_Equals_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAtomicContract_Equals_Call[T]) Return(_a0 bool) *MockAtomicContract_Equals_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAtomicContract_Equals_Call[T]) RunAndReturn(run func(interface{}) bool) *MockAtomicContract_Equals_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields:
func (_m *MockAtomicContract[T]) GetValue() T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// MockAtomicContract_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockAtomicContract_GetValue_Call[T ComparableAndOrdered] struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
func (_e *MockAtomicContract_Expecter[T]) GetValue() *MockAtomicContract_GetValue_Call[T] {
	return &MockAtomicContract_GetValue_Call[T]{Call: _e.mock.On("GetValue")}
}

func (_c *MockAtomicContract_GetValue_Call[T]) Run(run func()) *MockAtomicContract_GetValue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAtomicContract_GetValue_Call[T]) Return(_a0 T) *MockAtomicContract_GetValue_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAtomicContract_GetValue_Call[T]) RunAndReturn(run func() T) *MockAtomicContract_GetValue_Call[T] {
	_c.Call.Return(run)
	return _c
}

// LowerThan provides a mock function with given fields: other
func (_m *MockAtomicContract[T]) LowerThan(other interface{}) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for LowerThan")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAtomicContract_LowerThan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LowerThan'
type MockAtomicContract_LowerThan_Call[T ComparableAndOrdered] struct {
	*mock.Call
}

// LowerThan is a helper method to define mock.On call
//   - other interface{}
func (_e *MockAtomicContract_Expecter[T]) LowerThan(other interface{}) *MockAtomicContract_LowerThan_Call[T] {
	return &MockAtomicContract_LowerThan_Call[T]{Call: _e.mock.On("LowerThan", other)}
}

func (_c *MockAtomicContract_LowerThan_Call[T]) Run(run func(other interface{})) *MockAtomicContract_LowerThan_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAtomicContract_LowerThan_Call[T]) Return(_a0 bool) *MockAtomicContract_LowerThan_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAtomicContract_LowerThan_Call[T]) RunAndReturn(run func(interface{}) bool) *MockAtomicContract_LowerThan_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockAtomicContract creates a new instance of MockAtomicContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAtomicContract[T ComparableAndOrdered](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAtomicContract[T] {
	mock := &MockAtomicContract[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
