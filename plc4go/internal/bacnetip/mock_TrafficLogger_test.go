/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockTrafficLogger is an autogenerated mock type for the TrafficLogger type
type MockTrafficLogger struct {
	mock.Mock
}

type MockTrafficLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrafficLogger) EXPECT() *MockTrafficLogger_Expecter {
	return &MockTrafficLogger_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: args
func (_m *MockTrafficLogger) Call(args Args) {
	_m.Called(args)
}

// MockTrafficLogger_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockTrafficLogger_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - args Args
func (_e *MockTrafficLogger_Expecter) Call(args interface{}) *MockTrafficLogger_Call_Call {
	return &MockTrafficLogger_Call_Call{Call: _e.mock.On("Call", args)}
}

func (_c *MockTrafficLogger_Call_Call) Run(run func(args Args)) *MockTrafficLogger_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Args))
	})
	return _c
}

func (_c *MockTrafficLogger_Call_Call) Return() *MockTrafficLogger_Call_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrafficLogger_Call_Call) RunAndReturn(run func(Args)) *MockTrafficLogger_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrafficLogger creates a new instance of MockTrafficLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrafficLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrafficLogger {
	mock := &MockTrafficLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
