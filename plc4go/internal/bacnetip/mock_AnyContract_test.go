/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by mockery v2.42.2. DO NOT EDIT.

package bacnetip

import mock "github.com/stretchr/testify/mock"

// MockAnyContract is an autogenerated mock type for the AnyContract type
type MockAnyContract struct {
	mock.Mock
}

type MockAnyContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnyContract) EXPECT() *MockAnyContract_Expecter {
	return &MockAnyContract_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: taglist
func (_m *MockAnyContract) Decode(taglist TagList) error {
	ret := _m.Called(taglist)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(TagList) error); ok {
		r0 = rf(taglist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAnyContract_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockAnyContract_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - taglist TagList
func (_e *MockAnyContract_Expecter) Decode(taglist interface{}) *MockAnyContract_Decode_Call {
	return &MockAnyContract_Decode_Call{Call: _e.mock.On("Decode", taglist)}
}

func (_c *MockAnyContract_Decode_Call) Run(run func(taglist TagList)) *MockAnyContract_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TagList))
	})
	return _c
}

func (_c *MockAnyContract_Decode_Call) Return(_a0 error) *MockAnyContract_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnyContract_Decode_Call) RunAndReturn(run func(TagList) error) *MockAnyContract_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: taglist
func (_m *MockAnyContract) Encode(taglist TagList) error {
	ret := _m.Called(taglist)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(TagList) error); ok {
		r0 = rf(taglist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAnyContract_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockAnyContract_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - taglist TagList
func (_e *MockAnyContract_Expecter) Encode(taglist interface{}) *MockAnyContract_Encode_Call {
	return &MockAnyContract_Encode_Call{Call: _e.mock.On("Encode", taglist)}
}

func (_c *MockAnyContract_Encode_Call) Run(run func(taglist TagList)) *MockAnyContract_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TagList))
	})
	return _c
}

func (_c *MockAnyContract_Encode_Call) Return(_a0 error) *MockAnyContract_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnyContract_Encode_Call) RunAndReturn(run func(TagList) error) *MockAnyContract_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// castIn provides a mock function with given fields: arg
func (_m *MockAnyContract) castIn(arg Arg) error {
	ret := _m.Called(arg)

	if len(ret) == 0 {
		panic("no return value specified for castIn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAnyContract_castIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'castIn'
type MockAnyContract_castIn_Call struct {
	*mock.Call
}

// castIn is a helper method to define mock.On call
//   - arg Arg
func (_e *MockAnyContract_Expecter) castIn(arg interface{}) *MockAnyContract_castIn_Call {
	return &MockAnyContract_castIn_Call{Call: _e.mock.On("castIn", arg)}
}

func (_c *MockAnyContract_castIn_Call) Run(run func(arg Arg)) *MockAnyContract_castIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockAnyContract_castIn_Call) Return(_a0 error) *MockAnyContract_castIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnyContract_castIn_Call) RunAndReturn(run func(Arg) error) *MockAnyContract_castIn_Call {
	_c.Call.Return(run)
	return _c
}

// castOut provides a mock function with given fields: arg
func (_m *MockAnyContract) castOut(arg Arg) error {
	ret := _m.Called(arg)

	if len(ret) == 0 {
		panic("no return value specified for castOut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Arg) error); ok {
		r0 = rf(arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAnyContract_castOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'castOut'
type MockAnyContract_castOut_Call struct {
	*mock.Call
}

// castOut is a helper method to define mock.On call
//   - arg Arg
func (_e *MockAnyContract_Expecter) castOut(arg interface{}) *MockAnyContract_castOut_Call {
	return &MockAnyContract_castOut_Call{Call: _e.mock.On("castOut", arg)}
}

func (_c *MockAnyContract_castOut_Call) Run(run func(arg Arg)) *MockAnyContract_castOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Arg))
	})
	return _c
}

func (_c *MockAnyContract_castOut_Call) Return(_a0 error) *MockAnyContract_castOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnyContract_castOut_Call) RunAndReturn(run func(Arg) error) *MockAnyContract_castOut_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnyContract creates a new instance of MockAnyContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnyContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnyContract {
	mock := &MockAnyContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
