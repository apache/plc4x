/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.Collections.Generic;
using System.Text;
using org.apache.plc4net.api.value;
using org.apache.plc4net.spi.generation;
using org.apache.plc4net.spi.model.values;

// Code generated by code-generation. DO NOT EDIT.

namespace org.apache.plc4net.drivers.knxnetip.readwrite.model
{

    public class LDataExtended : LDataFrame
    {

        // Accessors for discriminator values.
        public override bool NotAckFrame => true;
        public override bool Polling => false;

        // Properties.
        public bool GroupAddress { get; }
        public byte HopCount { get; }
        public byte ExtendedFrameFormat { get; }
        public KnxAddress SourceAddress { get; }
        public byte[] DestinationAddress { get; }
        public Apdu Apdu { get; }

        public LDataExtended(bool frameType, bool notRepeated, CEMIPriority priority, bool acknowledgeRequested, bool errorFlag, bool groupAddress, byte hopCount, byte extendedFrameFormat, KnxAddress sourceAddress, byte[] destinationAddress, Apdu apdu)
            : base(frameType, notRepeated, priority, acknowledgeRequested, errorFlag)
        {
            GroupAddress = groupAddress;
            HopCount = hopCount;
            ExtendedFrameFormat = extendedFrameFormat;
            SourceAddress = sourceAddress;
            DestinationAddress = destinationAddress;
            Apdu = apdu;
        }

    }
}
