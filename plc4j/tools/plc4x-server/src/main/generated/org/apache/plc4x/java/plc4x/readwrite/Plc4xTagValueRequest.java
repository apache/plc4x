/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.plc4x.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class Plc4xTagValueRequest implements Message {

  // Properties.
  protected final Plc4xTag tag;
  protected final Plc4xValueType valueType;
  protected final PlcValue value;

  public Plc4xTagValueRequest(Plc4xTag tag, Plc4xValueType valueType, PlcValue value) {
    super();
    this.tag = tag;
    this.valueType = valueType;
    this.value = value;
  }

  public Plc4xTag getTag() {
    return tag;
  }

  public Plc4xValueType getValueType() {
    return valueType;
  }

  public PlcValue getValue() {
    return value;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("Plc4xTagValueRequest");

    // Simple Field (tag)
    writeSimpleField("tag", tag, new DataWriterComplexDefault<>(writeBuffer));

    // Simple Field (valueType)
    writeSimpleEnumField(
        "valueType",
        "Plc4xValueType",
        valueType,
        new DataWriterEnumDefault<>(
            Plc4xValueType::getValue, Plc4xValueType::name, writeUnsignedShort(writeBuffer, 8)));

    // Optional Field (value) (Can be skipped, if the value is null)
    writeOptionalField(
        "value",
        value,
        new DataWriterDataIoDefault(
            writeBuffer, (wb, val) -> Plc4xValue.staticSerialize(wb, val, valueType)),
        (getValueType()) != (Plc4xValueType.NULL));

    writeBuffer.popContext("Plc4xTagValueRequest");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    Plc4xTagValueRequest _value = this;

    // Simple field (tag)
    lengthInBits += tag.getLengthInBits();

    // Simple field (valueType)
    lengthInBits += 8;

    // Optional Field (value)
    if (value != null) {
      lengthInBits += Plc4xValue.getLengthInBits(value, valueType);
    }

    return lengthInBits;
  }

  public static Plc4xTagValueRequest staticParse(ReadBuffer readBuffer, Object... args)
      throws ParseException {
    PositionAware positionAware = readBuffer;
    return staticParse(readBuffer);
  }

  public static Plc4xTagValueRequest staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("Plc4xTagValueRequest");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    Plc4xTag tag =
        readSimpleField(
            "tag",
            new DataReaderComplexDefault<>(() -> Plc4xTag.staticParse(readBuffer), readBuffer));

    Plc4xValueType valueType =
        readEnumField(
            "valueType",
            "Plc4xValueType",
            new DataReaderEnumDefault<>(
                Plc4xValueType::enumForValue, readUnsignedShort(readBuffer, 8)));

    PlcValue value =
        readOptionalField(
            "value",
            new DataReaderComplexDefault<>(
                () -> Plc4xValue.staticParse(readBuffer, (Plc4xValueType) (valueType)), readBuffer),
            (valueType) != (Plc4xValueType.NULL));

    readBuffer.closeContext("Plc4xTagValueRequest");
    // Create the instance
    Plc4xTagValueRequest _plc4xTagValueRequest;
    _plc4xTagValueRequest = new Plc4xTagValueRequest(tag, valueType, value);
    return _plc4xTagValueRequest;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Plc4xTagValueRequest)) {
      return false;
    }
    Plc4xTagValueRequest that = (Plc4xTagValueRequest) o;
    return (getTag() == that.getTag())
        && (getValueType() == that.getValueType())
        && (getValue() == that.getValue())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(getTag(), getValueType(), getValue());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
