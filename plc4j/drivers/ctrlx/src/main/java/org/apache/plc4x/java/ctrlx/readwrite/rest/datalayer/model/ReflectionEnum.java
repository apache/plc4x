/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * ctrlX CORE - Data Layer API
 * This is the base API for the ctrlX Data Layer access on ctrlX CORE devices <ul> <li>Click 'Authorize' to open the 'Available authorizations' dialog.</li> <li>Enter 'username' and 'password'. The 'Client credentials location' selector together with the 'client_id' and 'client_secret' fields as well as the 'Bearer' section can be ignored.</li> <li>Click 'Authorize' and then 'Close' to close the 'Available authorizations' dialog.</li> <li>Try out those GET, PUT, ... operations you're interested in.</li> </ul>
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@boschrexroth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.plc4x.java.ctrlx.readwrite.rest.datalayer.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * ReflectionEnum
 */
@JsonPropertyOrder({
  ReflectionEnum.JSON_PROPERTY_NAME,
  ReflectionEnum.JSON_PROPERTY_VALUES,
  ReflectionEnum.JSON_PROPERTY_IS_UNION,
  ReflectionEnum.JSON_PROPERTY_UNDERLYING_TYPE,
  ReflectionEnum.JSON_PROPERTY_ATTRIBUTES,
  ReflectionEnum.JSON_PROPERTY_DOCUMENTATION
})
@JsonTypeName("reflection_Enum")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-18T13:34:36.056861+01:00[Europe/Berlin]")
public class ReflectionEnum {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_VALUES = "values";
  private List<ReflectionEnumVal> values = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_UNION = "is_union";
  private Boolean isUnion;

  public static final String JSON_PROPERTY_UNDERLYING_TYPE = "underlying_type";
  private ReflectionType underlyingType;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private List<ReflectionKeyValue> attributes = new ArrayList<>();

  public static final String JSON_PROPERTY_DOCUMENTATION = "documentation";
  private List<String> documentation = new ArrayList<>();

  public ReflectionEnum() {
  }

  public ReflectionEnum name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ReflectionEnum values(List<ReflectionEnumVal> values) {
    
    this.values = values;
    return this;
  }

  public ReflectionEnum addValuesItem(ReflectionEnumVal valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ReflectionEnumVal> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValues(List<ReflectionEnumVal> values) {
    this.values = values;
  }


  public ReflectionEnum isUnion(Boolean isUnion) {
    
    this.isUnion = isUnion;
    return this;
  }

   /**
   * Get isUnion
   * @return isUnion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_UNION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsUnion() {
    return isUnion;
  }


  @JsonProperty(JSON_PROPERTY_IS_UNION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsUnion(Boolean isUnion) {
    this.isUnion = isUnion;
  }


  public ReflectionEnum underlyingType(ReflectionType underlyingType) {
    
    this.underlyingType = underlyingType;
    return this;
  }

   /**
   * Get underlyingType
   * @return underlyingType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNDERLYING_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ReflectionType getUnderlyingType() {
    return underlyingType;
  }


  @JsonProperty(JSON_PROPERTY_UNDERLYING_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnderlyingType(ReflectionType underlyingType) {
    this.underlyingType = underlyingType;
  }


  public ReflectionEnum attributes(List<ReflectionKeyValue> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public ReflectionEnum addAttributesItem(ReflectionKeyValue attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReflectionKeyValue> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(List<ReflectionKeyValue> attributes) {
    this.attributes = attributes;
  }


  public ReflectionEnum documentation(List<String> documentation) {
    
    this.documentation = documentation;
    return this;
  }

  public ReflectionEnum addDocumentationItem(String documentationItem) {
    if (this.documentation == null) {
      this.documentation = new ArrayList<>();
    }
    this.documentation.add(documentationItem);
    return this;
  }

   /**
   * Get documentation
   * @return documentation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDocumentation() {
    return documentation;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentation(List<String> documentation) {
    this.documentation = documentation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReflectionEnum reflectionEnum = (ReflectionEnum) o;
    return Objects.equals(this.name, reflectionEnum.name) &&
        Objects.equals(this.values, reflectionEnum.values) &&
        Objects.equals(this.isUnion, reflectionEnum.isUnion) &&
        Objects.equals(this.underlyingType, reflectionEnum.underlyingType) &&
        Objects.equals(this.attributes, reflectionEnum.attributes) &&
        Objects.equals(this.documentation, reflectionEnum.documentation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, values, isUnion, underlyingType, attributes, documentation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReflectionEnum {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    isUnion: ").append(toIndentedString(isUnion)).append("\n");
    sb.append("    underlyingType: ").append(toIndentedString(underlyingType)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `values` to the URL query string
    if (getValues() != null) {
      for (int i = 0; i < getValues().size(); i++) {
        if (getValues().get(i) != null) {
          joiner.add(getValues().get(i).toUrlQueryString(String.format("%svalues%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `is_union` to the URL query string
    if (getIsUnion() != null) {
      try {
        joiner.add(String.format("%sis_union%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsUnion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `underlying_type` to the URL query string
    if (getUnderlyingType() != null) {
      joiner.add(getUnderlyingType().toUrlQueryString(prefix + "underlying_type" + suffix));
    }

    // add `attributes` to the URL query string
    if (getAttributes() != null) {
      for (int i = 0; i < getAttributes().size(); i++) {
        if (getAttributes().get(i) != null) {
          joiner.add(getAttributes().get(i).toUrlQueryString(String.format("%sattributes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `documentation` to the URL query string
    if (getDocumentation() != null) {
      for (int i = 0; i < getDocumentation().size(); i++) {
        try {
          joiner.add(String.format("%sdocumentation%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getDocumentation().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

