/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.profinet.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class PnIoCm_Block_IoCrRes extends PnIoCm_Block implements Message {

  // Accessors for discriminator values.
  public PnIoCm_BlockType getBlockType() {
    return PnIoCm_BlockType.IO_CR_BLOCK_RES;
  }

  // Properties.
  protected final PnIoCm_IoCrType ioCrType;
  protected final int ioCrReference;
  protected final int frameId;

  public PnIoCm_Block_IoCrRes(
      short blockVersionHigh,
      short blockVersionLow,
      PnIoCm_IoCrType ioCrType,
      int ioCrReference,
      int frameId) {
    super(blockVersionHigh, blockVersionLow);
    this.ioCrType = ioCrType;
    this.ioCrReference = ioCrReference;
    this.frameId = frameId;
  }

  public PnIoCm_IoCrType getIoCrType() {
    return ioCrType;
  }

  public int getIoCrReference() {
    return ioCrReference;
  }

  public int getFrameId() {
    return frameId;
  }

  @Override
  protected void serializePnIoCm_BlockChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("PnIoCm_Block_IoCrRes");

    // Simple Field (ioCrType)
    writeSimpleEnumField(
        "ioCrType",
        "PnIoCm_IoCrType",
        ioCrType,
        new DataWriterEnumDefault<>(
            PnIoCm_IoCrType::getValue, PnIoCm_IoCrType::name, writeUnsignedInt(writeBuffer, 16)));

    // Simple Field (ioCrReference)
    writeSimpleField(
        "ioCrReference",
        ioCrReference,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN));

    // Simple Field (frameId)
    writeSimpleField(
        "frameId",
        frameId,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN));

    writeBuffer.popContext("PnIoCm_Block_IoCrRes");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    PnIoCm_Block_IoCrRes _value = this;

    // Simple field (ioCrType)
    lengthInBits += 16;

    // Simple field (ioCrReference)
    lengthInBits += 16;

    // Simple field (frameId)
    lengthInBits += 16;

    return lengthInBits;
  }

  public static PnIoCm_Block_IoCrResBuilder staticParseBuilder(ReadBuffer readBuffer)
      throws ParseException {
    readBuffer.pullContext("PnIoCm_Block_IoCrRes");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    PnIoCm_IoCrType ioCrType =
        readEnumField(
            "ioCrType",
            "PnIoCm_IoCrType",
            new DataReaderEnumDefault<>(
                PnIoCm_IoCrType::enumForValue, readUnsignedInt(readBuffer, 16)),
            WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN));

    int ioCrReference =
        readSimpleField(
            "ioCrReference",
            readUnsignedInt(readBuffer, 16),
            WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN));

    int frameId =
        readSimpleField(
            "frameId",
            readUnsignedInt(readBuffer, 16),
            WithOption.WithByteOrder(ByteOrder.BIG_ENDIAN));

    readBuffer.closeContext("PnIoCm_Block_IoCrRes");
    // Create the instance
    return new PnIoCm_Block_IoCrResBuilder(ioCrType, ioCrReference, frameId);
  }

  public static class PnIoCm_Block_IoCrResBuilder implements PnIoCm_Block.PnIoCm_BlockBuilder {
    private final PnIoCm_IoCrType ioCrType;
    private final int ioCrReference;
    private final int frameId;

    public PnIoCm_Block_IoCrResBuilder(PnIoCm_IoCrType ioCrType, int ioCrReference, int frameId) {

      this.ioCrType = ioCrType;
      this.ioCrReference = ioCrReference;
      this.frameId = frameId;
    }

    public PnIoCm_Block_IoCrRes build(short blockVersionHigh, short blockVersionLow) {
      PnIoCm_Block_IoCrRes pnIoCm_Block_IoCrRes =
          new PnIoCm_Block_IoCrRes(
              blockVersionHigh, blockVersionLow, ioCrType, ioCrReference, frameId);
      return pnIoCm_Block_IoCrRes;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof PnIoCm_Block_IoCrRes)) {
      return false;
    }
    PnIoCm_Block_IoCrRes that = (PnIoCm_Block_IoCrRes) o;
    return (getIoCrType() == that.getIoCrType())
        && (getIoCrReference() == that.getIoCrReference())
        && (getFrameId() == that.getFrameId())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getIoCrType(), getIoCrReference(), getFrameId());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
