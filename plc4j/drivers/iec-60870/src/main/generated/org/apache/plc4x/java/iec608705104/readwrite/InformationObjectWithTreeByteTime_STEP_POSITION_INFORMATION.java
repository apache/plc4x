/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.iec608705104.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION
    extends InformationObjectWithTreeByteTime implements Message {

  // Accessors for discriminator values.
  public TypeIdentification getTypeIdentification() {
    return TypeIdentification.STEP_POSITION_INFORMATION_WITH_TIME_TAG;
  }

  // Properties.
  protected final ValueWithTransientStateIndication vti;
  protected final QualityDescriptor qds;
  protected final ThreeOctetBinaryTime cp24Time2a;

  public InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION(
      int address,
      ValueWithTransientStateIndication vti,
      QualityDescriptor qds,
      ThreeOctetBinaryTime cp24Time2a) {
    super(address);
    this.vti = vti;
    this.qds = qds;
    this.cp24Time2a = cp24Time2a;
  }

  public ValueWithTransientStateIndication getVti() {
    return vti;
  }

  public QualityDescriptor getQds() {
    return qds;
  }

  public ThreeOctetBinaryTime getCp24Time2a() {
    return cp24Time2a;
  }

  @Override
  protected void serializeInformationObjectWithTreeByteTimeChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION");

    // Simple Field (vti)
    writeSimpleField(
        "vti", vti, writeComplex(writeBuffer), WithOption.WithByteOrder(ByteOrder.LITTLE_ENDIAN));

    // Simple Field (qds)
    writeSimpleField(
        "qds", qds, writeComplex(writeBuffer), WithOption.WithByteOrder(ByteOrder.LITTLE_ENDIAN));

    // Simple Field (cp24Time2a)
    writeSimpleField(
        "cp24Time2a",
        cp24Time2a,
        writeComplex(writeBuffer),
        WithOption.WithByteOrder(ByteOrder.LITTLE_ENDIAN));

    writeBuffer.popContext("InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (vti)
    lengthInBits += vti.getLengthInBits();

    // Simple field (qds)
    lengthInBits += qds.getLengthInBits();

    // Simple field (cp24Time2a)
    lengthInBits += cp24Time2a.getLengthInBits();

    return lengthInBits;
  }

  public static InformationObjectWithTreeByteTimeBuilder
      staticParseInformationObjectWithTreeByteTimeBuilder(
          ReadBuffer readBuffer, TypeIdentification typeIdentification, Byte numTimeByte)
          throws ParseException {
    readBuffer.pullContext("InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ValueWithTransientStateIndication vti =
        readSimpleField(
            "vti",
            readComplex(
                () -> ValueWithTransientStateIndication.staticParse(readBuffer), readBuffer),
            WithOption.WithByteOrder(ByteOrder.LITTLE_ENDIAN));

    QualityDescriptor qds =
        readSimpleField(
            "qds",
            readComplex(() -> QualityDescriptor.staticParse(readBuffer), readBuffer),
            WithOption.WithByteOrder(ByteOrder.LITTLE_ENDIAN));

    ThreeOctetBinaryTime cp24Time2a =
        readSimpleField(
            "cp24Time2a",
            readComplex(() -> ThreeOctetBinaryTime.staticParse(readBuffer), readBuffer),
            WithOption.WithByteOrder(ByteOrder.LITTLE_ENDIAN));

    readBuffer.closeContext("InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION");
    // Create the instance
    return new InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATIONBuilderImpl(
        vti, qds, cp24Time2a);
  }

  public static class InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATIONBuilderImpl
      implements InformationObjectWithTreeByteTime.InformationObjectWithTreeByteTimeBuilder {
    private final ValueWithTransientStateIndication vti;
    private final QualityDescriptor qds;
    private final ThreeOctetBinaryTime cp24Time2a;

    public InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATIONBuilderImpl(
        ValueWithTransientStateIndication vti,
        QualityDescriptor qds,
        ThreeOctetBinaryTime cp24Time2a) {
      this.vti = vti;
      this.qds = qds;
      this.cp24Time2a = cp24Time2a;
    }

    public InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION build(int address) {
      InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION
          informationObjectWithTreeByteTime_STEP_POSITION_INFORMATION =
              new InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION(
                  address, vti, qds, cp24Time2a);
      return informationObjectWithTreeByteTime_STEP_POSITION_INFORMATION;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION)) {
      return false;
    }
    InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION that =
        (InformationObjectWithTreeByteTime_STEP_POSITION_INFORMATION) o;
    return (getVti() == that.getVti())
        && (getQds() == that.getQds())
        && (getCp24Time2a() == that.getCp24Time2a())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getVti(), getQds(), getCp24Time2a());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
