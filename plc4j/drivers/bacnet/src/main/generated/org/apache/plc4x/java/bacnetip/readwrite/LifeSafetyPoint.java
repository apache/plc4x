/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class LifeSafetyPoint implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final ReadableProperty presentValue;
  protected final ReadableProperty trackingValue;
  protected final OptionalProperty description;
  protected final OptionalProperty deviceType;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty eventState;
  protected final ReadableProperty reliability;
  protected final ReadableProperty outOfService;
  protected final WritableProperty mode;
  protected final ReadableProperty acceptedModes;
  protected final OptionalProperty timeDelay;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty lifeSafetyAlarmValues;
  protected final OptionalProperty alarmValues;
  protected final OptionalProperty faultValues;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty eventAlgorithmInhibitRef;
  protected final OptionalProperty eventAlgorithmInhibit;
  protected final OptionalProperty timeDelayNormal;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty silenced;
  protected final ReadableProperty operationExpected;
  protected final OptionalProperty maintenanceRequired;
  protected final OptionalProperty setting;
  protected final OptionalProperty directReading;
  protected final OptionalProperty units;
  protected final OptionalProperty memberOf;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty valueSource;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public LifeSafetyPoint(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      ReadableProperty presentValue,
      ReadableProperty trackingValue,
      OptionalProperty description,
      OptionalProperty deviceType,
      ReadableProperty statusFlags,
      ReadableProperty eventState,
      ReadableProperty reliability,
      ReadableProperty outOfService,
      WritableProperty mode,
      ReadableProperty acceptedModes,
      OptionalProperty timeDelay,
      OptionalProperty notificationClass,
      OptionalProperty lifeSafetyAlarmValues,
      OptionalProperty alarmValues,
      OptionalProperty faultValues,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventDetectionEnable,
      OptionalProperty eventAlgorithmInhibitRef,
      OptionalProperty eventAlgorithmInhibit,
      OptionalProperty timeDelayNormal,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty silenced,
      ReadableProperty operationExpected,
      OptionalProperty maintenanceRequired,
      OptionalProperty setting,
      OptionalProperty directReading,
      OptionalProperty units,
      OptionalProperty memberOf,
      ReadableProperty propertyList,
      OptionalProperty valueSource,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.presentValue = presentValue;
    this.trackingValue = trackingValue;
    this.description = description;
    this.deviceType = deviceType;
    this.statusFlags = statusFlags;
    this.eventState = eventState;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.mode = mode;
    this.acceptedModes = acceptedModes;
    this.timeDelay = timeDelay;
    this.notificationClass = notificationClass;
    this.lifeSafetyAlarmValues = lifeSafetyAlarmValues;
    this.alarmValues = alarmValues;
    this.faultValues = faultValues;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventDetectionEnable = eventDetectionEnable;
    this.eventAlgorithmInhibitRef = eventAlgorithmInhibitRef;
    this.eventAlgorithmInhibit = eventAlgorithmInhibit;
    this.timeDelayNormal = timeDelayNormal;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.silenced = silenced;
    this.operationExpected = operationExpected;
    this.maintenanceRequired = maintenanceRequired;
    this.setting = setting;
    this.directReading = directReading;
    this.units = units;
    this.memberOf = memberOf;
    this.propertyList = propertyList;
    this.valueSource = valueSource;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public ReadableProperty getPresentValue() {
    return presentValue;
  }

  public ReadableProperty getTrackingValue() {
    return trackingValue;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public OptionalProperty getDeviceType() {
    return deviceType;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getEventState() {
    return eventState;
  }

  public ReadableProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public WritableProperty getMode() {
    return mode;
  }

  public ReadableProperty getAcceptedModes() {
    return acceptedModes;
  }

  public OptionalProperty getTimeDelay() {
    return timeDelay;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getLifeSafetyAlarmValues() {
    return lifeSafetyAlarmValues;
  }

  public OptionalProperty getAlarmValues() {
    return alarmValues;
  }

  public OptionalProperty getFaultValues() {
    return faultValues;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getEventAlgorithmInhibitRef() {
    return eventAlgorithmInhibitRef;
  }

  public OptionalProperty getEventAlgorithmInhibit() {
    return eventAlgorithmInhibit;
  }

  public OptionalProperty getTimeDelayNormal() {
    return timeDelayNormal;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getSilenced() {
    return silenced;
  }

  public ReadableProperty getOperationExpected() {
    return operationExpected;
  }

  public OptionalProperty getMaintenanceRequired() {
    return maintenanceRequired;
  }

  public OptionalProperty getSetting() {
    return setting;
  }

  public OptionalProperty getDirectReading() {
    return directReading;
  }

  public OptionalProperty getUnits() {
    return units;
  }

  public OptionalProperty getMemberOf() {
    return memberOf;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getValueSource() {
    return valueSource;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("LifeSafetyPoint");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (presentValue)
    writeSimpleField("presentValue", presentValue, writeComplex(writeBuffer));

    // Simple Field (trackingValue)
    writeSimpleField("trackingValue", trackingValue, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (deviceType)
    writeSimpleField("deviceType", deviceType, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (mode)
    writeSimpleField("mode", mode, writeComplex(writeBuffer));

    // Simple Field (acceptedModes)
    writeSimpleField("acceptedModes", acceptedModes, writeComplex(writeBuffer));

    // Simple Field (timeDelay)
    writeSimpleField("timeDelay", timeDelay, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (lifeSafetyAlarmValues)
    writeSimpleField("lifeSafetyAlarmValues", lifeSafetyAlarmValues, writeComplex(writeBuffer));

    // Simple Field (alarmValues)
    writeSimpleField("alarmValues", alarmValues, writeComplex(writeBuffer));

    // Simple Field (faultValues)
    writeSimpleField("faultValues", faultValues, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibitRef)
    writeSimpleField(
        "eventAlgorithmInhibitRef", eventAlgorithmInhibitRef, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibit)
    writeSimpleField("eventAlgorithmInhibit", eventAlgorithmInhibit, writeComplex(writeBuffer));

    // Simple Field (timeDelayNormal)
    writeSimpleField("timeDelayNormal", timeDelayNormal, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (silenced)
    writeSimpleField("silenced", silenced, writeComplex(writeBuffer));

    // Simple Field (operationExpected)
    writeSimpleField("operationExpected", operationExpected, writeComplex(writeBuffer));

    // Simple Field (maintenanceRequired)
    writeSimpleField("maintenanceRequired", maintenanceRequired, writeComplex(writeBuffer));

    // Simple Field (setting)
    writeSimpleField("setting", setting, writeComplex(writeBuffer));

    // Simple Field (directReading)
    writeSimpleField("directReading", directReading, writeComplex(writeBuffer));

    // Simple Field (units)
    writeSimpleField("units", units, writeComplex(writeBuffer));

    // Simple Field (memberOf)
    writeSimpleField("memberOf", memberOf, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (valueSource)
    writeSimpleField("valueSource", valueSource, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("LifeSafetyPoint");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    LifeSafetyPoint _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (presentValue)
    lengthInBits += presentValue.getLengthInBits();

    // Simple field (trackingValue)
    lengthInBits += trackingValue.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (deviceType)
    lengthInBits += deviceType.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (mode)
    lengthInBits += mode.getLengthInBits();

    // Simple field (acceptedModes)
    lengthInBits += acceptedModes.getLengthInBits();

    // Simple field (timeDelay)
    lengthInBits += timeDelay.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (lifeSafetyAlarmValues)
    lengthInBits += lifeSafetyAlarmValues.getLengthInBits();

    // Simple field (alarmValues)
    lengthInBits += alarmValues.getLengthInBits();

    // Simple field (faultValues)
    lengthInBits += faultValues.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (eventAlgorithmInhibitRef)
    lengthInBits += eventAlgorithmInhibitRef.getLengthInBits();

    // Simple field (eventAlgorithmInhibit)
    lengthInBits += eventAlgorithmInhibit.getLengthInBits();

    // Simple field (timeDelayNormal)
    lengthInBits += timeDelayNormal.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (silenced)
    lengthInBits += silenced.getLengthInBits();

    // Simple field (operationExpected)
    lengthInBits += operationExpected.getLengthInBits();

    // Simple field (maintenanceRequired)
    lengthInBits += maintenanceRequired.getLengthInBits();

    // Simple field (setting)
    lengthInBits += setting.getLengthInBits();

    // Simple field (directReading)
    lengthInBits += directReading.getLengthInBits();

    // Simple field (units)
    lengthInBits += units.getLengthInBits();

    // Simple field (memberOf)
    lengthInBits += memberOf.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (valueSource)
    lengthInBits += valueSource.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static LifeSafetyPoint staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("LifeSafetyPoint");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    ReadableProperty presentValue =
        readSimpleField(
            "presentValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetLifeSafetyState")),
                readBuffer));

    ReadableProperty trackingValue =
        readSimpleField(
            "trackingValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetLifeSafetyState")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty deviceType =
        readSimpleField(
            "deviceType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    ReadableProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    WritableProperty mode =
        readSimpleField(
            "mode",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("BACnetLifeSafetyMode")),
                readBuffer));

    ReadableProperty acceptedModes =
        readSimpleField(
            "acceptedModes",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetLifeSafetyMode")),
                readBuffer));

    OptionalProperty timeDelay =
        readSimpleField(
            "timeDelay",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty lifeSafetyAlarmValues =
        readSimpleField(
            "lifeSafetyAlarmValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetLifeSafetyState")),
                readBuffer));

    OptionalProperty alarmValues =
        readSimpleField(
            "alarmValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetLifeSafetyState")),
                readBuffer));

    OptionalProperty faultValues =
        readSimpleField(
            "faultValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetLifeSafetyState")),
                readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty eventAlgorithmInhibitRef =
        readSimpleField(
            "eventAlgorithmInhibitRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibit =
        readSimpleField(
            "eventAlgorithmInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty timeDelayNormal =
        readSimpleField(
            "timeDelayNormal",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty silenced =
        readSimpleField(
            "silenced",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetSilencedState")),
                readBuffer));

    ReadableProperty operationExpected =
        readSimpleField(
            "operationExpected",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLifeSafetyOperation")),
                readBuffer));

    OptionalProperty maintenanceRequired =
        readSimpleField(
            "maintenanceRequired",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetMaintenance")),
                readBuffer));

    OptionalProperty setting =
        readSimpleField(
            "setting",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    OptionalProperty directReading =
        readSimpleField(
            "directReading",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty units =
        readSimpleField(
            "units",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    OptionalProperty memberOf =
        readSimpleField(
            "memberOf",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDeviceObjectReference")),
                readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty valueSource =
        readSimpleField(
            "valueSource",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetValueSource")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("LifeSafetyPoint");
    // Create the instance
    LifeSafetyPoint _lifeSafetyPoint;
    _lifeSafetyPoint =
        new LifeSafetyPoint(
            objectIdentifier,
            objectName,
            objectType,
            presentValue,
            trackingValue,
            description,
            deviceType,
            statusFlags,
            eventState,
            reliability,
            outOfService,
            mode,
            acceptedModes,
            timeDelay,
            notificationClass,
            lifeSafetyAlarmValues,
            alarmValues,
            faultValues,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventDetectionEnable,
            eventAlgorithmInhibitRef,
            eventAlgorithmInhibit,
            timeDelayNormal,
            reliabilityEvaluationInhibit,
            silenced,
            operationExpected,
            maintenanceRequired,
            setting,
            directReading,
            units,
            memberOf,
            propertyList,
            valueSource,
            tags,
            profileLocation,
            profileName);
    return _lifeSafetyPoint;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof LifeSafetyPoint)) {
      return false;
    }
    LifeSafetyPoint that = (LifeSafetyPoint) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getPresentValue() == that.getPresentValue())
        && (getTrackingValue() == that.getTrackingValue())
        && (getDescription() == that.getDescription())
        && (getDeviceType() == that.getDeviceType())
        && (getStatusFlags() == that.getStatusFlags())
        && (getEventState() == that.getEventState())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getMode() == that.getMode())
        && (getAcceptedModes() == that.getAcceptedModes())
        && (getTimeDelay() == that.getTimeDelay())
        && (getNotificationClass() == that.getNotificationClass())
        && (getLifeSafetyAlarmValues() == that.getLifeSafetyAlarmValues())
        && (getAlarmValues() == that.getAlarmValues())
        && (getFaultValues() == that.getFaultValues())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getEventAlgorithmInhibitRef() == that.getEventAlgorithmInhibitRef())
        && (getEventAlgorithmInhibit() == that.getEventAlgorithmInhibit())
        && (getTimeDelayNormal() == that.getTimeDelayNormal())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getSilenced() == that.getSilenced())
        && (getOperationExpected() == that.getOperationExpected())
        && (getMaintenanceRequired() == that.getMaintenanceRequired())
        && (getSetting() == that.getSetting())
        && (getDirectReading() == that.getDirectReading())
        && (getUnits() == that.getUnits())
        && (getMemberOf() == that.getMemberOf())
        && (getPropertyList() == that.getPropertyList())
        && (getValueSource() == that.getValueSource())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getPresentValue(),
        getTrackingValue(),
        getDescription(),
        getDeviceType(),
        getStatusFlags(),
        getEventState(),
        getReliability(),
        getOutOfService(),
        getMode(),
        getAcceptedModes(),
        getTimeDelay(),
        getNotificationClass(),
        getLifeSafetyAlarmValues(),
        getAlarmValues(),
        getFaultValues(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventDetectionEnable(),
        getEventAlgorithmInhibitRef(),
        getEventAlgorithmInhibit(),
        getTimeDelayNormal(),
        getReliabilityEvaluationInhibit(),
        getSilenced(),
        getOperationExpected(),
        getMaintenanceRequired(),
        getSetting(),
        getDirectReading(),
        getUnits(),
        getMemberOf(),
        getPropertyList(),
        getValueSource(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
