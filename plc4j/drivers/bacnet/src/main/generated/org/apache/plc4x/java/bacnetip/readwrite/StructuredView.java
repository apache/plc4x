/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class StructuredView implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final ReadableProperty nodeType;
  protected final OptionalProperty nodeSubtype;
  protected final ReadableProperty subordinateList;
  protected final OptionalProperty subordinateAnnotations;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty subordinateTags;
  protected final OptionalProperty subordinateNodeTypes;
  protected final OptionalProperty subordinateRelationships;
  protected final OptionalProperty defaultSubordinateRelationship;
  protected final OptionalProperty represents;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public StructuredView(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      ReadableProperty nodeType,
      OptionalProperty nodeSubtype,
      ReadableProperty subordinateList,
      OptionalProperty subordinateAnnotations,
      ReadableProperty propertyList,
      OptionalProperty subordinateTags,
      OptionalProperty subordinateNodeTypes,
      OptionalProperty subordinateRelationships,
      OptionalProperty defaultSubordinateRelationship,
      OptionalProperty represents,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.nodeType = nodeType;
    this.nodeSubtype = nodeSubtype;
    this.subordinateList = subordinateList;
    this.subordinateAnnotations = subordinateAnnotations;
    this.propertyList = propertyList;
    this.subordinateTags = subordinateTags;
    this.subordinateNodeTypes = subordinateNodeTypes;
    this.subordinateRelationships = subordinateRelationships;
    this.defaultSubordinateRelationship = defaultSubordinateRelationship;
    this.represents = represents;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getNodeType() {
    return nodeType;
  }

  public OptionalProperty getNodeSubtype() {
    return nodeSubtype;
  }

  public ReadableProperty getSubordinateList() {
    return subordinateList;
  }

  public OptionalProperty getSubordinateAnnotations() {
    return subordinateAnnotations;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getSubordinateTags() {
    return subordinateTags;
  }

  public OptionalProperty getSubordinateNodeTypes() {
    return subordinateNodeTypes;
  }

  public OptionalProperty getSubordinateRelationships() {
    return subordinateRelationships;
  }

  public OptionalProperty getDefaultSubordinateRelationship() {
    return defaultSubordinateRelationship;
  }

  public OptionalProperty getRepresents() {
    return represents;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("StructuredView");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (nodeType)
    writeSimpleField("nodeType", nodeType, writeComplex(writeBuffer));

    // Simple Field (nodeSubtype)
    writeSimpleField("nodeSubtype", nodeSubtype, writeComplex(writeBuffer));

    // Simple Field (subordinateList)
    writeSimpleField("subordinateList", subordinateList, writeComplex(writeBuffer));

    // Simple Field (subordinateAnnotations)
    writeSimpleField("subordinateAnnotations", subordinateAnnotations, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (subordinateTags)
    writeSimpleField("subordinateTags", subordinateTags, writeComplex(writeBuffer));

    // Simple Field (subordinateNodeTypes)
    writeSimpleField("subordinateNodeTypes", subordinateNodeTypes, writeComplex(writeBuffer));

    // Simple Field (subordinateRelationships)
    writeSimpleField(
        "subordinateRelationships", subordinateRelationships, writeComplex(writeBuffer));

    // Simple Field (defaultSubordinateRelationship)
    writeSimpleField(
        "defaultSubordinateRelationship",
        defaultSubordinateRelationship,
        writeComplex(writeBuffer));

    // Simple Field (represents)
    writeSimpleField("represents", represents, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("StructuredView");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    StructuredView _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (nodeType)
    lengthInBits += nodeType.getLengthInBits();

    // Simple field (nodeSubtype)
    lengthInBits += nodeSubtype.getLengthInBits();

    // Simple field (subordinateList)
    lengthInBits += subordinateList.getLengthInBits();

    // Simple field (subordinateAnnotations)
    lengthInBits += subordinateAnnotations.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (subordinateTags)
    lengthInBits += subordinateTags.getLengthInBits();

    // Simple field (subordinateNodeTypes)
    lengthInBits += subordinateNodeTypes.getLengthInBits();

    // Simple field (subordinateRelationships)
    lengthInBits += subordinateRelationships.getLengthInBits();

    // Simple field (defaultSubordinateRelationship)
    lengthInBits += defaultSubordinateRelationship.getLengthInBits();

    // Simple field (represents)
    lengthInBits += represents.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static StructuredView staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("StructuredView");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty nodeType =
        readSimpleField(
            "nodeType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetNodeType")),
                readBuffer));

    OptionalProperty nodeSubtype =
        readSimpleField(
            "nodeSubtype",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty subordinateList =
        readSimpleField(
            "subordinateList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty subordinateAnnotations =
        readSimpleField(
            "subordinateAnnotations",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of CharacterString")),
                readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty subordinateTags =
        readSimpleField(
            "subordinateTags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValueCollection")),
                readBuffer));

    OptionalProperty subordinateNodeTypes =
        readSimpleField(
            "subordinateNodeTypes",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNodeType")),
                readBuffer));

    OptionalProperty subordinateRelationships =
        readSimpleField(
            "subordinateRelationships",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetRelationship")),
                readBuffer));

    OptionalProperty defaultSubordinateRelationship =
        readSimpleField(
            "defaultSubordinateRelationship",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetRelationship")),
                readBuffer));

    OptionalProperty represents =
        readSimpleField(
            "represents",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("StructuredView");
    // Create the instance
    StructuredView _structuredView;
    _structuredView =
        new StructuredView(
            objectIdentifier,
            objectName,
            objectType,
            description,
            nodeType,
            nodeSubtype,
            subordinateList,
            subordinateAnnotations,
            propertyList,
            subordinateTags,
            subordinateNodeTypes,
            subordinateRelationships,
            defaultSubordinateRelationship,
            represents,
            tags,
            profileLocation,
            profileName);
    return _structuredView;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof StructuredView)) {
      return false;
    }
    StructuredView that = (StructuredView) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getNodeType() == that.getNodeType())
        && (getNodeSubtype() == that.getNodeSubtype())
        && (getSubordinateList() == that.getSubordinateList())
        && (getSubordinateAnnotations() == that.getSubordinateAnnotations())
        && (getPropertyList() == that.getPropertyList())
        && (getSubordinateTags() == that.getSubordinateTags())
        && (getSubordinateNodeTypes() == that.getSubordinateNodeTypes())
        && (getSubordinateRelationships() == that.getSubordinateRelationships())
        && (getDefaultSubordinateRelationship() == that.getDefaultSubordinateRelationship())
        && (getRepresents() == that.getRepresents())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getNodeType(),
        getNodeSubtype(),
        getSubordinateList(),
        getSubordinateAnnotations(),
        getPropertyList(),
        getSubordinateTags(),
        getSubordinateNodeTypes(),
        getSubordinateRelationships(),
        getDefaultSubordinateRelationship(),
        getRepresents(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
