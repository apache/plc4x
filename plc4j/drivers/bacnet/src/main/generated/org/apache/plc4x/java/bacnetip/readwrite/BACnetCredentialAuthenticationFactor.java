/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class BACnetCredentialAuthenticationFactor implements Message {

  // Properties.
  protected final BACnetAccessAuthenticationFactorDisableTagged disable;
  protected final BACnetAuthenticationFactorEnclosed authenticationFactor;

  public BACnetCredentialAuthenticationFactor(
      BACnetAccessAuthenticationFactorDisableTagged disable,
      BACnetAuthenticationFactorEnclosed authenticationFactor) {
    super();
    this.disable = disable;
    this.authenticationFactor = authenticationFactor;
  }

  public BACnetAccessAuthenticationFactorDisableTagged getDisable() {
    return disable;
  }

  public BACnetAuthenticationFactorEnclosed getAuthenticationFactor() {
    return authenticationFactor;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("BACnetCredentialAuthenticationFactor");

    // Simple Field (disable)
    writeSimpleField("disable", disable, new DataWriterComplexDefault<>(writeBuffer));

    // Simple Field (authenticationFactor)
    writeSimpleField(
        "authenticationFactor", authenticationFactor, new DataWriterComplexDefault<>(writeBuffer));

    writeBuffer.popContext("BACnetCredentialAuthenticationFactor");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    BACnetCredentialAuthenticationFactor _value = this;

    // Simple field (disable)
    lengthInBits += disable.getLengthInBits();

    // Simple field (authenticationFactor)
    lengthInBits += authenticationFactor.getLengthInBits();

    return lengthInBits;
  }

  public static BACnetCredentialAuthenticationFactor staticParse(
      ReadBuffer readBuffer, Object... args) throws ParseException {
    PositionAware positionAware = readBuffer;
    return staticParse(readBuffer);
  }

  public static BACnetCredentialAuthenticationFactor staticParse(ReadBuffer readBuffer)
      throws ParseException {
    readBuffer.pullContext("BACnetCredentialAuthenticationFactor");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    BACnetAccessAuthenticationFactorDisableTagged disable =
        readSimpleField(
            "disable",
            new DataReaderComplexDefault<>(
                () ->
                    BACnetAccessAuthenticationFactorDisableTagged.staticParse(
                        readBuffer, (short) (0), (TagClass) (TagClass.CONTEXT_SPECIFIC_TAGS)),
                readBuffer));

    BACnetAuthenticationFactorEnclosed authenticationFactor =
        readSimpleField(
            "authenticationFactor",
            new DataReaderComplexDefault<>(
                () -> BACnetAuthenticationFactorEnclosed.staticParse(readBuffer, (short) (1)),
                readBuffer));

    readBuffer.closeContext("BACnetCredentialAuthenticationFactor");
    // Create the instance
    BACnetCredentialAuthenticationFactor _bACnetCredentialAuthenticationFactor;
    _bACnetCredentialAuthenticationFactor =
        new BACnetCredentialAuthenticationFactor(disable, authenticationFactor);
    return _bACnetCredentialAuthenticationFactor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof BACnetCredentialAuthenticationFactor)) {
      return false;
    }
    BACnetCredentialAuthenticationFactor that = (BACnetCredentialAuthenticationFactor) o;
    return (getDisable() == that.getDisable())
        && (getAuthenticationFactor() == that.getAuthenticationFactor())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(getDisable(), getAuthenticationFactor());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
