/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class AccessDoor implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final WritableProperty presentValue;
  protected final OptionalProperty description;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty eventState;
  protected final ReadableProperty reliability;
  protected final ReadableProperty outOfService;
  protected final ReadableProperty priorityArray;
  protected final ReadableProperty relinquishDefault;
  protected final OptionalProperty doorStatus;
  protected final OptionalProperty lockStatus;
  protected final OptionalProperty securedStatus;
  protected final OptionalProperty doorMembers;
  protected final ReadableProperty doorPulseTime;
  protected final ReadableProperty doorExtendedPulseTime;
  protected final OptionalProperty doorUnlockDelayTime;
  protected final ReadableProperty doorOpenTooLongTime;
  protected final OptionalProperty doorAlarmState;
  protected final OptionalProperty maskedAlarmValues;
  protected final OptionalProperty maintenanceRequired;
  protected final OptionalProperty timeDelay;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty alarmValues;
  protected final OptionalProperty faultValues;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty eventAlgorithmInhibitRef;
  protected final OptionalProperty eventAlgorithmInhibit;
  protected final OptionalProperty timeDelayNormal;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final ReadableProperty currentCommandPriority;
  protected final OptionalProperty valueSource;
  protected final OptionalProperty valueSourceArray;
  protected final OptionalProperty lastCommandTime;
  protected final OptionalProperty commandTimeArray;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public AccessDoor(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      WritableProperty presentValue,
      OptionalProperty description,
      ReadableProperty statusFlags,
      ReadableProperty eventState,
      ReadableProperty reliability,
      ReadableProperty outOfService,
      ReadableProperty priorityArray,
      ReadableProperty relinquishDefault,
      OptionalProperty doorStatus,
      OptionalProperty lockStatus,
      OptionalProperty securedStatus,
      OptionalProperty doorMembers,
      ReadableProperty doorPulseTime,
      ReadableProperty doorExtendedPulseTime,
      OptionalProperty doorUnlockDelayTime,
      ReadableProperty doorOpenTooLongTime,
      OptionalProperty doorAlarmState,
      OptionalProperty maskedAlarmValues,
      OptionalProperty maintenanceRequired,
      OptionalProperty timeDelay,
      OptionalProperty notificationClass,
      OptionalProperty alarmValues,
      OptionalProperty faultValues,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventDetectionEnable,
      OptionalProperty eventAlgorithmInhibitRef,
      OptionalProperty eventAlgorithmInhibit,
      OptionalProperty timeDelayNormal,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      ReadableProperty currentCommandPriority,
      OptionalProperty valueSource,
      OptionalProperty valueSourceArray,
      OptionalProperty lastCommandTime,
      OptionalProperty commandTimeArray,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.presentValue = presentValue;
    this.description = description;
    this.statusFlags = statusFlags;
    this.eventState = eventState;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.priorityArray = priorityArray;
    this.relinquishDefault = relinquishDefault;
    this.doorStatus = doorStatus;
    this.lockStatus = lockStatus;
    this.securedStatus = securedStatus;
    this.doorMembers = doorMembers;
    this.doorPulseTime = doorPulseTime;
    this.doorExtendedPulseTime = doorExtendedPulseTime;
    this.doorUnlockDelayTime = doorUnlockDelayTime;
    this.doorOpenTooLongTime = doorOpenTooLongTime;
    this.doorAlarmState = doorAlarmState;
    this.maskedAlarmValues = maskedAlarmValues;
    this.maintenanceRequired = maintenanceRequired;
    this.timeDelay = timeDelay;
    this.notificationClass = notificationClass;
    this.alarmValues = alarmValues;
    this.faultValues = faultValues;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventDetectionEnable = eventDetectionEnable;
    this.eventAlgorithmInhibitRef = eventAlgorithmInhibitRef;
    this.eventAlgorithmInhibit = eventAlgorithmInhibit;
    this.timeDelayNormal = timeDelayNormal;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.currentCommandPriority = currentCommandPriority;
    this.valueSource = valueSource;
    this.valueSourceArray = valueSourceArray;
    this.lastCommandTime = lastCommandTime;
    this.commandTimeArray = commandTimeArray;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public WritableProperty getPresentValue() {
    return presentValue;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getEventState() {
    return eventState;
  }

  public ReadableProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public ReadableProperty getPriorityArray() {
    return priorityArray;
  }

  public ReadableProperty getRelinquishDefault() {
    return relinquishDefault;
  }

  public OptionalProperty getDoorStatus() {
    return doorStatus;
  }

  public OptionalProperty getLockStatus() {
    return lockStatus;
  }

  public OptionalProperty getSecuredStatus() {
    return securedStatus;
  }

  public OptionalProperty getDoorMembers() {
    return doorMembers;
  }

  public ReadableProperty getDoorPulseTime() {
    return doorPulseTime;
  }

  public ReadableProperty getDoorExtendedPulseTime() {
    return doorExtendedPulseTime;
  }

  public OptionalProperty getDoorUnlockDelayTime() {
    return doorUnlockDelayTime;
  }

  public ReadableProperty getDoorOpenTooLongTime() {
    return doorOpenTooLongTime;
  }

  public OptionalProperty getDoorAlarmState() {
    return doorAlarmState;
  }

  public OptionalProperty getMaskedAlarmValues() {
    return maskedAlarmValues;
  }

  public OptionalProperty getMaintenanceRequired() {
    return maintenanceRequired;
  }

  public OptionalProperty getTimeDelay() {
    return timeDelay;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getAlarmValues() {
    return alarmValues;
  }

  public OptionalProperty getFaultValues() {
    return faultValues;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getEventAlgorithmInhibitRef() {
    return eventAlgorithmInhibitRef;
  }

  public OptionalProperty getEventAlgorithmInhibit() {
    return eventAlgorithmInhibit;
  }

  public OptionalProperty getTimeDelayNormal() {
    return timeDelayNormal;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public ReadableProperty getCurrentCommandPriority() {
    return currentCommandPriority;
  }

  public OptionalProperty getValueSource() {
    return valueSource;
  }

  public OptionalProperty getValueSourceArray() {
    return valueSourceArray;
  }

  public OptionalProperty getLastCommandTime() {
    return lastCommandTime;
  }

  public OptionalProperty getCommandTimeArray() {
    return commandTimeArray;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("AccessDoor");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (presentValue)
    writeSimpleField("presentValue", presentValue, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (priorityArray)
    writeSimpleField("priorityArray", priorityArray, writeComplex(writeBuffer));

    // Simple Field (relinquishDefault)
    writeSimpleField("relinquishDefault", relinquishDefault, writeComplex(writeBuffer));

    // Simple Field (doorStatus)
    writeSimpleField("doorStatus", doorStatus, writeComplex(writeBuffer));

    // Simple Field (lockStatus)
    writeSimpleField("lockStatus", lockStatus, writeComplex(writeBuffer));

    // Simple Field (securedStatus)
    writeSimpleField("securedStatus", securedStatus, writeComplex(writeBuffer));

    // Simple Field (doorMembers)
    writeSimpleField("doorMembers", doorMembers, writeComplex(writeBuffer));

    // Simple Field (doorPulseTime)
    writeSimpleField("doorPulseTime", doorPulseTime, writeComplex(writeBuffer));

    // Simple Field (doorExtendedPulseTime)
    writeSimpleField("doorExtendedPulseTime", doorExtendedPulseTime, writeComplex(writeBuffer));

    // Simple Field (doorUnlockDelayTime)
    writeSimpleField("doorUnlockDelayTime", doorUnlockDelayTime, writeComplex(writeBuffer));

    // Simple Field (doorOpenTooLongTime)
    writeSimpleField("doorOpenTooLongTime", doorOpenTooLongTime, writeComplex(writeBuffer));

    // Simple Field (doorAlarmState)
    writeSimpleField("doorAlarmState", doorAlarmState, writeComplex(writeBuffer));

    // Simple Field (maskedAlarmValues)
    writeSimpleField("maskedAlarmValues", maskedAlarmValues, writeComplex(writeBuffer));

    // Simple Field (maintenanceRequired)
    writeSimpleField("maintenanceRequired", maintenanceRequired, writeComplex(writeBuffer));

    // Simple Field (timeDelay)
    writeSimpleField("timeDelay", timeDelay, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (alarmValues)
    writeSimpleField("alarmValues", alarmValues, writeComplex(writeBuffer));

    // Simple Field (faultValues)
    writeSimpleField("faultValues", faultValues, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibitRef)
    writeSimpleField(
        "eventAlgorithmInhibitRef", eventAlgorithmInhibitRef, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibit)
    writeSimpleField("eventAlgorithmInhibit", eventAlgorithmInhibit, writeComplex(writeBuffer));

    // Simple Field (timeDelayNormal)
    writeSimpleField("timeDelayNormal", timeDelayNormal, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (currentCommandPriority)
    writeSimpleField("currentCommandPriority", currentCommandPriority, writeComplex(writeBuffer));

    // Simple Field (valueSource)
    writeSimpleField("valueSource", valueSource, writeComplex(writeBuffer));

    // Simple Field (valueSourceArray)
    writeSimpleField("valueSourceArray", valueSourceArray, writeComplex(writeBuffer));

    // Simple Field (lastCommandTime)
    writeSimpleField("lastCommandTime", lastCommandTime, writeComplex(writeBuffer));

    // Simple Field (commandTimeArray)
    writeSimpleField("commandTimeArray", commandTimeArray, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("AccessDoor");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    AccessDoor _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (presentValue)
    lengthInBits += presentValue.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (priorityArray)
    lengthInBits += priorityArray.getLengthInBits();

    // Simple field (relinquishDefault)
    lengthInBits += relinquishDefault.getLengthInBits();

    // Simple field (doorStatus)
    lengthInBits += doorStatus.getLengthInBits();

    // Simple field (lockStatus)
    lengthInBits += lockStatus.getLengthInBits();

    // Simple field (securedStatus)
    lengthInBits += securedStatus.getLengthInBits();

    // Simple field (doorMembers)
    lengthInBits += doorMembers.getLengthInBits();

    // Simple field (doorPulseTime)
    lengthInBits += doorPulseTime.getLengthInBits();

    // Simple field (doorExtendedPulseTime)
    lengthInBits += doorExtendedPulseTime.getLengthInBits();

    // Simple field (doorUnlockDelayTime)
    lengthInBits += doorUnlockDelayTime.getLengthInBits();

    // Simple field (doorOpenTooLongTime)
    lengthInBits += doorOpenTooLongTime.getLengthInBits();

    // Simple field (doorAlarmState)
    lengthInBits += doorAlarmState.getLengthInBits();

    // Simple field (maskedAlarmValues)
    lengthInBits += maskedAlarmValues.getLengthInBits();

    // Simple field (maintenanceRequired)
    lengthInBits += maintenanceRequired.getLengthInBits();

    // Simple field (timeDelay)
    lengthInBits += timeDelay.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (alarmValues)
    lengthInBits += alarmValues.getLengthInBits();

    // Simple field (faultValues)
    lengthInBits += faultValues.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (eventAlgorithmInhibitRef)
    lengthInBits += eventAlgorithmInhibitRef.getLengthInBits();

    // Simple field (eventAlgorithmInhibit)
    lengthInBits += eventAlgorithmInhibit.getLengthInBits();

    // Simple field (timeDelayNormal)
    lengthInBits += timeDelayNormal.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (currentCommandPriority)
    lengthInBits += currentCommandPriority.getLengthInBits();

    // Simple field (valueSource)
    lengthInBits += valueSource.getLengthInBits();

    // Simple field (valueSourceArray)
    lengthInBits += valueSourceArray.getLengthInBits();

    // Simple field (lastCommandTime)
    lengthInBits += lastCommandTime.getLengthInBits();

    // Simple field (commandTimeArray)
    lengthInBits += commandTimeArray.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static AccessDoor staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("AccessDoor");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    WritableProperty presentValue =
        readSimpleField(
            "presentValue",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("BACnetDoorValue")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    ReadableProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty priorityArray =
        readSimpleField(
            "priorityArray",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetPriorityArray")),
                readBuffer));

    ReadableProperty relinquishDefault =
        readSimpleField(
            "relinquishDefault",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetDoorValue")),
                readBuffer));

    OptionalProperty doorStatus =
        readSimpleField(
            "doorStatus",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDoorStatus")),
                readBuffer));

    OptionalProperty lockStatus =
        readSimpleField(
            "lockStatus",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetLockStatus")),
                readBuffer));

    OptionalProperty securedStatus =
        readSimpleField(
            "securedStatus",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetDoorSecuredStatus")),
                readBuffer));

    OptionalProperty doorMembers =
        readSimpleField(
            "doorMembers",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetDeviceObjectReference")),
                readBuffer));

    ReadableProperty doorPulseTime =
        readSimpleField(
            "doorPulseTime",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty doorExtendedPulseTime =
        readSimpleField(
            "doorExtendedPulseTime",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty doorUnlockDelayTime =
        readSimpleField(
            "doorUnlockDelayTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty doorOpenTooLongTime =
        readSimpleField(
            "doorOpenTooLongTime",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty doorAlarmState =
        readSimpleField(
            "doorAlarmState",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDoorAlarmState")),
                readBuffer));

    OptionalProperty maskedAlarmValues =
        readSimpleField(
            "maskedAlarmValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDoorAlarmState")),
                readBuffer));

    OptionalProperty maintenanceRequired =
        readSimpleField(
            "maintenanceRequired",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetMaintenance")),
                readBuffer));

    OptionalProperty timeDelay =
        readSimpleField(
            "timeDelay",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty alarmValues =
        readSimpleField(
            "alarmValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDoorAlarmState")),
                readBuffer));

    OptionalProperty faultValues =
        readSimpleField(
            "faultValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDoorAlarmState")),
                readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty eventAlgorithmInhibitRef =
        readSimpleField(
            "eventAlgorithmInhibitRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibit =
        readSimpleField(
            "eventAlgorithmInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty timeDelayNormal =
        readSimpleField(
            "timeDelayNormal",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    ReadableProperty currentCommandPriority =
        readSimpleField(
            "currentCommandPriority",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetOptionalUnsigned")),
                readBuffer));

    OptionalProperty valueSource =
        readSimpleField(
            "valueSource",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetValueSource")),
                readBuffer));

    OptionalProperty valueSourceArray =
        readSimpleField(
            "valueSourceArray",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[16] of BACnetValueSource")),
                readBuffer));

    OptionalProperty lastCommandTime =
        readSimpleField(
            "lastCommandTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetTimeStamp")),
                readBuffer));

    OptionalProperty commandTimeArray =
        readSimpleField(
            "commandTimeArray",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[16] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("AccessDoor");
    // Create the instance
    AccessDoor _accessDoor;
    _accessDoor =
        new AccessDoor(
            objectIdentifier,
            objectName,
            objectType,
            presentValue,
            description,
            statusFlags,
            eventState,
            reliability,
            outOfService,
            priorityArray,
            relinquishDefault,
            doorStatus,
            lockStatus,
            securedStatus,
            doorMembers,
            doorPulseTime,
            doorExtendedPulseTime,
            doorUnlockDelayTime,
            doorOpenTooLongTime,
            doorAlarmState,
            maskedAlarmValues,
            maintenanceRequired,
            timeDelay,
            notificationClass,
            alarmValues,
            faultValues,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventDetectionEnable,
            eventAlgorithmInhibitRef,
            eventAlgorithmInhibit,
            timeDelayNormal,
            reliabilityEvaluationInhibit,
            propertyList,
            currentCommandPriority,
            valueSource,
            valueSourceArray,
            lastCommandTime,
            commandTimeArray,
            tags,
            profileLocation,
            profileName);
    return _accessDoor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof AccessDoor)) {
      return false;
    }
    AccessDoor that = (AccessDoor) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getPresentValue() == that.getPresentValue())
        && (getDescription() == that.getDescription())
        && (getStatusFlags() == that.getStatusFlags())
        && (getEventState() == that.getEventState())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getPriorityArray() == that.getPriorityArray())
        && (getRelinquishDefault() == that.getRelinquishDefault())
        && (getDoorStatus() == that.getDoorStatus())
        && (getLockStatus() == that.getLockStatus())
        && (getSecuredStatus() == that.getSecuredStatus())
        && (getDoorMembers() == that.getDoorMembers())
        && (getDoorPulseTime() == that.getDoorPulseTime())
        && (getDoorExtendedPulseTime() == that.getDoorExtendedPulseTime())
        && (getDoorUnlockDelayTime() == that.getDoorUnlockDelayTime())
        && (getDoorOpenTooLongTime() == that.getDoorOpenTooLongTime())
        && (getDoorAlarmState() == that.getDoorAlarmState())
        && (getMaskedAlarmValues() == that.getMaskedAlarmValues())
        && (getMaintenanceRequired() == that.getMaintenanceRequired())
        && (getTimeDelay() == that.getTimeDelay())
        && (getNotificationClass() == that.getNotificationClass())
        && (getAlarmValues() == that.getAlarmValues())
        && (getFaultValues() == that.getFaultValues())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getEventAlgorithmInhibitRef() == that.getEventAlgorithmInhibitRef())
        && (getEventAlgorithmInhibit() == that.getEventAlgorithmInhibit())
        && (getTimeDelayNormal() == that.getTimeDelayNormal())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getCurrentCommandPriority() == that.getCurrentCommandPriority())
        && (getValueSource() == that.getValueSource())
        && (getValueSourceArray() == that.getValueSourceArray())
        && (getLastCommandTime() == that.getLastCommandTime())
        && (getCommandTimeArray() == that.getCommandTimeArray())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getPresentValue(),
        getDescription(),
        getStatusFlags(),
        getEventState(),
        getReliability(),
        getOutOfService(),
        getPriorityArray(),
        getRelinquishDefault(),
        getDoorStatus(),
        getLockStatus(),
        getSecuredStatus(),
        getDoorMembers(),
        getDoorPulseTime(),
        getDoorExtendedPulseTime(),
        getDoorUnlockDelayTime(),
        getDoorOpenTooLongTime(),
        getDoorAlarmState(),
        getMaskedAlarmValues(),
        getMaintenanceRequired(),
        getTimeDelay(),
        getNotificationClass(),
        getAlarmValues(),
        getFaultValues(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventDetectionEnable(),
        getEventAlgorithmInhibitRef(),
        getEventAlgorithmInhibit(),
        getTimeDelayNormal(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getCurrentCommandPriority(),
        getValueSource(),
        getValueSourceArray(),
        getLastCommandTime(),
        getCommandTimeArray(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
