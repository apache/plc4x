/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class NetworkPort implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty reliability;
  protected final ReadableProperty outOfService;
  protected final ReadableProperty networkType;
  protected final ReadableProperty protocolLevel;
  protected final OptionalProperty referencePort;
  protected final ReadableProperty networkNumber;
  protected final ReadableProperty networkNumberQuality;
  protected final ReadableProperty changesPending;
  protected final OptionalProperty command;
  protected final OptionalProperty mACAddress;
  protected final ReadableProperty aPDULength;
  protected final ReadableProperty linkSpeed;
  protected final OptionalProperty linkSpeeds;
  protected final OptionalProperty linkSpeedAutonegotiate;
  protected final OptionalProperty networkInterfaceName;
  protected final OptionalProperty bACnetIPMode;
  protected final OptionalProperty iPAddress;
  protected final OptionalProperty bACnetIPUDPPort;
  protected final OptionalProperty iPSubnetMask;
  protected final OptionalProperty iPDefaultGateway;
  protected final OptionalProperty bACnetIPMulticastAddress;
  protected final OptionalProperty iPDNSServer;
  protected final OptionalProperty iPDHCPEnable;
  protected final OptionalProperty iPDHCPLeaseTime;
  protected final OptionalProperty iPDHCPLeaseTimeRemaining;
  protected final OptionalProperty iPDHCPServer;
  protected final OptionalProperty bACnetIPNATTraversal;
  protected final OptionalProperty bACnetIPGlobalAddress;
  protected final OptionalProperty bBMDBroadcastDistributionTable;
  protected final OptionalProperty bBMDAcceptFDRegistrations;
  protected final OptionalProperty bBMDForeignDeviceTable;
  protected final OptionalProperty fDBBMDAddress;
  protected final OptionalProperty fDSubscriptionLifetime;
  protected final OptionalProperty bACnetIPv6Mode;
  protected final OptionalProperty iPv6Address;
  protected final OptionalProperty iPv6PrefixLength;
  protected final OptionalProperty bACnetIPv6UDPPort;
  protected final OptionalProperty iPv6DefaultGateway;
  protected final OptionalProperty bACnetIPv6MulticastAddress;
  protected final OptionalProperty iPv6DNSServer;
  protected final OptionalProperty iPv6AutoAddressingEnable;
  protected final OptionalProperty iPv6DHCPLeaseTime;
  protected final OptionalProperty iPv6DHCPLeaseTimeRemaining;
  protected final OptionalProperty iPv6DHCPServer;
  protected final OptionalProperty iPv6ZoneIndex;
  protected final OptionalProperty maxMaster;
  protected final OptionalProperty maxInfoFrames;
  protected final OptionalProperty slaveProxyEnable;
  protected final OptionalProperty manualSlaveAddressBinding;
  protected final OptionalProperty autoSlaveDiscovery;
  protected final OptionalProperty slaveAddressBinding;
  protected final OptionalProperty virtualMACAddressTable;
  protected final OptionalProperty routingTable;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventState;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public NetworkPort(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      ReadableProperty statusFlags,
      ReadableProperty reliability,
      ReadableProperty outOfService,
      ReadableProperty networkType,
      ReadableProperty protocolLevel,
      OptionalProperty referencePort,
      ReadableProperty networkNumber,
      ReadableProperty networkNumberQuality,
      ReadableProperty changesPending,
      OptionalProperty command,
      OptionalProperty mACAddress,
      ReadableProperty aPDULength,
      ReadableProperty linkSpeed,
      OptionalProperty linkSpeeds,
      OptionalProperty linkSpeedAutonegotiate,
      OptionalProperty networkInterfaceName,
      OptionalProperty bACnetIPMode,
      OptionalProperty iPAddress,
      OptionalProperty bACnetIPUDPPort,
      OptionalProperty iPSubnetMask,
      OptionalProperty iPDefaultGateway,
      OptionalProperty bACnetIPMulticastAddress,
      OptionalProperty iPDNSServer,
      OptionalProperty iPDHCPEnable,
      OptionalProperty iPDHCPLeaseTime,
      OptionalProperty iPDHCPLeaseTimeRemaining,
      OptionalProperty iPDHCPServer,
      OptionalProperty bACnetIPNATTraversal,
      OptionalProperty bACnetIPGlobalAddress,
      OptionalProperty bBMDBroadcastDistributionTable,
      OptionalProperty bBMDAcceptFDRegistrations,
      OptionalProperty bBMDForeignDeviceTable,
      OptionalProperty fDBBMDAddress,
      OptionalProperty fDSubscriptionLifetime,
      OptionalProperty bACnetIPv6Mode,
      OptionalProperty iPv6Address,
      OptionalProperty iPv6PrefixLength,
      OptionalProperty bACnetIPv6UDPPort,
      OptionalProperty iPv6DefaultGateway,
      OptionalProperty bACnetIPv6MulticastAddress,
      OptionalProperty iPv6DNSServer,
      OptionalProperty iPv6AutoAddressingEnable,
      OptionalProperty iPv6DHCPLeaseTime,
      OptionalProperty iPv6DHCPLeaseTimeRemaining,
      OptionalProperty iPv6DHCPServer,
      OptionalProperty iPv6ZoneIndex,
      OptionalProperty maxMaster,
      OptionalProperty maxInfoFrames,
      OptionalProperty slaveProxyEnable,
      OptionalProperty manualSlaveAddressBinding,
      OptionalProperty autoSlaveDiscovery,
      OptionalProperty slaveAddressBinding,
      OptionalProperty virtualMACAddressTable,
      OptionalProperty routingTable,
      OptionalProperty eventDetectionEnable,
      OptionalProperty notificationClass,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventState,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.statusFlags = statusFlags;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.networkType = networkType;
    this.protocolLevel = protocolLevel;
    this.referencePort = referencePort;
    this.networkNumber = networkNumber;
    this.networkNumberQuality = networkNumberQuality;
    this.changesPending = changesPending;
    this.command = command;
    this.mACAddress = mACAddress;
    this.aPDULength = aPDULength;
    this.linkSpeed = linkSpeed;
    this.linkSpeeds = linkSpeeds;
    this.linkSpeedAutonegotiate = linkSpeedAutonegotiate;
    this.networkInterfaceName = networkInterfaceName;
    this.bACnetIPMode = bACnetIPMode;
    this.iPAddress = iPAddress;
    this.bACnetIPUDPPort = bACnetIPUDPPort;
    this.iPSubnetMask = iPSubnetMask;
    this.iPDefaultGateway = iPDefaultGateway;
    this.bACnetIPMulticastAddress = bACnetIPMulticastAddress;
    this.iPDNSServer = iPDNSServer;
    this.iPDHCPEnable = iPDHCPEnable;
    this.iPDHCPLeaseTime = iPDHCPLeaseTime;
    this.iPDHCPLeaseTimeRemaining = iPDHCPLeaseTimeRemaining;
    this.iPDHCPServer = iPDHCPServer;
    this.bACnetIPNATTraversal = bACnetIPNATTraversal;
    this.bACnetIPGlobalAddress = bACnetIPGlobalAddress;
    this.bBMDBroadcastDistributionTable = bBMDBroadcastDistributionTable;
    this.bBMDAcceptFDRegistrations = bBMDAcceptFDRegistrations;
    this.bBMDForeignDeviceTable = bBMDForeignDeviceTable;
    this.fDBBMDAddress = fDBBMDAddress;
    this.fDSubscriptionLifetime = fDSubscriptionLifetime;
    this.bACnetIPv6Mode = bACnetIPv6Mode;
    this.iPv6Address = iPv6Address;
    this.iPv6PrefixLength = iPv6PrefixLength;
    this.bACnetIPv6UDPPort = bACnetIPv6UDPPort;
    this.iPv6DefaultGateway = iPv6DefaultGateway;
    this.bACnetIPv6MulticastAddress = bACnetIPv6MulticastAddress;
    this.iPv6DNSServer = iPv6DNSServer;
    this.iPv6AutoAddressingEnable = iPv6AutoAddressingEnable;
    this.iPv6DHCPLeaseTime = iPv6DHCPLeaseTime;
    this.iPv6DHCPLeaseTimeRemaining = iPv6DHCPLeaseTimeRemaining;
    this.iPv6DHCPServer = iPv6DHCPServer;
    this.iPv6ZoneIndex = iPv6ZoneIndex;
    this.maxMaster = maxMaster;
    this.maxInfoFrames = maxInfoFrames;
    this.slaveProxyEnable = slaveProxyEnable;
    this.manualSlaveAddressBinding = manualSlaveAddressBinding;
    this.autoSlaveDiscovery = autoSlaveDiscovery;
    this.slaveAddressBinding = slaveAddressBinding;
    this.virtualMACAddressTable = virtualMACAddressTable;
    this.routingTable = routingTable;
    this.eventDetectionEnable = eventDetectionEnable;
    this.notificationClass = notificationClass;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventState = eventState;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public ReadableProperty getNetworkType() {
    return networkType;
  }

  public ReadableProperty getProtocolLevel() {
    return protocolLevel;
  }

  public OptionalProperty getReferencePort() {
    return referencePort;
  }

  public ReadableProperty getNetworkNumber() {
    return networkNumber;
  }

  public ReadableProperty getNetworkNumberQuality() {
    return networkNumberQuality;
  }

  public ReadableProperty getChangesPending() {
    return changesPending;
  }

  public OptionalProperty getCommand() {
    return command;
  }

  public OptionalProperty getMACAddress() {
    return mACAddress;
  }

  public ReadableProperty getAPDULength() {
    return aPDULength;
  }

  public ReadableProperty getLinkSpeed() {
    return linkSpeed;
  }

  public OptionalProperty getLinkSpeeds() {
    return linkSpeeds;
  }

  public OptionalProperty getLinkSpeedAutonegotiate() {
    return linkSpeedAutonegotiate;
  }

  public OptionalProperty getNetworkInterfaceName() {
    return networkInterfaceName;
  }

  public OptionalProperty getBACnetIPMode() {
    return bACnetIPMode;
  }

  public OptionalProperty getIPAddress() {
    return iPAddress;
  }

  public OptionalProperty getBACnetIPUDPPort() {
    return bACnetIPUDPPort;
  }

  public OptionalProperty getIPSubnetMask() {
    return iPSubnetMask;
  }

  public OptionalProperty getIPDefaultGateway() {
    return iPDefaultGateway;
  }

  public OptionalProperty getBACnetIPMulticastAddress() {
    return bACnetIPMulticastAddress;
  }

  public OptionalProperty getIPDNSServer() {
    return iPDNSServer;
  }

  public OptionalProperty getIPDHCPEnable() {
    return iPDHCPEnable;
  }

  public OptionalProperty getIPDHCPLeaseTime() {
    return iPDHCPLeaseTime;
  }

  public OptionalProperty getIPDHCPLeaseTimeRemaining() {
    return iPDHCPLeaseTimeRemaining;
  }

  public OptionalProperty getIPDHCPServer() {
    return iPDHCPServer;
  }

  public OptionalProperty getBACnetIPNATTraversal() {
    return bACnetIPNATTraversal;
  }

  public OptionalProperty getBACnetIPGlobalAddress() {
    return bACnetIPGlobalAddress;
  }

  public OptionalProperty getBBMDBroadcastDistributionTable() {
    return bBMDBroadcastDistributionTable;
  }

  public OptionalProperty getBBMDAcceptFDRegistrations() {
    return bBMDAcceptFDRegistrations;
  }

  public OptionalProperty getBBMDForeignDeviceTable() {
    return bBMDForeignDeviceTable;
  }

  public OptionalProperty getFDBBMDAddress() {
    return fDBBMDAddress;
  }

  public OptionalProperty getFDSubscriptionLifetime() {
    return fDSubscriptionLifetime;
  }

  public OptionalProperty getBACnetIPv6Mode() {
    return bACnetIPv6Mode;
  }

  public OptionalProperty getIPv6Address() {
    return iPv6Address;
  }

  public OptionalProperty getIPv6PrefixLength() {
    return iPv6PrefixLength;
  }

  public OptionalProperty getBACnetIPv6UDPPort() {
    return bACnetIPv6UDPPort;
  }

  public OptionalProperty getIPv6DefaultGateway() {
    return iPv6DefaultGateway;
  }

  public OptionalProperty getBACnetIPv6MulticastAddress() {
    return bACnetIPv6MulticastAddress;
  }

  public OptionalProperty getIPv6DNSServer() {
    return iPv6DNSServer;
  }

  public OptionalProperty getIPv6AutoAddressingEnable() {
    return iPv6AutoAddressingEnable;
  }

  public OptionalProperty getIPv6DHCPLeaseTime() {
    return iPv6DHCPLeaseTime;
  }

  public OptionalProperty getIPv6DHCPLeaseTimeRemaining() {
    return iPv6DHCPLeaseTimeRemaining;
  }

  public OptionalProperty getIPv6DHCPServer() {
    return iPv6DHCPServer;
  }

  public OptionalProperty getIPv6ZoneIndex() {
    return iPv6ZoneIndex;
  }

  public OptionalProperty getMaxMaster() {
    return maxMaster;
  }

  public OptionalProperty getMaxInfoFrames() {
    return maxInfoFrames;
  }

  public OptionalProperty getSlaveProxyEnable() {
    return slaveProxyEnable;
  }

  public OptionalProperty getManualSlaveAddressBinding() {
    return manualSlaveAddressBinding;
  }

  public OptionalProperty getAutoSlaveDiscovery() {
    return autoSlaveDiscovery;
  }

  public OptionalProperty getSlaveAddressBinding() {
    return slaveAddressBinding;
  }

  public OptionalProperty getVirtualMACAddressTable() {
    return virtualMACAddressTable;
  }

  public OptionalProperty getRoutingTable() {
    return routingTable;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventState() {
    return eventState;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("NetworkPort");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (networkType)
    writeSimpleField("networkType", networkType, writeComplex(writeBuffer));

    // Simple Field (protocolLevel)
    writeSimpleField("protocolLevel", protocolLevel, writeComplex(writeBuffer));

    // Simple Field (referencePort)
    writeSimpleField("referencePort", referencePort, writeComplex(writeBuffer));

    // Simple Field (networkNumber)
    writeSimpleField("networkNumber", networkNumber, writeComplex(writeBuffer));

    // Simple Field (networkNumberQuality)
    writeSimpleField("networkNumberQuality", networkNumberQuality, writeComplex(writeBuffer));

    // Simple Field (changesPending)
    writeSimpleField("changesPending", changesPending, writeComplex(writeBuffer));

    // Simple Field (command)
    writeSimpleField("command", command, writeComplex(writeBuffer));

    // Simple Field (mACAddress)
    writeSimpleField("mACAddress", mACAddress, writeComplex(writeBuffer));

    // Simple Field (aPDULength)
    writeSimpleField("aPDULength", aPDULength, writeComplex(writeBuffer));

    // Simple Field (linkSpeed)
    writeSimpleField("linkSpeed", linkSpeed, writeComplex(writeBuffer));

    // Simple Field (linkSpeeds)
    writeSimpleField("linkSpeeds", linkSpeeds, writeComplex(writeBuffer));

    // Simple Field (linkSpeedAutonegotiate)
    writeSimpleField("linkSpeedAutonegotiate", linkSpeedAutonegotiate, writeComplex(writeBuffer));

    // Simple Field (networkInterfaceName)
    writeSimpleField("networkInterfaceName", networkInterfaceName, writeComplex(writeBuffer));

    // Simple Field (bACnetIPMode)
    writeSimpleField("bACnetIPMode", bACnetIPMode, writeComplex(writeBuffer));

    // Simple Field (iPAddress)
    writeSimpleField("iPAddress", iPAddress, writeComplex(writeBuffer));

    // Simple Field (bACnetIPUDPPort)
    writeSimpleField("bACnetIPUDPPort", bACnetIPUDPPort, writeComplex(writeBuffer));

    // Simple Field (iPSubnetMask)
    writeSimpleField("iPSubnetMask", iPSubnetMask, writeComplex(writeBuffer));

    // Simple Field (iPDefaultGateway)
    writeSimpleField("iPDefaultGateway", iPDefaultGateway, writeComplex(writeBuffer));

    // Simple Field (bACnetIPMulticastAddress)
    writeSimpleField(
        "bACnetIPMulticastAddress", bACnetIPMulticastAddress, writeComplex(writeBuffer));

    // Simple Field (iPDNSServer)
    writeSimpleField("iPDNSServer", iPDNSServer, writeComplex(writeBuffer));

    // Simple Field (iPDHCPEnable)
    writeSimpleField("iPDHCPEnable", iPDHCPEnable, writeComplex(writeBuffer));

    // Simple Field (iPDHCPLeaseTime)
    writeSimpleField("iPDHCPLeaseTime", iPDHCPLeaseTime, writeComplex(writeBuffer));

    // Simple Field (iPDHCPLeaseTimeRemaining)
    writeSimpleField(
        "iPDHCPLeaseTimeRemaining", iPDHCPLeaseTimeRemaining, writeComplex(writeBuffer));

    // Simple Field (iPDHCPServer)
    writeSimpleField("iPDHCPServer", iPDHCPServer, writeComplex(writeBuffer));

    // Simple Field (bACnetIPNATTraversal)
    writeSimpleField("bACnetIPNATTraversal", bACnetIPNATTraversal, writeComplex(writeBuffer));

    // Simple Field (bACnetIPGlobalAddress)
    writeSimpleField("bACnetIPGlobalAddress", bACnetIPGlobalAddress, writeComplex(writeBuffer));

    // Simple Field (bBMDBroadcastDistributionTable)
    writeSimpleField(
        "bBMDBroadcastDistributionTable",
        bBMDBroadcastDistributionTable,
        writeComplex(writeBuffer));

    // Simple Field (bBMDAcceptFDRegistrations)
    writeSimpleField(
        "bBMDAcceptFDRegistrations", bBMDAcceptFDRegistrations, writeComplex(writeBuffer));

    // Simple Field (bBMDForeignDeviceTable)
    writeSimpleField("bBMDForeignDeviceTable", bBMDForeignDeviceTable, writeComplex(writeBuffer));

    // Simple Field (fDBBMDAddress)
    writeSimpleField("fDBBMDAddress", fDBBMDAddress, writeComplex(writeBuffer));

    // Simple Field (fDSubscriptionLifetime)
    writeSimpleField("fDSubscriptionLifetime", fDSubscriptionLifetime, writeComplex(writeBuffer));

    // Simple Field (bACnetIPv6Mode)
    writeSimpleField("bACnetIPv6Mode", bACnetIPv6Mode, writeComplex(writeBuffer));

    // Simple Field (iPv6Address)
    writeSimpleField("iPv6Address", iPv6Address, writeComplex(writeBuffer));

    // Simple Field (iPv6PrefixLength)
    writeSimpleField("iPv6PrefixLength", iPv6PrefixLength, writeComplex(writeBuffer));

    // Simple Field (bACnetIPv6UDPPort)
    writeSimpleField("bACnetIPv6UDPPort", bACnetIPv6UDPPort, writeComplex(writeBuffer));

    // Simple Field (iPv6DefaultGateway)
    writeSimpleField("iPv6DefaultGateway", iPv6DefaultGateway, writeComplex(writeBuffer));

    // Simple Field (bACnetIPv6MulticastAddress)
    writeSimpleField(
        "bACnetIPv6MulticastAddress", bACnetIPv6MulticastAddress, writeComplex(writeBuffer));

    // Simple Field (iPv6DNSServer)
    writeSimpleField("iPv6DNSServer", iPv6DNSServer, writeComplex(writeBuffer));

    // Simple Field (iPv6AutoAddressingEnable)
    writeSimpleField(
        "iPv6AutoAddressingEnable", iPv6AutoAddressingEnable, writeComplex(writeBuffer));

    // Simple Field (iPv6DHCPLeaseTime)
    writeSimpleField("iPv6DHCPLeaseTime", iPv6DHCPLeaseTime, writeComplex(writeBuffer));

    // Simple Field (iPv6DHCPLeaseTimeRemaining)
    writeSimpleField(
        "iPv6DHCPLeaseTimeRemaining", iPv6DHCPLeaseTimeRemaining, writeComplex(writeBuffer));

    // Simple Field (iPv6DHCPServer)
    writeSimpleField("iPv6DHCPServer", iPv6DHCPServer, writeComplex(writeBuffer));

    // Simple Field (iPv6ZoneIndex)
    writeSimpleField("iPv6ZoneIndex", iPv6ZoneIndex, writeComplex(writeBuffer));

    // Simple Field (maxMaster)
    writeSimpleField("maxMaster", maxMaster, writeComplex(writeBuffer));

    // Simple Field (maxInfoFrames)
    writeSimpleField("maxInfoFrames", maxInfoFrames, writeComplex(writeBuffer));

    // Simple Field (slaveProxyEnable)
    writeSimpleField("slaveProxyEnable", slaveProxyEnable, writeComplex(writeBuffer));

    // Simple Field (manualSlaveAddressBinding)
    writeSimpleField(
        "manualSlaveAddressBinding", manualSlaveAddressBinding, writeComplex(writeBuffer));

    // Simple Field (autoSlaveDiscovery)
    writeSimpleField("autoSlaveDiscovery", autoSlaveDiscovery, writeComplex(writeBuffer));

    // Simple Field (slaveAddressBinding)
    writeSimpleField("slaveAddressBinding", slaveAddressBinding, writeComplex(writeBuffer));

    // Simple Field (virtualMACAddressTable)
    writeSimpleField("virtualMACAddressTable", virtualMACAddressTable, writeComplex(writeBuffer));

    // Simple Field (routingTable)
    writeSimpleField("routingTable", routingTable, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("NetworkPort");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    NetworkPort _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (networkType)
    lengthInBits += networkType.getLengthInBits();

    // Simple field (protocolLevel)
    lengthInBits += protocolLevel.getLengthInBits();

    // Simple field (referencePort)
    lengthInBits += referencePort.getLengthInBits();

    // Simple field (networkNumber)
    lengthInBits += networkNumber.getLengthInBits();

    // Simple field (networkNumberQuality)
    lengthInBits += networkNumberQuality.getLengthInBits();

    // Simple field (changesPending)
    lengthInBits += changesPending.getLengthInBits();

    // Simple field (command)
    lengthInBits += command.getLengthInBits();

    // Simple field (mACAddress)
    lengthInBits += mACAddress.getLengthInBits();

    // Simple field (aPDULength)
    lengthInBits += aPDULength.getLengthInBits();

    // Simple field (linkSpeed)
    lengthInBits += linkSpeed.getLengthInBits();

    // Simple field (linkSpeeds)
    lengthInBits += linkSpeeds.getLengthInBits();

    // Simple field (linkSpeedAutonegotiate)
    lengthInBits += linkSpeedAutonegotiate.getLengthInBits();

    // Simple field (networkInterfaceName)
    lengthInBits += networkInterfaceName.getLengthInBits();

    // Simple field (bACnetIPMode)
    lengthInBits += bACnetIPMode.getLengthInBits();

    // Simple field (iPAddress)
    lengthInBits += iPAddress.getLengthInBits();

    // Simple field (bACnetIPUDPPort)
    lengthInBits += bACnetIPUDPPort.getLengthInBits();

    // Simple field (iPSubnetMask)
    lengthInBits += iPSubnetMask.getLengthInBits();

    // Simple field (iPDefaultGateway)
    lengthInBits += iPDefaultGateway.getLengthInBits();

    // Simple field (bACnetIPMulticastAddress)
    lengthInBits += bACnetIPMulticastAddress.getLengthInBits();

    // Simple field (iPDNSServer)
    lengthInBits += iPDNSServer.getLengthInBits();

    // Simple field (iPDHCPEnable)
    lengthInBits += iPDHCPEnable.getLengthInBits();

    // Simple field (iPDHCPLeaseTime)
    lengthInBits += iPDHCPLeaseTime.getLengthInBits();

    // Simple field (iPDHCPLeaseTimeRemaining)
    lengthInBits += iPDHCPLeaseTimeRemaining.getLengthInBits();

    // Simple field (iPDHCPServer)
    lengthInBits += iPDHCPServer.getLengthInBits();

    // Simple field (bACnetIPNATTraversal)
    lengthInBits += bACnetIPNATTraversal.getLengthInBits();

    // Simple field (bACnetIPGlobalAddress)
    lengthInBits += bACnetIPGlobalAddress.getLengthInBits();

    // Simple field (bBMDBroadcastDistributionTable)
    lengthInBits += bBMDBroadcastDistributionTable.getLengthInBits();

    // Simple field (bBMDAcceptFDRegistrations)
    lengthInBits += bBMDAcceptFDRegistrations.getLengthInBits();

    // Simple field (bBMDForeignDeviceTable)
    lengthInBits += bBMDForeignDeviceTable.getLengthInBits();

    // Simple field (fDBBMDAddress)
    lengthInBits += fDBBMDAddress.getLengthInBits();

    // Simple field (fDSubscriptionLifetime)
    lengthInBits += fDSubscriptionLifetime.getLengthInBits();

    // Simple field (bACnetIPv6Mode)
    lengthInBits += bACnetIPv6Mode.getLengthInBits();

    // Simple field (iPv6Address)
    lengthInBits += iPv6Address.getLengthInBits();

    // Simple field (iPv6PrefixLength)
    lengthInBits += iPv6PrefixLength.getLengthInBits();

    // Simple field (bACnetIPv6UDPPort)
    lengthInBits += bACnetIPv6UDPPort.getLengthInBits();

    // Simple field (iPv6DefaultGateway)
    lengthInBits += iPv6DefaultGateway.getLengthInBits();

    // Simple field (bACnetIPv6MulticastAddress)
    lengthInBits += bACnetIPv6MulticastAddress.getLengthInBits();

    // Simple field (iPv6DNSServer)
    lengthInBits += iPv6DNSServer.getLengthInBits();

    // Simple field (iPv6AutoAddressingEnable)
    lengthInBits += iPv6AutoAddressingEnable.getLengthInBits();

    // Simple field (iPv6DHCPLeaseTime)
    lengthInBits += iPv6DHCPLeaseTime.getLengthInBits();

    // Simple field (iPv6DHCPLeaseTimeRemaining)
    lengthInBits += iPv6DHCPLeaseTimeRemaining.getLengthInBits();

    // Simple field (iPv6DHCPServer)
    lengthInBits += iPv6DHCPServer.getLengthInBits();

    // Simple field (iPv6ZoneIndex)
    lengthInBits += iPv6ZoneIndex.getLengthInBits();

    // Simple field (maxMaster)
    lengthInBits += maxMaster.getLengthInBits();

    // Simple field (maxInfoFrames)
    lengthInBits += maxInfoFrames.getLengthInBits();

    // Simple field (slaveProxyEnable)
    lengthInBits += slaveProxyEnable.getLengthInBits();

    // Simple field (manualSlaveAddressBinding)
    lengthInBits += manualSlaveAddressBinding.getLengthInBits();

    // Simple field (autoSlaveDiscovery)
    lengthInBits += autoSlaveDiscovery.getLengthInBits();

    // Simple field (slaveAddressBinding)
    lengthInBits += slaveAddressBinding.getLengthInBits();

    // Simple field (virtualMACAddressTable)
    lengthInBits += virtualMACAddressTable.getLengthInBits();

    // Simple field (routingTable)
    lengthInBits += routingTable.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static NetworkPort staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("NetworkPort");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty networkType =
        readSimpleField(
            "networkType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetNetworkType")),
                readBuffer));

    ReadableProperty protocolLevel =
        readSimpleField(
            "protocolLevel",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetProtocolLevel")),
                readBuffer));

    OptionalProperty referencePort =
        readSimpleField(
            "referencePort",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty networkNumber =
        readSimpleField(
            "networkNumber",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    ReadableProperty networkNumberQuality =
        readSimpleField(
            "networkNumberQuality",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetNetworkNumberQuality")),
                readBuffer));

    ReadableProperty changesPending =
        readSimpleField(
            "changesPending",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty command =
        readSimpleField(
            "command",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetNetworkPortCommand")),
                readBuffer));

    OptionalProperty mACAddress =
        readSimpleField(
            "mACAddress",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    ReadableProperty aPDULength =
        readSimpleField(
            "aPDULength",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty linkSpeed =
        readSimpleField(
            "linkSpeed",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty linkSpeeds =
        readSimpleField(
            "linkSpeeds",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetARRAY[N] of REAL")),
                readBuffer));

    OptionalProperty linkSpeedAutonegotiate =
        readSimpleField(
            "linkSpeedAutonegotiate",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty networkInterfaceName =
        readSimpleField(
            "networkInterfaceName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty bACnetIPMode =
        readSimpleField(
            "bACnetIPMode",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetIPMode")),
                readBuffer));

    OptionalProperty iPAddress =
        readSimpleField(
            "iPAddress",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty bACnetIPUDPPort =
        readSimpleField(
            "bACnetIPUDPPort",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty iPSubnetMask =
        readSimpleField(
            "iPSubnetMask",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty iPDefaultGateway =
        readSimpleField(
            "iPDefaultGateway",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty bACnetIPMulticastAddress =
        readSimpleField(
            "bACnetIPMulticastAddress",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty iPDNSServer =
        readSimpleField(
            "iPDNSServer",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of OCTET STRING")),
                readBuffer));

    OptionalProperty iPDHCPEnable =
        readSimpleField(
            "iPDHCPEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty iPDHCPLeaseTime =
        readSimpleField(
            "iPDHCPLeaseTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty iPDHCPLeaseTimeRemaining =
        readSimpleField(
            "iPDHCPLeaseTimeRemaining",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty iPDHCPServer =
        readSimpleField(
            "iPDHCPServer",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty bACnetIPNATTraversal =
        readSimpleField(
            "bACnetIPNATTraversal",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty bACnetIPGlobalAddress =
        readSimpleField(
            "bACnetIPGlobalAddress",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetHostNPort")),
                readBuffer));

    OptionalProperty bBMDBroadcastDistributionTable =
        readSimpleField(
            "bBMDBroadcastDistributionTable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetBDTEntry")),
                readBuffer));

    OptionalProperty bBMDAcceptFDRegistrations =
        readSimpleField(
            "bBMDAcceptFDRegistrations",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty bBMDForeignDeviceTable =
        readSimpleField(
            "bBMDForeignDeviceTable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetFDTEntry")),
                readBuffer));

    OptionalProperty fDBBMDAddress =
        readSimpleField(
            "fDBBMDAddress",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetHostNPort")),
                readBuffer));

    OptionalProperty fDSubscriptionLifetime =
        readSimpleField(
            "fDSubscriptionLifetime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty bACnetIPv6Mode =
        readSimpleField(
            "bACnetIPv6Mode",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetIPMode")),
                readBuffer));

    OptionalProperty iPv6Address =
        readSimpleField(
            "iPv6Address",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty iPv6PrefixLength =
        readSimpleField(
            "iPv6PrefixLength",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    OptionalProperty bACnetIPv6UDPPort =
        readSimpleField(
            "bACnetIPv6UDPPort",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty iPv6DefaultGateway =
        readSimpleField(
            "iPv6DefaultGateway",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty bACnetIPv6MulticastAddress =
        readSimpleField(
            "bACnetIPv6MulticastAddress",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty iPv6DNSServer =
        readSimpleField(
            "iPv6DNSServer",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of OCTET STRING")),
                readBuffer));

    OptionalProperty iPv6AutoAddressingEnable =
        readSimpleField(
            "iPv6AutoAddressingEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty iPv6DHCPLeaseTime =
        readSimpleField(
            "iPv6DHCPLeaseTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty iPv6DHCPLeaseTimeRemaining =
        readSimpleField(
            "iPv6DHCPLeaseTimeRemaining",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty iPv6DHCPServer =
        readSimpleField(
            "iPv6DHCPServer",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("OCTET STRING")),
                readBuffer));

    OptionalProperty iPv6ZoneIndex =
        readSimpleField(
            "iPv6ZoneIndex",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty maxMaster =
        readSimpleField(
            "maxMaster",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned8(0..127)")),
                readBuffer));

    OptionalProperty maxInfoFrames =
        readSimpleField(
            "maxInfoFrames",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    OptionalProperty slaveProxyEnable =
        readSimpleField(
            "slaveProxyEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty manualSlaveAddressBinding =
        readSimpleField(
            "manualSlaveAddressBinding",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAddressBinding")),
                readBuffer));

    OptionalProperty autoSlaveDiscovery =
        readSimpleField(
            "autoSlaveDiscovery",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty slaveAddressBinding =
        readSimpleField(
            "slaveAddressBinding",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAddressBinding")),
                readBuffer));

    OptionalProperty virtualMACAddressTable =
        readSimpleField(
            "virtualMACAddressTable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetVMACEntry")),
                readBuffer));

    OptionalProperty routingTable =
        readSimpleField(
            "routingTable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetRouterEntry")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("NetworkPort");
    // Create the instance
    NetworkPort _networkPort;
    _networkPort =
        new NetworkPort(
            objectIdentifier,
            objectName,
            objectType,
            description,
            statusFlags,
            reliability,
            outOfService,
            networkType,
            protocolLevel,
            referencePort,
            networkNumber,
            networkNumberQuality,
            changesPending,
            command,
            mACAddress,
            aPDULength,
            linkSpeed,
            linkSpeeds,
            linkSpeedAutonegotiate,
            networkInterfaceName,
            bACnetIPMode,
            iPAddress,
            bACnetIPUDPPort,
            iPSubnetMask,
            iPDefaultGateway,
            bACnetIPMulticastAddress,
            iPDNSServer,
            iPDHCPEnable,
            iPDHCPLeaseTime,
            iPDHCPLeaseTimeRemaining,
            iPDHCPServer,
            bACnetIPNATTraversal,
            bACnetIPGlobalAddress,
            bBMDBroadcastDistributionTable,
            bBMDAcceptFDRegistrations,
            bBMDForeignDeviceTable,
            fDBBMDAddress,
            fDSubscriptionLifetime,
            bACnetIPv6Mode,
            iPv6Address,
            iPv6PrefixLength,
            bACnetIPv6UDPPort,
            iPv6DefaultGateway,
            bACnetIPv6MulticastAddress,
            iPv6DNSServer,
            iPv6AutoAddressingEnable,
            iPv6DHCPLeaseTime,
            iPv6DHCPLeaseTimeRemaining,
            iPv6DHCPServer,
            iPv6ZoneIndex,
            maxMaster,
            maxInfoFrames,
            slaveProxyEnable,
            manualSlaveAddressBinding,
            autoSlaveDiscovery,
            slaveAddressBinding,
            virtualMACAddressTable,
            routingTable,
            eventDetectionEnable,
            notificationClass,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventState,
            reliabilityEvaluationInhibit,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _networkPort;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof NetworkPort)) {
      return false;
    }
    NetworkPort that = (NetworkPort) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getStatusFlags() == that.getStatusFlags())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getNetworkType() == that.getNetworkType())
        && (getProtocolLevel() == that.getProtocolLevel())
        && (getReferencePort() == that.getReferencePort())
        && (getNetworkNumber() == that.getNetworkNumber())
        && (getNetworkNumberQuality() == that.getNetworkNumberQuality())
        && (getChangesPending() == that.getChangesPending())
        && (getCommand() == that.getCommand())
        && (getMACAddress() == that.getMACAddress())
        && (getAPDULength() == that.getAPDULength())
        && (getLinkSpeed() == that.getLinkSpeed())
        && (getLinkSpeeds() == that.getLinkSpeeds())
        && (getLinkSpeedAutonegotiate() == that.getLinkSpeedAutonegotiate())
        && (getNetworkInterfaceName() == that.getNetworkInterfaceName())
        && (getBACnetIPMode() == that.getBACnetIPMode())
        && (getIPAddress() == that.getIPAddress())
        && (getBACnetIPUDPPort() == that.getBACnetIPUDPPort())
        && (getIPSubnetMask() == that.getIPSubnetMask())
        && (getIPDefaultGateway() == that.getIPDefaultGateway())
        && (getBACnetIPMulticastAddress() == that.getBACnetIPMulticastAddress())
        && (getIPDNSServer() == that.getIPDNSServer())
        && (getIPDHCPEnable() == that.getIPDHCPEnable())
        && (getIPDHCPLeaseTime() == that.getIPDHCPLeaseTime())
        && (getIPDHCPLeaseTimeRemaining() == that.getIPDHCPLeaseTimeRemaining())
        && (getIPDHCPServer() == that.getIPDHCPServer())
        && (getBACnetIPNATTraversal() == that.getBACnetIPNATTraversal())
        && (getBACnetIPGlobalAddress() == that.getBACnetIPGlobalAddress())
        && (getBBMDBroadcastDistributionTable() == that.getBBMDBroadcastDistributionTable())
        && (getBBMDAcceptFDRegistrations() == that.getBBMDAcceptFDRegistrations())
        && (getBBMDForeignDeviceTable() == that.getBBMDForeignDeviceTable())
        && (getFDBBMDAddress() == that.getFDBBMDAddress())
        && (getFDSubscriptionLifetime() == that.getFDSubscriptionLifetime())
        && (getBACnetIPv6Mode() == that.getBACnetIPv6Mode())
        && (getIPv6Address() == that.getIPv6Address())
        && (getIPv6PrefixLength() == that.getIPv6PrefixLength())
        && (getBACnetIPv6UDPPort() == that.getBACnetIPv6UDPPort())
        && (getIPv6DefaultGateway() == that.getIPv6DefaultGateway())
        && (getBACnetIPv6MulticastAddress() == that.getBACnetIPv6MulticastAddress())
        && (getIPv6DNSServer() == that.getIPv6DNSServer())
        && (getIPv6AutoAddressingEnable() == that.getIPv6AutoAddressingEnable())
        && (getIPv6DHCPLeaseTime() == that.getIPv6DHCPLeaseTime())
        && (getIPv6DHCPLeaseTimeRemaining() == that.getIPv6DHCPLeaseTimeRemaining())
        && (getIPv6DHCPServer() == that.getIPv6DHCPServer())
        && (getIPv6ZoneIndex() == that.getIPv6ZoneIndex())
        && (getMaxMaster() == that.getMaxMaster())
        && (getMaxInfoFrames() == that.getMaxInfoFrames())
        && (getSlaveProxyEnable() == that.getSlaveProxyEnable())
        && (getManualSlaveAddressBinding() == that.getManualSlaveAddressBinding())
        && (getAutoSlaveDiscovery() == that.getAutoSlaveDiscovery())
        && (getSlaveAddressBinding() == that.getSlaveAddressBinding())
        && (getVirtualMACAddressTable() == that.getVirtualMACAddressTable())
        && (getRoutingTable() == that.getRoutingTable())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getNotificationClass() == that.getNotificationClass())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventState() == that.getEventState())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getStatusFlags(),
        getReliability(),
        getOutOfService(),
        getNetworkType(),
        getProtocolLevel(),
        getReferencePort(),
        getNetworkNumber(),
        getNetworkNumberQuality(),
        getChangesPending(),
        getCommand(),
        getMACAddress(),
        getAPDULength(),
        getLinkSpeed(),
        getLinkSpeeds(),
        getLinkSpeedAutonegotiate(),
        getNetworkInterfaceName(),
        getBACnetIPMode(),
        getIPAddress(),
        getBACnetIPUDPPort(),
        getIPSubnetMask(),
        getIPDefaultGateway(),
        getBACnetIPMulticastAddress(),
        getIPDNSServer(),
        getIPDHCPEnable(),
        getIPDHCPLeaseTime(),
        getIPDHCPLeaseTimeRemaining(),
        getIPDHCPServer(),
        getBACnetIPNATTraversal(),
        getBACnetIPGlobalAddress(),
        getBBMDBroadcastDistributionTable(),
        getBBMDAcceptFDRegistrations(),
        getBBMDForeignDeviceTable(),
        getFDBBMDAddress(),
        getFDSubscriptionLifetime(),
        getBACnetIPv6Mode(),
        getIPv6Address(),
        getIPv6PrefixLength(),
        getBACnetIPv6UDPPort(),
        getIPv6DefaultGateway(),
        getBACnetIPv6MulticastAddress(),
        getIPv6DNSServer(),
        getIPv6AutoAddressingEnable(),
        getIPv6DHCPLeaseTime(),
        getIPv6DHCPLeaseTimeRemaining(),
        getIPv6DHCPServer(),
        getIPv6ZoneIndex(),
        getMaxMaster(),
        getMaxInfoFrames(),
        getSlaveProxyEnable(),
        getManualSlaveAddressBinding(),
        getAutoSlaveDiscovery(),
        getSlaveAddressBinding(),
        getVirtualMACAddressTable(),
        getRoutingTable(),
        getEventDetectionEnable(),
        getNotificationClass(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventState(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
