/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class AccessPoint implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty eventState;
  protected final ReadableProperty reliability;
  protected final ReadableProperty outOfService;
  protected final ReadableProperty authenticationStatus;
  protected final ReadableProperty activeAuthenticationPolicy;
  protected final ReadableProperty numberOfAuthenticationPolicies;
  protected final OptionalProperty authenticationPolicyList;
  protected final OptionalProperty authenticationPolicyNames;
  protected final ReadableProperty authorizationMode;
  protected final OptionalProperty verificationTime;
  protected final OptionalProperty lockout;
  protected final OptionalProperty lockoutRelinquishTime;
  protected final OptionalProperty failedAttempts;
  protected final OptionalProperty failedAttemptEvents;
  protected final OptionalProperty maxFailedAttempts;
  protected final OptionalProperty failedAttemptsTime;
  protected final OptionalProperty threatLevel;
  protected final OptionalProperty occupancyUpperLimitEnforced;
  protected final OptionalProperty occupancyLowerLimitEnforced;
  protected final OptionalProperty occupancyCountAdjust;
  protected final OptionalProperty accompanimentTime;
  protected final ReadableProperty accessEvent;
  protected final ReadableProperty accessEventTag;
  protected final ReadableProperty accessEventTime;
  protected final ReadableProperty accessEventCredential;
  protected final OptionalProperty accessEventAuthenticationFactor;
  protected final ReadableProperty accessDoors;
  protected final ReadableProperty priorityForWriting;
  protected final OptionalProperty musterPoint;
  protected final OptionalProperty zoneTo;
  protected final OptionalProperty zoneFrom;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty transactionNotificationClass;
  protected final OptionalProperty accessAlarmEvents;
  protected final OptionalProperty accessTransactionEvents;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty eventAlgorithmInhibitRef;
  protected final OptionalProperty eventAlgorithmInhibit;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public AccessPoint(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      ReadableProperty statusFlags,
      ReadableProperty eventState,
      ReadableProperty reliability,
      ReadableProperty outOfService,
      ReadableProperty authenticationStatus,
      ReadableProperty activeAuthenticationPolicy,
      ReadableProperty numberOfAuthenticationPolicies,
      OptionalProperty authenticationPolicyList,
      OptionalProperty authenticationPolicyNames,
      ReadableProperty authorizationMode,
      OptionalProperty verificationTime,
      OptionalProperty lockout,
      OptionalProperty lockoutRelinquishTime,
      OptionalProperty failedAttempts,
      OptionalProperty failedAttemptEvents,
      OptionalProperty maxFailedAttempts,
      OptionalProperty failedAttemptsTime,
      OptionalProperty threatLevel,
      OptionalProperty occupancyUpperLimitEnforced,
      OptionalProperty occupancyLowerLimitEnforced,
      OptionalProperty occupancyCountAdjust,
      OptionalProperty accompanimentTime,
      ReadableProperty accessEvent,
      ReadableProperty accessEventTag,
      ReadableProperty accessEventTime,
      ReadableProperty accessEventCredential,
      OptionalProperty accessEventAuthenticationFactor,
      ReadableProperty accessDoors,
      ReadableProperty priorityForWriting,
      OptionalProperty musterPoint,
      OptionalProperty zoneTo,
      OptionalProperty zoneFrom,
      OptionalProperty notificationClass,
      OptionalProperty transactionNotificationClass,
      OptionalProperty accessAlarmEvents,
      OptionalProperty accessTransactionEvents,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventDetectionEnable,
      OptionalProperty eventAlgorithmInhibitRef,
      OptionalProperty eventAlgorithmInhibit,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.statusFlags = statusFlags;
    this.eventState = eventState;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.authenticationStatus = authenticationStatus;
    this.activeAuthenticationPolicy = activeAuthenticationPolicy;
    this.numberOfAuthenticationPolicies = numberOfAuthenticationPolicies;
    this.authenticationPolicyList = authenticationPolicyList;
    this.authenticationPolicyNames = authenticationPolicyNames;
    this.authorizationMode = authorizationMode;
    this.verificationTime = verificationTime;
    this.lockout = lockout;
    this.lockoutRelinquishTime = lockoutRelinquishTime;
    this.failedAttempts = failedAttempts;
    this.failedAttemptEvents = failedAttemptEvents;
    this.maxFailedAttempts = maxFailedAttempts;
    this.failedAttemptsTime = failedAttemptsTime;
    this.threatLevel = threatLevel;
    this.occupancyUpperLimitEnforced = occupancyUpperLimitEnforced;
    this.occupancyLowerLimitEnforced = occupancyLowerLimitEnforced;
    this.occupancyCountAdjust = occupancyCountAdjust;
    this.accompanimentTime = accompanimentTime;
    this.accessEvent = accessEvent;
    this.accessEventTag = accessEventTag;
    this.accessEventTime = accessEventTime;
    this.accessEventCredential = accessEventCredential;
    this.accessEventAuthenticationFactor = accessEventAuthenticationFactor;
    this.accessDoors = accessDoors;
    this.priorityForWriting = priorityForWriting;
    this.musterPoint = musterPoint;
    this.zoneTo = zoneTo;
    this.zoneFrom = zoneFrom;
    this.notificationClass = notificationClass;
    this.transactionNotificationClass = transactionNotificationClass;
    this.accessAlarmEvents = accessAlarmEvents;
    this.accessTransactionEvents = accessTransactionEvents;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventDetectionEnable = eventDetectionEnable;
    this.eventAlgorithmInhibitRef = eventAlgorithmInhibitRef;
    this.eventAlgorithmInhibit = eventAlgorithmInhibit;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getEventState() {
    return eventState;
  }

  public ReadableProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public ReadableProperty getAuthenticationStatus() {
    return authenticationStatus;
  }

  public ReadableProperty getActiveAuthenticationPolicy() {
    return activeAuthenticationPolicy;
  }

  public ReadableProperty getNumberOfAuthenticationPolicies() {
    return numberOfAuthenticationPolicies;
  }

  public OptionalProperty getAuthenticationPolicyList() {
    return authenticationPolicyList;
  }

  public OptionalProperty getAuthenticationPolicyNames() {
    return authenticationPolicyNames;
  }

  public ReadableProperty getAuthorizationMode() {
    return authorizationMode;
  }

  public OptionalProperty getVerificationTime() {
    return verificationTime;
  }

  public OptionalProperty getLockout() {
    return lockout;
  }

  public OptionalProperty getLockoutRelinquishTime() {
    return lockoutRelinquishTime;
  }

  public OptionalProperty getFailedAttempts() {
    return failedAttempts;
  }

  public OptionalProperty getFailedAttemptEvents() {
    return failedAttemptEvents;
  }

  public OptionalProperty getMaxFailedAttempts() {
    return maxFailedAttempts;
  }

  public OptionalProperty getFailedAttemptsTime() {
    return failedAttemptsTime;
  }

  public OptionalProperty getThreatLevel() {
    return threatLevel;
  }

  public OptionalProperty getOccupancyUpperLimitEnforced() {
    return occupancyUpperLimitEnforced;
  }

  public OptionalProperty getOccupancyLowerLimitEnforced() {
    return occupancyLowerLimitEnforced;
  }

  public OptionalProperty getOccupancyCountAdjust() {
    return occupancyCountAdjust;
  }

  public OptionalProperty getAccompanimentTime() {
    return accompanimentTime;
  }

  public ReadableProperty getAccessEvent() {
    return accessEvent;
  }

  public ReadableProperty getAccessEventTag() {
    return accessEventTag;
  }

  public ReadableProperty getAccessEventTime() {
    return accessEventTime;
  }

  public ReadableProperty getAccessEventCredential() {
    return accessEventCredential;
  }

  public OptionalProperty getAccessEventAuthenticationFactor() {
    return accessEventAuthenticationFactor;
  }

  public ReadableProperty getAccessDoors() {
    return accessDoors;
  }

  public ReadableProperty getPriorityForWriting() {
    return priorityForWriting;
  }

  public OptionalProperty getMusterPoint() {
    return musterPoint;
  }

  public OptionalProperty getZoneTo() {
    return zoneTo;
  }

  public OptionalProperty getZoneFrom() {
    return zoneFrom;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getTransactionNotificationClass() {
    return transactionNotificationClass;
  }

  public OptionalProperty getAccessAlarmEvents() {
    return accessAlarmEvents;
  }

  public OptionalProperty getAccessTransactionEvents() {
    return accessTransactionEvents;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getEventAlgorithmInhibitRef() {
    return eventAlgorithmInhibitRef;
  }

  public OptionalProperty getEventAlgorithmInhibit() {
    return eventAlgorithmInhibit;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("AccessPoint");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (authenticationStatus)
    writeSimpleField("authenticationStatus", authenticationStatus, writeComplex(writeBuffer));

    // Simple Field (activeAuthenticationPolicy)
    writeSimpleField(
        "activeAuthenticationPolicy", activeAuthenticationPolicy, writeComplex(writeBuffer));

    // Simple Field (numberOfAuthenticationPolicies)
    writeSimpleField(
        "numberOfAuthenticationPolicies",
        numberOfAuthenticationPolicies,
        writeComplex(writeBuffer));

    // Simple Field (authenticationPolicyList)
    writeSimpleField(
        "authenticationPolicyList", authenticationPolicyList, writeComplex(writeBuffer));

    // Simple Field (authenticationPolicyNames)
    writeSimpleField(
        "authenticationPolicyNames", authenticationPolicyNames, writeComplex(writeBuffer));

    // Simple Field (authorizationMode)
    writeSimpleField("authorizationMode", authorizationMode, writeComplex(writeBuffer));

    // Simple Field (verificationTime)
    writeSimpleField("verificationTime", verificationTime, writeComplex(writeBuffer));

    // Simple Field (lockout)
    writeSimpleField("lockout", lockout, writeComplex(writeBuffer));

    // Simple Field (lockoutRelinquishTime)
    writeSimpleField("lockoutRelinquishTime", lockoutRelinquishTime, writeComplex(writeBuffer));

    // Simple Field (failedAttempts)
    writeSimpleField("failedAttempts", failedAttempts, writeComplex(writeBuffer));

    // Simple Field (failedAttemptEvents)
    writeSimpleField("failedAttemptEvents", failedAttemptEvents, writeComplex(writeBuffer));

    // Simple Field (maxFailedAttempts)
    writeSimpleField("maxFailedAttempts", maxFailedAttempts, writeComplex(writeBuffer));

    // Simple Field (failedAttemptsTime)
    writeSimpleField("failedAttemptsTime", failedAttemptsTime, writeComplex(writeBuffer));

    // Simple Field (threatLevel)
    writeSimpleField("threatLevel", threatLevel, writeComplex(writeBuffer));

    // Simple Field (occupancyUpperLimitEnforced)
    writeSimpleField(
        "occupancyUpperLimitEnforced", occupancyUpperLimitEnforced, writeComplex(writeBuffer));

    // Simple Field (occupancyLowerLimitEnforced)
    writeSimpleField(
        "occupancyLowerLimitEnforced", occupancyLowerLimitEnforced, writeComplex(writeBuffer));

    // Simple Field (occupancyCountAdjust)
    writeSimpleField("occupancyCountAdjust", occupancyCountAdjust, writeComplex(writeBuffer));

    // Simple Field (accompanimentTime)
    writeSimpleField("accompanimentTime", accompanimentTime, writeComplex(writeBuffer));

    // Simple Field (accessEvent)
    writeSimpleField("accessEvent", accessEvent, writeComplex(writeBuffer));

    // Simple Field (accessEventTag)
    writeSimpleField("accessEventTag", accessEventTag, writeComplex(writeBuffer));

    // Simple Field (accessEventTime)
    writeSimpleField("accessEventTime", accessEventTime, writeComplex(writeBuffer));

    // Simple Field (accessEventCredential)
    writeSimpleField("accessEventCredential", accessEventCredential, writeComplex(writeBuffer));

    // Simple Field (accessEventAuthenticationFactor)
    writeSimpleField(
        "accessEventAuthenticationFactor",
        accessEventAuthenticationFactor,
        writeComplex(writeBuffer));

    // Simple Field (accessDoors)
    writeSimpleField("accessDoors", accessDoors, writeComplex(writeBuffer));

    // Simple Field (priorityForWriting)
    writeSimpleField("priorityForWriting", priorityForWriting, writeComplex(writeBuffer));

    // Simple Field (musterPoint)
    writeSimpleField("musterPoint", musterPoint, writeComplex(writeBuffer));

    // Simple Field (zoneTo)
    writeSimpleField("zoneTo", zoneTo, writeComplex(writeBuffer));

    // Simple Field (zoneFrom)
    writeSimpleField("zoneFrom", zoneFrom, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (transactionNotificationClass)
    writeSimpleField(
        "transactionNotificationClass", transactionNotificationClass, writeComplex(writeBuffer));

    // Simple Field (accessAlarmEvents)
    writeSimpleField("accessAlarmEvents", accessAlarmEvents, writeComplex(writeBuffer));

    // Simple Field (accessTransactionEvents)
    writeSimpleField("accessTransactionEvents", accessTransactionEvents, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibitRef)
    writeSimpleField(
        "eventAlgorithmInhibitRef", eventAlgorithmInhibitRef, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibit)
    writeSimpleField("eventAlgorithmInhibit", eventAlgorithmInhibit, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("AccessPoint");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    AccessPoint _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (authenticationStatus)
    lengthInBits += authenticationStatus.getLengthInBits();

    // Simple field (activeAuthenticationPolicy)
    lengthInBits += activeAuthenticationPolicy.getLengthInBits();

    // Simple field (numberOfAuthenticationPolicies)
    lengthInBits += numberOfAuthenticationPolicies.getLengthInBits();

    // Simple field (authenticationPolicyList)
    lengthInBits += authenticationPolicyList.getLengthInBits();

    // Simple field (authenticationPolicyNames)
    lengthInBits += authenticationPolicyNames.getLengthInBits();

    // Simple field (authorizationMode)
    lengthInBits += authorizationMode.getLengthInBits();

    // Simple field (verificationTime)
    lengthInBits += verificationTime.getLengthInBits();

    // Simple field (lockout)
    lengthInBits += lockout.getLengthInBits();

    // Simple field (lockoutRelinquishTime)
    lengthInBits += lockoutRelinquishTime.getLengthInBits();

    // Simple field (failedAttempts)
    lengthInBits += failedAttempts.getLengthInBits();

    // Simple field (failedAttemptEvents)
    lengthInBits += failedAttemptEvents.getLengthInBits();

    // Simple field (maxFailedAttempts)
    lengthInBits += maxFailedAttempts.getLengthInBits();

    // Simple field (failedAttemptsTime)
    lengthInBits += failedAttemptsTime.getLengthInBits();

    // Simple field (threatLevel)
    lengthInBits += threatLevel.getLengthInBits();

    // Simple field (occupancyUpperLimitEnforced)
    lengthInBits += occupancyUpperLimitEnforced.getLengthInBits();

    // Simple field (occupancyLowerLimitEnforced)
    lengthInBits += occupancyLowerLimitEnforced.getLengthInBits();

    // Simple field (occupancyCountAdjust)
    lengthInBits += occupancyCountAdjust.getLengthInBits();

    // Simple field (accompanimentTime)
    lengthInBits += accompanimentTime.getLengthInBits();

    // Simple field (accessEvent)
    lengthInBits += accessEvent.getLengthInBits();

    // Simple field (accessEventTag)
    lengthInBits += accessEventTag.getLengthInBits();

    // Simple field (accessEventTime)
    lengthInBits += accessEventTime.getLengthInBits();

    // Simple field (accessEventCredential)
    lengthInBits += accessEventCredential.getLengthInBits();

    // Simple field (accessEventAuthenticationFactor)
    lengthInBits += accessEventAuthenticationFactor.getLengthInBits();

    // Simple field (accessDoors)
    lengthInBits += accessDoors.getLengthInBits();

    // Simple field (priorityForWriting)
    lengthInBits += priorityForWriting.getLengthInBits();

    // Simple field (musterPoint)
    lengthInBits += musterPoint.getLengthInBits();

    // Simple field (zoneTo)
    lengthInBits += zoneTo.getLengthInBits();

    // Simple field (zoneFrom)
    lengthInBits += zoneFrom.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (transactionNotificationClass)
    lengthInBits += transactionNotificationClass.getLengthInBits();

    // Simple field (accessAlarmEvents)
    lengthInBits += accessAlarmEvents.getLengthInBits();

    // Simple field (accessTransactionEvents)
    lengthInBits += accessTransactionEvents.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (eventAlgorithmInhibitRef)
    lengthInBits += eventAlgorithmInhibitRef.getLengthInBits();

    // Simple field (eventAlgorithmInhibit)
    lengthInBits += eventAlgorithmInhibit.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static AccessPoint staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("AccessPoint");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    ReadableProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty authenticationStatus =
        readSimpleField(
            "authenticationStatus",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetAuthenticationStatus")),
                readBuffer));

    ReadableProperty activeAuthenticationPolicy =
        readSimpleField(
            "activeAuthenticationPolicy",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty numberOfAuthenticationPolicies =
        readSimpleField(
            "numberOfAuthenticationPolicies",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty authenticationPolicyList =
        readSimpleField(
            "authenticationPolicyList",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetAuthenticationPolicy")),
                readBuffer));

    OptionalProperty authenticationPolicyNames =
        readSimpleField(
            "authenticationPolicyNames",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of CharacterString")),
                readBuffer));

    ReadableProperty authorizationMode =
        readSimpleField(
            "authorizationMode",
            readComplex(
                () ->
                    ReadableProperty.staticParse(readBuffer, (String) ("BACnetAuthorizationMode")),
                readBuffer));

    OptionalProperty verificationTime =
        readSimpleField(
            "verificationTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty lockout =
        readSimpleField(
            "lockout",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty lockoutRelinquishTime =
        readSimpleField(
            "lockoutRelinquishTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty failedAttempts =
        readSimpleField(
            "failedAttempts",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty failedAttemptEvents =
        readSimpleField(
            "failedAttemptEvents",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAccessEvent")),
                readBuffer));

    OptionalProperty maxFailedAttempts =
        readSimpleField(
            "maxFailedAttempts",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty failedAttemptsTime =
        readSimpleField(
            "failedAttemptsTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty threatLevel =
        readSimpleField(
            "threatLevel",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetAccessThreatLevel")),
                readBuffer));

    OptionalProperty occupancyUpperLimitEnforced =
        readSimpleField(
            "occupancyUpperLimitEnforced",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty occupancyLowerLimitEnforced =
        readSimpleField(
            "occupancyLowerLimitEnforced",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty occupancyCountAdjust =
        readSimpleField(
            "occupancyCountAdjust",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty accompanimentTime =
        readSimpleField(
            "accompanimentTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty accessEvent =
        readSimpleField(
            "accessEvent",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetAccessEvent")),
                readBuffer));

    ReadableProperty accessEventTag =
        readSimpleField(
            "accessEventTag",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty accessEventTime =
        readSimpleField(
            "accessEventTime",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetTimeStamp")),
                readBuffer));

    ReadableProperty accessEventCredential =
        readSimpleField(
            "accessEventCredential",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty accessEventAuthenticationFactor =
        readSimpleField(
            "accessEventAuthenticationFactor",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetAuthenticationFactor")),
                readBuffer));

    ReadableProperty accessDoors =
        readSimpleField(
            "accessDoors",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetDeviceObjectReference")),
                readBuffer));

    ReadableProperty priorityForWriting =
        readSimpleField(
            "priorityForWriting",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned(1..16)")),
                readBuffer));

    OptionalProperty musterPoint =
        readSimpleField(
            "musterPoint",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty zoneTo =
        readSimpleField(
            "zoneTo",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty zoneFrom =
        readSimpleField(
            "zoneFrom",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty transactionNotificationClass =
        readSimpleField(
            "transactionNotificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty accessAlarmEvents =
        readSimpleField(
            "accessAlarmEvents",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAccessEvent")),
                readBuffer));

    OptionalProperty accessTransactionEvents =
        readSimpleField(
            "accessTransactionEvents",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAccessEvent")),
                readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty eventAlgorithmInhibitRef =
        readSimpleField(
            "eventAlgorithmInhibitRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibit =
        readSimpleField(
            "eventAlgorithmInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("AccessPoint");
    // Create the instance
    AccessPoint _accessPoint;
    _accessPoint =
        new AccessPoint(
            objectIdentifier,
            objectName,
            objectType,
            description,
            statusFlags,
            eventState,
            reliability,
            outOfService,
            authenticationStatus,
            activeAuthenticationPolicy,
            numberOfAuthenticationPolicies,
            authenticationPolicyList,
            authenticationPolicyNames,
            authorizationMode,
            verificationTime,
            lockout,
            lockoutRelinquishTime,
            failedAttempts,
            failedAttemptEvents,
            maxFailedAttempts,
            failedAttemptsTime,
            threatLevel,
            occupancyUpperLimitEnforced,
            occupancyLowerLimitEnforced,
            occupancyCountAdjust,
            accompanimentTime,
            accessEvent,
            accessEventTag,
            accessEventTime,
            accessEventCredential,
            accessEventAuthenticationFactor,
            accessDoors,
            priorityForWriting,
            musterPoint,
            zoneTo,
            zoneFrom,
            notificationClass,
            transactionNotificationClass,
            accessAlarmEvents,
            accessTransactionEvents,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventDetectionEnable,
            eventAlgorithmInhibitRef,
            eventAlgorithmInhibit,
            reliabilityEvaluationInhibit,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _accessPoint;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof AccessPoint)) {
      return false;
    }
    AccessPoint that = (AccessPoint) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getStatusFlags() == that.getStatusFlags())
        && (getEventState() == that.getEventState())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getAuthenticationStatus() == that.getAuthenticationStatus())
        && (getActiveAuthenticationPolicy() == that.getActiveAuthenticationPolicy())
        && (getNumberOfAuthenticationPolicies() == that.getNumberOfAuthenticationPolicies())
        && (getAuthenticationPolicyList() == that.getAuthenticationPolicyList())
        && (getAuthenticationPolicyNames() == that.getAuthenticationPolicyNames())
        && (getAuthorizationMode() == that.getAuthorizationMode())
        && (getVerificationTime() == that.getVerificationTime())
        && (getLockout() == that.getLockout())
        && (getLockoutRelinquishTime() == that.getLockoutRelinquishTime())
        && (getFailedAttempts() == that.getFailedAttempts())
        && (getFailedAttemptEvents() == that.getFailedAttemptEvents())
        && (getMaxFailedAttempts() == that.getMaxFailedAttempts())
        && (getFailedAttemptsTime() == that.getFailedAttemptsTime())
        && (getThreatLevel() == that.getThreatLevel())
        && (getOccupancyUpperLimitEnforced() == that.getOccupancyUpperLimitEnforced())
        && (getOccupancyLowerLimitEnforced() == that.getOccupancyLowerLimitEnforced())
        && (getOccupancyCountAdjust() == that.getOccupancyCountAdjust())
        && (getAccompanimentTime() == that.getAccompanimentTime())
        && (getAccessEvent() == that.getAccessEvent())
        && (getAccessEventTag() == that.getAccessEventTag())
        && (getAccessEventTime() == that.getAccessEventTime())
        && (getAccessEventCredential() == that.getAccessEventCredential())
        && (getAccessEventAuthenticationFactor() == that.getAccessEventAuthenticationFactor())
        && (getAccessDoors() == that.getAccessDoors())
        && (getPriorityForWriting() == that.getPriorityForWriting())
        && (getMusterPoint() == that.getMusterPoint())
        && (getZoneTo() == that.getZoneTo())
        && (getZoneFrom() == that.getZoneFrom())
        && (getNotificationClass() == that.getNotificationClass())
        && (getTransactionNotificationClass() == that.getTransactionNotificationClass())
        && (getAccessAlarmEvents() == that.getAccessAlarmEvents())
        && (getAccessTransactionEvents() == that.getAccessTransactionEvents())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getEventAlgorithmInhibitRef() == that.getEventAlgorithmInhibitRef())
        && (getEventAlgorithmInhibit() == that.getEventAlgorithmInhibit())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getStatusFlags(),
        getEventState(),
        getReliability(),
        getOutOfService(),
        getAuthenticationStatus(),
        getActiveAuthenticationPolicy(),
        getNumberOfAuthenticationPolicies(),
        getAuthenticationPolicyList(),
        getAuthenticationPolicyNames(),
        getAuthorizationMode(),
        getVerificationTime(),
        getLockout(),
        getLockoutRelinquishTime(),
        getFailedAttempts(),
        getFailedAttemptEvents(),
        getMaxFailedAttempts(),
        getFailedAttemptsTime(),
        getThreatLevel(),
        getOccupancyUpperLimitEnforced(),
        getOccupancyLowerLimitEnforced(),
        getOccupancyCountAdjust(),
        getAccompanimentTime(),
        getAccessEvent(),
        getAccessEventTag(),
        getAccessEventTime(),
        getAccessEventCredential(),
        getAccessEventAuthenticationFactor(),
        getAccessDoors(),
        getPriorityForWriting(),
        getMusterPoint(),
        getZoneTo(),
        getZoneFrom(),
        getNotificationClass(),
        getTransactionNotificationClass(),
        getAccessAlarmEvents(),
        getAccessTransactionEvents(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventDetectionEnable(),
        getEventAlgorithmInhibitRef(),
        getEventAlgorithmInhibit(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
