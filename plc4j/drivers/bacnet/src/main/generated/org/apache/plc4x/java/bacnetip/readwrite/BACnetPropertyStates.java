/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public abstract class BACnetPropertyStates implements Message {

  // Abstract accessors for discriminator values.

  // Properties.
  protected final BACnetTagHeader peekedTagHeader;

  public BACnetPropertyStates(BACnetTagHeader peekedTagHeader) {
    super();
    this.peekedTagHeader = peekedTagHeader;
  }

  public BACnetTagHeader getPeekedTagHeader() {
    return peekedTagHeader;
  }

  public short getPeekedTagNumber() {
    return (short) (getPeekedTagHeader().getActualTagNumber());
  }

  protected abstract void serializeBACnetPropertyStatesChild(WriteBuffer writeBuffer)
      throws SerializationException;

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("BACnetPropertyStates");

    // Virtual field (doesn't actually serialize anything, just makes the value available)
    short peekedTagNumber = getPeekedTagNumber();
    writeBuffer.writeVirtual("peekedTagNumber", peekedTagNumber);

    // Switch field (Serialize the sub-type)
    serializeBACnetPropertyStatesChild(writeBuffer);

    writeBuffer.popContext("BACnetPropertyStates");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    BACnetPropertyStates _value = this;

    // A virtual field doesn't have any in- or output.

    // Length of sub-type elements will be added by sub-type...

    return lengthInBits;
  }

  public static BACnetPropertyStates staticParse(ReadBuffer readBuffer, Object... args)
      throws ParseException {
    PositionAware positionAware = readBuffer;
    return staticParse(readBuffer);
  }

  public static BACnetPropertyStates staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("BACnetPropertyStates");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    BACnetTagHeader peekedTagHeader =
        readPeekField(
            "peekedTagHeader",
            new DataReaderComplexDefault<>(
                () -> BACnetTagHeader.staticParse(readBuffer), readBuffer));
    short peekedTagNumber =
        readVirtualField("peekedTagNumber", short.class, peekedTagHeader.getActualTagNumber());

    // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
    BACnetPropertyStatesBuilder builder = null;
    if (EvaluationHelper.equals(peekedTagNumber, (short) 0)) {
      builder = BACnetPropertyStatesBoolean.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 1)) {
      builder = BACnetPropertyStatesBinaryValue.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 2)) {
      builder = BACnetPropertyStatesEventType.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 3)) {
      builder = BACnetPropertyStatesPolarity.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 4)) {
      builder = BACnetPropertyStatesProgramChange.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 5)) {
      builder = BACnetPropertyStatesProgramChange.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 6)) {
      builder = BACnetPropertyStatesReasonForHalt.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 7)) {
      builder = BACnetPropertyStatesReliability.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 8)) {
      builder = BACnetPropertyStatesState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 9)) {
      builder = BACnetPropertyStatesSystemStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 10)) {
      builder = BACnetPropertyStatesUnits.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 11)) {
      builder = BACnetPropertyStatesExtendedValue.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 12)) {
      builder = BACnetPropertyStatesLifeSafetyMode.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 13)) {
      builder = BACnetPropertyStatesLifeSafetyState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 14)) {
      builder = BACnetPropertyStatesRestartReason.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 15)) {
      builder = BACnetPropertyStatesDoorAlarmState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 16)) {
      builder = BACnetPropertyStatesAction.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 17)) {
      builder =
          BACnetPropertyStatesDoorSecuredStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 18)) {
      builder = BACnetPropertyStatesDoorStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 19)) {
      builder = BACnetPropertyStatesDoorValue.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 20)) {
      builder =
          BACnetPropertyStatesFileAccessMethod.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 21)) {
      builder = BACnetPropertyStatesLockStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 22)) {
      builder =
          BACnetPropertyStatesLifeSafetyOperations.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 23)) {
      builder = BACnetPropertyStatesMaintenance.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 24)) {
      builder = BACnetPropertyStatesNodeType.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 25)) {
      builder = BACnetPropertyStatesNotifyType.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 26)) {
      builder = BACnetPropertyStatesSecurityLevel.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 27)) {
      builder = BACnetPropertyStatesShedState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 28)) {
      builder = BACnetPropertyStatesSilencedState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 30)) {
      builder = BACnetPropertyStatesAccessEvent.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 31)) {
      builder =
          BACnetPropertyStatesZoneOccupanyState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 32)) {
      builder =
          BACnetPropertyStatesAccessCredentialDisableReason.staticParseBuilder(
              readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 33)) {
      builder =
          BACnetPropertyStatesAccessCredentialDisable.staticParseBuilder(
              readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 34)) {
      builder =
          BACnetPropertyStatesAuthenticationStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 36)) {
      builder = BACnetPropertyStatesBackupState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 37)) {
      builder = BACnetPropertyStatesWriteStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 38)) {
      builder =
          BACnetPropertyStatesLightningInProgress.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 39)) {
      builder =
          BACnetPropertyStatesLightningOperation.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 40)) {
      builder =
          BACnetPropertyStatesLightningTransition.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 41)) {
      builder = BACnetPropertyStatesIntegerValue.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 42)) {
      builder =
          BACnetPropertyStatesBinaryLightningValue.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 43)) {
      builder = BACnetPropertyStatesTimerState.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 44)) {
      builder = BACnetPropertyStatesTimerTransition.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 45)) {
      builder = BACnetPropertyStatesBacnetIpMode.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 46)) {
      builder =
          BACnetPropertyStatesNetworkPortCommand.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 47)) {
      builder = BACnetPropertyStatesNetworkType.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 48)) {
      builder =
          BACnetPropertyStatesNetworkNumberQuality.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 49)) {
      builder =
          BACnetPropertyStatesEscalatorOperationDirection.staticParseBuilder(
              readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 50)) {
      builder = BACnetPropertyStatesEscalatorFault.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 51)) {
      builder = BACnetPropertyStatesEscalatorMode.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 52)) {
      builder =
          BACnetPropertyStatesLiftCarDirection.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 53)) {
      builder =
          BACnetPropertyStatesLiftCarDoorCommand.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 54)) {
      builder =
          BACnetPropertyStatesLiftCarDriveStatus.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 55)) {
      builder = BACnetPropertyStatesLiftCarMode.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 56)) {
      builder = BACnetPropertyStatesLiftGroupMode.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 57)) {
      builder = BACnetPropertyStatesLiftFault.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 58)) {
      builder = BACnetPropertyStatesProtocolLevel.staticParseBuilder(readBuffer, peekedTagNumber);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 63)) {
      builder = BACnetPropertyStatesExtendedValue.staticParseBuilder(readBuffer, peekedTagNumber);
    } else {
      builder = BACnetPropertyStateActionUnknown.staticParseBuilder(readBuffer, peekedTagNumber);
    }
    if (builder == null) {
      throw new ParseException(
          "Unsupported case for discriminated type"
              + " parameters ["
              + "peekedTagNumber="
              + peekedTagNumber
              + "]");
    }

    readBuffer.closeContext("BACnetPropertyStates");
    // Create the instance
    BACnetPropertyStates _bACnetPropertyStates = builder.build(peekedTagHeader);
    return _bACnetPropertyStates;
  }

  public static interface BACnetPropertyStatesBuilder {
    BACnetPropertyStates build(BACnetTagHeader peekedTagHeader);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof BACnetPropertyStates)) {
      return false;
    }
    BACnetPropertyStates that = (BACnetPropertyStates) o;
    return (getPeekedTagHeader() == that.getPeekedTagHeader()) && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(getPeekedTagHeader());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
