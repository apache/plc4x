/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class BACnetAuthenticationFactorFormat implements Message {

  // Properties.
  protected final BACnetAuthenticationFactorTypeTagged formatType;
  protected final BACnetVendorIdTagged vendorId;
  protected final BACnetContextTagUnsignedInteger vendorFormat;

  public BACnetAuthenticationFactorFormat(
      BACnetAuthenticationFactorTypeTagged formatType,
      BACnetVendorIdTagged vendorId,
      BACnetContextTagUnsignedInteger vendorFormat) {
    super();
    this.formatType = formatType;
    this.vendorId = vendorId;
    this.vendorFormat = vendorFormat;
  }

  public BACnetAuthenticationFactorTypeTagged getFormatType() {
    return formatType;
  }

  public BACnetVendorIdTagged getVendorId() {
    return vendorId;
  }

  public BACnetContextTagUnsignedInteger getVendorFormat() {
    return vendorFormat;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("BACnetAuthenticationFactorFormat");

    // Simple Field (formatType)
    writeSimpleField("formatType", formatType, new DataWriterComplexDefault<>(writeBuffer));

    // Optional Field (vendorId) (Can be skipped, if the value is null)
    writeOptionalField("vendorId", vendorId, new DataWriterComplexDefault<>(writeBuffer));

    // Optional Field (vendorFormat) (Can be skipped, if the value is null)
    writeOptionalField("vendorFormat", vendorFormat, new DataWriterComplexDefault<>(writeBuffer));

    writeBuffer.popContext("BACnetAuthenticationFactorFormat");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    BACnetAuthenticationFactorFormat _value = this;

    // Simple field (formatType)
    lengthInBits += formatType.getLengthInBits();

    // Optional Field (vendorId)
    if (vendorId != null) {
      lengthInBits += vendorId.getLengthInBits();
    }

    // Optional Field (vendorFormat)
    if (vendorFormat != null) {
      lengthInBits += vendorFormat.getLengthInBits();
    }

    return lengthInBits;
  }

  public static BACnetAuthenticationFactorFormat staticParse(ReadBuffer readBuffer, Object... args)
      throws ParseException {
    PositionAware positionAware = readBuffer;
    return staticParse(readBuffer);
  }

  public static BACnetAuthenticationFactorFormat staticParse(ReadBuffer readBuffer)
      throws ParseException {
    readBuffer.pullContext("BACnetAuthenticationFactorFormat");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    BACnetAuthenticationFactorTypeTagged formatType =
        readSimpleField(
            "formatType",
            new DataReaderComplexDefault<>(
                () ->
                    BACnetAuthenticationFactorTypeTagged.staticParse(
                        readBuffer, (short) (0), (TagClass) (TagClass.CONTEXT_SPECIFIC_TAGS)),
                readBuffer));

    BACnetVendorIdTagged vendorId =
        readOptionalField(
            "vendorId",
            new DataReaderComplexDefault<>(
                () ->
                    BACnetVendorIdTagged.staticParse(
                        readBuffer, (short) (1), (TagClass) (TagClass.CONTEXT_SPECIFIC_TAGS)),
                readBuffer));

    BACnetContextTagUnsignedInteger vendorFormat =
        readOptionalField(
            "vendorFormat",
            new DataReaderComplexDefault<>(
                () ->
                    (BACnetContextTagUnsignedInteger)
                        BACnetContextTag.staticParse(
                            readBuffer,
                            (short) (2),
                            (BACnetDataType) (BACnetDataType.UNSIGNED_INTEGER)),
                readBuffer));

    readBuffer.closeContext("BACnetAuthenticationFactorFormat");
    // Create the instance
    BACnetAuthenticationFactorFormat _bACnetAuthenticationFactorFormat;
    _bACnetAuthenticationFactorFormat =
        new BACnetAuthenticationFactorFormat(formatType, vendorId, vendorFormat);
    return _bACnetAuthenticationFactorFormat;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof BACnetAuthenticationFactorFormat)) {
      return false;
    }
    BACnetAuthenticationFactorFormat that = (BACnetAuthenticationFactorFormat) o;
    return (getFormatType() == that.getFormatType())
        && (getVendorId() == that.getVendorId())
        && (getVendorFormat() == that.getVendorFormat())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(getFormatType(), getVendorId(), getVendorFormat());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
