/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class File implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final ReadableProperty fileType;
  protected final ReadableProperty fileSize;
  protected final ReadableProperty modificationDate;
  protected final WritableProperty archive;
  protected final ReadableProperty readOnly;
  protected final ReadableProperty fileAccessMethod;
  protected final OptionalProperty recordCount;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public File(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      ReadableProperty fileType,
      ReadableProperty fileSize,
      ReadableProperty modificationDate,
      WritableProperty archive,
      ReadableProperty readOnly,
      ReadableProperty fileAccessMethod,
      OptionalProperty recordCount,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.fileType = fileType;
    this.fileSize = fileSize;
    this.modificationDate = modificationDate;
    this.archive = archive;
    this.readOnly = readOnly;
    this.fileAccessMethod = fileAccessMethod;
    this.recordCount = recordCount;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getFileType() {
    return fileType;
  }

  public ReadableProperty getFileSize() {
    return fileSize;
  }

  public ReadableProperty getModificationDate() {
    return modificationDate;
  }

  public WritableProperty getArchive() {
    return archive;
  }

  public ReadableProperty getReadOnly() {
    return readOnly;
  }

  public ReadableProperty getFileAccessMethod() {
    return fileAccessMethod;
  }

  public OptionalProperty getRecordCount() {
    return recordCount;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("File");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (fileType)
    writeSimpleField("fileType", fileType, writeComplex(writeBuffer));

    // Simple Field (fileSize)
    writeSimpleField("fileSize", fileSize, writeComplex(writeBuffer));

    // Simple Field (modificationDate)
    writeSimpleField("modificationDate", modificationDate, writeComplex(writeBuffer));

    // Simple Field (archive)
    writeSimpleField("archive", archive, writeComplex(writeBuffer));

    // Simple Field (readOnly)
    writeSimpleField("readOnly", readOnly, writeComplex(writeBuffer));

    // Simple Field (fileAccessMethod)
    writeSimpleField("fileAccessMethod", fileAccessMethod, writeComplex(writeBuffer));

    // Simple Field (recordCount)
    writeSimpleField("recordCount", recordCount, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("File");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    File _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (fileType)
    lengthInBits += fileType.getLengthInBits();

    // Simple field (fileSize)
    lengthInBits += fileSize.getLengthInBits();

    // Simple field (modificationDate)
    lengthInBits += modificationDate.getLengthInBits();

    // Simple field (archive)
    lengthInBits += archive.getLengthInBits();

    // Simple field (readOnly)
    lengthInBits += readOnly.getLengthInBits();

    // Simple field (fileAccessMethod)
    lengthInBits += fileAccessMethod.getLengthInBits();

    // Simple field (recordCount)
    lengthInBits += recordCount.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static File staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("File");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty fileType =
        readSimpleField(
            "fileType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty fileSize =
        readSimpleField(
            "fileSize",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty modificationDate =
        readSimpleField(
            "modificationDate",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    WritableProperty archive =
        readSimpleField(
            "archive",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty readOnly =
        readSimpleField(
            "readOnly",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty fileAccessMethod =
        readSimpleField(
            "fileAccessMethod",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetFileAccessMethod")),
                readBuffer));

    OptionalProperty recordCount =
        readSimpleField(
            "recordCount",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("File");
    // Create the instance
    File _file;
    _file =
        new File(
            objectIdentifier,
            objectName,
            objectType,
            description,
            fileType,
            fileSize,
            modificationDate,
            archive,
            readOnly,
            fileAccessMethod,
            recordCount,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _file;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof File)) {
      return false;
    }
    File that = (File) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getFileType() == that.getFileType())
        && (getFileSize() == that.getFileSize())
        && (getModificationDate() == that.getModificationDate())
        && (getArchive() == that.getArchive())
        && (getReadOnly() == that.getReadOnly())
        && (getFileAccessMethod() == that.getFileAccessMethod())
        && (getRecordCount() == that.getRecordCount())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getFileType(),
        getFileSize(),
        getModificationDate(),
        getArchive(),
        getReadOnly(),
        getFileAccessMethod(),
        getRecordCount(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
