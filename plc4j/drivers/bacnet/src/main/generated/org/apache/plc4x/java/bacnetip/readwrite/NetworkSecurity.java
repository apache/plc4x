/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class NetworkSecurity implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final WritableProperty baseDeviceSecurityPolicy;
  protected final WritableProperty networkAccessSecurityPolicies;
  protected final WritableProperty securityTimeWindow;
  protected final WritableProperty packetReorderTime;
  protected final ReadableProperty distributionKeyRevision;
  protected final ReadableProperty keySets;
  protected final WritableProperty lastKeyServer;
  protected final WritableProperty securityPDUTimeout;
  protected final ReadableProperty updateKeySetTimeout;
  protected final ReadableProperty supportedSecurityAlgorithms;
  protected final WritableProperty doNotHide;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public NetworkSecurity(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      WritableProperty baseDeviceSecurityPolicy,
      WritableProperty networkAccessSecurityPolicies,
      WritableProperty securityTimeWindow,
      WritableProperty packetReorderTime,
      ReadableProperty distributionKeyRevision,
      ReadableProperty keySets,
      WritableProperty lastKeyServer,
      WritableProperty securityPDUTimeout,
      ReadableProperty updateKeySetTimeout,
      ReadableProperty supportedSecurityAlgorithms,
      WritableProperty doNotHide,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.baseDeviceSecurityPolicy = baseDeviceSecurityPolicy;
    this.networkAccessSecurityPolicies = networkAccessSecurityPolicies;
    this.securityTimeWindow = securityTimeWindow;
    this.packetReorderTime = packetReorderTime;
    this.distributionKeyRevision = distributionKeyRevision;
    this.keySets = keySets;
    this.lastKeyServer = lastKeyServer;
    this.securityPDUTimeout = securityPDUTimeout;
    this.updateKeySetTimeout = updateKeySetTimeout;
    this.supportedSecurityAlgorithms = supportedSecurityAlgorithms;
    this.doNotHide = doNotHide;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public WritableProperty getBaseDeviceSecurityPolicy() {
    return baseDeviceSecurityPolicy;
  }

  public WritableProperty getNetworkAccessSecurityPolicies() {
    return networkAccessSecurityPolicies;
  }

  public WritableProperty getSecurityTimeWindow() {
    return securityTimeWindow;
  }

  public WritableProperty getPacketReorderTime() {
    return packetReorderTime;
  }

  public ReadableProperty getDistributionKeyRevision() {
    return distributionKeyRevision;
  }

  public ReadableProperty getKeySets() {
    return keySets;
  }

  public WritableProperty getLastKeyServer() {
    return lastKeyServer;
  }

  public WritableProperty getSecurityPDUTimeout() {
    return securityPDUTimeout;
  }

  public ReadableProperty getUpdateKeySetTimeout() {
    return updateKeySetTimeout;
  }

  public ReadableProperty getSupportedSecurityAlgorithms() {
    return supportedSecurityAlgorithms;
  }

  public WritableProperty getDoNotHide() {
    return doNotHide;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("NetworkSecurity");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (baseDeviceSecurityPolicy)
    writeSimpleField(
        "baseDeviceSecurityPolicy", baseDeviceSecurityPolicy, writeComplex(writeBuffer));

    // Simple Field (networkAccessSecurityPolicies)
    writeSimpleField(
        "networkAccessSecurityPolicies", networkAccessSecurityPolicies, writeComplex(writeBuffer));

    // Simple Field (securityTimeWindow)
    writeSimpleField("securityTimeWindow", securityTimeWindow, writeComplex(writeBuffer));

    // Simple Field (packetReorderTime)
    writeSimpleField("packetReorderTime", packetReorderTime, writeComplex(writeBuffer));

    // Simple Field (distributionKeyRevision)
    writeSimpleField("distributionKeyRevision", distributionKeyRevision, writeComplex(writeBuffer));

    // Simple Field (keySets)
    writeSimpleField("keySets", keySets, writeComplex(writeBuffer));

    // Simple Field (lastKeyServer)
    writeSimpleField("lastKeyServer", lastKeyServer, writeComplex(writeBuffer));

    // Simple Field (securityPDUTimeout)
    writeSimpleField("securityPDUTimeout", securityPDUTimeout, writeComplex(writeBuffer));

    // Simple Field (updateKeySetTimeout)
    writeSimpleField("updateKeySetTimeout", updateKeySetTimeout, writeComplex(writeBuffer));

    // Simple Field (supportedSecurityAlgorithms)
    writeSimpleField(
        "supportedSecurityAlgorithms", supportedSecurityAlgorithms, writeComplex(writeBuffer));

    // Simple Field (doNotHide)
    writeSimpleField("doNotHide", doNotHide, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("NetworkSecurity");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    NetworkSecurity _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (baseDeviceSecurityPolicy)
    lengthInBits += baseDeviceSecurityPolicy.getLengthInBits();

    // Simple field (networkAccessSecurityPolicies)
    lengthInBits += networkAccessSecurityPolicies.getLengthInBits();

    // Simple field (securityTimeWindow)
    lengthInBits += securityTimeWindow.getLengthInBits();

    // Simple field (packetReorderTime)
    lengthInBits += packetReorderTime.getLengthInBits();

    // Simple field (distributionKeyRevision)
    lengthInBits += distributionKeyRevision.getLengthInBits();

    // Simple field (keySets)
    lengthInBits += keySets.getLengthInBits();

    // Simple field (lastKeyServer)
    lengthInBits += lastKeyServer.getLengthInBits();

    // Simple field (securityPDUTimeout)
    lengthInBits += securityPDUTimeout.getLengthInBits();

    // Simple field (updateKeySetTimeout)
    lengthInBits += updateKeySetTimeout.getLengthInBits();

    // Simple field (supportedSecurityAlgorithms)
    lengthInBits += supportedSecurityAlgorithms.getLengthInBits();

    // Simple field (doNotHide)
    lengthInBits += doNotHide.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static NetworkSecurity staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("NetworkSecurity");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    WritableProperty baseDeviceSecurityPolicy =
        readSimpleField(
            "baseDeviceSecurityPolicy",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("BACnetSecurityLevel")),
                readBuffer));

    WritableProperty networkAccessSecurityPolicies =
        readSimpleField(
            "networkAccessSecurityPolicies",
            readComplex(
                () ->
                    WritableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNetworkSecurityPolicy")),
                readBuffer));

    WritableProperty securityTimeWindow =
        readSimpleField(
            "securityTimeWindow",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    WritableProperty packetReorderTime =
        readSimpleField(
            "packetReorderTime",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty distributionKeyRevision =
        readSimpleField(
            "distributionKeyRevision",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    ReadableProperty keySets =
        readSimpleField(
            "keySets",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[2] of BACnetSecurityKeySet")),
                readBuffer));

    WritableProperty lastKeyServer =
        readSimpleField(
            "lastKeyServer",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("BACnetAddressBinding")),
                readBuffer));

    WritableProperty securityPDUTimeout =
        readSimpleField(
            "securityPDUTimeout",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    ReadableProperty updateKeySetTimeout =
        readSimpleField(
            "updateKeySetTimeout",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    ReadableProperty supportedSecurityAlgorithms =
        readSimpleField(
            "supportedSecurityAlgorithms",
            readComplex(
                () ->
                    ReadableProperty.staticParse(readBuffer, (String) ("BACnetLIST of Unsigned8")),
                readBuffer));

    WritableProperty doNotHide =
        readSimpleField(
            "doNotHide",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("NetworkSecurity");
    // Create the instance
    NetworkSecurity _networkSecurity;
    _networkSecurity =
        new NetworkSecurity(
            objectIdentifier,
            objectName,
            objectType,
            description,
            baseDeviceSecurityPolicy,
            networkAccessSecurityPolicies,
            securityTimeWindow,
            packetReorderTime,
            distributionKeyRevision,
            keySets,
            lastKeyServer,
            securityPDUTimeout,
            updateKeySetTimeout,
            supportedSecurityAlgorithms,
            doNotHide,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _networkSecurity;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof NetworkSecurity)) {
      return false;
    }
    NetworkSecurity that = (NetworkSecurity) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getBaseDeviceSecurityPolicy() == that.getBaseDeviceSecurityPolicy())
        && (getNetworkAccessSecurityPolicies() == that.getNetworkAccessSecurityPolicies())
        && (getSecurityTimeWindow() == that.getSecurityTimeWindow())
        && (getPacketReorderTime() == that.getPacketReorderTime())
        && (getDistributionKeyRevision() == that.getDistributionKeyRevision())
        && (getKeySets() == that.getKeySets())
        && (getLastKeyServer() == that.getLastKeyServer())
        && (getSecurityPDUTimeout() == that.getSecurityPDUTimeout())
        && (getUpdateKeySetTimeout() == that.getUpdateKeySetTimeout())
        && (getSupportedSecurityAlgorithms() == that.getSupportedSecurityAlgorithms())
        && (getDoNotHide() == that.getDoNotHide())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getBaseDeviceSecurityPolicy(),
        getNetworkAccessSecurityPolicies(),
        getSecurityTimeWindow(),
        getPacketReorderTime(),
        getDistributionKeyRevision(),
        getKeySets(),
        getLastKeyServer(),
        getSecurityPDUTimeout(),
        getUpdateKeySetTimeout(),
        getSupportedSecurityAlgorithms(),
        getDoNotHide(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
