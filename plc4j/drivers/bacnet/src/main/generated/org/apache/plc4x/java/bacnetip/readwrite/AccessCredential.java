/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class AccessCredential implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final WritableProperty globalIdentifier;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty reliability;
  protected final ReadableProperty credentialStatus;
  protected final ReadableProperty reasonForDisable;
  protected final ReadableProperty authenticationFactors;
  protected final ReadableProperty activationTime;
  protected final ReadableProperty expirationTime;
  protected final ReadableProperty credentialDisable;
  protected final OptionalProperty daysRemaining;
  protected final OptionalProperty usesRemaining;
  protected final OptionalProperty absenteeLimit;
  protected final OptionalProperty belongsTo;
  protected final ReadableProperty assignedAccessRights;
  protected final OptionalProperty lastAccessPoint;
  protected final OptionalProperty lastAccessEvent;
  protected final OptionalProperty lastUseTime;
  protected final OptionalProperty traceFlag;
  protected final OptionalProperty threatAuthority;
  protected final OptionalProperty extendedTimeEnable;
  protected final OptionalProperty authorizationExemptions;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public AccessCredential(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      WritableProperty globalIdentifier,
      ReadableProperty statusFlags,
      ReadableProperty reliability,
      ReadableProperty credentialStatus,
      ReadableProperty reasonForDisable,
      ReadableProperty authenticationFactors,
      ReadableProperty activationTime,
      ReadableProperty expirationTime,
      ReadableProperty credentialDisable,
      OptionalProperty daysRemaining,
      OptionalProperty usesRemaining,
      OptionalProperty absenteeLimit,
      OptionalProperty belongsTo,
      ReadableProperty assignedAccessRights,
      OptionalProperty lastAccessPoint,
      OptionalProperty lastAccessEvent,
      OptionalProperty lastUseTime,
      OptionalProperty traceFlag,
      OptionalProperty threatAuthority,
      OptionalProperty extendedTimeEnable,
      OptionalProperty authorizationExemptions,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.globalIdentifier = globalIdentifier;
    this.statusFlags = statusFlags;
    this.reliability = reliability;
    this.credentialStatus = credentialStatus;
    this.reasonForDisable = reasonForDisable;
    this.authenticationFactors = authenticationFactors;
    this.activationTime = activationTime;
    this.expirationTime = expirationTime;
    this.credentialDisable = credentialDisable;
    this.daysRemaining = daysRemaining;
    this.usesRemaining = usesRemaining;
    this.absenteeLimit = absenteeLimit;
    this.belongsTo = belongsTo;
    this.assignedAccessRights = assignedAccessRights;
    this.lastAccessPoint = lastAccessPoint;
    this.lastAccessEvent = lastAccessEvent;
    this.lastUseTime = lastUseTime;
    this.traceFlag = traceFlag;
    this.threatAuthority = threatAuthority;
    this.extendedTimeEnable = extendedTimeEnable;
    this.authorizationExemptions = authorizationExemptions;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public WritableProperty getGlobalIdentifier() {
    return globalIdentifier;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getCredentialStatus() {
    return credentialStatus;
  }

  public ReadableProperty getReasonForDisable() {
    return reasonForDisable;
  }

  public ReadableProperty getAuthenticationFactors() {
    return authenticationFactors;
  }

  public ReadableProperty getActivationTime() {
    return activationTime;
  }

  public ReadableProperty getExpirationTime() {
    return expirationTime;
  }

  public ReadableProperty getCredentialDisable() {
    return credentialDisable;
  }

  public OptionalProperty getDaysRemaining() {
    return daysRemaining;
  }

  public OptionalProperty getUsesRemaining() {
    return usesRemaining;
  }

  public OptionalProperty getAbsenteeLimit() {
    return absenteeLimit;
  }

  public OptionalProperty getBelongsTo() {
    return belongsTo;
  }

  public ReadableProperty getAssignedAccessRights() {
    return assignedAccessRights;
  }

  public OptionalProperty getLastAccessPoint() {
    return lastAccessPoint;
  }

  public OptionalProperty getLastAccessEvent() {
    return lastAccessEvent;
  }

  public OptionalProperty getLastUseTime() {
    return lastUseTime;
  }

  public OptionalProperty getTraceFlag() {
    return traceFlag;
  }

  public OptionalProperty getThreatAuthority() {
    return threatAuthority;
  }

  public OptionalProperty getExtendedTimeEnable() {
    return extendedTimeEnable;
  }

  public OptionalProperty getAuthorizationExemptions() {
    return authorizationExemptions;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("AccessCredential");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (globalIdentifier)
    writeSimpleField("globalIdentifier", globalIdentifier, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (credentialStatus)
    writeSimpleField("credentialStatus", credentialStatus, writeComplex(writeBuffer));

    // Simple Field (reasonForDisable)
    writeSimpleField("reasonForDisable", reasonForDisable, writeComplex(writeBuffer));

    // Simple Field (authenticationFactors)
    writeSimpleField("authenticationFactors", authenticationFactors, writeComplex(writeBuffer));

    // Simple Field (activationTime)
    writeSimpleField("activationTime", activationTime, writeComplex(writeBuffer));

    // Simple Field (expirationTime)
    writeSimpleField("expirationTime", expirationTime, writeComplex(writeBuffer));

    // Simple Field (credentialDisable)
    writeSimpleField("credentialDisable", credentialDisable, writeComplex(writeBuffer));

    // Simple Field (daysRemaining)
    writeSimpleField("daysRemaining", daysRemaining, writeComplex(writeBuffer));

    // Simple Field (usesRemaining)
    writeSimpleField("usesRemaining", usesRemaining, writeComplex(writeBuffer));

    // Simple Field (absenteeLimit)
    writeSimpleField("absenteeLimit", absenteeLimit, writeComplex(writeBuffer));

    // Simple Field (belongsTo)
    writeSimpleField("belongsTo", belongsTo, writeComplex(writeBuffer));

    // Simple Field (assignedAccessRights)
    writeSimpleField("assignedAccessRights", assignedAccessRights, writeComplex(writeBuffer));

    // Simple Field (lastAccessPoint)
    writeSimpleField("lastAccessPoint", lastAccessPoint, writeComplex(writeBuffer));

    // Simple Field (lastAccessEvent)
    writeSimpleField("lastAccessEvent", lastAccessEvent, writeComplex(writeBuffer));

    // Simple Field (lastUseTime)
    writeSimpleField("lastUseTime", lastUseTime, writeComplex(writeBuffer));

    // Simple Field (traceFlag)
    writeSimpleField("traceFlag", traceFlag, writeComplex(writeBuffer));

    // Simple Field (threatAuthority)
    writeSimpleField("threatAuthority", threatAuthority, writeComplex(writeBuffer));

    // Simple Field (extendedTimeEnable)
    writeSimpleField("extendedTimeEnable", extendedTimeEnable, writeComplex(writeBuffer));

    // Simple Field (authorizationExemptions)
    writeSimpleField("authorizationExemptions", authorizationExemptions, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("AccessCredential");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    AccessCredential _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (globalIdentifier)
    lengthInBits += globalIdentifier.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (credentialStatus)
    lengthInBits += credentialStatus.getLengthInBits();

    // Simple field (reasonForDisable)
    lengthInBits += reasonForDisable.getLengthInBits();

    // Simple field (authenticationFactors)
    lengthInBits += authenticationFactors.getLengthInBits();

    // Simple field (activationTime)
    lengthInBits += activationTime.getLengthInBits();

    // Simple field (expirationTime)
    lengthInBits += expirationTime.getLengthInBits();

    // Simple field (credentialDisable)
    lengthInBits += credentialDisable.getLengthInBits();

    // Simple field (daysRemaining)
    lengthInBits += daysRemaining.getLengthInBits();

    // Simple field (usesRemaining)
    lengthInBits += usesRemaining.getLengthInBits();

    // Simple field (absenteeLimit)
    lengthInBits += absenteeLimit.getLengthInBits();

    // Simple field (belongsTo)
    lengthInBits += belongsTo.getLengthInBits();

    // Simple field (assignedAccessRights)
    lengthInBits += assignedAccessRights.getLengthInBits();

    // Simple field (lastAccessPoint)
    lengthInBits += lastAccessPoint.getLengthInBits();

    // Simple field (lastAccessEvent)
    lengthInBits += lastAccessEvent.getLengthInBits();

    // Simple field (lastUseTime)
    lengthInBits += lastUseTime.getLengthInBits();

    // Simple field (traceFlag)
    lengthInBits += traceFlag.getLengthInBits();

    // Simple field (threatAuthority)
    lengthInBits += threatAuthority.getLengthInBits();

    // Simple field (extendedTimeEnable)
    lengthInBits += extendedTimeEnable.getLengthInBits();

    // Simple field (authorizationExemptions)
    lengthInBits += authorizationExemptions.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static AccessCredential staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("AccessCredential");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    WritableProperty globalIdentifier =
        readSimpleField(
            "globalIdentifier",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned32")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty credentialStatus =
        readSimpleField(
            "credentialStatus",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetBinaryPV")),
                readBuffer));

    ReadableProperty reasonForDisable =
        readSimpleField(
            "reasonForDisable",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAccessCredentialDisableReason")),
                readBuffer));

    ReadableProperty authenticationFactors =
        readSimpleField(
            "authenticationFactors",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer,
                        (String) ("BACnetARRAY[N] of BACnetCredentialAuthenticationFactor")),
                readBuffer));

    ReadableProperty activationTime =
        readSimpleField(
            "activationTime",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    ReadableProperty expirationTime =
        readSimpleField(
            "expirationTime",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    ReadableProperty credentialDisable =
        readSimpleField(
            "credentialDisable",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetAccessCredentialDisable")),
                readBuffer));

    OptionalProperty daysRemaining =
        readSimpleField(
            "daysRemaining",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("INTEGER")), readBuffer));

    OptionalProperty usesRemaining =
        readSimpleField(
            "usesRemaining",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("INTEGER")), readBuffer));

    OptionalProperty absenteeLimit =
        readSimpleField(
            "absenteeLimit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty belongsTo =
        readSimpleField(
            "belongsTo",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    ReadableProperty assignedAccessRights =
        readSimpleField(
            "assignedAccessRights",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetAssignedAccessRights")),
                readBuffer));

    OptionalProperty lastAccessPoint =
        readSimpleField(
            "lastAccessPoint",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty lastAccessEvent =
        readSimpleField(
            "lastAccessEvent",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetAccessEvent")),
                readBuffer));

    OptionalProperty lastUseTime =
        readSimpleField(
            "lastUseTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    OptionalProperty traceFlag =
        readSimpleField(
            "traceFlag",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty threatAuthority =
        readSimpleField(
            "threatAuthority",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetAccessThreatLevel")),
                readBuffer));

    OptionalProperty extendedTimeEnable =
        readSimpleField(
            "extendedTimeEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty authorizationExemptions =
        readSimpleField(
            "authorizationExemptions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAuthorizationExemption")),
                readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("AccessCredential");
    // Create the instance
    AccessCredential _accessCredential;
    _accessCredential =
        new AccessCredential(
            objectIdentifier,
            objectName,
            objectType,
            description,
            globalIdentifier,
            statusFlags,
            reliability,
            credentialStatus,
            reasonForDisable,
            authenticationFactors,
            activationTime,
            expirationTime,
            credentialDisable,
            daysRemaining,
            usesRemaining,
            absenteeLimit,
            belongsTo,
            assignedAccessRights,
            lastAccessPoint,
            lastAccessEvent,
            lastUseTime,
            traceFlag,
            threatAuthority,
            extendedTimeEnable,
            authorizationExemptions,
            reliabilityEvaluationInhibit,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _accessCredential;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof AccessCredential)) {
      return false;
    }
    AccessCredential that = (AccessCredential) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getGlobalIdentifier() == that.getGlobalIdentifier())
        && (getStatusFlags() == that.getStatusFlags())
        && (getReliability() == that.getReliability())
        && (getCredentialStatus() == that.getCredentialStatus())
        && (getReasonForDisable() == that.getReasonForDisable())
        && (getAuthenticationFactors() == that.getAuthenticationFactors())
        && (getActivationTime() == that.getActivationTime())
        && (getExpirationTime() == that.getExpirationTime())
        && (getCredentialDisable() == that.getCredentialDisable())
        && (getDaysRemaining() == that.getDaysRemaining())
        && (getUsesRemaining() == that.getUsesRemaining())
        && (getAbsenteeLimit() == that.getAbsenteeLimit())
        && (getBelongsTo() == that.getBelongsTo())
        && (getAssignedAccessRights() == that.getAssignedAccessRights())
        && (getLastAccessPoint() == that.getLastAccessPoint())
        && (getLastAccessEvent() == that.getLastAccessEvent())
        && (getLastUseTime() == that.getLastUseTime())
        && (getTraceFlag() == that.getTraceFlag())
        && (getThreatAuthority() == that.getThreatAuthority())
        && (getExtendedTimeEnable() == that.getExtendedTimeEnable())
        && (getAuthorizationExemptions() == that.getAuthorizationExemptions())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getGlobalIdentifier(),
        getStatusFlags(),
        getReliability(),
        getCredentialStatus(),
        getReasonForDisable(),
        getAuthenticationFactors(),
        getActivationTime(),
        getExpirationTime(),
        getCredentialDisable(),
        getDaysRemaining(),
        getUsesRemaining(),
        getAbsenteeLimit(),
        getBelongsTo(),
        getAssignedAccessRights(),
        getLastAccessPoint(),
        getLastAccessEvent(),
        getLastUseTime(),
        getTraceFlag(),
        getThreatAuthority(),
        getExtendedTimeEnable(),
        getAuthorizationExemptions(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
