/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class Loop implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final ReadableProperty presentValue;
  protected final OptionalProperty description;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty eventState;
  protected final OptionalProperty reliability;
  protected final ReadableProperty outOfService;
  protected final OptionalProperty updateInterval;
  protected final ReadableProperty outputUnits;
  protected final ReadableProperty manipulatedVariableReference;
  protected final ReadableProperty controlledVariableReference;
  protected final ReadableProperty controlledVariableValue;
  protected final ReadableProperty controlledVariableUnits;
  protected final ReadableProperty setpointReference;
  protected final ReadableProperty setpoint;
  protected final ReadableProperty action;
  protected final OptionalProperty proportionalConstant;
  protected final OptionalProperty proportionalConstantUnits;
  protected final OptionalProperty integralConstant;
  protected final OptionalProperty integralConstantUnits;
  protected final OptionalProperty derivativeConstant;
  protected final OptionalProperty derivativeConstantUnits;
  protected final OptionalProperty bias;
  protected final OptionalProperty maximumOutput;
  protected final OptionalProperty minimumOutput;
  protected final ReadableProperty priorityForWriting;
  protected final OptionalProperty cOVIncrement;
  protected final OptionalProperty timeDelay;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty errorLimit;
  protected final OptionalProperty deadband;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty eventAlgorithmInhibitRef;
  protected final OptionalProperty eventAlgorithmInhibit;
  protected final OptionalProperty timeDelayNormal;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty lowDiffLimit;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public Loop(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      ReadableProperty presentValue,
      OptionalProperty description,
      ReadableProperty statusFlags,
      ReadableProperty eventState,
      OptionalProperty reliability,
      ReadableProperty outOfService,
      OptionalProperty updateInterval,
      ReadableProperty outputUnits,
      ReadableProperty manipulatedVariableReference,
      ReadableProperty controlledVariableReference,
      ReadableProperty controlledVariableValue,
      ReadableProperty controlledVariableUnits,
      ReadableProperty setpointReference,
      ReadableProperty setpoint,
      ReadableProperty action,
      OptionalProperty proportionalConstant,
      OptionalProperty proportionalConstantUnits,
      OptionalProperty integralConstant,
      OptionalProperty integralConstantUnits,
      OptionalProperty derivativeConstant,
      OptionalProperty derivativeConstantUnits,
      OptionalProperty bias,
      OptionalProperty maximumOutput,
      OptionalProperty minimumOutput,
      ReadableProperty priorityForWriting,
      OptionalProperty cOVIncrement,
      OptionalProperty timeDelay,
      OptionalProperty notificationClass,
      OptionalProperty errorLimit,
      OptionalProperty deadband,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventDetectionEnable,
      OptionalProperty eventAlgorithmInhibitRef,
      OptionalProperty eventAlgorithmInhibit,
      OptionalProperty timeDelayNormal,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      OptionalProperty lowDiffLimit,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.presentValue = presentValue;
    this.description = description;
    this.statusFlags = statusFlags;
    this.eventState = eventState;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.updateInterval = updateInterval;
    this.outputUnits = outputUnits;
    this.manipulatedVariableReference = manipulatedVariableReference;
    this.controlledVariableReference = controlledVariableReference;
    this.controlledVariableValue = controlledVariableValue;
    this.controlledVariableUnits = controlledVariableUnits;
    this.setpointReference = setpointReference;
    this.setpoint = setpoint;
    this.action = action;
    this.proportionalConstant = proportionalConstant;
    this.proportionalConstantUnits = proportionalConstantUnits;
    this.integralConstant = integralConstant;
    this.integralConstantUnits = integralConstantUnits;
    this.derivativeConstant = derivativeConstant;
    this.derivativeConstantUnits = derivativeConstantUnits;
    this.bias = bias;
    this.maximumOutput = maximumOutput;
    this.minimumOutput = minimumOutput;
    this.priorityForWriting = priorityForWriting;
    this.cOVIncrement = cOVIncrement;
    this.timeDelay = timeDelay;
    this.notificationClass = notificationClass;
    this.errorLimit = errorLimit;
    this.deadband = deadband;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventDetectionEnable = eventDetectionEnable;
    this.eventAlgorithmInhibitRef = eventAlgorithmInhibitRef;
    this.eventAlgorithmInhibit = eventAlgorithmInhibit;
    this.timeDelayNormal = timeDelayNormal;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.lowDiffLimit = lowDiffLimit;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public ReadableProperty getPresentValue() {
    return presentValue;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getEventState() {
    return eventState;
  }

  public OptionalProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public OptionalProperty getUpdateInterval() {
    return updateInterval;
  }

  public ReadableProperty getOutputUnits() {
    return outputUnits;
  }

  public ReadableProperty getManipulatedVariableReference() {
    return manipulatedVariableReference;
  }

  public ReadableProperty getControlledVariableReference() {
    return controlledVariableReference;
  }

  public ReadableProperty getControlledVariableValue() {
    return controlledVariableValue;
  }

  public ReadableProperty getControlledVariableUnits() {
    return controlledVariableUnits;
  }

  public ReadableProperty getSetpointReference() {
    return setpointReference;
  }

  public ReadableProperty getSetpoint() {
    return setpoint;
  }

  public ReadableProperty getAction() {
    return action;
  }

  public OptionalProperty getProportionalConstant() {
    return proportionalConstant;
  }

  public OptionalProperty getProportionalConstantUnits() {
    return proportionalConstantUnits;
  }

  public OptionalProperty getIntegralConstant() {
    return integralConstant;
  }

  public OptionalProperty getIntegralConstantUnits() {
    return integralConstantUnits;
  }

  public OptionalProperty getDerivativeConstant() {
    return derivativeConstant;
  }

  public OptionalProperty getDerivativeConstantUnits() {
    return derivativeConstantUnits;
  }

  public OptionalProperty getBias() {
    return bias;
  }

  public OptionalProperty getMaximumOutput() {
    return maximumOutput;
  }

  public OptionalProperty getMinimumOutput() {
    return minimumOutput;
  }

  public ReadableProperty getPriorityForWriting() {
    return priorityForWriting;
  }

  public OptionalProperty getCOVIncrement() {
    return cOVIncrement;
  }

  public OptionalProperty getTimeDelay() {
    return timeDelay;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getErrorLimit() {
    return errorLimit;
  }

  public OptionalProperty getDeadband() {
    return deadband;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getEventAlgorithmInhibitRef() {
    return eventAlgorithmInhibitRef;
  }

  public OptionalProperty getEventAlgorithmInhibit() {
    return eventAlgorithmInhibit;
  }

  public OptionalProperty getTimeDelayNormal() {
    return timeDelayNormal;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getLowDiffLimit() {
    return lowDiffLimit;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("Loop");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (presentValue)
    writeSimpleField("presentValue", presentValue, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (updateInterval)
    writeSimpleField("updateInterval", updateInterval, writeComplex(writeBuffer));

    // Simple Field (outputUnits)
    writeSimpleField("outputUnits", outputUnits, writeComplex(writeBuffer));

    // Simple Field (manipulatedVariableReference)
    writeSimpleField(
        "manipulatedVariableReference", manipulatedVariableReference, writeComplex(writeBuffer));

    // Simple Field (controlledVariableReference)
    writeSimpleField(
        "controlledVariableReference", controlledVariableReference, writeComplex(writeBuffer));

    // Simple Field (controlledVariableValue)
    writeSimpleField("controlledVariableValue", controlledVariableValue, writeComplex(writeBuffer));

    // Simple Field (controlledVariableUnits)
    writeSimpleField("controlledVariableUnits", controlledVariableUnits, writeComplex(writeBuffer));

    // Simple Field (setpointReference)
    writeSimpleField("setpointReference", setpointReference, writeComplex(writeBuffer));

    // Simple Field (setpoint)
    writeSimpleField("setpoint", setpoint, writeComplex(writeBuffer));

    // Simple Field (action)
    writeSimpleField("action", action, writeComplex(writeBuffer));

    // Simple Field (proportionalConstant)
    writeSimpleField("proportionalConstant", proportionalConstant, writeComplex(writeBuffer));

    // Simple Field (proportionalConstantUnits)
    writeSimpleField(
        "proportionalConstantUnits", proportionalConstantUnits, writeComplex(writeBuffer));

    // Simple Field (integralConstant)
    writeSimpleField("integralConstant", integralConstant, writeComplex(writeBuffer));

    // Simple Field (integralConstantUnits)
    writeSimpleField("integralConstantUnits", integralConstantUnits, writeComplex(writeBuffer));

    // Simple Field (derivativeConstant)
    writeSimpleField("derivativeConstant", derivativeConstant, writeComplex(writeBuffer));

    // Simple Field (derivativeConstantUnits)
    writeSimpleField("derivativeConstantUnits", derivativeConstantUnits, writeComplex(writeBuffer));

    // Simple Field (bias)
    writeSimpleField("bias", bias, writeComplex(writeBuffer));

    // Simple Field (maximumOutput)
    writeSimpleField("maximumOutput", maximumOutput, writeComplex(writeBuffer));

    // Simple Field (minimumOutput)
    writeSimpleField("minimumOutput", minimumOutput, writeComplex(writeBuffer));

    // Simple Field (priorityForWriting)
    writeSimpleField("priorityForWriting", priorityForWriting, writeComplex(writeBuffer));

    // Simple Field (cOVIncrement)
    writeSimpleField("cOVIncrement", cOVIncrement, writeComplex(writeBuffer));

    // Simple Field (timeDelay)
    writeSimpleField("timeDelay", timeDelay, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (errorLimit)
    writeSimpleField("errorLimit", errorLimit, writeComplex(writeBuffer));

    // Simple Field (deadband)
    writeSimpleField("deadband", deadband, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibitRef)
    writeSimpleField(
        "eventAlgorithmInhibitRef", eventAlgorithmInhibitRef, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibit)
    writeSimpleField("eventAlgorithmInhibit", eventAlgorithmInhibit, writeComplex(writeBuffer));

    // Simple Field (timeDelayNormal)
    writeSimpleField("timeDelayNormal", timeDelayNormal, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (lowDiffLimit)
    writeSimpleField("lowDiffLimit", lowDiffLimit, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("Loop");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    Loop _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (presentValue)
    lengthInBits += presentValue.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (updateInterval)
    lengthInBits += updateInterval.getLengthInBits();

    // Simple field (outputUnits)
    lengthInBits += outputUnits.getLengthInBits();

    // Simple field (manipulatedVariableReference)
    lengthInBits += manipulatedVariableReference.getLengthInBits();

    // Simple field (controlledVariableReference)
    lengthInBits += controlledVariableReference.getLengthInBits();

    // Simple field (controlledVariableValue)
    lengthInBits += controlledVariableValue.getLengthInBits();

    // Simple field (controlledVariableUnits)
    lengthInBits += controlledVariableUnits.getLengthInBits();

    // Simple field (setpointReference)
    lengthInBits += setpointReference.getLengthInBits();

    // Simple field (setpoint)
    lengthInBits += setpoint.getLengthInBits();

    // Simple field (action)
    lengthInBits += action.getLengthInBits();

    // Simple field (proportionalConstant)
    lengthInBits += proportionalConstant.getLengthInBits();

    // Simple field (proportionalConstantUnits)
    lengthInBits += proportionalConstantUnits.getLengthInBits();

    // Simple field (integralConstant)
    lengthInBits += integralConstant.getLengthInBits();

    // Simple field (integralConstantUnits)
    lengthInBits += integralConstantUnits.getLengthInBits();

    // Simple field (derivativeConstant)
    lengthInBits += derivativeConstant.getLengthInBits();

    // Simple field (derivativeConstantUnits)
    lengthInBits += derivativeConstantUnits.getLengthInBits();

    // Simple field (bias)
    lengthInBits += bias.getLengthInBits();

    // Simple field (maximumOutput)
    lengthInBits += maximumOutput.getLengthInBits();

    // Simple field (minimumOutput)
    lengthInBits += minimumOutput.getLengthInBits();

    // Simple field (priorityForWriting)
    lengthInBits += priorityForWriting.getLengthInBits();

    // Simple field (cOVIncrement)
    lengthInBits += cOVIncrement.getLengthInBits();

    // Simple field (timeDelay)
    lengthInBits += timeDelay.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (errorLimit)
    lengthInBits += errorLimit.getLengthInBits();

    // Simple field (deadband)
    lengthInBits += deadband.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (eventAlgorithmInhibitRef)
    lengthInBits += eventAlgorithmInhibitRef.getLengthInBits();

    // Simple field (eventAlgorithmInhibit)
    lengthInBits += eventAlgorithmInhibit.getLengthInBits();

    // Simple field (timeDelayNormal)
    lengthInBits += timeDelayNormal.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (lowDiffLimit)
    lengthInBits += lowDiffLimit.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static Loop staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("Loop");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    ReadableProperty presentValue =
        readSimpleField(
            "presentValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    OptionalProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty updateInterval =
        readSimpleField(
            "updateInterval",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty outputUnits =
        readSimpleField(
            "outputUnits",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    ReadableProperty manipulatedVariableReference =
        readSimpleField(
            "manipulatedVariableReference",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    ReadableProperty controlledVariableReference =
        readSimpleField(
            "controlledVariableReference",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    ReadableProperty controlledVariableValue =
        readSimpleField(
            "controlledVariableValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    ReadableProperty controlledVariableUnits =
        readSimpleField(
            "controlledVariableUnits",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    ReadableProperty setpointReference =
        readSimpleField(
            "setpointReference",
            readComplex(
                () ->
                    ReadableProperty.staticParse(readBuffer, (String) ("BACnetSetpointReference")),
                readBuffer));

    ReadableProperty setpoint =
        readSimpleField(
            "setpoint",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    ReadableProperty action =
        readSimpleField(
            "action",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetAction")),
                readBuffer));

    OptionalProperty proportionalConstant =
        readSimpleField(
            "proportionalConstant",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty proportionalConstantUnits =
        readSimpleField(
            "proportionalConstantUnits",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    OptionalProperty integralConstant =
        readSimpleField(
            "integralConstant",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty integralConstantUnits =
        readSimpleField(
            "integralConstantUnits",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    OptionalProperty derivativeConstant =
        readSimpleField(
            "derivativeConstant",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty derivativeConstantUnits =
        readSimpleField(
            "derivativeConstantUnits",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    OptionalProperty bias =
        readSimpleField(
            "bias",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty maximumOutput =
        readSimpleField(
            "maximumOutput",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty minimumOutput =
        readSimpleField(
            "minimumOutput",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    ReadableProperty priorityForWriting =
        readSimpleField(
            "priorityForWriting",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned(1..16)")),
                readBuffer));

    OptionalProperty cOVIncrement =
        readSimpleField(
            "cOVIncrement",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty timeDelay =
        readSimpleField(
            "timeDelay",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty errorLimit =
        readSimpleField(
            "errorLimit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty deadband =
        readSimpleField(
            "deadband",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty eventAlgorithmInhibitRef =
        readSimpleField(
            "eventAlgorithmInhibitRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibit =
        readSimpleField(
            "eventAlgorithmInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty timeDelayNormal =
        readSimpleField(
            "timeDelayNormal",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty lowDiffLimit =
        readSimpleField(
            "lowDiffLimit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetOptionalREAL")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("Loop");
    // Create the instance
    Loop _loop;
    _loop =
        new Loop(
            objectIdentifier,
            objectName,
            objectType,
            presentValue,
            description,
            statusFlags,
            eventState,
            reliability,
            outOfService,
            updateInterval,
            outputUnits,
            manipulatedVariableReference,
            controlledVariableReference,
            controlledVariableValue,
            controlledVariableUnits,
            setpointReference,
            setpoint,
            action,
            proportionalConstant,
            proportionalConstantUnits,
            integralConstant,
            integralConstantUnits,
            derivativeConstant,
            derivativeConstantUnits,
            bias,
            maximumOutput,
            minimumOutput,
            priorityForWriting,
            cOVIncrement,
            timeDelay,
            notificationClass,
            errorLimit,
            deadband,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventDetectionEnable,
            eventAlgorithmInhibitRef,
            eventAlgorithmInhibit,
            timeDelayNormal,
            reliabilityEvaluationInhibit,
            propertyList,
            lowDiffLimit,
            tags,
            profileLocation,
            profileName);
    return _loop;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Loop)) {
      return false;
    }
    Loop that = (Loop) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getPresentValue() == that.getPresentValue())
        && (getDescription() == that.getDescription())
        && (getStatusFlags() == that.getStatusFlags())
        && (getEventState() == that.getEventState())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getUpdateInterval() == that.getUpdateInterval())
        && (getOutputUnits() == that.getOutputUnits())
        && (getManipulatedVariableReference() == that.getManipulatedVariableReference())
        && (getControlledVariableReference() == that.getControlledVariableReference())
        && (getControlledVariableValue() == that.getControlledVariableValue())
        && (getControlledVariableUnits() == that.getControlledVariableUnits())
        && (getSetpointReference() == that.getSetpointReference())
        && (getSetpoint() == that.getSetpoint())
        && (getAction() == that.getAction())
        && (getProportionalConstant() == that.getProportionalConstant())
        && (getProportionalConstantUnits() == that.getProportionalConstantUnits())
        && (getIntegralConstant() == that.getIntegralConstant())
        && (getIntegralConstantUnits() == that.getIntegralConstantUnits())
        && (getDerivativeConstant() == that.getDerivativeConstant())
        && (getDerivativeConstantUnits() == that.getDerivativeConstantUnits())
        && (getBias() == that.getBias())
        && (getMaximumOutput() == that.getMaximumOutput())
        && (getMinimumOutput() == that.getMinimumOutput())
        && (getPriorityForWriting() == that.getPriorityForWriting())
        && (getCOVIncrement() == that.getCOVIncrement())
        && (getTimeDelay() == that.getTimeDelay())
        && (getNotificationClass() == that.getNotificationClass())
        && (getErrorLimit() == that.getErrorLimit())
        && (getDeadband() == that.getDeadband())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getEventAlgorithmInhibitRef() == that.getEventAlgorithmInhibitRef())
        && (getEventAlgorithmInhibit() == that.getEventAlgorithmInhibit())
        && (getTimeDelayNormal() == that.getTimeDelayNormal())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getLowDiffLimit() == that.getLowDiffLimit())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getPresentValue(),
        getDescription(),
        getStatusFlags(),
        getEventState(),
        getReliability(),
        getOutOfService(),
        getUpdateInterval(),
        getOutputUnits(),
        getManipulatedVariableReference(),
        getControlledVariableReference(),
        getControlledVariableValue(),
        getControlledVariableUnits(),
        getSetpointReference(),
        getSetpoint(),
        getAction(),
        getProportionalConstant(),
        getProportionalConstantUnits(),
        getIntegralConstant(),
        getIntegralConstantUnits(),
        getDerivativeConstant(),
        getDerivativeConstantUnits(),
        getBias(),
        getMaximumOutput(),
        getMinimumOutput(),
        getPriorityForWriting(),
        getCOVIncrement(),
        getTimeDelay(),
        getNotificationClass(),
        getErrorLimit(),
        getDeadband(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventDetectionEnable(),
        getEventAlgorithmInhibitRef(),
        getEventAlgorithmInhibit(),
        getTimeDelayNormal(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getLowDiffLimit(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
