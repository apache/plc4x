/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class Lift implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty elevatorGroup;
  protected final ReadableProperty groupID;
  protected final ReadableProperty installationID;
  protected final OptionalProperty floorText;
  protected final OptionalProperty carDoorText;
  protected final OptionalProperty assignedLandingCalls;
  protected final OptionalProperty makingCarCall;
  protected final OptionalProperty registeredCarCall;
  protected final ReadableProperty carPosition;
  protected final ReadableProperty carMovingDirection;
  protected final OptionalProperty carAssignedDirection;
  protected final ReadableProperty carDoorStatus;
  protected final OptionalProperty carDoorCommand;
  protected final OptionalProperty carDoorZone;
  protected final OptionalProperty carMode;
  protected final OptionalProperty carLoad;
  protected final OptionalProperty carLoadUnits;
  protected final OptionalProperty nextStoppingFloor;
  protected final ReadableProperty passengerAlarm;
  protected final OptionalProperty timeDelay;
  protected final OptionalProperty timeDelayNormal;
  protected final OptionalProperty energyMeter;
  protected final OptionalProperty energyMeterRef;
  protected final OptionalProperty reliability;
  protected final ReadableProperty outOfService;
  protected final OptionalProperty carDriveStatus;
  protected final ReadableProperty faultSignals;
  protected final OptionalProperty landingDoorStatus;
  protected final OptionalProperty higherDeck;
  protected final OptionalProperty lowerDeck;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty eventState;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventAlgorithmInhibitRef;
  protected final OptionalProperty eventAlgorithmInhibit;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public Lift(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      ReadableProperty statusFlags,
      ReadableProperty elevatorGroup,
      ReadableProperty groupID,
      ReadableProperty installationID,
      OptionalProperty floorText,
      OptionalProperty carDoorText,
      OptionalProperty assignedLandingCalls,
      OptionalProperty makingCarCall,
      OptionalProperty registeredCarCall,
      ReadableProperty carPosition,
      ReadableProperty carMovingDirection,
      OptionalProperty carAssignedDirection,
      ReadableProperty carDoorStatus,
      OptionalProperty carDoorCommand,
      OptionalProperty carDoorZone,
      OptionalProperty carMode,
      OptionalProperty carLoad,
      OptionalProperty carLoadUnits,
      OptionalProperty nextStoppingFloor,
      ReadableProperty passengerAlarm,
      OptionalProperty timeDelay,
      OptionalProperty timeDelayNormal,
      OptionalProperty energyMeter,
      OptionalProperty energyMeterRef,
      OptionalProperty reliability,
      ReadableProperty outOfService,
      OptionalProperty carDriveStatus,
      ReadableProperty faultSignals,
      OptionalProperty landingDoorStatus,
      OptionalProperty higherDeck,
      OptionalProperty lowerDeck,
      OptionalProperty eventDetectionEnable,
      OptionalProperty notificationClass,
      OptionalProperty eventEnable,
      OptionalProperty eventState,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventAlgorithmInhibitRef,
      OptionalProperty eventAlgorithmInhibit,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.statusFlags = statusFlags;
    this.elevatorGroup = elevatorGroup;
    this.groupID = groupID;
    this.installationID = installationID;
    this.floorText = floorText;
    this.carDoorText = carDoorText;
    this.assignedLandingCalls = assignedLandingCalls;
    this.makingCarCall = makingCarCall;
    this.registeredCarCall = registeredCarCall;
    this.carPosition = carPosition;
    this.carMovingDirection = carMovingDirection;
    this.carAssignedDirection = carAssignedDirection;
    this.carDoorStatus = carDoorStatus;
    this.carDoorCommand = carDoorCommand;
    this.carDoorZone = carDoorZone;
    this.carMode = carMode;
    this.carLoad = carLoad;
    this.carLoadUnits = carLoadUnits;
    this.nextStoppingFloor = nextStoppingFloor;
    this.passengerAlarm = passengerAlarm;
    this.timeDelay = timeDelay;
    this.timeDelayNormal = timeDelayNormal;
    this.energyMeter = energyMeter;
    this.energyMeterRef = energyMeterRef;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.carDriveStatus = carDriveStatus;
    this.faultSignals = faultSignals;
    this.landingDoorStatus = landingDoorStatus;
    this.higherDeck = higherDeck;
    this.lowerDeck = lowerDeck;
    this.eventDetectionEnable = eventDetectionEnable;
    this.notificationClass = notificationClass;
    this.eventEnable = eventEnable;
    this.eventState = eventState;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventAlgorithmInhibitRef = eventAlgorithmInhibitRef;
    this.eventAlgorithmInhibit = eventAlgorithmInhibit;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getElevatorGroup() {
    return elevatorGroup;
  }

  public ReadableProperty getGroupID() {
    return groupID;
  }

  public ReadableProperty getInstallationID() {
    return installationID;
  }

  public OptionalProperty getFloorText() {
    return floorText;
  }

  public OptionalProperty getCarDoorText() {
    return carDoorText;
  }

  public OptionalProperty getAssignedLandingCalls() {
    return assignedLandingCalls;
  }

  public OptionalProperty getMakingCarCall() {
    return makingCarCall;
  }

  public OptionalProperty getRegisteredCarCall() {
    return registeredCarCall;
  }

  public ReadableProperty getCarPosition() {
    return carPosition;
  }

  public ReadableProperty getCarMovingDirection() {
    return carMovingDirection;
  }

  public OptionalProperty getCarAssignedDirection() {
    return carAssignedDirection;
  }

  public ReadableProperty getCarDoorStatus() {
    return carDoorStatus;
  }

  public OptionalProperty getCarDoorCommand() {
    return carDoorCommand;
  }

  public OptionalProperty getCarDoorZone() {
    return carDoorZone;
  }

  public OptionalProperty getCarMode() {
    return carMode;
  }

  public OptionalProperty getCarLoad() {
    return carLoad;
  }

  public OptionalProperty getCarLoadUnits() {
    return carLoadUnits;
  }

  public OptionalProperty getNextStoppingFloor() {
    return nextStoppingFloor;
  }

  public ReadableProperty getPassengerAlarm() {
    return passengerAlarm;
  }

  public OptionalProperty getTimeDelay() {
    return timeDelay;
  }

  public OptionalProperty getTimeDelayNormal() {
    return timeDelayNormal;
  }

  public OptionalProperty getEnergyMeter() {
    return energyMeter;
  }

  public OptionalProperty getEnergyMeterRef() {
    return energyMeterRef;
  }

  public OptionalProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public OptionalProperty getCarDriveStatus() {
    return carDriveStatus;
  }

  public ReadableProperty getFaultSignals() {
    return faultSignals;
  }

  public OptionalProperty getLandingDoorStatus() {
    return landingDoorStatus;
  }

  public OptionalProperty getHigherDeck() {
    return higherDeck;
  }

  public OptionalProperty getLowerDeck() {
    return lowerDeck;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getEventState() {
    return eventState;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventAlgorithmInhibitRef() {
    return eventAlgorithmInhibitRef;
  }

  public OptionalProperty getEventAlgorithmInhibit() {
    return eventAlgorithmInhibit;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("Lift");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (elevatorGroup)
    writeSimpleField("elevatorGroup", elevatorGroup, writeComplex(writeBuffer));

    // Simple Field (groupID)
    writeSimpleField("groupID", groupID, writeComplex(writeBuffer));

    // Simple Field (installationID)
    writeSimpleField("installationID", installationID, writeComplex(writeBuffer));

    // Simple Field (floorText)
    writeSimpleField("floorText", floorText, writeComplex(writeBuffer));

    // Simple Field (carDoorText)
    writeSimpleField("carDoorText", carDoorText, writeComplex(writeBuffer));

    // Simple Field (assignedLandingCalls)
    writeSimpleField("assignedLandingCalls", assignedLandingCalls, writeComplex(writeBuffer));

    // Simple Field (makingCarCall)
    writeSimpleField("makingCarCall", makingCarCall, writeComplex(writeBuffer));

    // Simple Field (registeredCarCall)
    writeSimpleField("registeredCarCall", registeredCarCall, writeComplex(writeBuffer));

    // Simple Field (carPosition)
    writeSimpleField("carPosition", carPosition, writeComplex(writeBuffer));

    // Simple Field (carMovingDirection)
    writeSimpleField("carMovingDirection", carMovingDirection, writeComplex(writeBuffer));

    // Simple Field (carAssignedDirection)
    writeSimpleField("carAssignedDirection", carAssignedDirection, writeComplex(writeBuffer));

    // Simple Field (carDoorStatus)
    writeSimpleField("carDoorStatus", carDoorStatus, writeComplex(writeBuffer));

    // Simple Field (carDoorCommand)
    writeSimpleField("carDoorCommand", carDoorCommand, writeComplex(writeBuffer));

    // Simple Field (carDoorZone)
    writeSimpleField("carDoorZone", carDoorZone, writeComplex(writeBuffer));

    // Simple Field (carMode)
    writeSimpleField("carMode", carMode, writeComplex(writeBuffer));

    // Simple Field (carLoad)
    writeSimpleField("carLoad", carLoad, writeComplex(writeBuffer));

    // Simple Field (carLoadUnits)
    writeSimpleField("carLoadUnits", carLoadUnits, writeComplex(writeBuffer));

    // Simple Field (nextStoppingFloor)
    writeSimpleField("nextStoppingFloor", nextStoppingFloor, writeComplex(writeBuffer));

    // Simple Field (passengerAlarm)
    writeSimpleField("passengerAlarm", passengerAlarm, writeComplex(writeBuffer));

    // Simple Field (timeDelay)
    writeSimpleField("timeDelay", timeDelay, writeComplex(writeBuffer));

    // Simple Field (timeDelayNormal)
    writeSimpleField("timeDelayNormal", timeDelayNormal, writeComplex(writeBuffer));

    // Simple Field (energyMeter)
    writeSimpleField("energyMeter", energyMeter, writeComplex(writeBuffer));

    // Simple Field (energyMeterRef)
    writeSimpleField("energyMeterRef", energyMeterRef, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (carDriveStatus)
    writeSimpleField("carDriveStatus", carDriveStatus, writeComplex(writeBuffer));

    // Simple Field (faultSignals)
    writeSimpleField("faultSignals", faultSignals, writeComplex(writeBuffer));

    // Simple Field (landingDoorStatus)
    writeSimpleField("landingDoorStatus", landingDoorStatus, writeComplex(writeBuffer));

    // Simple Field (higherDeck)
    writeSimpleField("higherDeck", higherDeck, writeComplex(writeBuffer));

    // Simple Field (lowerDeck)
    writeSimpleField("lowerDeck", lowerDeck, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibitRef)
    writeSimpleField(
        "eventAlgorithmInhibitRef", eventAlgorithmInhibitRef, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibit)
    writeSimpleField("eventAlgorithmInhibit", eventAlgorithmInhibit, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("Lift");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    Lift _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (elevatorGroup)
    lengthInBits += elevatorGroup.getLengthInBits();

    // Simple field (groupID)
    lengthInBits += groupID.getLengthInBits();

    // Simple field (installationID)
    lengthInBits += installationID.getLengthInBits();

    // Simple field (floorText)
    lengthInBits += floorText.getLengthInBits();

    // Simple field (carDoorText)
    lengthInBits += carDoorText.getLengthInBits();

    // Simple field (assignedLandingCalls)
    lengthInBits += assignedLandingCalls.getLengthInBits();

    // Simple field (makingCarCall)
    lengthInBits += makingCarCall.getLengthInBits();

    // Simple field (registeredCarCall)
    lengthInBits += registeredCarCall.getLengthInBits();

    // Simple field (carPosition)
    lengthInBits += carPosition.getLengthInBits();

    // Simple field (carMovingDirection)
    lengthInBits += carMovingDirection.getLengthInBits();

    // Simple field (carAssignedDirection)
    lengthInBits += carAssignedDirection.getLengthInBits();

    // Simple field (carDoorStatus)
    lengthInBits += carDoorStatus.getLengthInBits();

    // Simple field (carDoorCommand)
    lengthInBits += carDoorCommand.getLengthInBits();

    // Simple field (carDoorZone)
    lengthInBits += carDoorZone.getLengthInBits();

    // Simple field (carMode)
    lengthInBits += carMode.getLengthInBits();

    // Simple field (carLoad)
    lengthInBits += carLoad.getLengthInBits();

    // Simple field (carLoadUnits)
    lengthInBits += carLoadUnits.getLengthInBits();

    // Simple field (nextStoppingFloor)
    lengthInBits += nextStoppingFloor.getLengthInBits();

    // Simple field (passengerAlarm)
    lengthInBits += passengerAlarm.getLengthInBits();

    // Simple field (timeDelay)
    lengthInBits += timeDelay.getLengthInBits();

    // Simple field (timeDelayNormal)
    lengthInBits += timeDelayNormal.getLengthInBits();

    // Simple field (energyMeter)
    lengthInBits += energyMeter.getLengthInBits();

    // Simple field (energyMeterRef)
    lengthInBits += energyMeterRef.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (carDriveStatus)
    lengthInBits += carDriveStatus.getLengthInBits();

    // Simple field (faultSignals)
    lengthInBits += faultSignals.getLengthInBits();

    // Simple field (landingDoorStatus)
    lengthInBits += landingDoorStatus.getLengthInBits();

    // Simple field (higherDeck)
    lengthInBits += higherDeck.getLengthInBits();

    // Simple field (lowerDeck)
    lengthInBits += lowerDeck.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventAlgorithmInhibitRef)
    lengthInBits += eventAlgorithmInhibitRef.getLengthInBits();

    // Simple field (eventAlgorithmInhibit)
    lengthInBits += eventAlgorithmInhibit.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static Lift staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("Lift");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty elevatorGroup =
        readSimpleField(
            "elevatorGroup",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty groupID =
        readSimpleField(
            "groupID",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    ReadableProperty installationID =
        readSimpleField(
            "installationID",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    OptionalProperty floorText =
        readSimpleField(
            "floorText",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of CharacterString")),
                readBuffer));

    OptionalProperty carDoorText =
        readSimpleField(
            "carDoorText",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of CharacterString")),
                readBuffer));

    OptionalProperty assignedLandingCalls =
        readSimpleField(
            "assignedLandingCalls",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetAssignedLandingCalls")),
                readBuffer));

    OptionalProperty makingCarCall =
        readSimpleField(
            "makingCarCall",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of Unsigned8")),
                readBuffer));

    OptionalProperty registeredCarCall =
        readSimpleField(
            "registeredCarCall",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetLiftCarCallList")),
                readBuffer));

    ReadableProperty carPosition =
        readSimpleField(
            "carPosition",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    ReadableProperty carMovingDirection =
        readSimpleField(
            "carMovingDirection",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetLiftCarDirection")),
                readBuffer));

    OptionalProperty carAssignedDirection =
        readSimpleField(
            "carAssignedDirection",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetLiftCarDirection")),
                readBuffer));

    ReadableProperty carDoorStatus =
        readSimpleField(
            "carDoorStatus",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetDoorStatus")),
                readBuffer));

    OptionalProperty carDoorCommand =
        readSimpleField(
            "carDoorCommand",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetLiftCarDoorCommand")),
                readBuffer));

    OptionalProperty carDoorZone =
        readSimpleField(
            "carDoorZone",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty carMode =
        readSimpleField(
            "carMode",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetLiftCarMode")),
                readBuffer));

    OptionalProperty carLoad =
        readSimpleField(
            "carLoad",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty carLoadUnits =
        readSimpleField(
            "carLoadUnits",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEngineeringUnits")),
                readBuffer));

    OptionalProperty nextStoppingFloor =
        readSimpleField(
            "nextStoppingFloor",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    ReadableProperty passengerAlarm =
        readSimpleField(
            "passengerAlarm",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty timeDelay =
        readSimpleField(
            "timeDelay",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty timeDelayNormal =
        readSimpleField(
            "timeDelayNormal",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty energyMeter =
        readSimpleField(
            "energyMeter",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty energyMeterRef =
        readSimpleField(
            "energyMeterRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty carDriveStatus =
        readSimpleField(
            "carDriveStatus",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetLiftCarDriveStatus")),
                readBuffer));

    ReadableProperty faultSignals =
        readSimpleField(
            "faultSignals",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetLiftFault")),
                readBuffer));

    OptionalProperty landingDoorStatus =
        readSimpleField(
            "landingDoorStatus",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetLandingDoorStatus")),
                readBuffer));

    OptionalProperty higherDeck =
        readSimpleField(
            "higherDeck",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    OptionalProperty lowerDeck =
        readSimpleField(
            "lowerDeck",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibitRef =
        readSimpleField(
            "eventAlgorithmInhibitRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibit =
        readSimpleField(
            "eventAlgorithmInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("Lift");
    // Create the instance
    Lift _lift;
    _lift =
        new Lift(
            objectIdentifier,
            objectName,
            objectType,
            description,
            statusFlags,
            elevatorGroup,
            groupID,
            installationID,
            floorText,
            carDoorText,
            assignedLandingCalls,
            makingCarCall,
            registeredCarCall,
            carPosition,
            carMovingDirection,
            carAssignedDirection,
            carDoorStatus,
            carDoorCommand,
            carDoorZone,
            carMode,
            carLoad,
            carLoadUnits,
            nextStoppingFloor,
            passengerAlarm,
            timeDelay,
            timeDelayNormal,
            energyMeter,
            energyMeterRef,
            reliability,
            outOfService,
            carDriveStatus,
            faultSignals,
            landingDoorStatus,
            higherDeck,
            lowerDeck,
            eventDetectionEnable,
            notificationClass,
            eventEnable,
            eventState,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventAlgorithmInhibitRef,
            eventAlgorithmInhibit,
            reliabilityEvaluationInhibit,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _lift;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Lift)) {
      return false;
    }
    Lift that = (Lift) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getStatusFlags() == that.getStatusFlags())
        && (getElevatorGroup() == that.getElevatorGroup())
        && (getGroupID() == that.getGroupID())
        && (getInstallationID() == that.getInstallationID())
        && (getFloorText() == that.getFloorText())
        && (getCarDoorText() == that.getCarDoorText())
        && (getAssignedLandingCalls() == that.getAssignedLandingCalls())
        && (getMakingCarCall() == that.getMakingCarCall())
        && (getRegisteredCarCall() == that.getRegisteredCarCall())
        && (getCarPosition() == that.getCarPosition())
        && (getCarMovingDirection() == that.getCarMovingDirection())
        && (getCarAssignedDirection() == that.getCarAssignedDirection())
        && (getCarDoorStatus() == that.getCarDoorStatus())
        && (getCarDoorCommand() == that.getCarDoorCommand())
        && (getCarDoorZone() == that.getCarDoorZone())
        && (getCarMode() == that.getCarMode())
        && (getCarLoad() == that.getCarLoad())
        && (getCarLoadUnits() == that.getCarLoadUnits())
        && (getNextStoppingFloor() == that.getNextStoppingFloor())
        && (getPassengerAlarm() == that.getPassengerAlarm())
        && (getTimeDelay() == that.getTimeDelay())
        && (getTimeDelayNormal() == that.getTimeDelayNormal())
        && (getEnergyMeter() == that.getEnergyMeter())
        && (getEnergyMeterRef() == that.getEnergyMeterRef())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getCarDriveStatus() == that.getCarDriveStatus())
        && (getFaultSignals() == that.getFaultSignals())
        && (getLandingDoorStatus() == that.getLandingDoorStatus())
        && (getHigherDeck() == that.getHigherDeck())
        && (getLowerDeck() == that.getLowerDeck())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getNotificationClass() == that.getNotificationClass())
        && (getEventEnable() == that.getEventEnable())
        && (getEventState() == that.getEventState())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventAlgorithmInhibitRef() == that.getEventAlgorithmInhibitRef())
        && (getEventAlgorithmInhibit() == that.getEventAlgorithmInhibit())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getStatusFlags(),
        getElevatorGroup(),
        getGroupID(),
        getInstallationID(),
        getFloorText(),
        getCarDoorText(),
        getAssignedLandingCalls(),
        getMakingCarCall(),
        getRegisteredCarCall(),
        getCarPosition(),
        getCarMovingDirection(),
        getCarAssignedDirection(),
        getCarDoorStatus(),
        getCarDoorCommand(),
        getCarDoorZone(),
        getCarMode(),
        getCarLoad(),
        getCarLoadUnits(),
        getNextStoppingFloor(),
        getPassengerAlarm(),
        getTimeDelay(),
        getTimeDelayNormal(),
        getEnergyMeter(),
        getEnergyMeterRef(),
        getReliability(),
        getOutOfService(),
        getCarDriveStatus(),
        getFaultSignals(),
        getLandingDoorStatus(),
        getHigherDeck(),
        getLowerDeck(),
        getEventDetectionEnable(),
        getNotificationClass(),
        getEventEnable(),
        getEventState(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventAlgorithmInhibitRef(),
        getEventAlgorithmInhibit(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
