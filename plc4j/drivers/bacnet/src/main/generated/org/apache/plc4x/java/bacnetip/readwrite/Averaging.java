/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class Averaging implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final ReadableProperty minimumValue;
  protected final OptionalProperty minimumValueTimestamp;
  protected final ReadableProperty averageValue;
  protected final OptionalProperty varianceValue;
  protected final ReadableProperty maximumValue;
  protected final OptionalProperty maximumValueTimestamp;
  protected final OptionalProperty description;
  protected final WritableProperty attemptedSamples;
  protected final ReadableProperty validSamples;
  protected final ReadableProperty objectPropertyReference;
  protected final WritableProperty windowInterval;
  protected final WritableProperty windowSamples;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public Averaging(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      ReadableProperty minimumValue,
      OptionalProperty minimumValueTimestamp,
      ReadableProperty averageValue,
      OptionalProperty varianceValue,
      ReadableProperty maximumValue,
      OptionalProperty maximumValueTimestamp,
      OptionalProperty description,
      WritableProperty attemptedSamples,
      ReadableProperty validSamples,
      ReadableProperty objectPropertyReference,
      WritableProperty windowInterval,
      WritableProperty windowSamples,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.minimumValue = minimumValue;
    this.minimumValueTimestamp = minimumValueTimestamp;
    this.averageValue = averageValue;
    this.varianceValue = varianceValue;
    this.maximumValue = maximumValue;
    this.maximumValueTimestamp = maximumValueTimestamp;
    this.description = description;
    this.attemptedSamples = attemptedSamples;
    this.validSamples = validSamples;
    this.objectPropertyReference = objectPropertyReference;
    this.windowInterval = windowInterval;
    this.windowSamples = windowSamples;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public ReadableProperty getMinimumValue() {
    return minimumValue;
  }

  public OptionalProperty getMinimumValueTimestamp() {
    return minimumValueTimestamp;
  }

  public ReadableProperty getAverageValue() {
    return averageValue;
  }

  public OptionalProperty getVarianceValue() {
    return varianceValue;
  }

  public ReadableProperty getMaximumValue() {
    return maximumValue;
  }

  public OptionalProperty getMaximumValueTimestamp() {
    return maximumValueTimestamp;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public WritableProperty getAttemptedSamples() {
    return attemptedSamples;
  }

  public ReadableProperty getValidSamples() {
    return validSamples;
  }

  public ReadableProperty getObjectPropertyReference() {
    return objectPropertyReference;
  }

  public WritableProperty getWindowInterval() {
    return windowInterval;
  }

  public WritableProperty getWindowSamples() {
    return windowSamples;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("Averaging");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (minimumValue)
    writeSimpleField("minimumValue", minimumValue, writeComplex(writeBuffer));

    // Simple Field (minimumValueTimestamp)
    writeSimpleField("minimumValueTimestamp", minimumValueTimestamp, writeComplex(writeBuffer));

    // Simple Field (averageValue)
    writeSimpleField("averageValue", averageValue, writeComplex(writeBuffer));

    // Simple Field (varianceValue)
    writeSimpleField("varianceValue", varianceValue, writeComplex(writeBuffer));

    // Simple Field (maximumValue)
    writeSimpleField("maximumValue", maximumValue, writeComplex(writeBuffer));

    // Simple Field (maximumValueTimestamp)
    writeSimpleField("maximumValueTimestamp", maximumValueTimestamp, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (attemptedSamples)
    writeSimpleField("attemptedSamples", attemptedSamples, writeComplex(writeBuffer));

    // Simple Field (validSamples)
    writeSimpleField("validSamples", validSamples, writeComplex(writeBuffer));

    // Simple Field (objectPropertyReference)
    writeSimpleField("objectPropertyReference", objectPropertyReference, writeComplex(writeBuffer));

    // Simple Field (windowInterval)
    writeSimpleField("windowInterval", windowInterval, writeComplex(writeBuffer));

    // Simple Field (windowSamples)
    writeSimpleField("windowSamples", windowSamples, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("Averaging");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    Averaging _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (minimumValue)
    lengthInBits += minimumValue.getLengthInBits();

    // Simple field (minimumValueTimestamp)
    lengthInBits += minimumValueTimestamp.getLengthInBits();

    // Simple field (averageValue)
    lengthInBits += averageValue.getLengthInBits();

    // Simple field (varianceValue)
    lengthInBits += varianceValue.getLengthInBits();

    // Simple field (maximumValue)
    lengthInBits += maximumValue.getLengthInBits();

    // Simple field (maximumValueTimestamp)
    lengthInBits += maximumValueTimestamp.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (attemptedSamples)
    lengthInBits += attemptedSamples.getLengthInBits();

    // Simple field (validSamples)
    lengthInBits += validSamples.getLengthInBits();

    // Simple field (objectPropertyReference)
    lengthInBits += objectPropertyReference.getLengthInBits();

    // Simple field (windowInterval)
    lengthInBits += windowInterval.getLengthInBits();

    // Simple field (windowSamples)
    lengthInBits += windowSamples.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static Averaging staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("Averaging");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    ReadableProperty minimumValue =
        readSimpleField(
            "minimumValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty minimumValueTimestamp =
        readSimpleField(
            "minimumValueTimestamp",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    ReadableProperty averageValue =
        readSimpleField(
            "averageValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty varianceValue =
        readSimpleField(
            "varianceValue",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    ReadableProperty maximumValue =
        readSimpleField(
            "maximumValue",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("REAL")), readBuffer));

    OptionalProperty maximumValueTimestamp =
        readSimpleField(
            "maximumValueTimestamp",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    WritableProperty attemptedSamples =
        readSimpleField(
            "attemptedSamples",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty validSamples =
        readSimpleField(
            "validSamples",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty objectPropertyReference =
        readSimpleField(
            "objectPropertyReference",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectPropertyReference")),
                readBuffer));

    WritableProperty windowInterval =
        readSimpleField(
            "windowInterval",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    WritableProperty windowSamples =
        readSimpleField(
            "windowSamples",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("Averaging");
    // Create the instance
    Averaging _averaging;
    _averaging =
        new Averaging(
            objectIdentifier,
            objectName,
            objectType,
            minimumValue,
            minimumValueTimestamp,
            averageValue,
            varianceValue,
            maximumValue,
            maximumValueTimestamp,
            description,
            attemptedSamples,
            validSamples,
            objectPropertyReference,
            windowInterval,
            windowSamples,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _averaging;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Averaging)) {
      return false;
    }
    Averaging that = (Averaging) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getMinimumValue() == that.getMinimumValue())
        && (getMinimumValueTimestamp() == that.getMinimumValueTimestamp())
        && (getAverageValue() == that.getAverageValue())
        && (getVarianceValue() == that.getVarianceValue())
        && (getMaximumValue() == that.getMaximumValue())
        && (getMaximumValueTimestamp() == that.getMaximumValueTimestamp())
        && (getDescription() == that.getDescription())
        && (getAttemptedSamples() == that.getAttemptedSamples())
        && (getValidSamples() == that.getValidSamples())
        && (getObjectPropertyReference() == that.getObjectPropertyReference())
        && (getWindowInterval() == that.getWindowInterval())
        && (getWindowSamples() == that.getWindowSamples())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getMinimumValue(),
        getMinimumValueTimestamp(),
        getAverageValue(),
        getVarianceValue(),
        getMaximumValue(),
        getMaximumValueTimestamp(),
        getDescription(),
        getAttemptedSamples(),
        getValidSamples(),
        getObjectPropertyReference(),
        getWindowInterval(),
        getWindowSamples(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
