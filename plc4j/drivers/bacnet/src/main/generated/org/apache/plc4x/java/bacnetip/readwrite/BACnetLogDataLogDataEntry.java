/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public abstract class BACnetLogDataLogDataEntry implements Message {

  // Abstract accessors for discriminator values.

  // Properties.
  protected final BACnetTagHeader peekedTagHeader;

  public BACnetLogDataLogDataEntry(BACnetTagHeader peekedTagHeader) {
    super();
    this.peekedTagHeader = peekedTagHeader;
  }

  public BACnetTagHeader getPeekedTagHeader() {
    return peekedTagHeader;
  }

  public short getPeekedTagNumber() {
    return (short) (getPeekedTagHeader().getActualTagNumber());
  }

  protected abstract void serializeBACnetLogDataLogDataEntryChild(WriteBuffer writeBuffer)
      throws SerializationException;

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("BACnetLogDataLogDataEntry");

    // Virtual field (doesn't actually serialize anything, just makes the value available)
    short peekedTagNumber = getPeekedTagNumber();
    writeBuffer.writeVirtual("peekedTagNumber", peekedTagNumber);

    // Switch field (Serialize the sub-type)
    serializeBACnetLogDataLogDataEntryChild(writeBuffer);

    writeBuffer.popContext("BACnetLogDataLogDataEntry");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    BACnetLogDataLogDataEntry _value = this;

    // A virtual field doesn't have any in- or output.

    // Length of sub-type elements will be added by sub-type...

    return lengthInBits;
  }

  public static BACnetLogDataLogDataEntry staticParse(ReadBuffer readBuffer, Object... args)
      throws ParseException {
    PositionAware positionAware = readBuffer;
    return staticParse(readBuffer);
  }

  public static BACnetLogDataLogDataEntry staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("BACnetLogDataLogDataEntry");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    BACnetTagHeader peekedTagHeader =
        readPeekField(
            "peekedTagHeader",
            new DataReaderComplexDefault<>(
                () -> BACnetTagHeader.staticParse(readBuffer), readBuffer));
    short peekedTagNumber =
        readVirtualField("peekedTagNumber", short.class, peekedTagHeader.getActualTagNumber());

    // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
    BACnetLogDataLogDataEntryBuilder builder = null;
    if (EvaluationHelper.equals(peekedTagNumber, (short) 0)) {
      builder = BACnetLogDataLogDataEntryBooleanValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 1)) {
      builder = BACnetLogDataLogDataEntryRealValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 2)) {
      builder = BACnetLogDataLogDataEntryEnumeratedValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 3)) {
      builder = BACnetLogDataLogDataEntryUnsignedValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 4)) {
      builder = BACnetLogDataLogDataEntryIntegerValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 5)) {
      builder = BACnetLogDataLogDataEntryBitStringValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 6)) {
      builder = BACnetLogDataLogDataEntryNullValue.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 7)) {
      builder = BACnetLogDataLogDataEntryFailure.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(peekedTagNumber, (short) 8)) {
      builder = BACnetLogDataLogDataEntryAnyValue.staticParseBuilder(readBuffer);
    }
    if (builder == null) {
      throw new ParseException(
          "Unsupported case for discriminated type"
              + " parameters ["
              + "peekedTagNumber="
              + peekedTagNumber
              + "]");
    }

    readBuffer.closeContext("BACnetLogDataLogDataEntry");
    // Create the instance
    BACnetLogDataLogDataEntry _bACnetLogDataLogDataEntry = builder.build(peekedTagHeader);
    return _bACnetLogDataLogDataEntry;
  }

  public static interface BACnetLogDataLogDataEntryBuilder {
    BACnetLogDataLogDataEntry build(BACnetTagHeader peekedTagHeader);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof BACnetLogDataLogDataEntry)) {
      return false;
    }
    BACnetLogDataLogDataEntry that = (BACnetLogDataLogDataEntry) o;
    return (getPeekedTagHeader() == that.getPeekedTagHeader()) && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(getPeekedTagHeader());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
