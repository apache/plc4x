/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier
    extends BACnetFaultParameterFaultExtendedParametersEntry implements Message {

  // Accessors for discriminator values.

  // Properties.
  protected final BACnetApplicationTagObjectIdentifier objectidentifierValue;

  public BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier(
      BACnetTagHeader peekedTagHeader, BACnetApplicationTagObjectIdentifier objectidentifierValue) {
    super(peekedTagHeader);
    this.objectidentifierValue = objectidentifierValue;
  }

  public BACnetApplicationTagObjectIdentifier getObjectidentifierValue() {
    return objectidentifierValue;
  }

  @Override
  protected void serializeBACnetFaultParameterFaultExtendedParametersEntryChild(
      WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier");

    // Simple Field (objectidentifierValue)
    writeSimpleField(
        "objectidentifierValue",
        objectidentifierValue,
        new DataWriterComplexDefault<>(writeBuffer));

    writeBuffer.popContext("BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier _value = this;

    // Simple field (objectidentifierValue)
    lengthInBits += objectidentifierValue.getLengthInBits();

    return lengthInBits;
  }

  public static BACnetFaultParameterFaultExtendedParametersEntryObjectidentifierBuilder
      staticParseBuilder(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    BACnetApplicationTagObjectIdentifier objectidentifierValue =
        readSimpleField(
            "objectidentifierValue",
            new DataReaderComplexDefault<>(
                () ->
                    (BACnetApplicationTagObjectIdentifier)
                        BACnetApplicationTag.staticParse(readBuffer),
                readBuffer));

    readBuffer.closeContext("BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier");
    // Create the instance
    return new BACnetFaultParameterFaultExtendedParametersEntryObjectidentifierBuilder(
        objectidentifierValue);
  }

  public static class BACnetFaultParameterFaultExtendedParametersEntryObjectidentifierBuilder
      implements BACnetFaultParameterFaultExtendedParametersEntry
          .BACnetFaultParameterFaultExtendedParametersEntryBuilder {
    private final BACnetApplicationTagObjectIdentifier objectidentifierValue;

    public BACnetFaultParameterFaultExtendedParametersEntryObjectidentifierBuilder(
        BACnetApplicationTagObjectIdentifier objectidentifierValue) {

      this.objectidentifierValue = objectidentifierValue;
    }

    public BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier build(
        BACnetTagHeader peekedTagHeader) {
      BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier
          bACnetFaultParameterFaultExtendedParametersEntryObjectidentifier =
              new BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier(
                  peekedTagHeader, objectidentifierValue);
      return bACnetFaultParameterFaultExtendedParametersEntryObjectidentifier;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier)) {
      return false;
    }
    BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier that =
        (BACnetFaultParameterFaultExtendedParametersEntryObjectidentifier) o;
    return (getObjectidentifierValue() == that.getObjectidentifierValue())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getObjectidentifierValue());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
