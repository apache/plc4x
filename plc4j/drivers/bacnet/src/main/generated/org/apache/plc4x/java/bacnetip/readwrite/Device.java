/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class Device implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final ReadableProperty systemStatus;
  protected final ReadableProperty vendorName;
  protected final ReadableProperty vendorIdentifier;
  protected final ReadableProperty modelName;
  protected final ReadableProperty firmwareRevision;
  protected final ReadableProperty applicationSoftwareVersion;
  protected final OptionalProperty location;
  protected final OptionalProperty description;
  protected final ReadableProperty protocolVersion;
  protected final ReadableProperty protocolRevision;
  protected final ReadableProperty protocolServicesSupported;
  protected final ReadableProperty protocolObjectTypesSupported;
  protected final ReadableProperty objectList;
  protected final OptionalProperty structuredObjectList;
  protected final ReadableProperty maxAPDULengthAccepted;
  protected final ReadableProperty segmentationSupported;
  protected final OptionalProperty maxSegmentsAccepted;
  protected final OptionalProperty vTClassesSupported;
  protected final OptionalProperty activeVTSessions;
  protected final OptionalProperty localTime;
  protected final OptionalProperty localDate;
  protected final OptionalProperty uTCOffset;
  protected final OptionalProperty daylightSavingsStatus;
  protected final OptionalProperty aPDUSegmentTimeout;
  protected final ReadableProperty aPDUTimeout;
  protected final ReadableProperty numberOfAPDURetries;
  protected final OptionalProperty timeSynchronizationRecipients;
  protected final OptionalProperty maxMaster;
  protected final OptionalProperty maxInfoFrames;
  protected final ReadableProperty deviceAddressBinding;
  protected final ReadableProperty databaseRevision;
  protected final OptionalProperty configurationFiles;
  protected final OptionalProperty lastRestoreTime;
  protected final OptionalProperty backupFailureTimeout;
  protected final OptionalProperty backupPreparationTime;
  protected final OptionalProperty restorePreparationTime;
  protected final OptionalProperty restoreCompletionTime;
  protected final OptionalProperty backupAndRestoreState;
  protected final OptionalProperty activeCOVSubscriptions;
  protected final OptionalProperty lastRestartReason;
  protected final OptionalProperty timeOfDeviceRestart;
  protected final OptionalProperty restartNotificationRecipients;
  protected final OptionalProperty uTCTimeSynchronizationRecipients;
  protected final OptionalProperty timeSynchronizationInterval;
  protected final OptionalProperty alignIntervals;
  protected final OptionalProperty intervalOffset;
  protected final OptionalProperty serialNumber;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty statusFlags;
  protected final OptionalProperty eventState;
  protected final OptionalProperty reliability;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final OptionalProperty activeCOVMultipleSubscriptions;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty deployedProfileLocation;
  protected final OptionalProperty profileName;

  public Device(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      ReadableProperty systemStatus,
      ReadableProperty vendorName,
      ReadableProperty vendorIdentifier,
      ReadableProperty modelName,
      ReadableProperty firmwareRevision,
      ReadableProperty applicationSoftwareVersion,
      OptionalProperty location,
      OptionalProperty description,
      ReadableProperty protocolVersion,
      ReadableProperty protocolRevision,
      ReadableProperty protocolServicesSupported,
      ReadableProperty protocolObjectTypesSupported,
      ReadableProperty objectList,
      OptionalProperty structuredObjectList,
      ReadableProperty maxAPDULengthAccepted,
      ReadableProperty segmentationSupported,
      OptionalProperty maxSegmentsAccepted,
      OptionalProperty vTClassesSupported,
      OptionalProperty activeVTSessions,
      OptionalProperty localTime,
      OptionalProperty localDate,
      OptionalProperty uTCOffset,
      OptionalProperty daylightSavingsStatus,
      OptionalProperty aPDUSegmentTimeout,
      ReadableProperty aPDUTimeout,
      ReadableProperty numberOfAPDURetries,
      OptionalProperty timeSynchronizationRecipients,
      OptionalProperty maxMaster,
      OptionalProperty maxInfoFrames,
      ReadableProperty deviceAddressBinding,
      ReadableProperty databaseRevision,
      OptionalProperty configurationFiles,
      OptionalProperty lastRestoreTime,
      OptionalProperty backupFailureTimeout,
      OptionalProperty backupPreparationTime,
      OptionalProperty restorePreparationTime,
      OptionalProperty restoreCompletionTime,
      OptionalProperty backupAndRestoreState,
      OptionalProperty activeCOVSubscriptions,
      OptionalProperty lastRestartReason,
      OptionalProperty timeOfDeviceRestart,
      OptionalProperty restartNotificationRecipients,
      OptionalProperty uTCTimeSynchronizationRecipients,
      OptionalProperty timeSynchronizationInterval,
      OptionalProperty alignIntervals,
      OptionalProperty intervalOffset,
      OptionalProperty serialNumber,
      ReadableProperty propertyList,
      OptionalProperty statusFlags,
      OptionalProperty eventState,
      OptionalProperty reliability,
      OptionalProperty eventDetectionEnable,
      OptionalProperty notificationClass,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty reliabilityEvaluationInhibit,
      OptionalProperty activeCOVMultipleSubscriptions,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty deployedProfileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.systemStatus = systemStatus;
    this.vendorName = vendorName;
    this.vendorIdentifier = vendorIdentifier;
    this.modelName = modelName;
    this.firmwareRevision = firmwareRevision;
    this.applicationSoftwareVersion = applicationSoftwareVersion;
    this.location = location;
    this.description = description;
    this.protocolVersion = protocolVersion;
    this.protocolRevision = protocolRevision;
    this.protocolServicesSupported = protocolServicesSupported;
    this.protocolObjectTypesSupported = protocolObjectTypesSupported;
    this.objectList = objectList;
    this.structuredObjectList = structuredObjectList;
    this.maxAPDULengthAccepted = maxAPDULengthAccepted;
    this.segmentationSupported = segmentationSupported;
    this.maxSegmentsAccepted = maxSegmentsAccepted;
    this.vTClassesSupported = vTClassesSupported;
    this.activeVTSessions = activeVTSessions;
    this.localTime = localTime;
    this.localDate = localDate;
    this.uTCOffset = uTCOffset;
    this.daylightSavingsStatus = daylightSavingsStatus;
    this.aPDUSegmentTimeout = aPDUSegmentTimeout;
    this.aPDUTimeout = aPDUTimeout;
    this.numberOfAPDURetries = numberOfAPDURetries;
    this.timeSynchronizationRecipients = timeSynchronizationRecipients;
    this.maxMaster = maxMaster;
    this.maxInfoFrames = maxInfoFrames;
    this.deviceAddressBinding = deviceAddressBinding;
    this.databaseRevision = databaseRevision;
    this.configurationFiles = configurationFiles;
    this.lastRestoreTime = lastRestoreTime;
    this.backupFailureTimeout = backupFailureTimeout;
    this.backupPreparationTime = backupPreparationTime;
    this.restorePreparationTime = restorePreparationTime;
    this.restoreCompletionTime = restoreCompletionTime;
    this.backupAndRestoreState = backupAndRestoreState;
    this.activeCOVSubscriptions = activeCOVSubscriptions;
    this.lastRestartReason = lastRestartReason;
    this.timeOfDeviceRestart = timeOfDeviceRestart;
    this.restartNotificationRecipients = restartNotificationRecipients;
    this.uTCTimeSynchronizationRecipients = uTCTimeSynchronizationRecipients;
    this.timeSynchronizationInterval = timeSynchronizationInterval;
    this.alignIntervals = alignIntervals;
    this.intervalOffset = intervalOffset;
    this.serialNumber = serialNumber;
    this.propertyList = propertyList;
    this.statusFlags = statusFlags;
    this.eventState = eventState;
    this.reliability = reliability;
    this.eventDetectionEnable = eventDetectionEnable;
    this.notificationClass = notificationClass;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.activeCOVMultipleSubscriptions = activeCOVMultipleSubscriptions;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.deployedProfileLocation = deployedProfileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public ReadableProperty getSystemStatus() {
    return systemStatus;
  }

  public ReadableProperty getVendorName() {
    return vendorName;
  }

  public ReadableProperty getVendorIdentifier() {
    return vendorIdentifier;
  }

  public ReadableProperty getModelName() {
    return modelName;
  }

  public ReadableProperty getFirmwareRevision() {
    return firmwareRevision;
  }

  public ReadableProperty getApplicationSoftwareVersion() {
    return applicationSoftwareVersion;
  }

  public OptionalProperty getLocation() {
    return location;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getProtocolVersion() {
    return protocolVersion;
  }

  public ReadableProperty getProtocolRevision() {
    return protocolRevision;
  }

  public ReadableProperty getProtocolServicesSupported() {
    return protocolServicesSupported;
  }

  public ReadableProperty getProtocolObjectTypesSupported() {
    return protocolObjectTypesSupported;
  }

  public ReadableProperty getObjectList() {
    return objectList;
  }

  public OptionalProperty getStructuredObjectList() {
    return structuredObjectList;
  }

  public ReadableProperty getMaxAPDULengthAccepted() {
    return maxAPDULengthAccepted;
  }

  public ReadableProperty getSegmentationSupported() {
    return segmentationSupported;
  }

  public OptionalProperty getMaxSegmentsAccepted() {
    return maxSegmentsAccepted;
  }

  public OptionalProperty getVTClassesSupported() {
    return vTClassesSupported;
  }

  public OptionalProperty getActiveVTSessions() {
    return activeVTSessions;
  }

  public OptionalProperty getLocalTime() {
    return localTime;
  }

  public OptionalProperty getLocalDate() {
    return localDate;
  }

  public OptionalProperty getUTCOffset() {
    return uTCOffset;
  }

  public OptionalProperty getDaylightSavingsStatus() {
    return daylightSavingsStatus;
  }

  public OptionalProperty getAPDUSegmentTimeout() {
    return aPDUSegmentTimeout;
  }

  public ReadableProperty getAPDUTimeout() {
    return aPDUTimeout;
  }

  public ReadableProperty getNumberOfAPDURetries() {
    return numberOfAPDURetries;
  }

  public OptionalProperty getTimeSynchronizationRecipients() {
    return timeSynchronizationRecipients;
  }

  public OptionalProperty getMaxMaster() {
    return maxMaster;
  }

  public OptionalProperty getMaxInfoFrames() {
    return maxInfoFrames;
  }

  public ReadableProperty getDeviceAddressBinding() {
    return deviceAddressBinding;
  }

  public ReadableProperty getDatabaseRevision() {
    return databaseRevision;
  }

  public OptionalProperty getConfigurationFiles() {
    return configurationFiles;
  }

  public OptionalProperty getLastRestoreTime() {
    return lastRestoreTime;
  }

  public OptionalProperty getBackupFailureTimeout() {
    return backupFailureTimeout;
  }

  public OptionalProperty getBackupPreparationTime() {
    return backupPreparationTime;
  }

  public OptionalProperty getRestorePreparationTime() {
    return restorePreparationTime;
  }

  public OptionalProperty getRestoreCompletionTime() {
    return restoreCompletionTime;
  }

  public OptionalProperty getBackupAndRestoreState() {
    return backupAndRestoreState;
  }

  public OptionalProperty getActiveCOVSubscriptions() {
    return activeCOVSubscriptions;
  }

  public OptionalProperty getLastRestartReason() {
    return lastRestartReason;
  }

  public OptionalProperty getTimeOfDeviceRestart() {
    return timeOfDeviceRestart;
  }

  public OptionalProperty getRestartNotificationRecipients() {
    return restartNotificationRecipients;
  }

  public OptionalProperty getUTCTimeSynchronizationRecipients() {
    return uTCTimeSynchronizationRecipients;
  }

  public OptionalProperty getTimeSynchronizationInterval() {
    return timeSynchronizationInterval;
  }

  public OptionalProperty getAlignIntervals() {
    return alignIntervals;
  }

  public OptionalProperty getIntervalOffset() {
    return intervalOffset;
  }

  public OptionalProperty getSerialNumber() {
    return serialNumber;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getStatusFlags() {
    return statusFlags;
  }

  public OptionalProperty getEventState() {
    return eventState;
  }

  public OptionalProperty getReliability() {
    return reliability;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public OptionalProperty getActiveCOVMultipleSubscriptions() {
    return activeCOVMultipleSubscriptions;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getDeployedProfileLocation() {
    return deployedProfileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("Device");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (systemStatus)
    writeSimpleField("systemStatus", systemStatus, writeComplex(writeBuffer));

    // Simple Field (vendorName)
    writeSimpleField("vendorName", vendorName, writeComplex(writeBuffer));

    // Simple Field (vendorIdentifier)
    writeSimpleField("vendorIdentifier", vendorIdentifier, writeComplex(writeBuffer));

    // Simple Field (modelName)
    writeSimpleField("modelName", modelName, writeComplex(writeBuffer));

    // Simple Field (firmwareRevision)
    writeSimpleField("firmwareRevision", firmwareRevision, writeComplex(writeBuffer));

    // Simple Field (applicationSoftwareVersion)
    writeSimpleField(
        "applicationSoftwareVersion", applicationSoftwareVersion, writeComplex(writeBuffer));

    // Simple Field (location)
    writeSimpleField("location", location, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (protocolVersion)
    writeSimpleField("protocolVersion", protocolVersion, writeComplex(writeBuffer));

    // Simple Field (protocolRevision)
    writeSimpleField("protocolRevision", protocolRevision, writeComplex(writeBuffer));

    // Simple Field (protocolServicesSupported)
    writeSimpleField(
        "protocolServicesSupported", protocolServicesSupported, writeComplex(writeBuffer));

    // Simple Field (protocolObjectTypesSupported)
    writeSimpleField(
        "protocolObjectTypesSupported", protocolObjectTypesSupported, writeComplex(writeBuffer));

    // Simple Field (objectList)
    writeSimpleField("objectList", objectList, writeComplex(writeBuffer));

    // Simple Field (structuredObjectList)
    writeSimpleField("structuredObjectList", structuredObjectList, writeComplex(writeBuffer));

    // Simple Field (maxAPDULengthAccepted)
    writeSimpleField("maxAPDULengthAccepted", maxAPDULengthAccepted, writeComplex(writeBuffer));

    // Simple Field (segmentationSupported)
    writeSimpleField("segmentationSupported", segmentationSupported, writeComplex(writeBuffer));

    // Simple Field (maxSegmentsAccepted)
    writeSimpleField("maxSegmentsAccepted", maxSegmentsAccepted, writeComplex(writeBuffer));

    // Simple Field (vTClassesSupported)
    writeSimpleField("vTClassesSupported", vTClassesSupported, writeComplex(writeBuffer));

    // Simple Field (activeVTSessions)
    writeSimpleField("activeVTSessions", activeVTSessions, writeComplex(writeBuffer));

    // Simple Field (localTime)
    writeSimpleField("localTime", localTime, writeComplex(writeBuffer));

    // Simple Field (localDate)
    writeSimpleField("localDate", localDate, writeComplex(writeBuffer));

    // Simple Field (uTCOffset)
    writeSimpleField("uTCOffset", uTCOffset, writeComplex(writeBuffer));

    // Simple Field (daylightSavingsStatus)
    writeSimpleField("daylightSavingsStatus", daylightSavingsStatus, writeComplex(writeBuffer));

    // Simple Field (aPDUSegmentTimeout)
    writeSimpleField("aPDUSegmentTimeout", aPDUSegmentTimeout, writeComplex(writeBuffer));

    // Simple Field (aPDUTimeout)
    writeSimpleField("aPDUTimeout", aPDUTimeout, writeComplex(writeBuffer));

    // Simple Field (numberOfAPDURetries)
    writeSimpleField("numberOfAPDURetries", numberOfAPDURetries, writeComplex(writeBuffer));

    // Simple Field (timeSynchronizationRecipients)
    writeSimpleField(
        "timeSynchronizationRecipients", timeSynchronizationRecipients, writeComplex(writeBuffer));

    // Simple Field (maxMaster)
    writeSimpleField("maxMaster", maxMaster, writeComplex(writeBuffer));

    // Simple Field (maxInfoFrames)
    writeSimpleField("maxInfoFrames", maxInfoFrames, writeComplex(writeBuffer));

    // Simple Field (deviceAddressBinding)
    writeSimpleField("deviceAddressBinding", deviceAddressBinding, writeComplex(writeBuffer));

    // Simple Field (databaseRevision)
    writeSimpleField("databaseRevision", databaseRevision, writeComplex(writeBuffer));

    // Simple Field (configurationFiles)
    writeSimpleField("configurationFiles", configurationFiles, writeComplex(writeBuffer));

    // Simple Field (lastRestoreTime)
    writeSimpleField("lastRestoreTime", lastRestoreTime, writeComplex(writeBuffer));

    // Simple Field (backupFailureTimeout)
    writeSimpleField("backupFailureTimeout", backupFailureTimeout, writeComplex(writeBuffer));

    // Simple Field (backupPreparationTime)
    writeSimpleField("backupPreparationTime", backupPreparationTime, writeComplex(writeBuffer));

    // Simple Field (restorePreparationTime)
    writeSimpleField("restorePreparationTime", restorePreparationTime, writeComplex(writeBuffer));

    // Simple Field (restoreCompletionTime)
    writeSimpleField("restoreCompletionTime", restoreCompletionTime, writeComplex(writeBuffer));

    // Simple Field (backupAndRestoreState)
    writeSimpleField("backupAndRestoreState", backupAndRestoreState, writeComplex(writeBuffer));

    // Simple Field (activeCOVSubscriptions)
    writeSimpleField("activeCOVSubscriptions", activeCOVSubscriptions, writeComplex(writeBuffer));

    // Simple Field (lastRestartReason)
    writeSimpleField("lastRestartReason", lastRestartReason, writeComplex(writeBuffer));

    // Simple Field (timeOfDeviceRestart)
    writeSimpleField("timeOfDeviceRestart", timeOfDeviceRestart, writeComplex(writeBuffer));

    // Simple Field (restartNotificationRecipients)
    writeSimpleField(
        "restartNotificationRecipients", restartNotificationRecipients, writeComplex(writeBuffer));

    // Simple Field (uTCTimeSynchronizationRecipients)
    writeSimpleField(
        "uTCTimeSynchronizationRecipients",
        uTCTimeSynchronizationRecipients,
        writeComplex(writeBuffer));

    // Simple Field (timeSynchronizationInterval)
    writeSimpleField(
        "timeSynchronizationInterval", timeSynchronizationInterval, writeComplex(writeBuffer));

    // Simple Field (alignIntervals)
    writeSimpleField("alignIntervals", alignIntervals, writeComplex(writeBuffer));

    // Simple Field (intervalOffset)
    writeSimpleField("intervalOffset", intervalOffset, writeComplex(writeBuffer));

    // Simple Field (serialNumber)
    writeSimpleField("serialNumber", serialNumber, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (activeCOVMultipleSubscriptions)
    writeSimpleField(
        "activeCOVMultipleSubscriptions",
        activeCOVMultipleSubscriptions,
        writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (deployedProfileLocation)
    writeSimpleField("deployedProfileLocation", deployedProfileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("Device");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    Device _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (systemStatus)
    lengthInBits += systemStatus.getLengthInBits();

    // Simple field (vendorName)
    lengthInBits += vendorName.getLengthInBits();

    // Simple field (vendorIdentifier)
    lengthInBits += vendorIdentifier.getLengthInBits();

    // Simple field (modelName)
    lengthInBits += modelName.getLengthInBits();

    // Simple field (firmwareRevision)
    lengthInBits += firmwareRevision.getLengthInBits();

    // Simple field (applicationSoftwareVersion)
    lengthInBits += applicationSoftwareVersion.getLengthInBits();

    // Simple field (location)
    lengthInBits += location.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (protocolVersion)
    lengthInBits += protocolVersion.getLengthInBits();

    // Simple field (protocolRevision)
    lengthInBits += protocolRevision.getLengthInBits();

    // Simple field (protocolServicesSupported)
    lengthInBits += protocolServicesSupported.getLengthInBits();

    // Simple field (protocolObjectTypesSupported)
    lengthInBits += protocolObjectTypesSupported.getLengthInBits();

    // Simple field (objectList)
    lengthInBits += objectList.getLengthInBits();

    // Simple field (structuredObjectList)
    lengthInBits += structuredObjectList.getLengthInBits();

    // Simple field (maxAPDULengthAccepted)
    lengthInBits += maxAPDULengthAccepted.getLengthInBits();

    // Simple field (segmentationSupported)
    lengthInBits += segmentationSupported.getLengthInBits();

    // Simple field (maxSegmentsAccepted)
    lengthInBits += maxSegmentsAccepted.getLengthInBits();

    // Simple field (vTClassesSupported)
    lengthInBits += vTClassesSupported.getLengthInBits();

    // Simple field (activeVTSessions)
    lengthInBits += activeVTSessions.getLengthInBits();

    // Simple field (localTime)
    lengthInBits += localTime.getLengthInBits();

    // Simple field (localDate)
    lengthInBits += localDate.getLengthInBits();

    // Simple field (uTCOffset)
    lengthInBits += uTCOffset.getLengthInBits();

    // Simple field (daylightSavingsStatus)
    lengthInBits += daylightSavingsStatus.getLengthInBits();

    // Simple field (aPDUSegmentTimeout)
    lengthInBits += aPDUSegmentTimeout.getLengthInBits();

    // Simple field (aPDUTimeout)
    lengthInBits += aPDUTimeout.getLengthInBits();

    // Simple field (numberOfAPDURetries)
    lengthInBits += numberOfAPDURetries.getLengthInBits();

    // Simple field (timeSynchronizationRecipients)
    lengthInBits += timeSynchronizationRecipients.getLengthInBits();

    // Simple field (maxMaster)
    lengthInBits += maxMaster.getLengthInBits();

    // Simple field (maxInfoFrames)
    lengthInBits += maxInfoFrames.getLengthInBits();

    // Simple field (deviceAddressBinding)
    lengthInBits += deviceAddressBinding.getLengthInBits();

    // Simple field (databaseRevision)
    lengthInBits += databaseRevision.getLengthInBits();

    // Simple field (configurationFiles)
    lengthInBits += configurationFiles.getLengthInBits();

    // Simple field (lastRestoreTime)
    lengthInBits += lastRestoreTime.getLengthInBits();

    // Simple field (backupFailureTimeout)
    lengthInBits += backupFailureTimeout.getLengthInBits();

    // Simple field (backupPreparationTime)
    lengthInBits += backupPreparationTime.getLengthInBits();

    // Simple field (restorePreparationTime)
    lengthInBits += restorePreparationTime.getLengthInBits();

    // Simple field (restoreCompletionTime)
    lengthInBits += restoreCompletionTime.getLengthInBits();

    // Simple field (backupAndRestoreState)
    lengthInBits += backupAndRestoreState.getLengthInBits();

    // Simple field (activeCOVSubscriptions)
    lengthInBits += activeCOVSubscriptions.getLengthInBits();

    // Simple field (lastRestartReason)
    lengthInBits += lastRestartReason.getLengthInBits();

    // Simple field (timeOfDeviceRestart)
    lengthInBits += timeOfDeviceRestart.getLengthInBits();

    // Simple field (restartNotificationRecipients)
    lengthInBits += restartNotificationRecipients.getLengthInBits();

    // Simple field (uTCTimeSynchronizationRecipients)
    lengthInBits += uTCTimeSynchronizationRecipients.getLengthInBits();

    // Simple field (timeSynchronizationInterval)
    lengthInBits += timeSynchronizationInterval.getLengthInBits();

    // Simple field (alignIntervals)
    lengthInBits += alignIntervals.getLengthInBits();

    // Simple field (intervalOffset)
    lengthInBits += intervalOffset.getLengthInBits();

    // Simple field (serialNumber)
    lengthInBits += serialNumber.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (activeCOVMultipleSubscriptions)
    lengthInBits += activeCOVMultipleSubscriptions.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (deployedProfileLocation)
    lengthInBits += deployedProfileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static Device staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("Device");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    ReadableProperty systemStatus =
        readSimpleField(
            "systemStatus",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetDeviceStatus")),
                readBuffer));

    ReadableProperty vendorName =
        readSimpleField(
            "vendorName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty vendorIdentifier =
        readSimpleField(
            "vendorIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    ReadableProperty modelName =
        readSimpleField(
            "modelName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty firmwareRevision =
        readSimpleField(
            "firmwareRevision",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty applicationSoftwareVersion =
        readSimpleField(
            "applicationSoftwareVersion",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty location =
        readSimpleField(
            "location",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty protocolVersion =
        readSimpleField(
            "protocolVersion",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty protocolRevision =
        readSimpleField(
            "protocolRevision",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty protocolServicesSupported =
        readSimpleField(
            "protocolServicesSupported",
            readComplex(
                () ->
                    ReadableProperty.staticParse(readBuffer, (String) ("BACnetServicesSupported")),
                readBuffer));

    ReadableProperty protocolObjectTypesSupported =
        readSimpleField(
            "protocolObjectTypesSupported",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectTypesSupported")),
                readBuffer));

    ReadableProperty objectList =
        readSimpleField(
            "objectList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetObjectIdentifier")),
                readBuffer));

    OptionalProperty structuredObjectList =
        readSimpleField(
            "structuredObjectList",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty maxAPDULengthAccepted =
        readSimpleField(
            "maxAPDULengthAccepted",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty segmentationSupported =
        readSimpleField(
            "segmentationSupported",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetSegmentation")),
                readBuffer));

    OptionalProperty maxSegmentsAccepted =
        readSimpleField(
            "maxSegmentsAccepted",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty vTClassesSupported =
        readSimpleField(
            "vTClassesSupported",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetVTClass")),
                readBuffer));

    OptionalProperty activeVTSessions =
        readSimpleField(
            "activeVTSessions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetVTSession")),
                readBuffer));

    OptionalProperty localTime =
        readSimpleField(
            "localTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Time")), readBuffer));

    OptionalProperty localDate =
        readSimpleField(
            "localDate",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Date")), readBuffer));

    OptionalProperty uTCOffset =
        readSimpleField(
            "uTCOffset",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("INTEGER")), readBuffer));

    OptionalProperty daylightSavingsStatus =
        readSimpleField(
            "daylightSavingsStatus",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty aPDUSegmentTimeout =
        readSimpleField(
            "aPDUSegmentTimeout",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty aPDUTimeout =
        readSimpleField(
            "aPDUTimeout",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty numberOfAPDURetries =
        readSimpleField(
            "numberOfAPDURetries",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty timeSynchronizationRecipients =
        readSimpleField(
            "timeSynchronizationRecipients",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetRecipient")),
                readBuffer));

    OptionalProperty maxMaster =
        readSimpleField(
            "maxMaster",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned(0..127)")),
                readBuffer));

    OptionalProperty maxInfoFrames =
        readSimpleField(
            "maxInfoFrames",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty deviceAddressBinding =
        readSimpleField(
            "deviceAddressBinding",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAddressBinding")),
                readBuffer));

    ReadableProperty databaseRevision =
        readSimpleField(
            "databaseRevision",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty configurationFiles =
        readSimpleField(
            "configurationFiles",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetObjectIdentifier")),
                readBuffer));

    OptionalProperty lastRestoreTime =
        readSimpleField(
            "lastRestoreTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetTimeStamp")),
                readBuffer));

    OptionalProperty backupFailureTimeout =
        readSimpleField(
            "backupFailureTimeout",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty backupPreparationTime =
        readSimpleField(
            "backupPreparationTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty restorePreparationTime =
        readSimpleField(
            "restorePreparationTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty restoreCompletionTime =
        readSimpleField(
            "restoreCompletionTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned16")),
                readBuffer));

    OptionalProperty backupAndRestoreState =
        readSimpleField(
            "backupAndRestoreState",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetBackupState")),
                readBuffer));

    OptionalProperty activeCOVSubscriptions =
        readSimpleField(
            "activeCOVSubscriptions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetCOVSubscription")),
                readBuffer));

    OptionalProperty lastRestartReason =
        readSimpleField(
            "lastRestartReason",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetRestartReason")),
                readBuffer));

    OptionalProperty timeOfDeviceRestart =
        readSimpleField(
            "timeOfDeviceRestart",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetTimeStamp")),
                readBuffer));

    OptionalProperty restartNotificationRecipients =
        readSimpleField(
            "restartNotificationRecipients",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetRecipient")),
                readBuffer));

    OptionalProperty uTCTimeSynchronizationRecipients =
        readSimpleField(
            "uTCTimeSynchronizationRecipients",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetRecipient")),
                readBuffer));

    OptionalProperty timeSynchronizationInterval =
        readSimpleField(
            "timeSynchronizationInterval",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty alignIntervals =
        readSimpleField(
            "alignIntervals",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty intervalOffset =
        readSimpleField(
            "intervalOffset",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty serialNumber =
        readSimpleField(
            "serialNumber",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    OptionalProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    OptionalProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty activeCOVMultipleSubscriptions =
        readSimpleField(
            "activeCOVMultipleSubscriptions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetCOVMultipleSubscription")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty deployedProfileLocation =
        readSimpleField(
            "deployedProfileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("Device");
    // Create the instance
    Device _device;
    _device =
        new Device(
            objectIdentifier,
            objectName,
            objectType,
            systemStatus,
            vendorName,
            vendorIdentifier,
            modelName,
            firmwareRevision,
            applicationSoftwareVersion,
            location,
            description,
            protocolVersion,
            protocolRevision,
            protocolServicesSupported,
            protocolObjectTypesSupported,
            objectList,
            structuredObjectList,
            maxAPDULengthAccepted,
            segmentationSupported,
            maxSegmentsAccepted,
            vTClassesSupported,
            activeVTSessions,
            localTime,
            localDate,
            uTCOffset,
            daylightSavingsStatus,
            aPDUSegmentTimeout,
            aPDUTimeout,
            numberOfAPDURetries,
            timeSynchronizationRecipients,
            maxMaster,
            maxInfoFrames,
            deviceAddressBinding,
            databaseRevision,
            configurationFiles,
            lastRestoreTime,
            backupFailureTimeout,
            backupPreparationTime,
            restorePreparationTime,
            restoreCompletionTime,
            backupAndRestoreState,
            activeCOVSubscriptions,
            lastRestartReason,
            timeOfDeviceRestart,
            restartNotificationRecipients,
            uTCTimeSynchronizationRecipients,
            timeSynchronizationInterval,
            alignIntervals,
            intervalOffset,
            serialNumber,
            propertyList,
            statusFlags,
            eventState,
            reliability,
            eventDetectionEnable,
            notificationClass,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            reliabilityEvaluationInhibit,
            activeCOVMultipleSubscriptions,
            tags,
            profileLocation,
            deployedProfileLocation,
            profileName);
    return _device;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Device)) {
      return false;
    }
    Device that = (Device) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getSystemStatus() == that.getSystemStatus())
        && (getVendorName() == that.getVendorName())
        && (getVendorIdentifier() == that.getVendorIdentifier())
        && (getModelName() == that.getModelName())
        && (getFirmwareRevision() == that.getFirmwareRevision())
        && (getApplicationSoftwareVersion() == that.getApplicationSoftwareVersion())
        && (getLocation() == that.getLocation())
        && (getDescription() == that.getDescription())
        && (getProtocolVersion() == that.getProtocolVersion())
        && (getProtocolRevision() == that.getProtocolRevision())
        && (getProtocolServicesSupported() == that.getProtocolServicesSupported())
        && (getProtocolObjectTypesSupported() == that.getProtocolObjectTypesSupported())
        && (getObjectList() == that.getObjectList())
        && (getStructuredObjectList() == that.getStructuredObjectList())
        && (getMaxAPDULengthAccepted() == that.getMaxAPDULengthAccepted())
        && (getSegmentationSupported() == that.getSegmentationSupported())
        && (getMaxSegmentsAccepted() == that.getMaxSegmentsAccepted())
        && (getVTClassesSupported() == that.getVTClassesSupported())
        && (getActiveVTSessions() == that.getActiveVTSessions())
        && (getLocalTime() == that.getLocalTime())
        && (getLocalDate() == that.getLocalDate())
        && (getUTCOffset() == that.getUTCOffset())
        && (getDaylightSavingsStatus() == that.getDaylightSavingsStatus())
        && (getAPDUSegmentTimeout() == that.getAPDUSegmentTimeout())
        && (getAPDUTimeout() == that.getAPDUTimeout())
        && (getNumberOfAPDURetries() == that.getNumberOfAPDURetries())
        && (getTimeSynchronizationRecipients() == that.getTimeSynchronizationRecipients())
        && (getMaxMaster() == that.getMaxMaster())
        && (getMaxInfoFrames() == that.getMaxInfoFrames())
        && (getDeviceAddressBinding() == that.getDeviceAddressBinding())
        && (getDatabaseRevision() == that.getDatabaseRevision())
        && (getConfigurationFiles() == that.getConfigurationFiles())
        && (getLastRestoreTime() == that.getLastRestoreTime())
        && (getBackupFailureTimeout() == that.getBackupFailureTimeout())
        && (getBackupPreparationTime() == that.getBackupPreparationTime())
        && (getRestorePreparationTime() == that.getRestorePreparationTime())
        && (getRestoreCompletionTime() == that.getRestoreCompletionTime())
        && (getBackupAndRestoreState() == that.getBackupAndRestoreState())
        && (getActiveCOVSubscriptions() == that.getActiveCOVSubscriptions())
        && (getLastRestartReason() == that.getLastRestartReason())
        && (getTimeOfDeviceRestart() == that.getTimeOfDeviceRestart())
        && (getRestartNotificationRecipients() == that.getRestartNotificationRecipients())
        && (getUTCTimeSynchronizationRecipients() == that.getUTCTimeSynchronizationRecipients())
        && (getTimeSynchronizationInterval() == that.getTimeSynchronizationInterval())
        && (getAlignIntervals() == that.getAlignIntervals())
        && (getIntervalOffset() == that.getIntervalOffset())
        && (getSerialNumber() == that.getSerialNumber())
        && (getPropertyList() == that.getPropertyList())
        && (getStatusFlags() == that.getStatusFlags())
        && (getEventState() == that.getEventState())
        && (getReliability() == that.getReliability())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getNotificationClass() == that.getNotificationClass())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getActiveCOVMultipleSubscriptions() == that.getActiveCOVMultipleSubscriptions())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getDeployedProfileLocation() == that.getDeployedProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getSystemStatus(),
        getVendorName(),
        getVendorIdentifier(),
        getModelName(),
        getFirmwareRevision(),
        getApplicationSoftwareVersion(),
        getLocation(),
        getDescription(),
        getProtocolVersion(),
        getProtocolRevision(),
        getProtocolServicesSupported(),
        getProtocolObjectTypesSupported(),
        getObjectList(),
        getStructuredObjectList(),
        getMaxAPDULengthAccepted(),
        getSegmentationSupported(),
        getMaxSegmentsAccepted(),
        getVTClassesSupported(),
        getActiveVTSessions(),
        getLocalTime(),
        getLocalDate(),
        getUTCOffset(),
        getDaylightSavingsStatus(),
        getAPDUSegmentTimeout(),
        getAPDUTimeout(),
        getNumberOfAPDURetries(),
        getTimeSynchronizationRecipients(),
        getMaxMaster(),
        getMaxInfoFrames(),
        getDeviceAddressBinding(),
        getDatabaseRevision(),
        getConfigurationFiles(),
        getLastRestoreTime(),
        getBackupFailureTimeout(),
        getBackupPreparationTime(),
        getRestorePreparationTime(),
        getRestoreCompletionTime(),
        getBackupAndRestoreState(),
        getActiveCOVSubscriptions(),
        getLastRestartReason(),
        getTimeOfDeviceRestart(),
        getRestartNotificationRecipients(),
        getUTCTimeSynchronizationRecipients(),
        getTimeSynchronizationInterval(),
        getAlignIntervals(),
        getIntervalOffset(),
        getSerialNumber(),
        getPropertyList(),
        getStatusFlags(),
        getEventState(),
        getReliability(),
        getEventDetectionEnable(),
        getNotificationClass(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getReliabilityEvaluationInhibit(),
        getActiveCOVMultipleSubscriptions(),
        getTags(),
        getProfileLocation(),
        getDeployedProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
