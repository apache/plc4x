/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class BACnetWriteAccessSpecification implements Message {

  // Properties.
  protected final BACnetContextTagObjectIdentifier objectIdentifier;
  protected final BACnetOpeningTag openingTag;
  protected final List<BACnetPropertyWriteDefinition> listOfPropertyWriteDefinition;
  protected final BACnetClosingTag closingTag;

  public BACnetWriteAccessSpecification(
      BACnetContextTagObjectIdentifier objectIdentifier,
      BACnetOpeningTag openingTag,
      List<BACnetPropertyWriteDefinition> listOfPropertyWriteDefinition,
      BACnetClosingTag closingTag) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.openingTag = openingTag;
    this.listOfPropertyWriteDefinition = listOfPropertyWriteDefinition;
    this.closingTag = closingTag;
  }

  public BACnetContextTagObjectIdentifier getObjectIdentifier() {
    return objectIdentifier;
  }

  public BACnetOpeningTag getOpeningTag() {
    return openingTag;
  }

  public List<BACnetPropertyWriteDefinition> getListOfPropertyWriteDefinition() {
    return listOfPropertyWriteDefinition;
  }

  public BACnetClosingTag getClosingTag() {
    return closingTag;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("BACnetWriteAccessSpecification");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (openingTag)
    writeSimpleField("openingTag", openingTag, writeComplex(writeBuffer));

    // Array Field (listOfPropertyWriteDefinition)
    writeComplexTypeArrayField(
        "listOfPropertyWriteDefinition", listOfPropertyWriteDefinition, writeBuffer);

    // Simple Field (closingTag)
    writeSimpleField("closingTag", closingTag, writeComplex(writeBuffer));

    writeBuffer.popContext("BACnetWriteAccessSpecification");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    BACnetWriteAccessSpecification _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (openingTag)
    lengthInBits += openingTag.getLengthInBits();

    // Array field
    if (listOfPropertyWriteDefinition != null) {
      for (Message element : listOfPropertyWriteDefinition) {
        lengthInBits += element.getLengthInBits();
      }
    }

    // Simple field (closingTag)
    lengthInBits += closingTag.getLengthInBits();

    return lengthInBits;
  }

  public static BACnetWriteAccessSpecification staticParse(ReadBuffer readBuffer)
      throws ParseException {
    readBuffer.pullContext("BACnetWriteAccessSpecification");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    BACnetContextTagObjectIdentifier objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () ->
                    (BACnetContextTagObjectIdentifier)
                        BACnetContextTag.staticParse(
                            readBuffer,
                            (short) (0),
                            (BACnetDataType) (BACnetDataType.BACNET_OBJECT_IDENTIFIER)),
                readBuffer));

    BACnetOpeningTag openingTag =
        readSimpleField(
            "openingTag",
            readComplex(() -> BACnetOpeningTag.staticParse(readBuffer, (short) (1)), readBuffer));

    List<BACnetPropertyWriteDefinition> listOfPropertyWriteDefinition =
        readTerminatedArrayField(
            "listOfPropertyWriteDefinition",
            readComplex(
                () ->
                    BACnetPropertyWriteDefinition.staticParse(
                        readBuffer, (BACnetObjectType) (objectIdentifier.getObjectType())),
                readBuffer),
            () ->
                ((boolean)
                    (org.apache.plc4x.java.bacnetip.readwrite.utils.StaticHelper
                        .isBACnetConstructedDataClosingTag(readBuffer, false, 1))));

    BACnetClosingTag closingTag =
        readSimpleField(
            "closingTag",
            readComplex(() -> BACnetClosingTag.staticParse(readBuffer, (short) (1)), readBuffer));

    readBuffer.closeContext("BACnetWriteAccessSpecification");
    // Create the instance
    BACnetWriteAccessSpecification _bACnetWriteAccessSpecification;
    _bACnetWriteAccessSpecification =
        new BACnetWriteAccessSpecification(
            objectIdentifier, openingTag, listOfPropertyWriteDefinition, closingTag);
    return _bACnetWriteAccessSpecification;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof BACnetWriteAccessSpecification)) {
      return false;
    }
    BACnetWriteAccessSpecification that = (BACnetWriteAccessSpecification) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getOpeningTag() == that.getOpeningTag())
        && (getListOfPropertyWriteDefinition() == that.getListOfPropertyWriteDefinition())
        && (getClosingTag() == that.getClosingTag())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getOpeningTag(),
        getListOfPropertyWriteDefinition(),
        getClosingTag());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
