/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class AccessZone implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final WritableProperty globalIdentifier;
  protected final ReadableProperty occupancyState;
  protected final ReadableProperty statusFlags;
  protected final ReadableProperty eventState;
  protected final ReadableProperty reliability;
  protected final ReadableProperty outOfService;
  protected final OptionalProperty occupancyCount;
  protected final OptionalProperty occupancyCountEnable;
  protected final OptionalProperty adjustValue;
  protected final OptionalProperty occupancyUpperLimit;
  protected final OptionalProperty occupancyLowerLimit;
  protected final OptionalProperty credentialsInZone;
  protected final OptionalProperty lastCredentialAdded;
  protected final OptionalProperty lastCredentialAddedTime;
  protected final OptionalProperty lastCredentialRemoved;
  protected final OptionalProperty lastCredentialRemovedTime;
  protected final OptionalProperty passbackMode;
  protected final OptionalProperty passbackTimeout;
  protected final ReadableProperty entryPoints;
  protected final ReadableProperty exitPoints;
  protected final OptionalProperty timeDelay;
  protected final OptionalProperty notificationClass;
  protected final OptionalProperty alarmValues;
  protected final OptionalProperty eventEnable;
  protected final OptionalProperty ackedTransitions;
  protected final OptionalProperty notifyType;
  protected final OptionalProperty eventTimeStamps;
  protected final OptionalProperty eventMessageTexts;
  protected final OptionalProperty eventMessageTextsConfig;
  protected final OptionalProperty eventDetectionEnable;
  protected final OptionalProperty eventAlgorithmInhibitRef;
  protected final OptionalProperty eventAlgorithmInhibit;
  protected final OptionalProperty timeDelayNormal;
  protected final OptionalProperty reliabilityEvaluationInhibit;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public AccessZone(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      WritableProperty globalIdentifier,
      ReadableProperty occupancyState,
      ReadableProperty statusFlags,
      ReadableProperty eventState,
      ReadableProperty reliability,
      ReadableProperty outOfService,
      OptionalProperty occupancyCount,
      OptionalProperty occupancyCountEnable,
      OptionalProperty adjustValue,
      OptionalProperty occupancyUpperLimit,
      OptionalProperty occupancyLowerLimit,
      OptionalProperty credentialsInZone,
      OptionalProperty lastCredentialAdded,
      OptionalProperty lastCredentialAddedTime,
      OptionalProperty lastCredentialRemoved,
      OptionalProperty lastCredentialRemovedTime,
      OptionalProperty passbackMode,
      OptionalProperty passbackTimeout,
      ReadableProperty entryPoints,
      ReadableProperty exitPoints,
      OptionalProperty timeDelay,
      OptionalProperty notificationClass,
      OptionalProperty alarmValues,
      OptionalProperty eventEnable,
      OptionalProperty ackedTransitions,
      OptionalProperty notifyType,
      OptionalProperty eventTimeStamps,
      OptionalProperty eventMessageTexts,
      OptionalProperty eventMessageTextsConfig,
      OptionalProperty eventDetectionEnable,
      OptionalProperty eventAlgorithmInhibitRef,
      OptionalProperty eventAlgorithmInhibit,
      OptionalProperty timeDelayNormal,
      OptionalProperty reliabilityEvaluationInhibit,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.globalIdentifier = globalIdentifier;
    this.occupancyState = occupancyState;
    this.statusFlags = statusFlags;
    this.eventState = eventState;
    this.reliability = reliability;
    this.outOfService = outOfService;
    this.occupancyCount = occupancyCount;
    this.occupancyCountEnable = occupancyCountEnable;
    this.adjustValue = adjustValue;
    this.occupancyUpperLimit = occupancyUpperLimit;
    this.occupancyLowerLimit = occupancyLowerLimit;
    this.credentialsInZone = credentialsInZone;
    this.lastCredentialAdded = lastCredentialAdded;
    this.lastCredentialAddedTime = lastCredentialAddedTime;
    this.lastCredentialRemoved = lastCredentialRemoved;
    this.lastCredentialRemovedTime = lastCredentialRemovedTime;
    this.passbackMode = passbackMode;
    this.passbackTimeout = passbackTimeout;
    this.entryPoints = entryPoints;
    this.exitPoints = exitPoints;
    this.timeDelay = timeDelay;
    this.notificationClass = notificationClass;
    this.alarmValues = alarmValues;
    this.eventEnable = eventEnable;
    this.ackedTransitions = ackedTransitions;
    this.notifyType = notifyType;
    this.eventTimeStamps = eventTimeStamps;
    this.eventMessageTexts = eventMessageTexts;
    this.eventMessageTextsConfig = eventMessageTextsConfig;
    this.eventDetectionEnable = eventDetectionEnable;
    this.eventAlgorithmInhibitRef = eventAlgorithmInhibitRef;
    this.eventAlgorithmInhibit = eventAlgorithmInhibit;
    this.timeDelayNormal = timeDelayNormal;
    this.reliabilityEvaluationInhibit = reliabilityEvaluationInhibit;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public WritableProperty getGlobalIdentifier() {
    return globalIdentifier;
  }

  public ReadableProperty getOccupancyState() {
    return occupancyState;
  }

  public ReadableProperty getStatusFlags() {
    return statusFlags;
  }

  public ReadableProperty getEventState() {
    return eventState;
  }

  public ReadableProperty getReliability() {
    return reliability;
  }

  public ReadableProperty getOutOfService() {
    return outOfService;
  }

  public OptionalProperty getOccupancyCount() {
    return occupancyCount;
  }

  public OptionalProperty getOccupancyCountEnable() {
    return occupancyCountEnable;
  }

  public OptionalProperty getAdjustValue() {
    return adjustValue;
  }

  public OptionalProperty getOccupancyUpperLimit() {
    return occupancyUpperLimit;
  }

  public OptionalProperty getOccupancyLowerLimit() {
    return occupancyLowerLimit;
  }

  public OptionalProperty getCredentialsInZone() {
    return credentialsInZone;
  }

  public OptionalProperty getLastCredentialAdded() {
    return lastCredentialAdded;
  }

  public OptionalProperty getLastCredentialAddedTime() {
    return lastCredentialAddedTime;
  }

  public OptionalProperty getLastCredentialRemoved() {
    return lastCredentialRemoved;
  }

  public OptionalProperty getLastCredentialRemovedTime() {
    return lastCredentialRemovedTime;
  }

  public OptionalProperty getPassbackMode() {
    return passbackMode;
  }

  public OptionalProperty getPassbackTimeout() {
    return passbackTimeout;
  }

  public ReadableProperty getEntryPoints() {
    return entryPoints;
  }

  public ReadableProperty getExitPoints() {
    return exitPoints;
  }

  public OptionalProperty getTimeDelay() {
    return timeDelay;
  }

  public OptionalProperty getNotificationClass() {
    return notificationClass;
  }

  public OptionalProperty getAlarmValues() {
    return alarmValues;
  }

  public OptionalProperty getEventEnable() {
    return eventEnable;
  }

  public OptionalProperty getAckedTransitions() {
    return ackedTransitions;
  }

  public OptionalProperty getNotifyType() {
    return notifyType;
  }

  public OptionalProperty getEventTimeStamps() {
    return eventTimeStamps;
  }

  public OptionalProperty getEventMessageTexts() {
    return eventMessageTexts;
  }

  public OptionalProperty getEventMessageTextsConfig() {
    return eventMessageTextsConfig;
  }

  public OptionalProperty getEventDetectionEnable() {
    return eventDetectionEnable;
  }

  public OptionalProperty getEventAlgorithmInhibitRef() {
    return eventAlgorithmInhibitRef;
  }

  public OptionalProperty getEventAlgorithmInhibit() {
    return eventAlgorithmInhibit;
  }

  public OptionalProperty getTimeDelayNormal() {
    return timeDelayNormal;
  }

  public OptionalProperty getReliabilityEvaluationInhibit() {
    return reliabilityEvaluationInhibit;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("AccessZone");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (globalIdentifier)
    writeSimpleField("globalIdentifier", globalIdentifier, writeComplex(writeBuffer));

    // Simple Field (occupancyState)
    writeSimpleField("occupancyState", occupancyState, writeComplex(writeBuffer));

    // Simple Field (statusFlags)
    writeSimpleField("statusFlags", statusFlags, writeComplex(writeBuffer));

    // Simple Field (eventState)
    writeSimpleField("eventState", eventState, writeComplex(writeBuffer));

    // Simple Field (reliability)
    writeSimpleField("reliability", reliability, writeComplex(writeBuffer));

    // Simple Field (outOfService)
    writeSimpleField("outOfService", outOfService, writeComplex(writeBuffer));

    // Simple Field (occupancyCount)
    writeSimpleField("occupancyCount", occupancyCount, writeComplex(writeBuffer));

    // Simple Field (occupancyCountEnable)
    writeSimpleField("occupancyCountEnable", occupancyCountEnable, writeComplex(writeBuffer));

    // Simple Field (adjustValue)
    writeSimpleField("adjustValue", adjustValue, writeComplex(writeBuffer));

    // Simple Field (occupancyUpperLimit)
    writeSimpleField("occupancyUpperLimit", occupancyUpperLimit, writeComplex(writeBuffer));

    // Simple Field (occupancyLowerLimit)
    writeSimpleField("occupancyLowerLimit", occupancyLowerLimit, writeComplex(writeBuffer));

    // Simple Field (credentialsInZone)
    writeSimpleField("credentialsInZone", credentialsInZone, writeComplex(writeBuffer));

    // Simple Field (lastCredentialAdded)
    writeSimpleField("lastCredentialAdded", lastCredentialAdded, writeComplex(writeBuffer));

    // Simple Field (lastCredentialAddedTime)
    writeSimpleField("lastCredentialAddedTime", lastCredentialAddedTime, writeComplex(writeBuffer));

    // Simple Field (lastCredentialRemoved)
    writeSimpleField("lastCredentialRemoved", lastCredentialRemoved, writeComplex(writeBuffer));

    // Simple Field (lastCredentialRemovedTime)
    writeSimpleField(
        "lastCredentialRemovedTime", lastCredentialRemovedTime, writeComplex(writeBuffer));

    // Simple Field (passbackMode)
    writeSimpleField("passbackMode", passbackMode, writeComplex(writeBuffer));

    // Simple Field (passbackTimeout)
    writeSimpleField("passbackTimeout", passbackTimeout, writeComplex(writeBuffer));

    // Simple Field (entryPoints)
    writeSimpleField("entryPoints", entryPoints, writeComplex(writeBuffer));

    // Simple Field (exitPoints)
    writeSimpleField("exitPoints", exitPoints, writeComplex(writeBuffer));

    // Simple Field (timeDelay)
    writeSimpleField("timeDelay", timeDelay, writeComplex(writeBuffer));

    // Simple Field (notificationClass)
    writeSimpleField("notificationClass", notificationClass, writeComplex(writeBuffer));

    // Simple Field (alarmValues)
    writeSimpleField("alarmValues", alarmValues, writeComplex(writeBuffer));

    // Simple Field (eventEnable)
    writeSimpleField("eventEnable", eventEnable, writeComplex(writeBuffer));

    // Simple Field (ackedTransitions)
    writeSimpleField("ackedTransitions", ackedTransitions, writeComplex(writeBuffer));

    // Simple Field (notifyType)
    writeSimpleField("notifyType", notifyType, writeComplex(writeBuffer));

    // Simple Field (eventTimeStamps)
    writeSimpleField("eventTimeStamps", eventTimeStamps, writeComplex(writeBuffer));

    // Simple Field (eventMessageTexts)
    writeSimpleField("eventMessageTexts", eventMessageTexts, writeComplex(writeBuffer));

    // Simple Field (eventMessageTextsConfig)
    writeSimpleField("eventMessageTextsConfig", eventMessageTextsConfig, writeComplex(writeBuffer));

    // Simple Field (eventDetectionEnable)
    writeSimpleField("eventDetectionEnable", eventDetectionEnable, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibitRef)
    writeSimpleField(
        "eventAlgorithmInhibitRef", eventAlgorithmInhibitRef, writeComplex(writeBuffer));

    // Simple Field (eventAlgorithmInhibit)
    writeSimpleField("eventAlgorithmInhibit", eventAlgorithmInhibit, writeComplex(writeBuffer));

    // Simple Field (timeDelayNormal)
    writeSimpleField("timeDelayNormal", timeDelayNormal, writeComplex(writeBuffer));

    // Simple Field (reliabilityEvaluationInhibit)
    writeSimpleField(
        "reliabilityEvaluationInhibit", reliabilityEvaluationInhibit, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("AccessZone");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    AccessZone _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (globalIdentifier)
    lengthInBits += globalIdentifier.getLengthInBits();

    // Simple field (occupancyState)
    lengthInBits += occupancyState.getLengthInBits();

    // Simple field (statusFlags)
    lengthInBits += statusFlags.getLengthInBits();

    // Simple field (eventState)
    lengthInBits += eventState.getLengthInBits();

    // Simple field (reliability)
    lengthInBits += reliability.getLengthInBits();

    // Simple field (outOfService)
    lengthInBits += outOfService.getLengthInBits();

    // Simple field (occupancyCount)
    lengthInBits += occupancyCount.getLengthInBits();

    // Simple field (occupancyCountEnable)
    lengthInBits += occupancyCountEnable.getLengthInBits();

    // Simple field (adjustValue)
    lengthInBits += adjustValue.getLengthInBits();

    // Simple field (occupancyUpperLimit)
    lengthInBits += occupancyUpperLimit.getLengthInBits();

    // Simple field (occupancyLowerLimit)
    lengthInBits += occupancyLowerLimit.getLengthInBits();

    // Simple field (credentialsInZone)
    lengthInBits += credentialsInZone.getLengthInBits();

    // Simple field (lastCredentialAdded)
    lengthInBits += lastCredentialAdded.getLengthInBits();

    // Simple field (lastCredentialAddedTime)
    lengthInBits += lastCredentialAddedTime.getLengthInBits();

    // Simple field (lastCredentialRemoved)
    lengthInBits += lastCredentialRemoved.getLengthInBits();

    // Simple field (lastCredentialRemovedTime)
    lengthInBits += lastCredentialRemovedTime.getLengthInBits();

    // Simple field (passbackMode)
    lengthInBits += passbackMode.getLengthInBits();

    // Simple field (passbackTimeout)
    lengthInBits += passbackTimeout.getLengthInBits();

    // Simple field (entryPoints)
    lengthInBits += entryPoints.getLengthInBits();

    // Simple field (exitPoints)
    lengthInBits += exitPoints.getLengthInBits();

    // Simple field (timeDelay)
    lengthInBits += timeDelay.getLengthInBits();

    // Simple field (notificationClass)
    lengthInBits += notificationClass.getLengthInBits();

    // Simple field (alarmValues)
    lengthInBits += alarmValues.getLengthInBits();

    // Simple field (eventEnable)
    lengthInBits += eventEnable.getLengthInBits();

    // Simple field (ackedTransitions)
    lengthInBits += ackedTransitions.getLengthInBits();

    // Simple field (notifyType)
    lengthInBits += notifyType.getLengthInBits();

    // Simple field (eventTimeStamps)
    lengthInBits += eventTimeStamps.getLengthInBits();

    // Simple field (eventMessageTexts)
    lengthInBits += eventMessageTexts.getLengthInBits();

    // Simple field (eventMessageTextsConfig)
    lengthInBits += eventMessageTextsConfig.getLengthInBits();

    // Simple field (eventDetectionEnable)
    lengthInBits += eventDetectionEnable.getLengthInBits();

    // Simple field (eventAlgorithmInhibitRef)
    lengthInBits += eventAlgorithmInhibitRef.getLengthInBits();

    // Simple field (eventAlgorithmInhibit)
    lengthInBits += eventAlgorithmInhibit.getLengthInBits();

    // Simple field (timeDelayNormal)
    lengthInBits += timeDelayNormal.getLengthInBits();

    // Simple field (reliabilityEvaluationInhibit)
    lengthInBits += reliabilityEvaluationInhibit.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static AccessZone staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("AccessZone");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    WritableProperty globalIdentifier =
        readSimpleField(
            "globalIdentifier",
            readComplex(
                () -> WritableProperty.staticParse(readBuffer, (String) ("Unsigned32")),
                readBuffer));

    ReadableProperty occupancyState =
        readSimpleField(
            "occupancyState",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetAccessZoneOccupancyState")),
                readBuffer));

    ReadableProperty statusFlags =
        readSimpleField(
            "statusFlags",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetStatusFlags")),
                readBuffer));

    ReadableProperty eventState =
        readSimpleField(
            "eventState",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetEventState")),
                readBuffer));

    ReadableProperty reliability =
        readSimpleField(
            "reliability",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetReliability")),
                readBuffer));

    ReadableProperty outOfService =
        readSimpleField(
            "outOfService",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty occupancyCount =
        readSimpleField(
            "occupancyCount",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty occupancyCountEnable =
        readSimpleField(
            "occupancyCountEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty adjustValue =
        readSimpleField(
            "adjustValue",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("INTEGER")), readBuffer));

    OptionalProperty occupancyUpperLimit =
        readSimpleField(
            "occupancyUpperLimit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty occupancyLowerLimit =
        readSimpleField(
            "occupancyLowerLimit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty credentialsInZone =
        readSimpleField(
            "credentialsInZone",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty lastCredentialAdded =
        readSimpleField(
            "lastCredentialAdded",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty lastCredentialAddedTime =
        readSimpleField(
            "lastCredentialAddedTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    OptionalProperty lastCredentialRemoved =
        readSimpleField(
            "lastCredentialRemoved",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty lastCredentialRemovedTime =
        readSimpleField(
            "lastCredentialRemovedTime",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetDateTime")),
                readBuffer));

    OptionalProperty passbackMode =
        readSimpleField(
            "passbackMode",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetAccessPassbackMode")),
                readBuffer));

    OptionalProperty passbackTimeout =
        readSimpleField(
            "passbackTimeout",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    ReadableProperty entryPoints =
        readSimpleField(
            "entryPoints",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDeviceObjectReference")),
                readBuffer));

    ReadableProperty exitPoints =
        readSimpleField(
            "exitPoints",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetDeviceObjectReference")),
                readBuffer));

    OptionalProperty timeDelay =
        readSimpleField(
            "timeDelay",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty notificationClass =
        readSimpleField(
            "notificationClass",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty alarmValues =
        readSimpleField(
            "alarmValues",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetAccessZoneOccupancyState")),
                readBuffer));

    OptionalProperty eventEnable =
        readSimpleField(
            "eventEnable",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty ackedTransitions =
        readSimpleField(
            "ackedTransitions",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetEventTransitionBits")),
                readBuffer));

    OptionalProperty notifyType =
        readSimpleField(
            "notifyType",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetNotifyType")),
                readBuffer));

    OptionalProperty eventTimeStamps =
        readSimpleField(
            "eventTimeStamps",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of BACnetTimeStamp")),
                readBuffer));

    OptionalProperty eventMessageTexts =
        readSimpleField(
            "eventMessageTexts",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventMessageTextsConfig =
        readSimpleField(
            "eventMessageTextsConfig",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[3] of CharacterString")),
                readBuffer));

    OptionalProperty eventDetectionEnable =
        readSimpleField(
            "eventDetectionEnable",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty eventAlgorithmInhibitRef =
        readSimpleField(
            "eventAlgorithmInhibitRef",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetObjectPropertyReference")),
                readBuffer));

    OptionalProperty eventAlgorithmInhibit =
        readSimpleField(
            "eventAlgorithmInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    OptionalProperty timeDelayNormal =
        readSimpleField(
            "timeDelayNormal",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("Unsigned")), readBuffer));

    OptionalProperty reliabilityEvaluationInhibit =
        readSimpleField(
            "reliabilityEvaluationInhibit",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BOOLEAN")), readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("AccessZone");
    // Create the instance
    AccessZone _accessZone;
    _accessZone =
        new AccessZone(
            objectIdentifier,
            objectName,
            objectType,
            description,
            globalIdentifier,
            occupancyState,
            statusFlags,
            eventState,
            reliability,
            outOfService,
            occupancyCount,
            occupancyCountEnable,
            adjustValue,
            occupancyUpperLimit,
            occupancyLowerLimit,
            credentialsInZone,
            lastCredentialAdded,
            lastCredentialAddedTime,
            lastCredentialRemoved,
            lastCredentialRemovedTime,
            passbackMode,
            passbackTimeout,
            entryPoints,
            exitPoints,
            timeDelay,
            notificationClass,
            alarmValues,
            eventEnable,
            ackedTransitions,
            notifyType,
            eventTimeStamps,
            eventMessageTexts,
            eventMessageTextsConfig,
            eventDetectionEnable,
            eventAlgorithmInhibitRef,
            eventAlgorithmInhibit,
            timeDelayNormal,
            reliabilityEvaluationInhibit,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _accessZone;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof AccessZone)) {
      return false;
    }
    AccessZone that = (AccessZone) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getGlobalIdentifier() == that.getGlobalIdentifier())
        && (getOccupancyState() == that.getOccupancyState())
        && (getStatusFlags() == that.getStatusFlags())
        && (getEventState() == that.getEventState())
        && (getReliability() == that.getReliability())
        && (getOutOfService() == that.getOutOfService())
        && (getOccupancyCount() == that.getOccupancyCount())
        && (getOccupancyCountEnable() == that.getOccupancyCountEnable())
        && (getAdjustValue() == that.getAdjustValue())
        && (getOccupancyUpperLimit() == that.getOccupancyUpperLimit())
        && (getOccupancyLowerLimit() == that.getOccupancyLowerLimit())
        && (getCredentialsInZone() == that.getCredentialsInZone())
        && (getLastCredentialAdded() == that.getLastCredentialAdded())
        && (getLastCredentialAddedTime() == that.getLastCredentialAddedTime())
        && (getLastCredentialRemoved() == that.getLastCredentialRemoved())
        && (getLastCredentialRemovedTime() == that.getLastCredentialRemovedTime())
        && (getPassbackMode() == that.getPassbackMode())
        && (getPassbackTimeout() == that.getPassbackTimeout())
        && (getEntryPoints() == that.getEntryPoints())
        && (getExitPoints() == that.getExitPoints())
        && (getTimeDelay() == that.getTimeDelay())
        && (getNotificationClass() == that.getNotificationClass())
        && (getAlarmValues() == that.getAlarmValues())
        && (getEventEnable() == that.getEventEnable())
        && (getAckedTransitions() == that.getAckedTransitions())
        && (getNotifyType() == that.getNotifyType())
        && (getEventTimeStamps() == that.getEventTimeStamps())
        && (getEventMessageTexts() == that.getEventMessageTexts())
        && (getEventMessageTextsConfig() == that.getEventMessageTextsConfig())
        && (getEventDetectionEnable() == that.getEventDetectionEnable())
        && (getEventAlgorithmInhibitRef() == that.getEventAlgorithmInhibitRef())
        && (getEventAlgorithmInhibit() == that.getEventAlgorithmInhibit())
        && (getTimeDelayNormal() == that.getTimeDelayNormal())
        && (getReliabilityEvaluationInhibit() == that.getReliabilityEvaluationInhibit())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getGlobalIdentifier(),
        getOccupancyState(),
        getStatusFlags(),
        getEventState(),
        getReliability(),
        getOutOfService(),
        getOccupancyCount(),
        getOccupancyCountEnable(),
        getAdjustValue(),
        getOccupancyUpperLimit(),
        getOccupancyLowerLimit(),
        getCredentialsInZone(),
        getLastCredentialAdded(),
        getLastCredentialAddedTime(),
        getLastCredentialRemoved(),
        getLastCredentialRemovedTime(),
        getPassbackMode(),
        getPassbackTimeout(),
        getEntryPoints(),
        getExitPoints(),
        getTimeDelay(),
        getNotificationClass(),
        getAlarmValues(),
        getEventEnable(),
        getAckedTransitions(),
        getNotifyType(),
        getEventTimeStamps(),
        getEventMessageTexts(),
        getEventMessageTextsConfig(),
        getEventDetectionEnable(),
        getEventAlgorithmInhibitRef(),
        getEventAlgorithmInhibit(),
        getTimeDelayNormal(),
        getReliabilityEvaluationInhibit(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
