/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class ElevatorGroup implements Message {

  // Properties.
  protected final ReadableProperty objectIdentifier;
  protected final ReadableProperty objectName;
  protected final ReadableProperty objectType;
  protected final OptionalProperty description;
  protected final ReadableProperty machineRoomID;
  protected final ReadableProperty groupID;
  protected final ReadableProperty groupMembers;
  protected final OptionalProperty groupMode;
  protected final OptionalProperty landingCalls;
  protected final OptionalProperty landingCallControl;
  protected final ReadableProperty propertyList;
  protected final OptionalProperty tags;
  protected final OptionalProperty profileLocation;
  protected final OptionalProperty profileName;

  public ElevatorGroup(
      ReadableProperty objectIdentifier,
      ReadableProperty objectName,
      ReadableProperty objectType,
      OptionalProperty description,
      ReadableProperty machineRoomID,
      ReadableProperty groupID,
      ReadableProperty groupMembers,
      OptionalProperty groupMode,
      OptionalProperty landingCalls,
      OptionalProperty landingCallControl,
      ReadableProperty propertyList,
      OptionalProperty tags,
      OptionalProperty profileLocation,
      OptionalProperty profileName) {
    super();
    this.objectIdentifier = objectIdentifier;
    this.objectName = objectName;
    this.objectType = objectType;
    this.description = description;
    this.machineRoomID = machineRoomID;
    this.groupID = groupID;
    this.groupMembers = groupMembers;
    this.groupMode = groupMode;
    this.landingCalls = landingCalls;
    this.landingCallControl = landingCallControl;
    this.propertyList = propertyList;
    this.tags = tags;
    this.profileLocation = profileLocation;
    this.profileName = profileName;
  }

  public ReadableProperty getObjectIdentifier() {
    return objectIdentifier;
  }

  public ReadableProperty getObjectName() {
    return objectName;
  }

  public ReadableProperty getObjectType() {
    return objectType;
  }

  public OptionalProperty getDescription() {
    return description;
  }

  public ReadableProperty getMachineRoomID() {
    return machineRoomID;
  }

  public ReadableProperty getGroupID() {
    return groupID;
  }

  public ReadableProperty getGroupMembers() {
    return groupMembers;
  }

  public OptionalProperty getGroupMode() {
    return groupMode;
  }

  public OptionalProperty getLandingCalls() {
    return landingCalls;
  }

  public OptionalProperty getLandingCallControl() {
    return landingCallControl;
  }

  public ReadableProperty getPropertyList() {
    return propertyList;
  }

  public OptionalProperty getTags() {
    return tags;
  }

  public OptionalProperty getProfileLocation() {
    return profileLocation;
  }

  public OptionalProperty getProfileName() {
    return profileName;
  }

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("ElevatorGroup");

    // Simple Field (objectIdentifier)
    writeSimpleField("objectIdentifier", objectIdentifier, writeComplex(writeBuffer));

    // Simple Field (objectName)
    writeSimpleField("objectName", objectName, writeComplex(writeBuffer));

    // Simple Field (objectType)
    writeSimpleField("objectType", objectType, writeComplex(writeBuffer));

    // Simple Field (description)
    writeSimpleField("description", description, writeComplex(writeBuffer));

    // Simple Field (machineRoomID)
    writeSimpleField("machineRoomID", machineRoomID, writeComplex(writeBuffer));

    // Simple Field (groupID)
    writeSimpleField("groupID", groupID, writeComplex(writeBuffer));

    // Simple Field (groupMembers)
    writeSimpleField("groupMembers", groupMembers, writeComplex(writeBuffer));

    // Simple Field (groupMode)
    writeSimpleField("groupMode", groupMode, writeComplex(writeBuffer));

    // Simple Field (landingCalls)
    writeSimpleField("landingCalls", landingCalls, writeComplex(writeBuffer));

    // Simple Field (landingCallControl)
    writeSimpleField("landingCallControl", landingCallControl, writeComplex(writeBuffer));

    // Simple Field (propertyList)
    writeSimpleField("propertyList", propertyList, writeComplex(writeBuffer));

    // Simple Field (tags)
    writeSimpleField("tags", tags, writeComplex(writeBuffer));

    // Simple Field (profileLocation)
    writeSimpleField("profileLocation", profileLocation, writeComplex(writeBuffer));

    // Simple Field (profileName)
    writeSimpleField("profileName", profileName, writeComplex(writeBuffer));

    writeBuffer.popContext("ElevatorGroup");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    ElevatorGroup _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (objectIdentifier)
    lengthInBits += objectIdentifier.getLengthInBits();

    // Simple field (objectName)
    lengthInBits += objectName.getLengthInBits();

    // Simple field (objectType)
    lengthInBits += objectType.getLengthInBits();

    // Simple field (description)
    lengthInBits += description.getLengthInBits();

    // Simple field (machineRoomID)
    lengthInBits += machineRoomID.getLengthInBits();

    // Simple field (groupID)
    lengthInBits += groupID.getLengthInBits();

    // Simple field (groupMembers)
    lengthInBits += groupMembers.getLengthInBits();

    // Simple field (groupMode)
    lengthInBits += groupMode.getLengthInBits();

    // Simple field (landingCalls)
    lengthInBits += landingCalls.getLengthInBits();

    // Simple field (landingCallControl)
    lengthInBits += landingCallControl.getLengthInBits();

    // Simple field (propertyList)
    lengthInBits += propertyList.getLengthInBits();

    // Simple field (tags)
    lengthInBits += tags.getLengthInBits();

    // Simple field (profileLocation)
    lengthInBits += profileLocation.getLengthInBits();

    // Simple field (profileName)
    lengthInBits += profileName.getLengthInBits();

    return lengthInBits;
  }

  public static ElevatorGroup staticParse(ReadBuffer readBuffer) throws ParseException {
    readBuffer.pullContext("ElevatorGroup");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    ReadableProperty objectIdentifier =
        readSimpleField(
            "objectIdentifier",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty objectName =
        readSimpleField(
            "objectName",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty objectType =
        readSimpleField(
            "objectType",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectType")),
                readBuffer));

    OptionalProperty description =
        readSimpleField(
            "description",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    ReadableProperty machineRoomID =
        readSimpleField(
            "machineRoomID",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("BACnetObjectIdentifier")),
                readBuffer));

    ReadableProperty groupID =
        readSimpleField(
            "groupID",
            readComplex(
                () -> ReadableProperty.staticParse(readBuffer, (String) ("Unsigned8")),
                readBuffer));

    ReadableProperty groupMembers =
        readSimpleField(
            "groupMembers",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetObjectIdentifier")),
                readBuffer));

    OptionalProperty groupMode =
        readSimpleField(
            "groupMode",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("BACnetLiftGroupMode")),
                readBuffer));

    OptionalProperty landingCalls =
        readSimpleField(
            "landingCalls",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetLIST of BACnetLandingCallStatus")),
                readBuffer));

    OptionalProperty landingCallControl =
        readSimpleField(
            "landingCallControl",
            readComplex(
                () ->
                    OptionalProperty.staticParse(readBuffer, (String) ("BACnetLandingCallStatus")),
                readBuffer));

    ReadableProperty propertyList =
        readSimpleField(
            "propertyList",
            readComplex(
                () ->
                    ReadableProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetPropertyIdentifier")),
                readBuffer));

    OptionalProperty tags =
        readSimpleField(
            "tags",
            readComplex(
                () ->
                    OptionalProperty.staticParse(
                        readBuffer, (String) ("BACnetARRAY[N] of BACnetNameValue")),
                readBuffer));

    OptionalProperty profileLocation =
        readSimpleField(
            "profileLocation",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    OptionalProperty profileName =
        readSimpleField(
            "profileName",
            readComplex(
                () -> OptionalProperty.staticParse(readBuffer, (String) ("CharacterString")),
                readBuffer));

    readBuffer.closeContext("ElevatorGroup");
    // Create the instance
    ElevatorGroup _elevatorGroup;
    _elevatorGroup =
        new ElevatorGroup(
            objectIdentifier,
            objectName,
            objectType,
            description,
            machineRoomID,
            groupID,
            groupMembers,
            groupMode,
            landingCalls,
            landingCallControl,
            propertyList,
            tags,
            profileLocation,
            profileName);
    return _elevatorGroup;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ElevatorGroup)) {
      return false;
    }
    ElevatorGroup that = (ElevatorGroup) o;
    return (getObjectIdentifier() == that.getObjectIdentifier())
        && (getObjectName() == that.getObjectName())
        && (getObjectType() == that.getObjectType())
        && (getDescription() == that.getDescription())
        && (getMachineRoomID() == that.getMachineRoomID())
        && (getGroupID() == that.getGroupID())
        && (getGroupMembers() == that.getGroupMembers())
        && (getGroupMode() == that.getGroupMode())
        && (getLandingCalls() == that.getLandingCalls())
        && (getLandingCallControl() == that.getLandingCallControl())
        && (getPropertyList() == that.getPropertyList())
        && (getTags() == that.getTags())
        && (getProfileLocation() == that.getProfileLocation())
        && (getProfileName() == that.getProfileName())
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        getObjectIdentifier(),
        getObjectName(),
        getObjectType(),
        getDescription(),
        getMachineRoomID(),
        getGroupID(),
        getGroupMembers(),
        getGroupMode(),
        getLandingCalls(),
        getLandingCallControl(),
        getPropertyList(),
        getTags(),
        getProfileLocation(),
        getProfileName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
