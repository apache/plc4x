/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableExclusive {
  ExclusiveLimitStateMachineType_HighHigh_StateNumber((int) 9330L),
  ExclusiveLimitStateMachineType_High_StateNumber((int) 9332L),
  ExclusiveLimitStateMachineType_Low_StateNumber((int) 9334L),
  ExclusiveLimitStateMachineType_LowLow_StateNumber((int) 9336L),
  ExclusiveLimitAlarmType_ActiveState((int) 9398L),
  ExclusiveLimitAlarmType_ActiveState_Id((int) 9399L),
  ExclusiveLimitAlarmType_ActiveState_Name((int) 9400L),
  ExclusiveLimitAlarmType_ActiveState_Number((int) 9401L),
  ExclusiveLimitAlarmType_ActiveState_EffectiveDisplayName((int) 9402L),
  ExclusiveLimitAlarmType_ActiveState_TransitionTime((int) 9403L),
  ExclusiveLimitAlarmType_ActiveState_EffectiveTransitionTime((int) 9404L),
  ExclusiveLimitAlarmType_ActiveState_TrueState((int) 9405L),
  ExclusiveLimitAlarmType_ActiveState_FalseState((int) 9406L),
  ExclusiveLimitAlarmType_LimitState_CurrentState((int) 9456L),
  ExclusiveLimitAlarmType_LimitState_CurrentState_Id((int) 9457L),
  ExclusiveLimitAlarmType_LimitState_CurrentState_Name((int) 9458L),
  ExclusiveLimitAlarmType_LimitState_CurrentState_Number((int) 9459L),
  ExclusiveLimitAlarmType_LimitState_CurrentState_EffectiveDisplayName((int) 9460L),
  ExclusiveLimitAlarmType_LimitState_LastTransition((int) 9461L),
  ExclusiveLimitAlarmType_LimitState_LastTransition_Id((int) 9462L),
  ExclusiveLimitAlarmType_LimitState_LastTransition_Name((int) 9463L),
  ExclusiveLimitAlarmType_LimitState_LastTransition_Number((int) 9464L),
  ExclusiveLimitAlarmType_LimitState_LastTransition_TransitionTime((int) 9465L),
  ExclusiveDeviationAlarmType_SetpointNode((int) 9905L),
  ExclusiveLimitStateMachineType_LowLowToLow_TransitionNumber((int) 11340L),
  ExclusiveLimitStateMachineType_LowToLowLow_TransitionNumber((int) 11341L),
  ExclusiveLimitStateMachineType_HighHighToHigh_TransitionNumber((int) 11342L),
  ExclusiveLimitStateMachineType_HighToHighHigh_TransitionNumber((int) 11343L),
  ExclusiveLimitAlarmType_LimitState_LastTransition_EffectiveTransitionTime((int) 11470L),
  ExclusiveDeviationAlarmType_BaseSetpointNode((int) 16817L),
  ExclusiveRateOfChangeAlarmType_EngineeringUnits((int) 16899L),
  ExclusiveLimitAlarmType_LimitState_AvailableStates((int) 17670L),
  ExclusiveLimitAlarmType_LimitState_AvailableTransitions((int) 17671L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableExclusive> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableExclusive value :
        OpcuaNodeIdServicesVariableExclusive.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableExclusive(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableExclusive enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
