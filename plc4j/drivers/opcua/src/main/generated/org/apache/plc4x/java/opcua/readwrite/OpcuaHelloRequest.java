/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class OpcuaHelloRequest extends MessagePDU implements Message {

  // Accessors for discriminator values.
  public String getMessageType() {
    return (String) "HEL";
  }

  public Boolean getResponse() {
    return (boolean) false;
  }

  // Properties.
  protected final long version;
  protected final OpcuaProtocolLimits limits;
  protected final PascalString endpoint;

  public OpcuaHelloRequest(
      ChunkType chunk, long version, OpcuaProtocolLimits limits, PascalString endpoint) {
    super(chunk);
    this.version = version;
    this.limits = limits;
    this.endpoint = endpoint;
  }

  public long getVersion() {
    return version;
  }

  public OpcuaProtocolLimits getLimits() {
    return limits;
  }

  public PascalString getEndpoint() {
    return endpoint;
  }

  @Override
  protected void serializeMessagePDUChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("OpcuaHelloRequest");

    // Simple Field (version)
    writeSimpleField("version", version, writeUnsignedLong(writeBuffer, 32));

    // Simple Field (limits)
    writeSimpleField("limits", limits, writeComplex(writeBuffer));

    // Simple Field (endpoint)
    writeSimpleField("endpoint", endpoint, writeComplex(writeBuffer));

    writeBuffer.popContext("OpcuaHelloRequest");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    OpcuaHelloRequest _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (version)
    lengthInBits += 32;

    // Simple field (limits)
    lengthInBits += limits.getLengthInBits();

    // Simple field (endpoint)
    lengthInBits += endpoint.getLengthInBits();

    return lengthInBits;
  }

  public static MessagePDUBuilder staticParseMessagePDUBuilder(
      ReadBuffer readBuffer, Boolean response) throws ParseException {
    readBuffer.pullContext("OpcuaHelloRequest");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    long version = readSimpleField("version", readUnsignedLong(readBuffer, 32));

    OpcuaProtocolLimits limits =
        readSimpleField(
            "limits", readComplex(() -> OpcuaProtocolLimits.staticParse(readBuffer), readBuffer));

    PascalString endpoint =
        readSimpleField(
            "endpoint", readComplex(() -> PascalString.staticParse(readBuffer), readBuffer));

    readBuffer.closeContext("OpcuaHelloRequest");
    // Create the instance
    return new OpcuaHelloRequestBuilderImpl(version, limits, endpoint);
  }

  public static class OpcuaHelloRequestBuilderImpl implements MessagePDU.MessagePDUBuilder {
    private final long version;
    private final OpcuaProtocolLimits limits;
    private final PascalString endpoint;

    public OpcuaHelloRequestBuilderImpl(
        long version, OpcuaProtocolLimits limits, PascalString endpoint) {
      this.version = version;
      this.limits = limits;
      this.endpoint = endpoint;
    }

    public OpcuaHelloRequest build(ChunkType chunk) {
      OpcuaHelloRequest opcuaHelloRequest = new OpcuaHelloRequest(chunk, version, limits, endpoint);
      return opcuaHelloRequest;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof OpcuaHelloRequest)) {
      return false;
    }
    OpcuaHelloRequest that = (OpcuaHelloRequest) o;
    return (getVersion() == that.getVersion())
        && (getLimits() == that.getLimits())
        && (getEndpoint() == that.getEndpoint())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getVersion(), getLimits(), getEndpoint());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
