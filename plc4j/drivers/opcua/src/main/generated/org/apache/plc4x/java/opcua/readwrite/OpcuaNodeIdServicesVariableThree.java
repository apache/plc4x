/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableThree {
  ThreeDVectorType_X((int) 18769L),
  ThreeDVectorType_Y((int) 18770L),
  ThreeDVectorType_Z((int) 18771L),
  ThreeDCartesianCoordinatesType_X((int) 18776L),
  ThreeDCartesianCoordinatesType_Y((int) 18777L),
  ThreeDCartesianCoordinatesType_Z((int) 18778L),
  ThreeDOrientationType_AngleUnit((int) 18782L),
  ThreeDOrientationType_A((int) 18783L),
  ThreeDOrientationType_B((int) 18784L),
  ThreeDOrientationType_C((int) 18785L),
  ThreeDFrameType_Orientation((int) 18792L),
  ThreeDFrameType_CartesianCoordinates((int) 18796L),
  ThreeDFrameType_CartesianCoordinates_LengthUnit((int) 18797L),
  ThreeDFrameType_CartesianCoordinates_X((int) 18798L),
  ThreeDFrameType_CartesianCoordinates_Y((int) 18799L),
  ThreeDFrameType_CartesianCoordinates_Z((int) 18800L),
  ThreeDFrameType_Orientation_AngleUnit((int) 19073L),
  ThreeDFrameType_Orientation_A((int) 19074L),
  ThreeDFrameType_Orientation_B((int) 19075L),
  ThreeDFrameType_Orientation_C((int) 19076L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableThree> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableThree value : OpcuaNodeIdServicesVariableThree.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableThree(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableThree enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
