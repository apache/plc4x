/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableNamespaces {
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceUri((int) 11647L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceVersion((int) 11648L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespacePublicationDate((int) 11649L),
  NamespacesType_NamespaceIdentifier_Placeholder_IsNamespaceSubset((int) 11650L),
  NamespacesType_NamespaceIdentifier_Placeholder_StaticNodeIdTypes((int) 11651L),
  NamespacesType_NamespaceIdentifier_Placeholder_StaticNumericNodeIdRange((int) 11652L),
  NamespacesType_NamespaceIdentifier_Placeholder_StaticStringNodeIdPattern((int) 11653L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Size((int) 11655L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_OpenCount((int) 11658L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Open_InputArguments((int) 11660L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Open_OutputArguments((int) 11661L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Close_InputArguments((int) 11663L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Read_InputArguments((int) 11665L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Read_OutputArguments((int) 11666L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Write_InputArguments((int) 11668L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_GetPosition_InputArguments(
      (int) 11670L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_GetPosition_OutputArguments(
      (int) 11671L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_SetPosition_InputArguments(
      (int) 11673L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_Writable((int) 12692L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_UserWritable((int) 12693L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_MimeType((int) 13400L),
  NamespacesType_NamespaceIdentifier_Placeholder_DefaultRolePermissions((int) 16140L),
  NamespacesType_NamespaceIdentifier_Placeholder_DefaultUserRolePermissions((int) 16141L),
  NamespacesType_NamespaceIdentifier_Placeholder_DefaultAccessRestrictions((int) 16142L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_MaxByteStringLength((int) 24247L),
  NamespacesType_NamespaceIdentifier_Placeholder_NamespaceFile_LastModifiedTime((int) 25203L),
  NamespacesType_NamespaceIdentifier_Placeholder_ConfigurationVersion((int) 25268L),
  NamespacesType_NamespaceIdentifier_Placeholder_ModelVersion((int) 32420L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableNamespaces> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableNamespaces value :
        OpcuaNodeIdServicesVariableNamespaces.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableNamespaces(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableNamespaces enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
