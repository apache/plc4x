/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableI {
  IOrderedObjectType_NumberInList((int) 23517L),
  IIetfBaseNetworkInterfaceType_AdminStatus((int) 24149L),
  IIetfBaseNetworkInterfaceType_OperStatus((int) 24150L),
  IIetfBaseNetworkInterfaceType_PhysAddress((int) 24151L),
  IIetfBaseNetworkInterfaceType_Speed((int) 24152L),
  IIetfBaseNetworkInterfaceType_Speed_Definition((int) 24153L),
  IIetfBaseNetworkInterfaceType_Speed_ValuePrecision((int) 24154L),
  IIetfBaseNetworkInterfaceType_Speed_InstrumentRange((int) 24155L),
  IIetfBaseNetworkInterfaceType_Speed_EURange((int) 24156L),
  IIetfBaseNetworkInterfaceType_Speed_EngineeringUnits((int) 24157L),
  IIeeeBaseEthernetPortType_Speed((int) 24159L),
  IIeeeBaseEthernetPortType_Speed_Definition((int) 24160L),
  IIeeeBaseEthernetPortType_Speed_ValuePrecision((int) 24161L),
  IIeeeBaseEthernetPortType_Speed_InstrumentRange((int) 24162L),
  IIeeeBaseEthernetPortType_Speed_EURange((int) 24163L),
  IIeeeBaseEthernetPortType_Speed_EngineeringUnits((int) 24164L),
  IIeeeBaseEthernetPortType_Duplex((int) 24165L),
  IIeeeBaseEthernetPortType_MaxFrameLength((int) 24166L),
  IBaseEthernetCapabilitiesType_VlanTagCapable((int) 24168L),
  ISrClassType_Id((int) 24170L),
  ISrClassType_Priority((int) 24171L),
  ISrClassType_Vid((int) 24172L),
  IIeeeBaseTsnStreamType_StreamId((int) 24174L),
  IIeeeBaseTsnStreamType_StreamName((int) 24175L),
  IIeeeBaseTsnStreamType_State((int) 24176L),
  IIeeeBaseTsnStreamType_AccumulatedLatency((int) 24177L),
  IIeeeBaseTsnStreamType_SrClassId((int) 24178L),
  IIeeeBaseTsnTrafficSpecificationType_MaxIntervalFrames((int) 24180L),
  IIeeeBaseTsnTrafficSpecificationType_MaxFrameSize((int) 24181L),
  IIeeeBaseTsnTrafficSpecificationType_Interval((int) 24182L),
  IIeeeBaseTsnStatusStreamType_TalkerStatus((int) 24184L),
  IIeeeBaseTsnStatusStreamType_ListenerStatus((int) 24185L),
  IIeeeBaseTsnStatusStreamType_FailureCode((int) 24186L),
  IIeeeBaseTsnStatusStreamType_FailureSystemIdentifier((int) 24187L),
  IIeeeTsnInterfaceConfigurationType_MacAddress((int) 24189L),
  IIeeeTsnInterfaceConfigurationType_InterfaceName((int) 24190L),
  IIeeeTsnInterfaceConfigurationTalkerType_TimeAwareOffset((int) 24194L),
  IIeeeTsnInterfaceConfigurationListenerType_ReceiveOffset((int) 24198L),
  IIeeeTsnMacAddressType_DestinationAddress((int) 24200L),
  IIeeeTsnMacAddressType_SourceAddress((int) 24201L),
  IIeeeTsnVlanTagType_VlanId((int) 24203L),
  IIeeeTsnVlanTagType_PriorityCodePoint((int) 24204L),
  IPriorityMappingEntryType_MappingUri((int) 24206L),
  IPriorityMappingEntryType_PriorityLabel((int) 24207L),
  IPriorityMappingEntryType_PriorityValue_PCP((int) 24208L),
  IPriorityMappingEntryType_PriorityValue_DSCP((int) 24209L),
  IIeeeAutoNegotiationStatusType_NegotiationStatus((int) 24234L),
  IVlanIdType_VlanId((int) 25219L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableI> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableI value : OpcuaNodeIdServicesVariableI.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableI(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableI enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
