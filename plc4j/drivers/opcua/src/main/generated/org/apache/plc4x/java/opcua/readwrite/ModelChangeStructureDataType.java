/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class ModelChangeStructureDataType extends ExtensionObjectDefinition implements Message {

  // Accessors for discriminator values.
  public String getIdentifier() {
    return (String) "879";
  }

  // Properties.
  protected final NodeId affected;
  protected final NodeId affectedType;
  protected final short verb;

  public ModelChangeStructureDataType(NodeId affected, NodeId affectedType, short verb) {
    super();
    this.affected = affected;
    this.affectedType = affectedType;
    this.verb = verb;
  }

  public NodeId getAffected() {
    return affected;
  }

  public NodeId getAffectedType() {
    return affectedType;
  }

  public short getVerb() {
    return verb;
  }

  @Override
  protected void serializeExtensionObjectDefinitionChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("ModelChangeStructureDataType");

    // Simple Field (affected)
    writeSimpleField("affected", affected, new DataWriterComplexDefault<>(writeBuffer));

    // Simple Field (affectedType)
    writeSimpleField("affectedType", affectedType, new DataWriterComplexDefault<>(writeBuffer));

    // Simple Field (verb)
    writeSimpleField("verb", verb, writeUnsignedShort(writeBuffer, 8));

    writeBuffer.popContext("ModelChangeStructureDataType");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    ModelChangeStructureDataType _value = this;

    // Simple field (affected)
    lengthInBits += affected.getLengthInBits();

    // Simple field (affectedType)
    lengthInBits += affectedType.getLengthInBits();

    // Simple field (verb)
    lengthInBits += 8;

    return lengthInBits;
  }

  public static ModelChangeStructureDataTypeBuilder staticParseBuilder(
      ReadBuffer readBuffer, String identifier) throws ParseException {
    readBuffer.pullContext("ModelChangeStructureDataType");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    NodeId affected =
        readSimpleField(
            "affected",
            new DataReaderComplexDefault<>(() -> NodeId.staticParse(readBuffer), readBuffer));

    NodeId affectedType =
        readSimpleField(
            "affectedType",
            new DataReaderComplexDefault<>(() -> NodeId.staticParse(readBuffer), readBuffer));

    short verb = readSimpleField("verb", readUnsignedShort(readBuffer, 8));

    readBuffer.closeContext("ModelChangeStructureDataType");
    // Create the instance
    return new ModelChangeStructureDataTypeBuilder(affected, affectedType, verb);
  }

  public static class ModelChangeStructureDataTypeBuilder
      implements ExtensionObjectDefinition.ExtensionObjectDefinitionBuilder {
    private final NodeId affected;
    private final NodeId affectedType;
    private final short verb;

    public ModelChangeStructureDataTypeBuilder(NodeId affected, NodeId affectedType, short verb) {

      this.affected = affected;
      this.affectedType = affectedType;
      this.verb = verb;
    }

    public ModelChangeStructureDataType build() {
      ModelChangeStructureDataType modelChangeStructureDataType =
          new ModelChangeStructureDataType(affected, affectedType, verb);
      return modelChangeStructureDataType;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ModelChangeStructureDataType)) {
      return false;
    }
    ModelChangeStructureDataType that = (ModelChangeStructureDataType) o;
    return (getAffected() == that.getAffected())
        && (getAffectedType() == that.getAffectedType())
        && (getVerb() == that.getVerb())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getAffected(), getAffectedType(), getVerb());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
