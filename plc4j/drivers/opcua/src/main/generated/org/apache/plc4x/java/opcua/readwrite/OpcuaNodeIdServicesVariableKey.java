/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableKey {
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_ResourceUri((int) 17512L),
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_ProfileUri((int) 17513L),
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_EndpointUrls((int) 17514L),
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_ServiceStatus((int) 17515L),
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_GetEncryptingKey_InputArguments(
      (int) 17517L),
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_GetEncryptingKey_OutputArguments(
      (int) 17518L),
  KeyCredentialConfigurationFolderType_ServiceName_Placeholder_UpdateCredential_InputArguments(
      (int) 17520L),
  KeyCredentialConfigurationFolderType_CreateCredential_InputArguments((int) 17523L),
  KeyCredentialConfigurationFolderType_CreateCredential_OutputArguments((int) 17524L),
  KeyCredentialConfiguration_CreateCredential_InputArguments((int) 17529L),
  KeyCredentialConfiguration_CreateCredential_OutputArguments((int) 17530L),
  KeyCredentialConfigurationType_GetEncryptingKey_InputArguments((int) 17535L),
  KeyCredentialConfigurationType_GetEncryptingKey_OutputArguments((int) 17536L),
  KeyCredentialConfigurationType_EndpointUrls((int) 18004L),
  KeyCredentialConfigurationType_ServiceStatus((int) 18005L),
  KeyCredentialConfigurationType_UpdateCredential_InputArguments((int) 18007L),
  KeyCredentialUpdateMethodType_InputArguments((int) 18010L),
  KeyCredentialAuditEventType_ResourceUri((int) 18028L),
  KeyCredentialDeletedAuditEventType_ResourceUri((int) 18064L),
  KeyCredentialConfigurationType_ResourceUri((int) 18069L),
  KeyCredentialConfigurationType_ProfileUri((int) 18165L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableKey> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableKey value : OpcuaNodeIdServicesVariableKey.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableKey(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableKey enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
