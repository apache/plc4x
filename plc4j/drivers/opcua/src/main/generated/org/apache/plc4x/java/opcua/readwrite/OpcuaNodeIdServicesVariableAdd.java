/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableAdd {
  AddCommentMethodType_InputArguments((int) 3864L),
  AddCertificateMethodType_InputArguments((int) 12519L),
  AddPublishedDataItemsMethodType_InputArguments((int) 14502L),
  AddPublishedDataItemsMethodType_OutputArguments((int) 14503L),
  AddPublishedEventsMethodType_InputArguments((int) 14505L),
  AddPublishedEventsMethodType_OutputArguments((int) 14506L),
  AddSecurityGroupMethodType_InputArguments((int) 15467L),
  AddSecurityGroupMethodType_OutputArguments((int) 15468L),
  AddExtensionFieldMethodType_InputArguments((int) 15497L),
  AddExtensionFieldMethodType_OutputArguments((int) 15498L),
  AddIdentityMethodType_InputArguments((int) 15637L),
  AddRoleMethodType_InputArguments((int) 16003L),
  AddRoleMethodType_OutputArguments((int) 16004L),
  AddApplicationMethodType_InputArguments((int) 16185L),
  AddEndpointMethodType_InputArguments((int) 16189L),
  AddConnectionMethodType_InputArguments((int) 16718L),
  AddConnectionMethodType_OutputArguments((int) 16719L),
  AddPublishedDataItemsTemplateMethodType_InputArguments((int) 17031L),
  AddPublishedDataItemsTemplateMethodType_OutputArguments((int) 17032L),
  AddPublishedEventsTemplateMethodType_InputArguments((int) 17043L),
  AddPublishedEventsTemplateMethodType_OutputArguments((int) 17066L),
  AddDataSetFolderMethodType_InputArguments((int) 17068L),
  AddDataSetFolderMethodType_OutputArguments((int) 17069L),
  AddSubscribedDataSetMethodType_InputArguments((int) 23822L),
  AddSubscribedDataSetMethodType_OutputArguments((int) 23823L),
  AddUserMethodType_InputArguments((int) 24283L),
  AddPriorityMappingEntryMethodType_InputArguments((int) 25234L),
  AddSecurityGroupFolderMethodType_InputArguments((int) 25289L),
  AddSecurityGroupFolderMethodType_OutputArguments((int) 25290L),
  AddPushTargetMethodType_InputArguments((int) 25377L),
  AddPushTargetMethodType_OutputArguments((int) 25378L),
  AddPushTargetFolderMethodType_InputArguments((int) 25382L),
  AddPushTargetFolderMethodType_OutputArguments((int) 25383L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableAdd> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableAdd value : OpcuaNodeIdServicesVariableAdd.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableAdd(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableAdd enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
