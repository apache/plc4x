/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableUser {
  UserTokenType_EnumStrings((int) 7596L),
  UserManagementType_Users((int) 24265L),
  UserManagementType_PasswordLength((int) 24266L),
  UserManagementType_PasswordOptions((int) 24267L),
  UserManagementType_PasswordRestrictions((int) 24268L),
  UserManagementType_AddUser_InputArguments((int) 24270L),
  UserManagementType_ModifyUser_InputArguments((int) 24272L),
  UserManagementType_RemoveUser_InputArguments((int) 24274L),
  UserManagementType_ChangePassword_InputArguments((int) 24276L),
  UserConfigurationMask_OptionSetValues((int) 24280L),
  UserManagement_PasswordRestrictions((int) 24291L),
  UserManagement_Users((int) 24301L),
  UserManagement_PasswordLength((int) 24302L),
  UserManagement_PasswordOptions((int) 24303L),
  UserManagement_AddUser_InputArguments((int) 24305L),
  UserManagement_ModifyUser_InputArguments((int) 24307L),
  UserManagement_RemoveUser_InputArguments((int) 24309L),
  UserManagement_ChangePassword_InputArguments((int) 24311L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableUser> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableUser value : OpcuaNodeIdServicesVariableUser.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableUser(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableUser enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
