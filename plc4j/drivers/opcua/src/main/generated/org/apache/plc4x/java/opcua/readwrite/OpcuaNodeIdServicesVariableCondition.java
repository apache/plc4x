/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableCondition {
  ConditionType_Retain((int) 3874L),
  ConditionType_ConditionRefresh_InputArguments((int) 3876L),
  ConditionVariableType_SourceTimestamp((int) 9003L),
  ConditionRefreshMethodType_InputArguments((int) 9008L),
  ConditionType_ConditionName((int) 9009L),
  ConditionType_BranchId((int) 9010L),
  ConditionType_EnabledState((int) 9011L),
  ConditionType_EnabledState_Id((int) 9012L),
  ConditionType_EnabledState_Name((int) 9013L),
  ConditionType_EnabledState_Number((int) 9014L),
  ConditionType_EnabledState_EffectiveDisplayName((int) 9015L),
  ConditionType_EnabledState_TransitionTime((int) 9016L),
  ConditionType_EnabledState_EffectiveTransitionTime((int) 9017L),
  ConditionType_EnabledState_TrueState((int) 9018L),
  ConditionType_EnabledState_FalseState((int) 9019L),
  ConditionType_Quality((int) 9020L),
  ConditionType_Quality_SourceTimestamp((int) 9021L),
  ConditionType_LastSeverity((int) 9022L),
  ConditionType_LastSeverity_SourceTimestamp((int) 9023L),
  ConditionType_Comment((int) 9024L),
  ConditionType_Comment_SourceTimestamp((int) 9025L),
  ConditionType_ClientUserId((int) 9026L),
  ConditionType_AddComment_InputArguments((int) 9030L),
  ConditionType_ConditionClassId((int) 11112L),
  ConditionType_ConditionClassName((int) 11113L),
  ConditionType_ConditionRefresh2_InputArguments((int) 12913L),
  ConditionRefresh2MethodType_InputArguments((int) 12915L),
  ConditionType_ConditionSubClassId((int) 16363L),
  ConditionType_ConditionSubClassName((int) 16364L),
  ConditionType_SupportsFilteredRetain((int) 32060L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableCondition> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableCondition value :
        OpcuaNodeIdServicesVariableCondition.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableCondition(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableCondition enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
