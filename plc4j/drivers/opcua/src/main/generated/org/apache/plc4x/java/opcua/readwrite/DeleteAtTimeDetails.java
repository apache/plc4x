/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class DeleteAtTimeDetails extends ExtensionObjectDefinition implements Message {

  // Accessors for discriminator values.
  public Integer getExtensionId() {
    return (int) 691;
  }

  // Properties.
  protected final NodeId nodeId;
  protected final List<Long> reqTimes;

  public DeleteAtTimeDetails(NodeId nodeId, List<Long> reqTimes) {
    super();
    this.nodeId = nodeId;
    this.reqTimes = reqTimes;
  }

  public NodeId getNodeId() {
    return nodeId;
  }

  public List<Long> getReqTimes() {
    return reqTimes;
  }

  @Override
  protected void serializeExtensionObjectDefinitionChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("DeleteAtTimeDetails");

    // Simple Field (nodeId)
    writeSimpleField("nodeId", nodeId, writeComplex(writeBuffer));

    // Implicit Field (noOfReqTimes) (Used for parsing, but its value is not stored as it's
    // implicitly given by the objects content)
    int noOfReqTimes = (int) ((((getReqTimes()) == (null)) ? -(1) : COUNT(getReqTimes())));
    writeImplicitField("noOfReqTimes", noOfReqTimes, writeSignedInt(writeBuffer, 32));

    // Array Field (reqTimes)
    writeSimpleTypeArrayField("reqTimes", reqTimes, writeSignedLong(writeBuffer, 64));

    writeBuffer.popContext("DeleteAtTimeDetails");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    DeleteAtTimeDetails _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (nodeId)
    lengthInBits += nodeId.getLengthInBits();

    // Implicit Field (noOfReqTimes)
    lengthInBits += 32;

    // Array field
    if (reqTimes != null) {
      lengthInBits += 64 * reqTimes.size();
    }

    return lengthInBits;
  }

  public static ExtensionObjectDefinitionBuilder staticParseExtensionObjectDefinitionBuilder(
      ReadBuffer readBuffer, Integer extensionId) throws ParseException {
    readBuffer.pullContext("DeleteAtTimeDetails");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    NodeId nodeId =
        readSimpleField("nodeId", readComplex(() -> NodeId.staticParse(readBuffer), readBuffer));

    int noOfReqTimes = readImplicitField("noOfReqTimes", readSignedInt(readBuffer, 32));

    List<Long> reqTimes =
        readCountArrayField("reqTimes", readSignedLong(readBuffer, 64), noOfReqTimes);

    readBuffer.closeContext("DeleteAtTimeDetails");
    // Create the instance
    return new DeleteAtTimeDetailsBuilderImpl(nodeId, reqTimes);
  }

  public static class DeleteAtTimeDetailsBuilderImpl
      implements ExtensionObjectDefinition.ExtensionObjectDefinitionBuilder {
    private final NodeId nodeId;
    private final List<Long> reqTimes;

    public DeleteAtTimeDetailsBuilderImpl(NodeId nodeId, List<Long> reqTimes) {
      this.nodeId = nodeId;
      this.reqTimes = reqTimes;
    }

    public DeleteAtTimeDetails build() {
      DeleteAtTimeDetails deleteAtTimeDetails = new DeleteAtTimeDetails(nodeId, reqTimes);
      return deleteAtTimeDetails;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof DeleteAtTimeDetails)) {
      return false;
    }
    DeleteAtTimeDetails that = (DeleteAtTimeDetails) o;
    return (getNodeId() == that.getNodeId())
        && (getReqTimes() == that.getReqTimes())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getNodeId(), getReqTimes());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
