/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableSecurity {
  SecurityTokenRequestType_EnumStrings((int) 7598L),
  SecurityGroupFolderType_SecurityGroupName_Placeholder_KeyLifetime((int) 15010L),
  SecurityGroupFolderType_SecurityGroupName_Placeholder_SecurityPolicyUri((int) 15011L),
  SecurityGroupFolderType_SecurityGroupName_Placeholder_MaxFutureKeyCount((int) 15012L),
  SecurityGroupFolderType_SecurityGroupName_Placeholder_MaxPastKeyCount((int) 15043L),
  SecurityGroupType_KeyLifetime((int) 15046L),
  SecurityGroupType_SecurityPolicyUri((int) 15047L),
  SecurityGroupType_MaxFutureKeyCount((int) 15048L),
  SecurityGroupType_MaxPastKeyCount((int) 15056L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_AddSecurityGroup_InputArguments(
      (int) 15455L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_AddSecurityGroup_OutputArguments(
      (int) 15456L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_RemoveSecurityGroup_InputArguments(
      (int) 15458L),
  SecurityGroupFolderType_SecurityGroupName_Placeholder_SecurityGroupId((int) 15460L),
  SecurityGroupFolderType_AddSecurityGroup_InputArguments((int) 15462L),
  SecurityGroupFolderType_AddSecurityGroup_OutputArguments((int) 15463L),
  SecurityGroupFolderType_RemoveSecurityGroup_InputArguments((int) 15465L),
  SecurityGroupType_SecurityGroupId((int) 15472L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_AddSecurityGroupFolder_InputArguments(
      (int) 25294L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_AddSecurityGroupFolder_OutputArguments(
      (int) 25295L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_RemoveSecurityGroupFolder_InputArguments(
      (int) 25297L),
  SecurityGroupFolderType_SecurityGroupFolderName_Placeholder_SupportedSecurityPolicyUris(
      (int) 25298L),
  SecurityGroupFolderType_AddSecurityGroupFolder_InputArguments((int) 25313L),
  SecurityGroupFolderType_AddSecurityGroupFolder_OutputArguments((int) 25314L),
  SecurityGroupFolderType_RemoveSecurityGroupFolder_InputArguments((int) 25316L),
  SecurityGroupFolderType_SupportedSecurityPolicyUris((int) 25317L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableSecurity> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableSecurity value : OpcuaNodeIdServicesVariableSecurity.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableSecurity(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableSecurity enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
