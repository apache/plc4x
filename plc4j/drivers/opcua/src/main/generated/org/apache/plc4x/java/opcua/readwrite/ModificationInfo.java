/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class ModificationInfo extends ExtensionObjectDefinition implements Message {

  // Accessors for discriminator values.
  public Integer getExtensionId() {
    return (int) 11218;
  }

  // Properties.
  protected final long modificationTime;
  protected final HistoryUpdateType updateType;
  protected final PascalString userName;

  public ModificationInfo(
      long modificationTime, HistoryUpdateType updateType, PascalString userName) {
    super();
    this.modificationTime = modificationTime;
    this.updateType = updateType;
    this.userName = userName;
  }

  public long getModificationTime() {
    return modificationTime;
  }

  public HistoryUpdateType getUpdateType() {
    return updateType;
  }

  public PascalString getUserName() {
    return userName;
  }

  @Override
  protected void serializeExtensionObjectDefinitionChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("ModificationInfo");

    // Simple Field (modificationTime)
    writeSimpleField("modificationTime", modificationTime, writeSignedLong(writeBuffer, 64));

    // Simple Field (updateType)
    writeSimpleEnumField(
        "updateType",
        "HistoryUpdateType",
        updateType,
        writeEnum(
            HistoryUpdateType::getValue,
            HistoryUpdateType::name,
            writeUnsignedLong(writeBuffer, 32)));

    // Simple Field (userName)
    writeSimpleField("userName", userName, writeComplex(writeBuffer));

    writeBuffer.popContext("ModificationInfo");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    ModificationInfo _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (modificationTime)
    lengthInBits += 64;

    // Simple field (updateType)
    lengthInBits += 32;

    // Simple field (userName)
    lengthInBits += userName.getLengthInBits();

    return lengthInBits;
  }

  public static ExtensionObjectDefinitionBuilder staticParseExtensionObjectDefinitionBuilder(
      ReadBuffer readBuffer, Integer extensionId) throws ParseException {
    readBuffer.pullContext("ModificationInfo");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    long modificationTime = readSimpleField("modificationTime", readSignedLong(readBuffer, 64));

    HistoryUpdateType updateType =
        readEnumField(
            "updateType",
            "HistoryUpdateType",
            readEnum(HistoryUpdateType::enumForValue, readUnsignedLong(readBuffer, 32)));

    PascalString userName =
        readSimpleField(
            "userName", readComplex(() -> PascalString.staticParse(readBuffer), readBuffer));

    readBuffer.closeContext("ModificationInfo");
    // Create the instance
    return new ModificationInfoBuilderImpl(modificationTime, updateType, userName);
  }

  public static class ModificationInfoBuilderImpl
      implements ExtensionObjectDefinition.ExtensionObjectDefinitionBuilder {
    private final long modificationTime;
    private final HistoryUpdateType updateType;
    private final PascalString userName;

    public ModificationInfoBuilderImpl(
        long modificationTime, HistoryUpdateType updateType, PascalString userName) {
      this.modificationTime = modificationTime;
      this.updateType = updateType;
      this.userName = userName;
    }

    public ModificationInfo build() {
      ModificationInfo modificationInfo =
          new ModificationInfo(modificationTime, updateType, userName);
      return modificationInfo;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ModificationInfo)) {
      return false;
    }
    ModificationInfo that = (ModificationInfo) o;
    return (getModificationTime() == that.getModificationTime())
        && (getUpdateType() == that.getUpdateType())
        && (getUserName() == that.getUserName())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getModificationTime(), getUpdateType(), getUserName());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
