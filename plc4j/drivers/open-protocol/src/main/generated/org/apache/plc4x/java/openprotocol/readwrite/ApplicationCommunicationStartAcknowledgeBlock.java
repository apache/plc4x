/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.openprotocol.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public abstract class ApplicationCommunicationStartAcknowledgeBlock implements Message {

  // Abstract accessors for discriminator values.
  public abstract Integer getBlockType();

  public ApplicationCommunicationStartAcknowledgeBlock() {
    super();
  }

  protected abstract void serializeApplicationCommunicationStartAcknowledgeBlockChild(
      WriteBuffer writeBuffer) throws SerializationException;

  public void serialize(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("ApplicationCommunicationStartAcknowledgeBlock");

    // Discriminator Field (blockType) (Used as input to a switch field)
    writeDiscriminatorField(
        "blockType",
        getBlockType(),
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithEncoding("ASCII"));

    // Switch field (Serialize the sub-type)
    serializeApplicationCommunicationStartAcknowledgeBlockChild(writeBuffer);

    writeBuffer.popContext("ApplicationCommunicationStartAcknowledgeBlock");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = 0;
    ApplicationCommunicationStartAcknowledgeBlock _value = this;

    // Discriminator Field (blockType)
    lengthInBits += 16;

    // Length of sub-type elements will be added by sub-type...

    return lengthInBits;
  }

  public static ApplicationCommunicationStartAcknowledgeBlock staticParse(
      ReadBuffer readBuffer, Object... args) throws ParseException {
    PositionAware positionAware = readBuffer;
    return staticParse(readBuffer);
  }

  public static ApplicationCommunicationStartAcknowledgeBlock staticParse(ReadBuffer readBuffer)
      throws ParseException {
    readBuffer.pullContext("ApplicationCommunicationStartAcknowledgeBlock");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    int blockType =
        readDiscriminatorField(
            "blockType", readUnsignedInt(readBuffer, 16), WithOption.WithEncoding("ASCII"));

    // Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
    ApplicationCommunicationStartAcknowledgeBlockBuilder builder = null;
    if (EvaluationHelper.equals(blockType, (int) 1)) {
      builder = ApplicationCommunicationStartAcknowledgeBlockCellId.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 2)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockChannelId.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 3)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockControllerName.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 4)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockSupplierCode.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 5)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockOpenProtocolVersion.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 6)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockControllerSoftwareVersion.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 7)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockToolSoftwareVersion.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 8)) {
      builder = ApplicationCommunicationStartAcknowledgeBlockRbuType.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 9)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockControllerSerialNumber.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 10)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockSystemType.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 11)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockSystemSubtype.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 12)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockSequenceNumberSupport.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 13)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockLinkingHandlingSupport.staticParseBuilder(
              readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 14)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockStationId.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 15)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockStationName.staticParseBuilder(readBuffer);
    } else if (EvaluationHelper.equals(blockType, (int) 16)) {
      builder =
          ApplicationCommunicationStartAcknowledgeBlockClientId.staticParseBuilder(readBuffer);
    }
    if (builder == null) {
      throw new ParseException(
          "Unsupported case for discriminated type"
              + " parameters ["
              + "blockType="
              + blockType
              + "]");
    }

    readBuffer.closeContext("ApplicationCommunicationStartAcknowledgeBlock");
    // Create the instance
    ApplicationCommunicationStartAcknowledgeBlock _applicationCommunicationStartAcknowledgeBlock =
        builder.build();
    return _applicationCommunicationStartAcknowledgeBlock;
  }

  public static interface ApplicationCommunicationStartAcknowledgeBlockBuilder {
    ApplicationCommunicationStartAcknowledgeBlock build();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ApplicationCommunicationStartAcknowledgeBlock)) {
      return false;
    }
    ApplicationCommunicationStartAcknowledgeBlock that =
        (ApplicationCommunicationStartAcknowledgeBlock) o;
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash();
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
