/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.openprotocol.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class OpenProtocolMessageApplicationGenericDataRequest extends OpenProtocolMessage
    implements Message {

  // Accessors for discriminator values.
  public Mid getMid() {
    return Mid.ApplicationGenericDataRequest;
  }

  // Properties.
  protected final Mid requestMid;
  protected final OpenProtocolRevision revision;
  protected final byte[] extraData;

  // Arguments.
  protected final OpenProtocolRevision connectionRevision;

  public OpenProtocolMessageApplicationGenericDataRequest(
      OpenProtocolRevision selectedRevision,
      Short noAckFlag,
      Integer stationId,
      Integer spindleId,
      Integer sequenceNumber,
      Short numberOfMessageParts,
      Short messagePartNumber,
      Mid requestMid,
      OpenProtocolRevision revision,
      byte[] extraData,
      OpenProtocolRevision connectionRevision) {
    super(
        selectedRevision,
        noAckFlag,
        stationId,
        spindleId,
        sequenceNumber,
        numberOfMessageParts,
        messagePartNumber,
        connectionRevision);
    this.requestMid = requestMid;
    this.revision = revision;
    this.extraData = extraData;
    this.connectionRevision = connectionRevision;
  }

  public Mid getRequestMid() {
    return requestMid;
  }

  public OpenProtocolRevision getRevision() {
    return revision;
  }

  public byte[] getExtraData() {
    return extraData;
  }

  @Override
  protected void serializeOpenProtocolMessageChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("OpenProtocolMessageApplicationGenericDataRequest");

    // Simple Field (requestMid)
    writeSimpleEnumField(
        "requestMid",
        "Mid",
        requestMid,
        new DataWriterEnumDefault<>(Mid::getValue, Mid::name, writeUnsignedLong(writeBuffer, 32)),
        WithOption.WithEncoding("ASCII"));

    // Simple Field (revision)
    writeSimpleEnumField(
        "revision",
        "OpenProtocolRevision",
        revision,
        new DataWriterEnumDefault<>(
            OpenProtocolRevision::getValue,
            OpenProtocolRevision::name,
            writeUnsignedLong(writeBuffer, 24)),
        WithOption.WithEncoding("ASCII"));

    // Implicit Field (extraDataLength) (Used for parsing, but its value is not stored as it's
    // implicitly given by the objects content)
    int extraDataLength = (int) (COUNT(getExtraData()));
    writeImplicitField(
        "extraDataLength",
        extraDataLength,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithEncoding("ASCII"));

    // Array Field (extraData)
    writeByteArrayField("extraData", extraData, writeByteArray(writeBuffer, 8));

    writeBuffer.popContext("OpenProtocolMessageApplicationGenericDataRequest");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    OpenProtocolMessageApplicationGenericDataRequest _value = this;

    // Simple field (requestMid)
    lengthInBits += 32;

    // Simple field (revision)
    lengthInBits += 24;

    // Implicit Field (extraDataLength)
    lengthInBits += 16;

    // Array field
    if (extraData != null) {
      lengthInBits += 8 * extraData.length;
    }

    return lengthInBits;
  }

  public static OpenProtocolMessageApplicationGenericDataRequestBuilder staticParseBuilder(
      ReadBuffer readBuffer, OpenProtocolRevision connectionRevision) throws ParseException {
    readBuffer.pullContext("OpenProtocolMessageApplicationGenericDataRequest");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    Mid requestMid =
        readEnumField(
            "requestMid",
            "Mid",
            new DataReaderEnumDefault<>(Mid::enumForValue, readUnsignedLong(readBuffer, 32)),
            WithOption.WithEncoding("ASCII"));

    OpenProtocolRevision revision =
        readEnumField(
            "revision",
            "OpenProtocolRevision",
            new DataReaderEnumDefault<>(
                OpenProtocolRevision::enumForValue, readUnsignedLong(readBuffer, 24)),
            WithOption.WithEncoding("ASCII"));

    int extraDataLength =
        readImplicitField(
            "extraDataLength", readUnsignedInt(readBuffer, 16), WithOption.WithEncoding("ASCII"));

    byte[] extraData = readBuffer.readByteArray("extraData", Math.toIntExact(extraDataLength));

    readBuffer.closeContext("OpenProtocolMessageApplicationGenericDataRequest");
    // Create the instance
    return new OpenProtocolMessageApplicationGenericDataRequestBuilder(
        requestMid, revision, extraData, connectionRevision);
  }

  public static class OpenProtocolMessageApplicationGenericDataRequestBuilder
      implements OpenProtocolMessage.OpenProtocolMessageBuilder {
    private final Mid requestMid;
    private final OpenProtocolRevision revision;
    private final byte[] extraData;
    private final OpenProtocolRevision connectionRevision;

    public OpenProtocolMessageApplicationGenericDataRequestBuilder(
        Mid requestMid,
        OpenProtocolRevision revision,
        byte[] extraData,
        OpenProtocolRevision connectionRevision) {

      this.requestMid = requestMid;
      this.revision = revision;
      this.extraData = extraData;
      this.connectionRevision = connectionRevision;
    }

    public OpenProtocolMessageApplicationGenericDataRequest build(
        OpenProtocolRevision selectedRevision,
        Short noAckFlag,
        Integer stationId,
        Integer spindleId,
        Integer sequenceNumber,
        Short numberOfMessageParts,
        Short messagePartNumber,
        OpenProtocolRevision connectionRevision) {
      OpenProtocolMessageApplicationGenericDataRequest
          openProtocolMessageApplicationGenericDataRequest =
              new OpenProtocolMessageApplicationGenericDataRequest(
                  selectedRevision,
                  noAckFlag,
                  stationId,
                  spindleId,
                  sequenceNumber,
                  numberOfMessageParts,
                  messagePartNumber,
                  requestMid,
                  revision,
                  extraData,
                  connectionRevision);
      return openProtocolMessageApplicationGenericDataRequest;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof OpenProtocolMessageApplicationGenericDataRequest)) {
      return false;
    }
    OpenProtocolMessageApplicationGenericDataRequest that =
        (OpenProtocolMessageApplicationGenericDataRequest) o;
    return (getRequestMid() == that.getRequestMid())
        && (getRevision() == that.getRevision())
        && (getExtraData() == that.getExtraData())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getRequestMid(), getRevision(), getExtraData());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
