/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.openprotocol.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class OpenProtocolMessageParameterSetIdUploadReplyRev2
    extends OpenProtocolMessageParameterSetIdUploadReply implements Message {

  // Accessors for discriminator values.
  public Long getRevision() {
    return (long) 2;
  }

  // Properties.
  protected final List<Long> parameters;
  protected final List<Integer> numberOfCycles;

  public OpenProtocolMessageParameterSetIdUploadReplyRev2(
      Long midRevision,
      Short noAckFlag,
      Integer targetStationId,
      Integer targetSpindleId,
      Integer sequenceNumber,
      Short numberOfMessageParts,
      Short messagePartNumber,
      List<Long> parameters,
      List<Integer> numberOfCycles) {
    super(
        midRevision,
        noAckFlag,
        targetStationId,
        targetSpindleId,
        sequenceNumber,
        numberOfMessageParts,
        messagePartNumber);
    this.parameters = parameters;
    this.numberOfCycles = numberOfCycles;
  }

  public List<Long> getParameters() {
    return parameters;
  }

  public List<Integer> getNumberOfCycles() {
    return numberOfCycles;
  }

  @Override
  protected void serializeOpenProtocolMessageParameterSetIdUploadReplyChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("OpenProtocolMessageParameterSetIdUploadReplyRev2");

    // Implicit Field (numParameters) (Used for parsing, but its value is not stored as it's
    // implicitly given by the objects content)
    long numParameters = (long) (COUNT(getParameters()));
    writeImplicitField(
        "numParameters",
        numParameters,
        writeUnsignedLong(writeBuffer, 24),
        WithOption.WithEncoding("ASCII"));

    // Array Field (parameters)
    writeSimpleTypeArrayField(
        "parameters",
        parameters,
        writeUnsignedLong(writeBuffer, 24),
        WithOption.WithEncoding("ASCII"));

    // Array Field (numberOfCycles)
    writeSimpleTypeArrayField(
        "numberOfCycles",
        numberOfCycles,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithEncoding("ASCII"));

    writeBuffer.popContext("OpenProtocolMessageParameterSetIdUploadReplyRev2");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    OpenProtocolMessageParameterSetIdUploadReplyRev2 _value = this;

    // Implicit Field (numParameters)
    lengthInBits += 24;

    // Array field
    if (parameters != null) {
      lengthInBits += 24 * parameters.size();
    }

    // Array field
    if (numberOfCycles != null) {
      lengthInBits += 16 * numberOfCycles.size();
    }

    return lengthInBits;
  }

  public static OpenProtocolMessageParameterSetIdUploadReplyBuilder
      staticParseOpenProtocolMessageParameterSetIdUploadReplyBuilder(
          ReadBuffer readBuffer, Long revision) throws ParseException {
    readBuffer.pullContext("OpenProtocolMessageParameterSetIdUploadReplyRev2");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    long numParameters =
        readImplicitField(
            "numParameters", readUnsignedLong(readBuffer, 24), WithOption.WithEncoding("ASCII"));

    List<Long> parameters =
        readCountArrayField(
            "parameters",
            readUnsignedLong(readBuffer, 24),
            numParameters,
            WithOption.WithEncoding("ASCII"));

    List<Integer> numberOfCycles =
        readCountArrayField(
            "numberOfCycles",
            readUnsignedInt(readBuffer, 16),
            numParameters,
            WithOption.WithEncoding("ASCII"));

    readBuffer.closeContext("OpenProtocolMessageParameterSetIdUploadReplyRev2");
    // Create the instance
    return new OpenProtocolMessageParameterSetIdUploadReplyRev2BuilderImpl(
        parameters, numberOfCycles);
  }

  public static class OpenProtocolMessageParameterSetIdUploadReplyRev2BuilderImpl
      implements OpenProtocolMessageParameterSetIdUploadReply
          .OpenProtocolMessageParameterSetIdUploadReplyBuilder {
    private final List<Long> parameters;
    private final List<Integer> numberOfCycles;

    public OpenProtocolMessageParameterSetIdUploadReplyRev2BuilderImpl(
        List<Long> parameters, List<Integer> numberOfCycles) {
      this.parameters = parameters;
      this.numberOfCycles = numberOfCycles;
    }

    public OpenProtocolMessageParameterSetIdUploadReplyRev2 build(
        Long midRevision,
        Short noAckFlag,
        Integer targetStationId,
        Integer targetSpindleId,
        Integer sequenceNumber,
        Short numberOfMessageParts,
        Short messagePartNumber) {
      OpenProtocolMessageParameterSetIdUploadReplyRev2
          openProtocolMessageParameterSetIdUploadReplyRev2 =
              new OpenProtocolMessageParameterSetIdUploadReplyRev2(
                  midRevision,
                  noAckFlag,
                  targetStationId,
                  targetSpindleId,
                  sequenceNumber,
                  numberOfMessageParts,
                  messagePartNumber,
                  parameters,
                  numberOfCycles);
      return openProtocolMessageParameterSetIdUploadReplyRev2;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof OpenProtocolMessageParameterSetIdUploadReplyRev2)) {
      return false;
    }
    OpenProtocolMessageParameterSetIdUploadReplyRev2 that =
        (OpenProtocolMessageParameterSetIdUploadReplyRev2) o;
    return (getParameters() == that.getParameters())
        && (getNumberOfCycles() == that.getNumberOfCycles())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getParameters(), getNumberOfCycles());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
