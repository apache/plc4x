/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.openprotocol.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class OpenProtocolMessageApplicationCommunicationStartAcknowledge extends OpenProtocolMessage
    implements Message {

  // Accessors for discriminator values.
  public Mid getMid() {
    return Mid.ApplicationCommunicationStartAcknowledge;
  }

  // Properties.
  protected final List<ApplicationCommunicationStartAcknowledgeBlock> blocks;

  // Arguments.
  protected final OpenProtocolRevision connectionRevision;

  public OpenProtocolMessageApplicationCommunicationStartAcknowledge(
      OpenProtocolRevision selectedRevision,
      Short noAckFlag,
      Integer stationId,
      Integer spindleId,
      Integer sequenceNumber,
      Short numberOfMessageParts,
      Short messagePartNumber,
      List<ApplicationCommunicationStartAcknowledgeBlock> blocks,
      OpenProtocolRevision connectionRevision) {
    super(
        selectedRevision,
        noAckFlag,
        stationId,
        spindleId,
        sequenceNumber,
        numberOfMessageParts,
        messagePartNumber,
        connectionRevision);
    this.blocks = blocks;
    this.connectionRevision = connectionRevision;
  }

  public List<ApplicationCommunicationStartAcknowledgeBlock> getBlocks() {
    return blocks;
  }

  @Override
  protected void serializeOpenProtocolMessageChild(WriteBuffer writeBuffer)
      throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("OpenProtocolMessageApplicationCommunicationStartAcknowledge");

    // Array Field (blocks)
    writeComplexTypeArrayField("blocks", blocks, writeBuffer);

    writeBuffer.popContext("OpenProtocolMessageApplicationCommunicationStartAcknowledge");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    OpenProtocolMessageApplicationCommunicationStartAcknowledge _value = this;

    // Array field
    if (blocks != null) {
      int i = 0;
      for (ApplicationCommunicationStartAcknowledgeBlock element : blocks) {
        boolean last = ++i >= blocks.size();
        lengthInBits += element.getLengthInBits();
      }
    }

    return lengthInBits;
  }

  public static OpenProtocolMessageApplicationCommunicationStartAcknowledgeBuilder
      staticParseBuilder(ReadBuffer readBuffer, OpenProtocolRevision connectionRevision)
          throws ParseException {
    readBuffer.pullContext("OpenProtocolMessageApplicationCommunicationStartAcknowledge");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    List<ApplicationCommunicationStartAcknowledgeBlock> blocks =
        readCountArrayField(
            "blocks",
            new DataReaderComplexDefault<>(
                () -> ApplicationCommunicationStartAcknowledgeBlock.staticParse(readBuffer),
                readBuffer),
            connectionRevision.getNumCommunicationStartAcknowledgeBlocks());

    readBuffer.closeContext("OpenProtocolMessageApplicationCommunicationStartAcknowledge");
    // Create the instance
    return new OpenProtocolMessageApplicationCommunicationStartAcknowledgeBuilder(
        blocks, connectionRevision);
  }

  public static class OpenProtocolMessageApplicationCommunicationStartAcknowledgeBuilder
      implements OpenProtocolMessage.OpenProtocolMessageBuilder {
    private final List<ApplicationCommunicationStartAcknowledgeBlock> blocks;
    private final OpenProtocolRevision connectionRevision;

    public OpenProtocolMessageApplicationCommunicationStartAcknowledgeBuilder(
        List<ApplicationCommunicationStartAcknowledgeBlock> blocks,
        OpenProtocolRevision connectionRevision) {

      this.blocks = blocks;
      this.connectionRevision = connectionRevision;
    }

    public OpenProtocolMessageApplicationCommunicationStartAcknowledge build(
        OpenProtocolRevision selectedRevision,
        Short noAckFlag,
        Integer stationId,
        Integer spindleId,
        Integer sequenceNumber,
        Short numberOfMessageParts,
        Short messagePartNumber,
        OpenProtocolRevision connectionRevision) {
      OpenProtocolMessageApplicationCommunicationStartAcknowledge
          openProtocolMessageApplicationCommunicationStartAcknowledge =
              new OpenProtocolMessageApplicationCommunicationStartAcknowledge(
                  selectedRevision,
                  noAckFlag,
                  stationId,
                  spindleId,
                  sequenceNumber,
                  numberOfMessageParts,
                  messagePartNumber,
                  blocks,
                  connectionRevision);
      return openProtocolMessageApplicationCommunicationStartAcknowledge;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof OpenProtocolMessageApplicationCommunicationStartAcknowledge)) {
      return false;
    }
    OpenProtocolMessageApplicationCommunicationStartAcknowledge that =
        (OpenProtocolMessageApplicationCommunicationStartAcknowledge) o;
    return (getBlocks() == that.getBlocks()) && super.equals(that) && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getBlocks());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
