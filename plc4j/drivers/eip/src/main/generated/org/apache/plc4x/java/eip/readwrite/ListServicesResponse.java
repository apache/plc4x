/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class ListServicesResponse extends EipPacket implements Message {

  // Accessors for discriminator values.
  public Integer getCommand() {
    return (int) 0x0004;
  }

  public Boolean getResponse() {
    return (boolean) true;
  }

  public Integer getPacketLength() {
    return 0;
  }

  // Properties.
  protected final List<TypeId> typeIds;

  public ListServicesResponse(
      long sessionHandle, long status, byte[] senderContext, long options, List<TypeId> typeIds) {
    super(sessionHandle, status, senderContext, options);
    this.typeIds = typeIds;
  }

  public List<TypeId> getTypeIds() {
    return typeIds;
  }

  @Override
  protected void serializeEipPacketChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    writeBuffer.pushContext("ListServicesResponse");

    // Implicit Field (typeIdCount) (Used for parsing, but its value is not stored as it's
    // implicitly given by the objects content)
    int typeIdCount = (int) (COUNT(getTypeIds()));
    writeImplicitField("typeIdCount", typeIdCount, writeUnsignedInt(writeBuffer, 16));

    // Array Field (typeIds)
    writeComplexTypeArrayField("typeIds", typeIds, writeBuffer);

    writeBuffer.popContext("ListServicesResponse");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    ListServicesResponse _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Implicit Field (typeIdCount)
    lengthInBits += 16;

    // Array field
    if (typeIds != null) {
      int i = 0;
      for (TypeId element : typeIds) {
        ThreadLocalHelper.lastItemThreadLocal.set(++i >= typeIds.size());
        lengthInBits += element.getLengthInBits();
      }
    }

    return lengthInBits;
  }

  public static EipPacketBuilder staticParseEipPacketBuilder(
      ReadBuffer readBuffer, Boolean response) throws ParseException {
    readBuffer.pullContext("ListServicesResponse");
    PositionAware positionAware = readBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    int typeIdCount = readImplicitField("typeIdCount", readUnsignedInt(readBuffer, 16));

    List<TypeId> typeIds =
        readCountArrayField(
            "typeIds", readComplex(() -> TypeId.staticParse(readBuffer), readBuffer), typeIdCount);

    readBuffer.closeContext("ListServicesResponse");
    // Create the instance
    return new ListServicesResponseBuilderImpl(typeIds);
  }

  public static class ListServicesResponseBuilderImpl implements EipPacket.EipPacketBuilder {
    private final List<TypeId> typeIds;

    public ListServicesResponseBuilderImpl(List<TypeId> typeIds) {
      this.typeIds = typeIds;
    }

    public ListServicesResponse build(
        long sessionHandle, long status, byte[] senderContext, long options) {
      ListServicesResponse listServicesResponse =
          new ListServicesResponse(sessionHandle, status, senderContext, options, typeIds);
      return listServicesResponse;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ListServicesResponse)) {
      return false;
    }
    ListServicesResponse that = (ListServicesResponse) o;
    return (getTypeIds() == that.getTypeIds()) && super.equals(that) && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getTypeIds());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
